- en: Appendix. Function Reference
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录。函数参考
- en: This appendix describes the functions available in the built-in PHP extensions.
    These are the extensions that PHP is built with if you provide no `--with` or
    `--enable` options to `configure`, and they cannot be removed via configuration
    options.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本附录描述了内置PHP扩展中可用的函数。这些是PHP构建时默认包含的扩展，如果未提供`--with`或`--enable`选项给`configure`，则不能通过配置选项删除它们。
- en: For each function, we’ve provided the function signature, showing the data types
    of the various arguments and which are mandatory or optional, as well as a brief
    description of the side effects, errors, and returned data structures.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个函数，我们提供了函数签名，显示各种参数的数据类型以及哪些是必需的或可选的，以及副作用、错误和返回的数据结构的简要描述。
- en: PHP Functions by Category
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PHP函数按类别分类
- en: This section gives a list of functions provided by PHP’s built-in extensions,
    grouped by extension category.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 此部分列出了由PHP内置扩展提供的函数列表，按扩展类别分组。
- en: Arrays
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数组
- en: '`array_change_key_case`'
  id: totrans-6
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`array_change_key_case`'
- en: ''
  id: totrans-7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_chunk`'
  id: totrans-8
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`array_chunk`'
- en: ''
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_combine`'
  id: totrans-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`array_combine`'
- en: ''
  id: totrans-11
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_count_values`'
  id: totrans-12
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`array_count_values`'
- en: ''
  id: totrans-13
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_diff`'
  id: totrans-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`array_diff`'
- en: ''
  id: totrans-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_diff_assoc`'
  id: totrans-16
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`array_diff_assoc`'
- en: ''
  id: totrans-17
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_diff_key`'
  id: totrans-18
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`array_diff_key`'
- en: ''
  id: totrans-19
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_diff_uassoc`'
  id: totrans-20
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`array_diff_uassoc`'
- en: ''
  id: totrans-21
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_diff_ukey`'
  id: totrans-22
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`array_diff_ukey`'
- en: ''
  id: totrans-23
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_fill`'
  id: totrans-24
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`array_fill`'
- en: ''
  id: totrans-25
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_fill_keys`'
  id: totrans-26
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`array_fill_keys`'
- en: ''
  id: totrans-27
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_filter`'
  id: totrans-28
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`array_filter`'
- en: ''
  id: totrans-29
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_flip`'
  id: totrans-30
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`array_flip`'
- en: ''
  id: totrans-31
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_intersect`'
  id: totrans-32
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`array_intersect`'
- en: ''
  id: totrans-33
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_intersect_assoc`'
  id: totrans-34
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`array_intersect_assoc`'
- en: ''
  id: totrans-35
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_intersect_key`'
  id: totrans-36
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`array_intersect_key`'
- en: ''
  id: totrans-37
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_intersect_uassoc`'
  id: totrans-38
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`array_intersect_uassoc`'
- en: ''
  id: totrans-39
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_intersect_ukey`'
  id: totrans-40
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`array_intersect_ukey`'
- en: ''
  id: totrans-41
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_key_exists`'
  id: totrans-42
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`array_key_exists`'
- en: ''
  id: totrans-43
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_keys`'
  id: totrans-44
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`array_keys`'
- en: ''
  id: totrans-45
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_map`'
  id: totrans-46
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`array_map`'
- en: ''
  id: totrans-47
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_merge`'
  id: totrans-48
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`array_merge`'
- en: ''
  id: totrans-49
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_merge_recursive`'
  id: totrans-50
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`array_merge_recursive`'
- en: ''
  id: totrans-51
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_multisort`'
  id: totrans-52
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`array_multisort`'
- en: ''
  id: totrans-53
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_pad`'
  id: totrans-54
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`array_pad`'
- en: ''
  id: totrans-55
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_pop`'
  id: totrans-56
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`array_pop`'
- en: ''
  id: totrans-57
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_product`'
  id: totrans-58
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`array_product`'
- en: ''
  id: totrans-59
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_push`'
  id: totrans-60
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`array_push`'
- en: ''
  id: totrans-61
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_rand`'
  id: totrans-62
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`array_rand`'
- en: ''
  id: totrans-63
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_reduce`'
  id: totrans-64
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`array_reduce`'
- en: ''
  id: totrans-65
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_replace`'
  id: totrans-66
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`array_replace`'
- en: ''
  id: totrans-67
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_replace_recursive`'
  id: totrans-68
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`array_replace_recursive`'
- en: ''
  id: totrans-69
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_reverse`'
  id: totrans-70
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`array_reverse`'
- en: ''
  id: totrans-71
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_search`'
  id: totrans-72
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`array_search`'
- en: ''
  id: totrans-73
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_shift`'
  id: totrans-74
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`array_shift`'
- en: ''
  id: totrans-75
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_slice`'
  id: totrans-76
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`array_slice`'
- en: ''
  id: totrans-77
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_splice`'
  id: totrans-78
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`array_splice`'
- en: ''
  id: totrans-79
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_sum`'
  id: totrans-80
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`array_sum`'
- en: ''
  id: totrans-81
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_udiff`'
  id: totrans-82
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`array_udiff`'
- en: ''
  id: totrans-83
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_udiff_assoc`'
  id: totrans-84
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`array_udiff_assoc`'
- en: ''
  id: totrans-85
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_udiff_uassoc`'
  id: totrans-86
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`array_udiff_uassoc`'
- en: ''
  id: totrans-87
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_uintersect`'
  id: totrans-88
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`array_uintersect`'
- en: ''
  id: totrans-89
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_uintersect_assoc`'
  id: totrans-90
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`array_uintersect_assoc`'
- en: ''
  id: totrans-91
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_uintersect_uassoc`'
  id: totrans-92
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`array_uintersect_uassoc`'
- en: ''
  id: totrans-93
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_unique`'
  id: totrans-94
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`array_unique`'
- en: ''
  id: totrans-95
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_unshift`'
  id: totrans-96
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`array_unshift`'
- en: ''
  id: totrans-97
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_values`'
  id: totrans-98
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`array_values`'
- en: ''
  id: totrans-99
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_walk`'
  id: totrans-100
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`array_walk`'
- en: ''
  id: totrans-101
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_walk_recursive`'
  id: totrans-102
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`array_walk_recursive`'
- en: ''
  id: totrans-103
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`arsort`'
  id: totrans-104
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`arsort`'
- en: ''
  id: totrans-105
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`asort`'
  id: totrans-106
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`asort`'
- en: ''
  id: totrans-107
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`compact`'
  id: totrans-108
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`compact`'
- en: ''
  id: totrans-109
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`count`'
  id: totrans-110
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`count`'
- en: ''
  id: totrans-111
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`current`'
  id: totrans-112
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`current`'
- en: ''
  id: totrans-113
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`each`'
  id: totrans-114
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`each`'
- en: ''
  id: totrans-115
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`end`'
  id: totrans-116
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`end`'
- en: ''
  id: totrans-117
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`extract`'
  id: totrans-118
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`extract`'
- en: ''
  id: totrans-119
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`in_array`'
  id: totrans-120
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`in_array`'
- en: ''
  id: totrans-121
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`is_countable`'
  id: totrans-122
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`is_countable`'
- en: ''
  id: totrans-123
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`key`'
  id: totrans-124
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`key`'
- en: ''
  id: totrans-125
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`krsort`'
  id: totrans-126
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`krsort`'
- en: ''
  id: totrans-127
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`ksort`'
  id: totrans-128
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`ksort`'
- en: ''
  id: totrans-129
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`list`'
  id: totrans-130
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`list`'
- en: ''
  id: totrans-131
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`natcasesort`'
  id: totrans-132
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`natcasesort`'
- en: ''
  id: totrans-133
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`natsort`'
  id: totrans-134
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`natsort`'
- en: ''
  id: totrans-135
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`next`'
  id: totrans-136
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`next`'
- en: ''
  id: totrans-137
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`prev`'
  id: totrans-138
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`prev`'
- en: ''
  id: totrans-139
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`range`'
  id: totrans-140
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`range`'
- en: ''
  id: totrans-141
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`reset`'
  id: totrans-142
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`reset`'
- en: ''
  id: totrans-143
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`rsort`'
  id: totrans-144
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`rsort`'
- en: ''
  id: totrans-145
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`shuffle`'
  id: totrans-146
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`shuffle`'
- en: ''
  id: totrans-147
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`sort`'
  id: totrans-148
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`sort`'
- en: ''
  id: totrans-149
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`uasort`'
  id: totrans-150
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`uasort`'
- en: ''
  id: totrans-151
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`uksort`'
  id: totrans-152
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`uksort`'
- en: ''
  id: totrans-153
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`usort`'
  id: totrans-154
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`usort`'
- en: Classes and Objects
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类和对象
- en: '`class_alias`'
  id: totrans-156
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`class_alias`'
- en: ''
  id: totrans-157
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`class_exists`'
  id: totrans-158
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`class_exists`'
- en: ''
  id: totrans-159
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`get_called_class`'
  id: totrans-160
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`get_called_class`'
- en: ''
  id: totrans-161
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`get_class`'
  id: totrans-162
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`get_class`'
- en: ''
  id: totrans-163
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`get_class_methods`'
  id: totrans-164
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`get_class_methods`'
- en: ''
  id: totrans-165
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`get_class_vars`'
  id: totrans-166
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`get_class_vars`'
- en: ''
  id: totrans-167
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`get_declared_classes`'
  id: totrans-168
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`get_declared_classes`'
- en: ''
  id: totrans-169
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`get_declared_interfaces`'
  id: totrans-170
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`get_declared_interfaces`'
- en: ''
  id: totrans-171
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`get_declared_traits`'
  id: totrans-172
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`get_declared_traits`'
- en: ''
  id: totrans-173
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`get_object_vars`'
  id: totrans-174
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`get_object_vars`'
- en: ''
  id: totrans-175
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`get_parent_class`'
  id: totrans-176
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`get_parent_class`'
- en: ''
  id: totrans-177
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`interface_exists`'
  id: totrans-178
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`interface_exists`'
- en: ''
  id: totrans-179
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`is_a`'
  id: totrans-180
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`is_a`'
- en: ''
  id: totrans-181
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`is_subclass_of`'
  id: totrans-182
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`is_subclass_of`'
- en: ''
  id: totrans-183
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`method_exists`'
  id: totrans-184
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`method_exists`'
- en: ''
  id: totrans-185
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`property_exists`'
  id: totrans-186
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`property_exists`'
- en: ''
  id: totrans-187
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`trait_exists`'
  id: totrans-188
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`trait_exists`'
- en: Data Filtering
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据过滤
- en: '`filter_has_var`'
  id: totrans-190
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`filter_has_var`'
- en: ''
  id: totrans-191
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`filter_id`'
  id: totrans-192
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`filter_id`'
- en: ''
  id: totrans-193
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`filter_input_array`'
  id: totrans-194
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`filter_input_array`'
- en: ''
  id: totrans-195
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`filter_var`'
  id: totrans-196
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`filter_var`'
- en: ''
  id: totrans-197
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`filter_input`'
  id: totrans-198
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`filter_input`'
- en: ''
  id: totrans-199
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`filter_list`'
  id: totrans-200
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`filter_list`'
- en: ''
  id: totrans-201
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`filter_var_array`'
  id: totrans-202
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`filter_var_array`'
- en: Date and Time
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 日期和时间
- en: '`checkdate`'
  id: totrans-204
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`checkdate`'
- en: ''
  id: totrans-205
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`date`'
  id: totrans-206
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`date`'
- en: ''
  id: totrans-207
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`date_default_timezone_get`'
  id: totrans-208
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`date_default_timezone_get`'
- en: ''
  id: totrans-209
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`date_default_timezone_set`'
  id: totrans-210
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`date_default_timezone_set`'
- en: ''
  id: totrans-211
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`date_parse`'
  id: totrans-212
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`date_parse`'
- en: ''
  id: totrans-213
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`date_parse_from_format`'
  id: totrans-214
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`date_parse_from_format`'
- en: ''
  id: totrans-215
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`date_sun_info`'
  id: totrans-216
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`date_sun_info`'
- en: ''
  id: totrans-217
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`date_sunrise`'
  id: totrans-218
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`date_sunrise`'
- en: ''
  id: totrans-219
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`date_sunset`'
  id: totrans-220
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`date_sunset`'
- en: ''
  id: totrans-221
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`getdate`'
  id: totrans-222
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`getdate`'
- en: ''
  id: totrans-223
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`gettimeofday`'
  id: totrans-224
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`gettimeofday`'
- en: ''
  id: totrans-225
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`gmdate`'
  id: totrans-226
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`gmdate`'
- en: ''
  id: totrans-227
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`gmmktime`'
  id: totrans-228
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`gmmktime`'
- en: ''
  id: totrans-229
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`gmstrftime`'
  id: totrans-230
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`gmstrftime`'
- en: ''
  id: totrans-231
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`hrtime`'
  id: totrans-232
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`hrtime`'
- en: ''
  id: totrans-233
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`idate`'
  id: totrans-234
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`idate`'
- en: ''
  id: totrans-235
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`localtime`'
  id: totrans-236
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`localtime`'
- en: ''
  id: totrans-237
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`microtime`'
  id: totrans-238
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`microtime`'
- en: ''
  id: totrans-239
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`mktime`'
  id: totrans-240
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`mktime`'
- en: ''
  id: totrans-241
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`strftime`'
  id: totrans-242
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`strftime`'
- en: ''
  id: totrans-243
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`strptime`'
  id: totrans-244
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`strptime`'
- en: ''
  id: totrans-245
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`strtotime`'
  id: totrans-246
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`strtotime`'
- en: ''
  id: totrans-247
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`time`'
  id: totrans-248
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`time`'
- en: ''
  id: totrans-249
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`timezone_name_from_abbr`'
  id: totrans-250
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`timezone_name_from_abbr`'
- en: ''
  id: totrans-251
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`timezone_version_get`'
  id: totrans-252
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`timezone_version_get`'
- en: Directories
  id: totrans-253
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 目录
- en: '`chdir`'
  id: totrans-254
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`chdir`'
- en: ''
  id: totrans-255
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`chroot`'
  id: totrans-256
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`chroot`'
- en: ''
  id: totrans-257
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`closedir`'
  id: totrans-258
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`closedir`'
- en: ''
  id: totrans-259
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`dir`'
  id: totrans-260
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`dir`'
- en: ''
  id: totrans-261
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`getcwd`'
  id: totrans-262
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`getcwd`'
- en: ''
  id: totrans-263
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`opendir`'
  id: totrans-264
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`opendir`'
- en: ''
  id: totrans-265
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`readdir`'
  id: totrans-266
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`readdir`'
- en: ''
  id: totrans-267
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`rewinddir`'
  id: totrans-268
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`rewinddir`'
- en: ''
  id: totrans-269
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`scandir`'
  id: totrans-270
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`scandir`'
- en: Errors and Logging
  id: totrans-271
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 错误和日志记录
- en: '`debug_backtrace`'
  id: totrans-272
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`debug_backtrace`'
- en: ''
  id: totrans-273
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`debug_print_backtrace`'
  id: totrans-274
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`debug_print_backtrace`'
- en: ''
  id: totrans-275
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`error_clear_last`'
  id: totrans-276
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`error_clear_last`'
- en: ''
  id: totrans-277
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`error_get_last`'
  id: totrans-278
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`error_get_last`'
- en: ''
  id: totrans-279
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`error_log`'
  id: totrans-280
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`error_log`'
- en: ''
  id: totrans-281
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`error_reporting`'
  id: totrans-282
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`error_reporting`'
- en: ''
  id: totrans-283
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`restore_error_handler`'
  id: totrans-284
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`restore_error_handler`'
- en: ''
  id: totrans-285
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`restore_exception_handler`'
  id: totrans-286
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`restore_exception_handler`'
- en: ''
  id: totrans-287
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`set_error_handler`'
  id: totrans-288
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`set_error_handler`'
- en: ''
  id: totrans-289
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`set_exception_handler`'
  id: totrans-290
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`set_exception_handler`'
- en: ''
  id: totrans-291
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`trigger_error`'
  id: totrans-292
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`trigger_error`'
- en: Filesystem
  id: totrans-293
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文件系统
- en: '`basename`'
  id: totrans-294
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`basename`'
- en: ''
  id: totrans-295
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`chgrp`'
  id: totrans-296
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`chgrp`'
- en: ''
  id: totrans-297
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`chmod`'
  id: totrans-298
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`chmod`'
- en: ''
  id: totrans-299
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`chown`'
  id: totrans-300
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`chown`'
- en: ''
  id: totrans-301
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`clearstatcache`'
  id: totrans-302
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`clearstatcache`'
- en: ''
  id: totrans-303
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`copy`'
  id: totrans-304
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`copy`'
- en: ''
  id: totrans-305
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`dirname`'
  id: totrans-306
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`dirname`'
- en: ''
  id: totrans-307
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`disk_free_space`'
  id: totrans-308
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`disk_free_space`'
- en: ''
  id: totrans-309
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`disk_total_space`'
  id: totrans-310
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`disk_total_space`'
- en: ''
  id: totrans-311
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`fclose`'
  id: totrans-312
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`fclose`'
- en: ''
  id: totrans-313
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`feof`'
  id: totrans-314
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`feof`'
- en: ''
  id: totrans-315
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`fflush`'
  id: totrans-316
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`fflush`'
- en: ''
  id: totrans-317
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`fgetc`'
  id: totrans-318
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`fgetc`'
- en: ''
  id: totrans-319
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`fgetcsv`'
  id: totrans-320
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`fgetcsv`'
- en: ''
  id: totrans-321
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`fgets`'
  id: totrans-322
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`fgets`'
- en: ''
  id: totrans-323
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`fgetss`'
  id: totrans-324
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`fgetss`'
- en: ''
  id: totrans-325
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`file`'
  id: totrans-326
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`file`'
- en: ''
  id: totrans-327
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`file_exists`'
  id: totrans-328
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`file_exists`'
- en: ''
  id: totrans-329
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`file_get_contents`'
  id: totrans-330
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`file_get_contents`'
- en: ''
  id: totrans-331
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`file_put_contents`'
  id: totrans-332
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`file_put_contents`'
- en: ''
  id: totrans-333
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`fileatime`'
  id: totrans-334
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`fileatime`'
- en: ''
  id: totrans-335
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`filectime`'
  id: totrans-336
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`filectime`'
- en: ''
  id: totrans-337
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`filegroup`'
  id: totrans-338
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`filegroup`'
- en: ''
  id: totrans-339
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`fileinode`'
  id: totrans-340
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`fileinode`'
- en: ''
  id: totrans-341
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`filemtime`'
  id: totrans-342
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`filemtime`'
- en: ''
  id: totrans-343
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`fileowner`'
  id: totrans-344
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`fileowner`'
- en: ''
  id: totrans-345
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`fileperms`'
  id: totrans-346
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`fileperms`'
- en: ''
  id: totrans-347
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`filesize`'
  id: totrans-348
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`filesize`'
- en: ''
  id: totrans-349
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`filetype`'
  id: totrans-350
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`filetype`'
- en: ''
  id: totrans-351
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`flock`'
  id: totrans-352
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`flock`'
- en: ''
  id: totrans-353
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`fnmatch`'
  id: totrans-354
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`fnmatch`'
- en: ''
  id: totrans-355
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`fopen`'
  id: totrans-356
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`fopen`'
- en: ''
  id: totrans-357
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`fpassthru`'
  id: totrans-358
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`fpassthru`'
- en: ''
  id: totrans-359
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`fputcsv`'
  id: totrans-360
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`fputcsv`'
- en: ''
  id: totrans-361
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`fread`'
  id: totrans-362
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`fread`'
- en: ''
  id: totrans-363
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`fscanf`'
  id: totrans-364
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`fscanf`'
- en: ''
  id: totrans-365
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`fseek`'
  id: totrans-366
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`fseek`'
- en: ''
  id: totrans-367
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`fstat`'
  id: totrans-368
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`fstat`'
- en: ''
  id: totrans-369
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`ftell`'
  id: totrans-370
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`ftell`'
- en: ''
  id: totrans-371
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`ftruncate`'
  id: totrans-372
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`ftruncate`'
- en: ''
  id: totrans-373
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`fwrite`'
  id: totrans-374
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`fwrite`'
- en: ''
  id: totrans-375
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`glob`'
  id: totrans-376
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`glob`'
- en: ''
  id: totrans-377
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`is_dir`'
  id: totrans-378
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`is_dir`'
- en: ''
  id: totrans-379
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`is_executable`'
  id: totrans-380
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`is_executable`'
- en: ''
  id: totrans-381
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`is_file`'
  id: totrans-382
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`is_file`'
- en: ''
  id: totrans-383
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`is_link`'
  id: totrans-384
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`is_link`'
- en: ''
  id: totrans-385
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`is_readable`'
  id: totrans-386
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`is_readable`'
- en: ''
  id: totrans-387
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`is_uploaded_file`'
  id: totrans-388
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`is_uploaded_file`'
- en: ''
  id: totrans-389
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`is_writable`'
  id: totrans-390
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`is_writable`'
- en: ''
  id: totrans-391
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`lchgrp`'
  id: totrans-392
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`lchgrp`'
- en: ''
  id: totrans-393
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`lchown`'
  id: totrans-394
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`lchown`'
- en: ''
  id: totrans-395
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`link`'
  id: totrans-396
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`link`'
- en: ''
  id: totrans-397
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`linkinfo`'
  id: totrans-398
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`linkinfo`'
- en: ''
  id: totrans-399
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`lstat`'
  id: totrans-400
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`lstat`'
- en: ''
  id: totrans-401
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`mkdir`'
  id: totrans-402
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`mkdir`'
- en: ''
  id: totrans-403
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`move_uploaded_file`'
  id: totrans-404
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`move_uploaded_file`'
- en: ''
  id: totrans-405
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`parse_ini_file`'
  id: totrans-406
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`parse_ini_file`'
- en: ''
  id: totrans-407
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`parse_ini_string`'
  id: totrans-408
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`parse_ini_string`'
- en: ''
  id: totrans-409
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`pathinfo`'
  id: totrans-410
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`pathinfo`'
- en: ''
  id: totrans-411
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`pclose`'
  id: totrans-412
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`pclose`'
- en: ''
  id: totrans-413
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`popen`'
  id: totrans-414
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`popen`'
- en: ''
  id: totrans-415
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`readfile`'
  id: totrans-416
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`readfile`'
- en: ''
  id: totrans-417
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`readlink`'
  id: totrans-418
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`readlink`'
- en: ''
  id: totrans-419
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`realpath_cache_get`'
  id: totrans-420
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`realpath_cache_get`'
- en: ''
  id: totrans-421
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`realpath_cache_size`'
  id: totrans-422
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`realpath_cache_size`'
- en: ''
  id: totrans-423
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`realpath`'
  id: totrans-424
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`realpath`'
- en: ''
  id: totrans-425
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`rename`'
  id: totrans-426
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`rename`'
- en: ''
  id: totrans-427
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`rewind`'
  id: totrans-428
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`rewind`'
- en: ''
  id: totrans-429
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`rmdir`'
  id: totrans-430
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`rmdir`'
- en: ''
  id: totrans-431
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stat`'
  id: totrans-432
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`stat`'
- en: ''
  id: totrans-433
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`symlink`'
  id: totrans-434
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`symlink`'
- en: ''
  id: totrans-435
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`tempnam`'
  id: totrans-436
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`tempnam`'
- en: ''
  id: totrans-437
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`tmpfile`'
  id: totrans-438
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`tmpfile`'
- en: ''
  id: totrans-439
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`touch`'
  id: totrans-440
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`touch`'
- en: ''
  id: totrans-441
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`umask`'
  id: totrans-442
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`umask`'
- en: ''
  id: totrans-443
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`unlink`'
  id: totrans-444
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`unlink`'
- en: Functions
  id: totrans-445
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 函数
- en: '`call_user_func`'
  id: totrans-446
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`call_user_func`'
- en: ''
  id: totrans-447
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`call_user_func_array`'
  id: totrans-448
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`call_user_func_array`'
- en: ''
  id: totrans-449
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`create_function`'
  id: totrans-450
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`create_function`'
- en: ''
  id: totrans-451
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`forward_static_call`'
  id: totrans-452
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`forward_static_call`'
- en: ''
  id: totrans-453
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`forward_static_call_array`'
  id: totrans-454
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`forward_static_call_array`'
- en: ''
  id: totrans-455
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`func_get_arg`'
  id: totrans-456
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`func_get_arg`'
- en: ''
  id: totrans-457
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`func_get_args`'
  id: totrans-458
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`func_get_args`'
- en: ''
  id: totrans-459
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`func_num_args`'
  id: totrans-460
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`func_num_args`'
- en: ''
  id: totrans-461
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`function_exists`'
  id: totrans-462
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`function_exists`'
- en: ''
  id: totrans-463
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`get_defined_functions`'
  id: totrans-464
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`get_defined_functions`'
- en: ''
  id: totrans-465
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`register_shutdown_function`'
  id: totrans-466
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`register_shutdown_function`'
- en: ''
  id: totrans-467
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`register_tick_function`'
  id: totrans-468
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`register_tick_function`'
- en: ''
  id: totrans-469
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`unregister_tick_function`'
  id: totrans-470
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`unregister_tick_function`'
- en: Mail
  id: totrans-471
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 邮件
- en: '`mail`'
  id: totrans-472
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`mail`'
- en: Math
  id: totrans-473
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数学
- en: '`abs`'
  id: totrans-474
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`abs`'
- en: ''
  id: totrans-475
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`acos`'
  id: totrans-476
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`acos`'
- en: ''
  id: totrans-477
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`acosh`'
  id: totrans-478
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`acosh`'
- en: ''
  id: totrans-479
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`asin`'
  id: totrans-480
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`asin`'
- en: ''
  id: totrans-481
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`asinh`'
  id: totrans-482
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`asinh`'
- en: ''
  id: totrans-483
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`atan2`'
  id: totrans-484
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`atan2`'
- en: ''
  id: totrans-485
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`atan`'
  id: totrans-486
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`atan`'
- en: ''
  id: totrans-487
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`atanh`'
  id: totrans-488
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`atanh`'
- en: ''
  id: totrans-489
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`base_convert`'
  id: totrans-490
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`base_convert`'
- en: ''
  id: totrans-491
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`bindec`'
  id: totrans-492
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`bindec`'
- en: ''
  id: totrans-493
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`ceil`'
  id: totrans-494
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`ceil`'
- en: ''
  id: totrans-495
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`cos`'
  id: totrans-496
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`cos`'
- en: ''
  id: totrans-497
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`cosh`'
  id: totrans-498
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`cosh`'
- en: ''
  id: totrans-499
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`decbin`'
  id: totrans-500
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`decbin`'
- en: ''
  id: totrans-501
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`dechex`'
  id: totrans-502
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`dechex`'
- en: ''
  id: totrans-503
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`decoct`'
  id: totrans-504
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`decoct`'
- en: ''
  id: totrans-505
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`deg2rad`'
  id: totrans-506
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`deg2rad`'
- en: ''
  id: totrans-507
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`exp`'
  id: totrans-508
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`exp`'
- en: ''
  id: totrans-509
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`expm1`'
  id: totrans-510
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`expm1`'
- en: ''
  id: totrans-511
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`floor`'
  id: totrans-512
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`floor`'
- en: ''
  id: totrans-513
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`fmod`'
  id: totrans-514
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`fmod`'
- en: ''
  id: totrans-515
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`getrandmax`'
  id: totrans-516
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`getrandmax`'
- en: ''
  id: totrans-517
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`hexdec`'
  id: totrans-518
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`hexdec`'
- en: ''
  id: totrans-519
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`hypot`'
  id: totrans-520
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`hypot`'
- en: ''
  id: totrans-521
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`is_finite`'
  id: totrans-522
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`is_finite`'
- en: ''
  id: totrans-523
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`is_infinite`'
  id: totrans-524
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`is_infinite`'
- en: ''
  id: totrans-525
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`is_nan`'
  id: totrans-526
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`is_nan`'
- en: ''
  id: totrans-527
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`lcg_value`'
  id: totrans-528
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`lcg_value`'
- en: ''
  id: totrans-529
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`log10`'
  id: totrans-530
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`log10`'
- en: ''
  id: totrans-531
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`log1p`'
  id: totrans-532
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`log1p`'
- en: ''
  id: totrans-533
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`log`'
  id: totrans-534
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`log`'
- en: ''
  id: totrans-535
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`max`'
  id: totrans-536
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`max`'
- en: ''
  id: totrans-537
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`min`'
  id: totrans-538
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`min`'
- en: ''
  id: totrans-539
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`mt_getrandmax`'
  id: totrans-540
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`mt_getrandmax`'
- en: ''
  id: totrans-541
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`mt_rand`'
  id: totrans-542
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`mt_rand`'
- en: ''
  id: totrans-543
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`mt_srand`'
  id: totrans-544
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`mt_srand`'
- en: ''
  id: totrans-545
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`octdec`'
  id: totrans-546
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`octdec`'
- en: ''
  id: totrans-547
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`pi`'
  id: totrans-548
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`pi`'
- en: ''
  id: totrans-549
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`pow`'
  id: totrans-550
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`pow`'
- en: ''
  id: totrans-551
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`rad2deg`'
  id: totrans-552
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`rad2deg`'
- en: ''
  id: totrans-553
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`rand`'
  id: totrans-554
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`rand`'
- en: ''
  id: totrans-555
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`random_int`'
  id: totrans-556
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`random_int`'
- en: ''
  id: totrans-557
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`round`'
  id: totrans-558
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`round`'
- en: ''
  id: totrans-559
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`sin`'
  id: totrans-560
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`sin`'
- en: ''
  id: totrans-561
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`sinh`'
  id: totrans-562
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`sinh`'
- en: ''
  id: totrans-563
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`sqrt`'
  id: totrans-564
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`sqrt`'
- en: ''
  id: totrans-565
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`srand`'
  id: totrans-566
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`srand`'
- en: ''
  id: totrans-567
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`tan`'
  id: totrans-568
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`tan`'
- en: ''
  id: totrans-569
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`tanh`'
  id: totrans-570
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`tanh`'
- en: Miscellaneous Functions
  id: totrans-571
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 杂项函数
- en: '`connection_aborted`'
  id: totrans-572
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`connection_aborted`'
- en: ''
  id: totrans-573
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`connection_status`'
  id: totrans-574
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`connection_status`'
- en: ''
  id: totrans-575
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`constant`'
  id: totrans-576
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`constant`'
- en: ''
  id: totrans-577
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`define`'
  id: totrans-578
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`define`'
- en: ''
  id: totrans-579
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`defined`'
  id: totrans-580
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`defined`'
- en: ''
  id: totrans-581
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`get_browser`'
  id: totrans-582
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`get_browser`'
- en: ''
  id: totrans-583
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`highlight_file`'
  id: totrans-584
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`highlight_file`'
- en: ''
  id: totrans-585
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`highlight_string`'
  id: totrans-586
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`highlight_string`'
- en: ''
  id: totrans-587
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`ignore_user_abort`'
  id: totrans-588
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`ignore_user_abort`'
- en: ''
  id: totrans-589
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`pack`'
  id: totrans-590
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`pack`'
- en: ''
  id: totrans-591
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`php_strip_whitespace`'
  id: totrans-592
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`php_strip_whitespace`'
- en: ''
  id: totrans-593
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`sleep`'
  id: totrans-594
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`sleep`'
- en: ''
  id: totrans-595
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`sys_getloadavg`'
  id: totrans-596
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`sys_getloadavg`'
- en: ''
  id: totrans-597
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`time_nanosleep`'
  id: totrans-598
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`time_nanosleep`'
- en: ''
  id: totrans-599
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`time_sleep_until`'
  id: totrans-600
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`time_sleep_until`'
- en: ''
  id: totrans-601
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`uniqid`'
  id: totrans-602
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`uniqid`'
- en: ''
  id: totrans-603
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`unpack`'
  id: totrans-604
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`unpack`'
- en: ''
  id: totrans-605
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`usleep`'
  id: totrans-606
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`usleep`'
- en: Network
  id: totrans-607
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络
- en: '`checkdnsrr`'
  id: totrans-608
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`checkdnsrr`'
- en: ''
  id: totrans-609
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`closelog`'
  id: totrans-610
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`closelog`'
- en: ''
  id: totrans-611
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`fsockopen`'
  id: totrans-612
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`fsockopen`'
- en: ''
  id: totrans-613
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`gethostbyaddr`'
  id: totrans-614
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`gethostbyaddr`'
- en: ''
  id: totrans-615
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`gethostbyname`'
  id: totrans-616
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`gethostbyname`'
- en: ''
  id: totrans-617
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`gethostbynamel`'
  id: totrans-618
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`gethostbynamel`'
- en: ''
  id: totrans-619
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`gethostname`'
  id: totrans-620
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`gethostname`'
- en: ''
  id: totrans-621
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`getmxrr`'
  id: totrans-622
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`getmxrr`'
- en: ''
  id: totrans-623
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`getprotobyname`'
  id: totrans-624
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`getprotobyname`'
- en: ''
  id: totrans-625
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`getprotobynumber`'
  id: totrans-626
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`getprotobynumber`'
- en: ''
  id: totrans-627
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`getservbyname`'
  id: totrans-628
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`getservbyname`'
- en: ''
  id: totrans-629
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`getservbyport`'
  id: totrans-630
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`getservbyport`'
- en: ''
  id: totrans-631
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`header`'
  id: totrans-632
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`header`'
- en: ''
  id: totrans-633
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`header_remove`'
  id: totrans-634
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`header_remove`'
- en: ''
  id: totrans-635
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`headers_list`'
  id: totrans-636
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`headers_list`'
- en: ''
  id: totrans-637
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`headers_sent`'
  id: totrans-638
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`headers_sent`'
- en: ''
  id: totrans-639
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`inet_ntop`'
  id: totrans-640
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`inet_ntop`'
- en: ''
  id: totrans-641
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`inet_pton`'
  id: totrans-642
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`inet_pton`'
- en: ''
  id: totrans-643
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`ip2long`'
  id: totrans-644
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`ip2long`'
- en: ''
  id: totrans-645
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`long2ip`'
  id: totrans-646
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`long2ip`'
- en: ''
  id: totrans-647
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`openlog`'
  id: totrans-648
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`openlog`'
- en: ''
  id: totrans-649
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`pfsockopen`'
  id: totrans-650
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`pfsockopen`'
- en: ''
  id: totrans-651
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`setcookie`'
  id: totrans-652
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`setcookie`'
- en: ''
  id: totrans-653
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`setrawcookie`'
  id: totrans-654
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`setrawcookie`'
- en: ''
  id: totrans-655
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`syslog`'
  id: totrans-656
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`syslog`'
- en: Output Buffering
  id: totrans-657
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 输出缓冲
- en: '`flush`'
  id: totrans-658
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`flush`'
- en: ''
  id: totrans-659
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`ob_clean`'
  id: totrans-660
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`ob_clean`'
- en: ''
  id: totrans-661
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`ob_end_clean`'
  id: totrans-662
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`ob_end_clean`'
- en: ''
  id: totrans-663
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`ob_end_flush`'
  id: totrans-664
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`ob_end_flush`'
- en: ''
  id: totrans-665
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`ob_flush`'
  id: totrans-666
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`ob_flush`'
- en: ''
  id: totrans-667
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`ob_get_clean`'
  id: totrans-668
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`ob_get_clean`'
- en: ''
  id: totrans-669
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`ob_get_contents`'
  id: totrans-670
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`ob_get_contents`'
- en: ''
  id: totrans-671
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`ob_get_flush`'
  id: totrans-672
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`ob_get_flush`'
- en: ''
  id: totrans-673
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`ob_get_length`'
  id: totrans-674
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`ob_get_length`'
- en: ''
  id: totrans-675
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`ob_get_level`'
  id: totrans-676
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`ob_get_level`'
- en: ''
  id: totrans-677
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`ob_get_status`'
  id: totrans-678
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`ob_get_status`'
- en: ''
  id: totrans-679
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`ob_gzhandler`'
  id: totrans-680
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`ob_gzhandler`'
- en: ''
  id: totrans-681
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`ob_implicit_flush`'
  id: totrans-682
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 隐式刷新输出缓冲
- en: ''
  id: totrans-683
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`ob_list_handlers`'
  id: totrans-684
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`ob_list_handlers`'
- en: ''
  id: totrans-685
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`ob_start`'
  id: totrans-686
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`ob_start`'
- en: ''
  id: totrans-687
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`output_add_rewrite_var`'
  id: totrans-688
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`output_add_rewrite_var`'
- en: ''
  id: totrans-689
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`output_reset_rewrite_vars`'
  id: totrans-690
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 重置重写变量输出
- en: PHP Language Tokenizer
  id: totrans-691
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PHP 语言分析器
- en: '`token_get_all`'
  id: totrans-692
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`token_get_all`'
- en: ''
  id: totrans-693
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`token_name`'
  id: totrans-694
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`token_name`'
- en: PHP Options/Info
  id: totrans-695
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PHP 选项/信息
- en: '`assert_options`'
  id: totrans-696
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`assert_options`'
- en: ''
  id: totrans-697
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`assert`'
  id: totrans-698
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`assert`'
- en: ''
  id: totrans-699
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`extension_loaded`'
  id: totrans-700
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`extension_loaded`'
- en: ''
  id: totrans-701
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`gc_collect_cycles`'
  id: totrans-702
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`gc_collect_cycles`'
- en: ''
  id: totrans-703
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`gc_disable`'
  id: totrans-704
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`gc_disable`'
- en: ''
  id: totrans-705
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`gc_enable`'
  id: totrans-706
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`gc_enable`'
- en: ''
  id: totrans-707
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`gc_enabled`'
  id: totrans-708
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`gc_enabled`'
- en: ''
  id: totrans-709
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`get_cfg_var`'
  id: totrans-710
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`get_cfg_var`'
- en: ''
  id: totrans-711
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`get_current_user`'
  id: totrans-712
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`get_current_user`'
- en: ''
  id: totrans-713
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`get_defined_constants`'
  id: totrans-714
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`get_defined_constants`'
- en: ''
  id: totrans-715
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`get_extension_funcs`'
  id: totrans-716
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`get_extension_funcs`'
- en: ''
  id: totrans-717
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`get_include_path`'
  id: totrans-718
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`get_include_path`'
- en: ''
  id: totrans-719
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`get_included_files`'
  id: totrans-720
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`get_included_files`'
- en: ''
  id: totrans-721
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`get_loaded_extensions`'
  id: totrans-722
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`get_loaded_extensions`'
- en: ''
  id: totrans-723
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`getenv`'
  id: totrans-724
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`getenv`'
- en: ''
  id: totrans-725
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`getlastmod`'
  id: totrans-726
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`getlastmod`'
- en: ''
  id: totrans-727
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`getmygid`'
  id: totrans-728
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`getmygid`'
- en: ''
  id: totrans-729
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`getmyinode`'
  id: totrans-730
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`getmyinode`'
- en: ''
  id: totrans-731
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`getmypid`'
  id: totrans-732
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`getmypid`'
- en: ''
  id: totrans-733
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`getmyuid`'
  id: totrans-734
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`getmyuid`'
- en: ''
  id: totrans-735
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`getopt`'
  id: totrans-736
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`getopt`'
- en: ''
  id: totrans-737
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`getrusage`'
  id: totrans-738
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`getrusage`'
- en: ''
  id: totrans-739
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`ini_get_all`'
  id: totrans-740
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`ini_get_all`'
- en: ''
  id: totrans-741
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`ini_get`'
  id: totrans-742
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`ini_get`'
- en: ''
  id: totrans-743
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`ini_restore`'
  id: totrans-744
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`ini_restore`'
- en: ''
  id: totrans-745
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`ini_set`'
  id: totrans-746
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`ini_set`'
- en: ''
  id: totrans-747
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`memory_get_peak_usage`'
  id: totrans-748
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`memory_get_peak_usage`'
- en: ''
  id: totrans-749
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`memory_get_usage`'
  id: totrans-750
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`memory_get_usage`'
- en: ''
  id: totrans-751
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`php_ini_loaded_file`'
  id: totrans-752
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`php_ini_loaded_file`'
- en: ''
  id: totrans-753
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`php_ini_scanned_files`'
  id: totrans-754
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`php_ini_scanned_files`'
- en: ''
  id: totrans-755
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`php_logo_guid`'
  id: totrans-756
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`php_logo_guid`'
- en: ''
  id: totrans-757
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`php_sapi_name`'
  id: totrans-758
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`php_sapi_name`'
- en: ''
  id: totrans-759
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`php_uname`'
  id: totrans-760
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`php_uname`'
- en: ''
  id: totrans-761
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`phpcredits`'
  id: totrans-762
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`phpcredits`'
- en: ''
  id: totrans-763
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`phpinfo`'
  id: totrans-764
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`phpinfo`'
- en: ''
  id: totrans-765
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`phpversion`'
  id: totrans-766
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`phpversion`'
- en: ''
  id: totrans-767
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`putenv`'
  id: totrans-768
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`putenv`'
- en: ''
  id: totrans-769
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`set_include_path`'
  id: totrans-770
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`set_include_path`'
- en: ''
  id: totrans-771
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`set_time_limit`'
  id: totrans-772
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`set_time_limit`'
- en: ''
  id: totrans-773
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`sys_get_temp_dir`'
  id: totrans-774
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`sys_get_temp_dir`'
- en: ''
  id: totrans-775
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`version_compare`'
  id: totrans-776
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`version_compare`'
- en: ''
  id: totrans-777
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`zend_logo_guid`'
  id: totrans-778
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`zend_logo_guid`'
- en: ''
  id: totrans-779
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`zend_thread_id`'
  id: totrans-780
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`zend_thread_id`'
- en: ''
  id: totrans-781
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`zend_version`'
  id: totrans-782
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`zend_version`'
- en: Program Execution
  id: totrans-783
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Program Execution
- en: '`escapeshellarg`'
  id: totrans-784
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`escapeshellarg`'
- en: ''
  id: totrans-785
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`escapeshellcmd`'
  id: totrans-786
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`escapeshellcmd`'
- en: ''
  id: totrans-787
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`exec`'
  id: totrans-788
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`exec`'
- en: ''
  id: totrans-789
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`passthru`'
  id: totrans-790
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`passthru`'
- en: ''
  id: totrans-791
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`proc_close`'
  id: totrans-792
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`proc_close`'
- en: ''
  id: totrans-793
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`proc_get_status`'
  id: totrans-794
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`proc_get_status`'
- en: ''
  id: totrans-795
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`proc_nice`'
  id: totrans-796
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`proc_nice`'
- en: ''
  id: totrans-797
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`proc_open`'
  id: totrans-798
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`proc_open`'
- en: ''
  id: totrans-799
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`proc_terminate`'
  id: totrans-800
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`proc_terminate`'
- en: ''
  id: totrans-801
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`shell_exec`'
  id: totrans-802
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`shell_exec`'
- en: ''
  id: totrans-803
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`system`'
  id: totrans-804
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`system`'
- en: Session Handling
  id: totrans-805
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Session Handling
- en: '`session_cache_expire`'
  id: totrans-806
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`session_cache_expire`'
- en: ''
  id: totrans-807
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`session_cache_limiter`'
  id: totrans-808
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`session_cache_limiter`'
- en: ''
  id: totrans-809
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`session_decode`'
  id: totrans-810
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`session_decode`'
- en: ''
  id: totrans-811
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`session_destroy`'
  id: totrans-812
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`session_destroy`'
- en: ''
  id: totrans-813
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`session_encode`'
  id: totrans-814
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`session_encode`'
- en: ''
  id: totrans-815
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`session_get_cookie_params`'
  id: totrans-816
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`session_get_cookie_params`'
- en: ''
  id: totrans-817
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`session_id`'
  id: totrans-818
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`session_id`'
- en: ''
  id: totrans-819
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`session_module_name`'
  id: totrans-820
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`session_module_name`'
- en: ''
  id: totrans-821
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`session_name`'
  id: totrans-822
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`session_name`'
- en: ''
  id: totrans-823
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`session_regenerate_id`'
  id: totrans-824
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`session_regenerate_id`'
- en: ''
  id: totrans-825
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`session_register_shutdown`'
  id: totrans-826
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`session_register_shutdown`'
- en: ''
  id: totrans-827
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`session_save_path`'
  id: totrans-828
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`session_save_path`'
- en: ''
  id: totrans-829
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`session_set_cookie_params`'
  id: totrans-830
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`session_set_cookie_params`'
- en: ''
  id: totrans-831
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`session_set_save_handler`'
  id: totrans-832
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`session_set_save_handler`'
- en: ''
  id: totrans-833
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`session_start`'
  id: totrans-834
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`session_start`'
- en: ''
  id: totrans-835
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`session_status`'
  id: totrans-836
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`session_status`'
- en: ''
  id: totrans-837
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`session_unset`'
  id: totrans-838
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`session_unset`'
- en: ''
  id: totrans-839
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`session_write_close`'
  id: totrans-840
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`session_write_close`'
- en: Streams
  id: totrans-841
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Streams
- en: '`stream_bucket_append`'
  id: totrans-842
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`stream_bucket_append`'
- en: ''
  id: totrans-843
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_bucket_make_writeable`'
  id: totrans-844
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`stream_bucket_make_writeable`'
- en: ''
  id: totrans-845
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_bucket_new`'
  id: totrans-846
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`stream_bucket_new`'
- en: ''
  id: totrans-847
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_bucket_prepend`'
  id: totrans-848
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`stream_bucket_prepend`'
- en: ''
  id: totrans-849
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_context_create`'
  id: totrans-850
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`stream_context_create`'
- en: ''
  id: totrans-851
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_context_get_default`'
  id: totrans-852
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`stream_context_get_default`'
- en: ''
  id: totrans-853
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_context_get_options`'
  id: totrans-854
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`stream_context_get_options`'
- en: ''
  id: totrans-855
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_context_get_params`'
  id: totrans-856
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`stream_context_get_params`'
- en: ''
  id: totrans-857
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_context_set_default`'
  id: totrans-858
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`stream_context_set_default`'
- en: ''
  id: totrans-859
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_context_set_option`'
  id: totrans-860
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`stream_context_set_option`'
- en: ''
  id: totrans-861
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_context_set_params`'
  id: totrans-862
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`stream_context_set_params`'
- en: ''
  id: totrans-863
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_copy_to_stream`'
  id: totrans-864
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`stream_copy_to_stream`'
- en: ''
  id: totrans-865
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_encoding`'
  id: totrans-866
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`stream_encoding`'
- en: ''
  id: totrans-867
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_filter_append`'
  id: totrans-868
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`stream_filter_append`'
- en: ''
  id: totrans-869
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_filter_prepend`'
  id: totrans-870
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`stream_filter_prepend`'
- en: ''
  id: totrans-871
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_filter_register`'
  id: totrans-872
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`stream_filter_register`'
- en: ''
  id: totrans-873
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_filter_remove`'
  id: totrans-874
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`stream_filter_remove`'
- en: ''
  id: totrans-875
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_get_contents`'
  id: totrans-876
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`stream_get_contents`'
- en: ''
  id: totrans-877
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_get_filters`'
  id: totrans-878
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`stream_get_filters`'
- en: ''
  id: totrans-879
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_get_line`'
  id: totrans-880
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`stream_get_line`'
- en: ''
  id: totrans-881
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_get_meta_data`'
  id: totrans-882
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`stream_get_meta_data`'
- en: ''
  id: totrans-883
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_get_transports`'
  id: totrans-884
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`stream_get_transports`'
- en: ''
  id: totrans-885
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_get_wrappers`'
  id: totrans-886
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`stream_get_wrappers`'
- en: ''
  id: totrans-887
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_is_local`'
  id: totrans-888
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`stream_is_local`'
- en: ''
  id: totrans-889
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_notification_callback`'
  id: totrans-890
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`stream_notification_callback`'
- en: ''
  id: totrans-891
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_resolve_include_path`'
  id: totrans-892
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`stream_resolve_include_path`'
- en: ''
  id: totrans-893
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_select`'
  id: totrans-894
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`stream_select`'
- en: ''
  id: totrans-895
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_set_blocking`'
  id: totrans-896
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`stream_set_blocking`'
- en: ''
  id: totrans-897
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_set_chunk_size`'
  id: totrans-898
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`stream_set_chunk_size`'
- en: ''
  id: totrans-899
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_set_read_buffer`'
  id: totrans-900
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`stream_set_read_buffer`'
- en: ''
  id: totrans-901
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_set_timeout`'
  id: totrans-902
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`stream_set_timeout`'
- en: ''
  id: totrans-903
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_set_write_buffer`'
  id: totrans-904
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`stream_set_write_buffer`'
- en: ''
  id: totrans-905
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_socket_accept`'
  id: totrans-906
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`stream_socket_accept`'
- en: ''
  id: totrans-907
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_socket_client`'
  id: totrans-908
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`stream_socket_client`'
- en: ''
  id: totrans-909
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_socket_enable_crypto`'
  id: totrans-910
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`stream_socket_enable_crypto`'
- en: ''
  id: totrans-911
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_socket_get_name`'
  id: totrans-912
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`stream_socket_get_name`'
- en: ''
  id: totrans-913
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_socket_pair`'
  id: totrans-914
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`stream_socket_pair`'
- en: ''
  id: totrans-915
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_socket_recvfrom`'
  id: totrans-916
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`stream_socket_recvfrom`'
- en: ''
  id: totrans-917
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_socket_sendto`'
  id: totrans-918
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`stream_socket_sendto`'
- en: ''
  id: totrans-919
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_socket_server`'
  id: totrans-920
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`stream_socket_server`'
- en: ''
  id: totrans-921
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_socket_shutdown`'
  id: totrans-922
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`stream_socket_shutdown`'
- en: ''
  id: totrans-923
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_supports_lock`'
  id: totrans-924
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`stream_supports_lock`'
- en: ''
  id: totrans-925
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_wrapper_register`'
  id: totrans-926
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`stream_wrapper_register`'
- en: ''
  id: totrans-927
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_wrapper_restore`'
  id: totrans-928
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`stream_wrapper_restore`'
- en: ''
  id: totrans-929
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_wrapper_unregister`'
  id: totrans-930
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`stream_wrapper_unregister`'
- en: Strings
  id: totrans-931
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Strings
- en: '`addcslashes`'
  id: totrans-932
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`addcslashes`'
- en: ''
  id: totrans-933
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`addslashes`'
  id: totrans-934
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`addslashes`'
- en: ''
  id: totrans-935
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`bin2hex`'
  id: totrans-936
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`bin2hex`'
- en: ''
  id: totrans-937
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`chr`'
  id: totrans-938
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`chr`'
- en: ''
  id: totrans-939
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`chunk_split`'
  id: totrans-940
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`chunk_split`'
- en: ''
  id: totrans-941
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`convert_cyr_string`'
  id: totrans-942
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`convert_cyr_string`'
- en: ''
  id: totrans-943
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`convert_uudecode`'
  id: totrans-944
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`convert_uudecode`'
- en: ''
  id: totrans-945
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`convert_uuencode`'
  id: totrans-946
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`convert_uuencode`'
- en: ''
  id: totrans-947
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`count_chars`'
  id: totrans-948
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`count_chars`'
- en: ''
  id: totrans-949
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`crc32`'
  id: totrans-950
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`crc32`'
- en: ''
  id: totrans-951
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`crypt`'
  id: totrans-952
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`crypt`'
- en: ''
  id: totrans-953
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`echo`'
  id: totrans-954
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`echo`'
- en: ''
  id: totrans-955
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`explode`'
  id: totrans-956
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`explode`'
- en: ''
  id: totrans-957
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`fprintf`'
  id: totrans-958
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`fprintf`'
- en: ''
  id: totrans-959
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`get_html_translation_table`'
  id: totrans-960
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`get_html_translation_table`'
- en: ''
  id: totrans-961
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`hebrev`'
  id: totrans-962
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`hebrev`'
- en: ''
  id: totrans-963
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`hex2bin`'
  id: totrans-964
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`hex2bin`'
- en: ''
  id: totrans-965
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`html_entity_decode`'
  id: totrans-966
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`html_entity_decode`'
- en: ''
  id: totrans-967
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`htmlentities`'
  id: totrans-968
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`htmlentities`'
- en: ''
  id: totrans-969
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`htmlspecialchars`'
  id: totrans-970
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`htmlspecialchars`'
- en: ''
  id: totrans-971
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`htmlspecialchars_decode`'
  id: totrans-972
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`htmlspecialchars_decode`'
- en: ''
  id: totrans-973
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`implode`'
  id: totrans-974
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`implode`'
- en: ''
  id: totrans-975
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`lcfirst`'
  id: totrans-976
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`lcfirst`'
- en: ''
  id: totrans-977
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`levenshtein`'
  id: totrans-978
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`levenshtein`'
- en: ''
  id: totrans-979
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`localeconv`'
  id: totrans-980
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`localeconv`'
- en: ''
  id: totrans-981
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`ltrim`'
  id: totrans-982
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`ltrim`'
- en: ''
  id: totrans-983
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`md5`'
  id: totrans-984
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`md5`'
- en: ''
  id: totrans-985
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`md5_file`'
  id: totrans-986
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`md5_file`'
- en: ''
  id: totrans-987
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`metaphone`'
  id: totrans-988
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`metaphone`'
- en: ''
  id: totrans-989
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`nl_langinfo`'
  id: totrans-990
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`nl_langinfo`'
- en: ''
  id: totrans-991
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`nl2br`'
  id: totrans-992
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`nl2br`'
- en: ''
  id: totrans-993
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`number_format`'
  id: totrans-994
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`number_format`'
- en: ''
  id: totrans-995
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`ord`'
  id: totrans-996
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`ord`'
- en: ''
  id: totrans-997
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`parse_str`'
  id: totrans-998
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`parse_str`'
- en: ''
  id: totrans-999
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`printf`'
  id: totrans-1000
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`printf`'
- en: ''
  id: totrans-1001
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`quoted_printable_decode`'
  id: totrans-1002
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`quoted_printable_decode`'
- en: ''
  id: totrans-1003
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`quoted_printable_encode`'
  id: totrans-1004
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`quoted_printable_encode`'
- en: ''
  id: totrans-1005
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`quotemeta`'
  id: totrans-1006
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`quotemeta`'
- en: ''
  id: totrans-1007
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`random_bytes`'
  id: totrans-1008
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`random_bytes`'
- en: ''
  id: totrans-1009
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`rtrim`'
  id: totrans-1010
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`rtrim`'
- en: ''
  id: totrans-1011
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`setlocale`'
  id: totrans-1012
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`setlocale`'
- en: ''
  id: totrans-1013
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`sha1`'
  id: totrans-1014
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`sha1`'
- en: ''
  id: totrans-1015
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`sha1_file`'
  id: totrans-1016
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`sha1_file`'
- en: ''
  id: totrans-1017
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`similar_text`'
  id: totrans-1018
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`similar_text`'
- en: ''
  id: totrans-1019
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`soundex`'
  id: totrans-1020
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`soundex`'
- en: ''
  id: totrans-1021
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`sprintf`'
  id: totrans-1022
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`sprintf`'
- en: ''
  id: totrans-1023
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`sscanf`'
  id: totrans-1024
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`sscanf`'
- en: ''
  id: totrans-1025
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`str_getcsv`'
  id: totrans-1026
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`str_getcsv`'
- en: ''
  id: totrans-1027
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`str_ireplace`'
  id: totrans-1028
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`str_ireplace`'
- en: ''
  id: totrans-1029
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`str_pad`'
  id: totrans-1030
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`str_pad`'
- en: ''
  id: totrans-1031
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`str_repeat`'
  id: totrans-1032
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`str_repeat`'
- en: ''
  id: totrans-1033
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`str_replace`'
  id: totrans-1034
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`str_replace`'
- en: ''
  id: totrans-1035
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`str_rot13`'
  id: totrans-1036
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`str_rot13`'
- en: ''
  id: totrans-1037
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`str_shuffle`'
  id: totrans-1038
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`str_shuffle`'
- en: ''
  id: totrans-1039
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`str_split`'
  id: totrans-1040
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`str_split`'
- en: ''
  id: totrans-1041
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`str_word_count`'
  id: totrans-1042
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`str_word_count`'
- en: ''
  id: totrans-1043
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`strcasecmp`'
  id: totrans-1044
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`strcasecmp`'
- en: ''
  id: totrans-1045
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`strcmp`'
  id: totrans-1046
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`strcmp`'
- en: ''
  id: totrans-1047
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`strcoll`'
  id: totrans-1048
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`strcoll`'
- en: ''
  id: totrans-1049
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`strcspn`'
  id: totrans-1050
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`strcspn`'
- en: ''
  id: totrans-1051
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`strip_tags`'
  id: totrans-1052
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`strip_tags`'
- en: ''
  id: totrans-1053
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stripcslashes`'
  id: totrans-1054
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`stripcslashes`'
- en: ''
  id: totrans-1055
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stripos`'
  id: totrans-1056
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`stripos`'
- en: ''
  id: totrans-1057
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stripslashes`'
  id: totrans-1058
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`stripslashes`'
- en: ''
  id: totrans-1059
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stristr`'
  id: totrans-1060
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`stristr`'
- en: ''
  id: totrans-1061
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`strlen`'
  id: totrans-1062
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`strlen`'
- en: ''
  id: totrans-1063
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`strnatcasecmp`'
  id: totrans-1064
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`strnatcasecmp`'
- en: ''
  id: totrans-1065
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`strnatcmp`'
  id: totrans-1066
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`strnatcmp`'
- en: ''
  id: totrans-1067
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`strncasecmp`'
  id: totrans-1068
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`strncasecmp`'
- en: ''
  id: totrans-1069
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`strncmp`'
  id: totrans-1070
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`strncmp`'
- en: ''
  id: totrans-1071
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`strpbrk`'
  id: totrans-1072
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`strpbrk`'
- en: ''
  id: totrans-1073
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`strpos`'
  id: totrans-1074
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`strpos`'
- en: ''
  id: totrans-1075
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`strrchr`'
  id: totrans-1076
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`strrchr`'
- en: ''
  id: totrans-1077
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`strrev`'
  id: totrans-1078
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`strrev`'
- en: ''
  id: totrans-1079
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`strripos`'
  id: totrans-1080
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`strripos`'
- en: ''
  id: totrans-1081
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`strrpos`'
  id: totrans-1082
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`strrpos`'
- en: ''
  id: totrans-1083
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`strspn`'
  id: totrans-1084
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`strspn`'
- en: ''
  id: totrans-1085
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`strstr`'
  id: totrans-1086
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`strstr`'
- en: ''
  id: totrans-1087
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`strtok`'
  id: totrans-1088
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`strtok`'
- en: ''
  id: totrans-1089
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`strtolower`'
  id: totrans-1090
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`strtolower`'
- en: ''
  id: totrans-1091
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`strtoupper`'
  id: totrans-1092
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`strtoupper`'
- en: ''
  id: totrans-1093
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`strtr`'
  id: totrans-1094
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`strtr`'
- en: ''
  id: totrans-1095
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`substr`'
  id: totrans-1096
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`substr`'
- en: ''
  id: totrans-1097
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`substr_compare`'
  id: totrans-1098
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`substr_compare`'
- en: ''
  id: totrans-1099
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`substr_count`'
  id: totrans-1100
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`substr_count`'
- en: ''
  id: totrans-1101
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`substr_replace`'
  id: totrans-1102
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`substr_replace`'
- en: ''
  id: totrans-1103
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`trim`'
  id: totrans-1104
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`trim`'
- en: ''
  id: totrans-1105
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`ucfirst`'
  id: totrans-1106
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`ucfirst`'
- en: ''
  id: totrans-1107
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`ucwords`'
  id: totrans-1108
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`ucwords`'
- en: ''
  id: totrans-1109
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`vfprintf`'
  id: totrans-1110
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`vfprintf`'
- en: ''
  id: totrans-1111
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`vprintf`'
  id: totrans-1112
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`vprintf`'
- en: ''
  id: totrans-1113
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`vsprintf`'
  id: totrans-1114
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`vsprintf`'
- en: ''
  id: totrans-1115
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`wordwrap`'
  id: totrans-1116
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`wordwrap`'
- en: URLs
  id: totrans-1117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: URLs
- en: '`base64_decode`'
  id: totrans-1118
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`base64_decode`'
- en: ''
  id: totrans-1119
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`base64_encode`'
  id: totrans-1120
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`base64_encode`'
- en: ''
  id: totrans-1121
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`get_headers`'
  id: totrans-1122
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`get_headers`'
- en: ''
  id: totrans-1123
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`get_meta_tags`'
  id: totrans-1124
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`get_meta_tags`'
- en: ''
  id: totrans-1125
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`http_build_query`'
  id: totrans-1126
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`http_build_query`'
- en: ''
  id: totrans-1127
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`parse_url`'
  id: totrans-1128
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`parse_url`'
- en: ''
  id: totrans-1129
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`rawurldecode`'
  id: totrans-1130
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`rawurldecode`'
- en: ''
  id: totrans-1131
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`rawurlencode`'
  id: totrans-1132
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`rawurlencode`'
- en: ''
  id: totrans-1133
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`urldecode`'
  id: totrans-1134
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`urldecode`'
- en: ''
  id: totrans-1135
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`urlencode`'
  id: totrans-1136
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`urlencode`'
- en: Variables
  id: totrans-1137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Variables
- en: '`debug_zval_dump`'
  id: totrans-1138
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`debug_zval_dump`'
- en: ''
  id: totrans-1139
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`empty`'
  id: totrans-1140
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`empty`'
- en: ''
  id: totrans-1141
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`floatval`'
  id: totrans-1142
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`floatval`'
- en: ''
  id: totrans-1143
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`get_defined_vars`'
  id: totrans-1144
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`get_defined_vars`'
- en: ''
  id: totrans-1145
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`get_resource_type`'
  id: totrans-1146
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`get_resource_type`'
- en: ''
  id: totrans-1147
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`gettype`'
  id: totrans-1148
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`gettype`'
- en: ''
  id: totrans-1149
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`intval`'
  id: totrans-1150
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`intval`'
- en: ''
  id: totrans-1151
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`is_array`'
  id: totrans-1152
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`is_array`'
- en: ''
  id: totrans-1153
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`is_bool`'
  id: totrans-1154
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`is_bool`'
- en: ''
  id: totrans-1155
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`is_callable`'
  id: totrans-1156
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`is_callable`'
- en: ''
  id: totrans-1157
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`is_float`'
  id: totrans-1158
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`is_float`'
- en: ''
  id: totrans-1159
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`is_int`'
  id: totrans-1160
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`is_int`'
- en: ''
  id: totrans-1161
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`is_null`'
  id: totrans-1162
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`is_null`'
- en: ''
  id: totrans-1163
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`is_numeric`'
  id: totrans-1164
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`is_numeric`'
- en: ''
  id: totrans-1165
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`is_object`'
  id: totrans-1166
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`is_object`'
- en: ''
  id: totrans-1167
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`is_resource`'
  id: totrans-1168
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`is_resource`'
- en: ''
  id: totrans-1169
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`is_scalar`'
  id: totrans-1170
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`is_scalar`'
- en: ''
  id: totrans-1171
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`is_string`'
  id: totrans-1172
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`is_string`'
- en: ''
  id: totrans-1173
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`isset`'
  id: totrans-1174
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`isset`'
- en: ''
  id: totrans-1175
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`print_r`'
  id: totrans-1176
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`print_r`'
- en: ''
  id: totrans-1177
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`serialize`'
  id: totrans-1178
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`serialize`'
- en: ''
  id: totrans-1179
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`settype`'
  id: totrans-1180
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`settype`'
- en: ''
  id: totrans-1181
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`strval`'
  id: totrans-1182
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`strval`'
- en: ''
  id: totrans-1183
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`unserialize`'
  id: totrans-1184
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`unserialize`'
- en: ''
  id: totrans-1185
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`unset`'
  id: totrans-1186
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`unset`'
- en: ''
  id: totrans-1187
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`var_dump`'
  id: totrans-1188
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`var_dump`'
- en: ''
  id: totrans-1189
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`var_export`'
  id: totrans-1190
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`var_export`'
- en: Zlib
  id: totrans-1191
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Zlib
- en: '`deflate_add`'
  id: totrans-1192
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`deflate_add`'
- en: ''
  id: totrans-1193
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`deflate_init`'
  id: totrans-1194
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`deflate_init`'
- en: ''
  id: totrans-1195
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`inflate_add`'
  id: totrans-1196
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`inflate_add`'
- en: ''
  id: totrans-1197
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`inflate_init`'
  id: totrans-1198
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`inflate_init`'
- en: Alphabetical Listing of PHP Functions
  id: totrans-1199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Alphabetical Listing of PHP Functions
- en: abs
  id: totrans-1200
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: abs
- en: '`int abs(int` *number*`) float abs(float` *number*`)`'
  id: totrans-1201
  prefs: []
  type: TYPE_NORMAL
  zh: '`int abs(int` *number*`) float abs(float` *number*`)`'
- en: Returns the absolute value of *number* in the same type (float or integer) as
    the argument.
  id: totrans-1202
  prefs: []
  type: TYPE_NORMAL
  zh: 返回*number*的绝对值，类型（浮点数或整数）与参数相同。
- en: acos
  id: totrans-1203
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: acos
- en: '`float acos(float` *value*`)`'
  id: totrans-1204
  prefs: []
  type: TYPE_NORMAL
  zh: '`float acos(float` *value*`)`'
- en: Returns the arc cosine of *value* in radians.
  id: totrans-1205
  prefs: []
  type: TYPE_NORMAL
  zh: 返回弧度中*value*的反余弦值。
- en: acosh
  id: totrans-1206
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: acosh
- en: '`float acosh(float` *value*`)`'
  id: totrans-1207
  prefs: []
  type: TYPE_NORMAL
  zh: '`float acosh(float` *value*`)`'
- en: Returns the inverse hyberbolic cosine of *value*.
  id: totrans-1208
  prefs: []
  type: TYPE_NORMAL
  zh: 返回*value*的反双曲余弦值。
- en: addcslashes
  id: totrans-1209
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: addcslashes
- en: '`string addcslashes(string` *string*`, string` *characters*`)`'
  id: totrans-1210
  prefs: []
  type: TYPE_NORMAL
  zh: '`string addcslashes(string` *string*`, string` *characters*`)`'
- en: Returns escaped instances of *characters* in *string* by adding a backslash
    before them. You can specify ranges of characters by separating them with two
    periods—for example, to escape characters between `a` and `q`, use `"a..q"`. Multiple
    characters and ranges can be specified in *characters*. The `addcslashes()` function
    is the inverse of `stripcslashes()`.
  id: totrans-1211
  prefs: []
  type: TYPE_NORMAL
  zh: 返回*string*中*characters*的转义实例，通过在它们前面添加反斜杠来实现。您可以用两个句点分隔它们指定字符的范围，例如，要转义字符`a`到`q`之间的字符，请使用`"a..q"`。可以在*characters*中指定多个字符和范围。`addcslashes()`函数是`stripcslashes()`函数的反函数。
- en: addslashes
  id: totrans-1212
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: addslashes
- en: '`string addslashes(string` *string*`)`'
  id: totrans-1213
  prefs: []
  type: TYPE_NORMAL
  zh: '`string addslashes(string` *string*`)`'
- en: Returns escaped characters in *string* that have special meaning in SQL database
    queries. Single quotes (`''`), double quotes (`""`), backslashes (`\`), and the
    NUL-byte (`\0`) are escaped. The `stripslashes()` function is the inverse for
    this function.
  id: totrans-1214
  prefs: []
  type: TYPE_NORMAL
  zh: 返回在SQL数据库查询中具有特殊含义的*string*中的转义字符。单引号（`''`）、双引号（`""`）、反斜杠（`\`）和NUL字节（`\0`）都被转义。`stripslashes()`函数是该函数的反函数。
- en: array_change_key_case
  id: totrans-1215
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: array_change_key_case
- en: '`array array_change_key_case(array` *array*`[, CASE_UPPER|CASE_LOWER])`'
  id: totrans-1216
  prefs: []
  type: TYPE_NORMAL
  zh: '`array array_change_key_case(array` *array*`[, CASE_UPPER|CASE_LOWER])`'
- en: Returns an array whose elements’ keys are changed to all uppercase or all lowercase.
    Numeric indices are unchanged. If the optional case parameter is left off, the
    keys are changed to lowercase.
  id: totrans-1217
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个数组，其元素的键被更改为全部大写或全部小写。数字索引不变。如果省略可选的case参数，则将键更改为小写。
- en: array_chunk
  id: totrans-1218
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: array_chunk
- en: '`array array_chunk(array` *array*`, int` *size*`[, int` *preserve_keys*`])`'
  id: totrans-1219
  prefs: []
  type: TYPE_NORMAL
  zh: '`array array_chunk(array` *array*`, int` *size*`[, int` *preserve_keys*`])`'
- en: Splits *array* into a series of arrays, each containing *size* elements, and
    returns them in an array. If *preserve_keys* is `true` (default is `false`), the
    original keys are preserved in the resulting arrays; otherwise, the values are
    ordered with numeric indices starting at 0.
  id: totrans-1220
  prefs: []
  type: TYPE_NORMAL
  zh: 将*array*分割成一系列包含*size*个元素的数组，并将它们作为数组返回。如果*preserve_keys*为`true`（默认为`false`），则结果数组保留原始键；否则，值按照从0开始的数字索引排序。
- en: array_combine
  id: totrans-1221
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: array_combine
- en: '`array array_combine(array` *keys*`, array` *values*`)`'
  id: totrans-1222
  prefs: []
  type: TYPE_NORMAL
  zh: '`array array_combine(array` *keys*`, array` *values*`)`'
- en: Returns an array created by using each element in the *keys* array as the key
    and the element in the *values* array as the value. If either array has no elements,
    if the number of elements in each array differs, or if an element exists in one
    array but not in the other, `false` is returned.
  id: totrans-1223
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个数组，由*keys*数组中的每个元素作为键和*values*数组中的元素作为值创建。如果任一数组没有元素，两个数组的元素数量不同，或者一个数组中存在但在另一个数组中不存在元素，则返回`false`。
- en: array_count_values
  id: totrans-1224
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: array_count_values
- en: '`array array_count_values(array` *array*`)`'
  id: totrans-1225
  prefs: []
  type: TYPE_NORMAL
  zh: '`array array_count_values(array` *array*`)`'
- en: Returns an array whose elements’ keys are the input array’s values. The value
    of each key is the number of times that key appears in the input array as a value.
  id: totrans-1226
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个数组，其元素的键是输入数组的值。每个键的值是该键作为值在输入数组中出现的次数。
- en: array_diff
  id: totrans-1227
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: array_diff
- en: '`array array_diff(array` *array1*`, array` *array2*`[, ... array` *arrayN*`])`'
  id: totrans-1228
  prefs: []
  type: TYPE_NORMAL
  zh: '`array array_diff(array` *array1*`, array` *array2*`[, ... array` *arrayN*`])`'
- en: Returns an array that contains all of the values from the first array that are
    not present in any of the other provided arrays. The keys of the values are preserved.
  id: totrans-1229
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个数组，其中包含第一个数组中存在但其他提供的数组中不存在的所有值。保留值的键。
- en: array_diff_assoc
  id: totrans-1230
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: array_diff_assoc
- en: '`array array_diff_assoc(array` *array1*`, array` *array2*`[, ... array` *arrayN*`])`'
  id: totrans-1231
  prefs: []
  type: TYPE_NORMAL
  zh: '`array array_diff_assoc(array` *array1*`, array` *array2*`[, ... array` *arrayN*`])`'
- en: Returns an array containing all the values in *array1* that are not present
    in any of the other provided arrays. Unlike in `array_diff()`, both the keys and
    values must match to be considered identical. The keys of the values are preserved.
  id: totrans-1232
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个数组，其中包含第一个数组中存在但其他提供的数组中不存在的所有值。不同于`array_diff()`，必须同时匹配键和值才被视为相同。保留值的键。
- en: array_diff_key
  id: totrans-1233
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: array_diff_key
- en: '`array array_diff_key(array` *array1*`, array` *array2*`[, ... array` *arrayN*`])`'
  id: totrans-1234
  prefs: []
  type: TYPE_NORMAL
  zh: '`array array_diff_key(array` *array1*`, array` *array2*`[, ... array` *arrayN*`])`'
- en: Returns an array that contains all of the values from the first array whose
    keys are not present in any of the other provided arrays. The keys of the values
    are preserved.
  id: totrans-1235
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个数组，其中包含第一个数组中的键不在其他提供的数组中存在的所有值。保留值的键。
- en: array_diff_uassoc
  id: totrans-1236
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: array_diff_uassoc
- en: '`array array_diff_uassoc(array` *array1*`, array` *array2* `[, ... array` *arrayN*`],
    callable` *function*`)`'
  id: totrans-1237
  prefs: []
  type: TYPE_NORMAL
  zh: '`array array_diff_uassoc(array` *array1*`, array` *array2* `[, ... array` *arrayN*`],
    callable` *function*`)`'
- en: Returns an array containing all the values in *array1* that are not present
    in any of the other provided arrays. Unlike in `array_diff()`, both the keys and
    values must match to be considered identical. The function *function* is used
    to compare the values of the elements for equality. The function is called with
    two parameters—the values to compare. It should return an integer less than 0
    if the first argument is less than the second, `0` if the first and second arguments
    are equal, and an integer greater than 0 if the first argument is greater than
    the second. The keys of the values are preserved.
  id: totrans-1238
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个数组，其中包含第一个数组中存在但其他提供的数组中不存在的所有值。不同于`array_diff()`，必须同时匹配键和值才被视为相同。函数*function*用于比较元素值的相等性。该函数使用两个参数调用——要比较的值。如果第一个参数小于第二个参数，则应返回小于零的整数；如果第一个参数等于第二个参数，则应返回`0`；如果第一个参数大于第二个参数，则应返回大于零的整数。保留值的键。
- en: array_diff_ukey
  id: totrans-1239
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: array_diff_ukey
- en: '`array array_diff_ukey(array` *array1*`, array` *array2* `[, ... array` *arrayN*`],
    callable` *function*`)`'
  id: totrans-1240
  prefs: []
  type: TYPE_NORMAL
  zh: '`array array_diff_ukey(array` *array1*`, array` *array2* `[, ... array` *arrayN*`],
    callable` *function*`)`'
- en: Returns an array containing all the values in *array1* whose keys are not present
    in any of the other provided arrays. The function *function* is used to compare
    the keys of the elements for equality. The function is called with two parameters—the
    keys to compare. It should return an integer less than zero if the first argument
    is less than the second, `0` if the first and second arguments are equal, and
    an integer greater than zero if the first argument is greater than the second.
    The keys of the values are preserved.
  id: totrans-1241
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个数组，其中包含第一个数组中的键不在其他提供的数组中存在的所有值。函数*function*用于比较元素键的相等性。该函数使用两个参数调用——要比较的键。如果第一个参数小于第二个参数，则应返回小于零的整数；如果第一个和第二个参数相等，则应返回`0`；如果第一个参数大于第二个参数，则应返回大于零的整数。保留值的键。
- en: array_fill
  id: totrans-1242
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: array_fill
- en: '`array array_fill(int` *start*`, int` *count*`, mixed` *value*`)`'
  id: totrans-1243
  prefs: []
  type: TYPE_NORMAL
  zh: '`array array_fill(int` *start*`, int` *count*`, mixed` *value*`)`'
- en: Returns an array with *count* elements with the value *value*. Numeric indices
    are used, starting at *start* and counting upward by 1 for each element. If *count*
    is zero or less, an error is produced.
  id: totrans-1244
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个由*count*个元素组成的数组，每个元素的值为*value*。使用数值索引，从*start*开始，每个元素递增1。如果*count*小于等于零，则会产生错误。
- en: array_fill_keys
  id: totrans-1245
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: array_fill_keys
- en: '`array array_fill_keys(array` *keys*`, mixed` *value*`)`'
  id: totrans-1246
  prefs: []
  type: TYPE_NORMAL
  zh: '`array array_fill_keys(array` *keys*`, mixed` *value*`)`'
- en: Returns an array containing values for each item in *keys*, using the elements
    in *keys* for each element’s key and *value* for each element’s value.
  id: totrans-1247
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个数组，其中每个元素的键使用*keys*中的元素，并且每个元素的值为*value*。
- en: array_filter
  id: totrans-1248
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: array_filter
- en: '`array array_filter(array` *array*`, mixed` *callback*`)`'
  id: totrans-1249
  prefs: []
  type: TYPE_NORMAL
  zh: '`array array_filter(array` *array*`, mixed` *callback*`)`'
- en: 'Creates an array containing all values from the original array for which the
    given callback function returns `true`. If the input array is an associative array,
    the keys are preserved. For example:'
  id: totrans-1250
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个数组，其中包含原始数组中给定回调函数返回`true`的所有值。如果输入数组是关联数组，则保留键。例如：
- en: '[PRE0]'
  id: totrans-1251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: array_flip
  id: totrans-1252
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: array_flip
- en: '`array array_flip(array` *array*`)`'
  id: totrans-1253
  prefs: []
  type: TYPE_NORMAL
  zh: '`array array_flip(array` *array*`)`'
- en: Returns an array in which the elements’ keys are the original array’s values,
    and vice versa. If multiple values are found, the last one encountered is retained.
    If any of the values in the original array are any type except strings and integers,
    `array_flip()` will issue a warning, and the key-value pair in question will not
    be included in the result. `array_flip()` returns `NULL` on failure.
  id: totrans-1254
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个数组，其中元素的键是原始数组的值，反之亦然。如果找到多个值，则保留遇到的最后一个。如果原始数组中的任何值除了字符串和整数之外的任何类型，`array_flip()`将发出警告，并且将不包括问题中的键值对在结果中。`array_flip()`在失败时返回`NULL`。
- en: array_intersect
  id: totrans-1255
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: array_intersect
- en: '`array array_intersect(array` *array1*`, array` *array2*`[, ... array` *arrayN*`])`'
  id: totrans-1256
  prefs: []
  type: TYPE_NORMAL
  zh: '`array array_intersect(array` *array1*`, array` *array2*`[, ... array` *arrayN*`])`'
- en: Returns an array consisting of every element in *array1* that also exists in
    every other array.
  id: totrans-1257
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个由*array1*中每个元素也存在于每个其他数组中的元素组成的数组。
- en: array_intersect_assoc
  id: totrans-1258
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: array_intersect_assoc
- en: '`array array_intersect_assoc(array` *array1*`, array` *array2*`[, ... array`
    *arrayN*`])`'
  id: totrans-1259
  prefs: []
  type: TYPE_NORMAL
  zh: '`array array_intersect_assoc(array` *array1*`, array` *array2*`[, ... array`
    *arrayN*`])`'
- en: Returns an array containing all the values present in all of the given arrays.
    Unlike in `array_intersect()`, both the keys and values must match to be considered
    identical. The keys of the values are preserved.
  id: totrans-1260
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个包含所有给定数组中所有值的数组。与`array_intersect()`不同的是，必须同时匹配键和值才能被视为相同。值的键被保留。
- en: array_intersect_key
  id: totrans-1261
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: array_intersect_key
- en: '`array array_intersect_key(array` *array1*`, array` *array2*`[, ... array`
    *arrayN*`])`'
  id: totrans-1262
  prefs: []
  type: TYPE_NORMAL
  zh: '`array array_intersect_key(array` *array1*`, array` *array2*`[, ... array`
    *arrayN*`])`'
- en: Returns an array consisting of every element in *array1* whose keys also exist
    in every other array.
  id: totrans-1263
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个由*array1*中每个键也存在于每个其他数组中的元素组成的数组。
- en: array_intersect_uassoc
  id: totrans-1264
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: array_intersect_uassoc
- en: '`array array_intersect_uassoc(array` *array1*`, array` *array2* `[, ... array`
    *arrayN*`], callable` *function*`)`'
  id: totrans-1265
  prefs: []
  type: TYPE_NORMAL
  zh: '`array array_intersect_uassoc(array` *array1*`, array` *array2* `[, ... array`
    *arrayN*`], callable` *function*`)`'
- en: Returns an array containing all the values present in all of the given arrays.
  id: totrans-1266
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个包含所有给定数组中所有值的数组。
- en: The function *function* is used to compare the keys of the elements for equality.
    The function is called with two parameters—the values to compare. It should return
    an integer less than zero if the first argument is less than the second, `0` if
    the first and second arguments are equal, and an integer greater than zero if
    the first argument is greater than the second. The keys of the values are preserved.
  id: totrans-1267
  prefs: []
  type: TYPE_NORMAL
  zh: 函数*function*用于比较元素的键是否相等。该函数使用两个参数调用——要比较的值。如果第一个参数小于第二个参数，则返回小于零的整数，如果第一个和第二个参数相等，则返回`0`，如果第一个参数大于第二个参数，则返回大于零的整数。值的键被保留。
- en: array_intersect_ukey
  id: totrans-1268
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: array_intersect_ukey
- en: '`array array_intersect_ukey(array` *array1*`, array` *array2* `[, ... array`
    *arrayN*`], callable` *function*`)`'
  id: totrans-1269
  prefs: []
  type: TYPE_NORMAL
  zh: '`array array_intersect_ukey(array` *array1*`, array` *array2* `[, ... array`
    *arrayN*`], callable` *function*`)`'
- en: Returns an array consisting of every element in *array1* whose keys also exist
    in every other array.
  id: totrans-1270
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个由*array1*中每个键也存在于每个其他数组中的元素组成的数组。
- en: The function *function* is used to compare the values of the elements for equality.
    The function is called with two parameters—the keys to compare. It should return
    an integer less than zero if the first argument is less than the second, `0` if
    the first and second arguments are equal, and an integer greater than zero if
    the first argument is greater than the second.
  id: totrans-1271
  prefs: []
  type: TYPE_NORMAL
  zh: 函数*function*用于比较元素的值是否相等。该函数使用两个参数调用——要比较的键。如果第一个参数小于第二个参数，则返回小于零的整数，如果第一个和第二个参数相等，则返回`0`，如果第一个参数大于第二个参数，则返回大于零的整数。
- en: array_key_exists
  id: totrans-1272
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: array_key_exists
- en: '`bool array_key_exists(mixed` *key*`, array` *array*`)`'
  id: totrans-1273
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool array_key_exists(mixed` *key*`, array` *array*`)`'
- en: Returns `true` if *array* contains a key with the value *key*. If no such key
    is available, returns `false`.
  id: totrans-1274
  prefs: []
  type: TYPE_NORMAL
  zh: 如果*array*包含具有值*key*的键，则返回`true`。如果没有这样的键可用，则返回`false`。
- en: array_keys
  id: totrans-1275
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: array_keys
- en: '`array array_keys(array` *array*`[, mixed` *value*`[, bool` *strict*`]])`'
  id: totrans-1276
  prefs: []
  type: TYPE_NORMAL
  zh: '`array array_keys(array` *array*`[, mixed` *value*`[, bool` *strict*`]])`'
- en: Returns an array containing all of the keys in the given array. If the second
    parameter is provided, only keys whose values match *value* are returned in the
    array. If *strict* is specified and is `true`, a matched element is returned only
    when it is of the same type and value as *value*.
  id: totrans-1277
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个包含给定数组中所有键的数组。如果提供了第二个参数，则只返回其值与*value*匹配的键。如果指定了*strict*并且为`true`，则仅当匹配元素与*value*的类型和值相同时才返回。
- en: array_map
  id: totrans-1278
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: array_map
- en: '`array array_map(mixed` *callback*`, array` *array1*`[, ... array` *arrayN*`])`'
  id: totrans-1279
  prefs: []
  type: TYPE_NORMAL
  zh: '`array array_map(mixed` *callback*`, array` *array1*`[, ... array` *arrayN*`])`'
- en: 'Creates an array by applying the callback function referenced in the first
    parameter to the remaining parameters (provided arrays); the callback function
    should take as parameters a number of values equal to the number of arrays passed
    into `array_map()`. For example:'
  id: totrans-1280
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将第一个参数中引用的回调函数应用于剩余参数（提供的数组）来创建数组；回调函数应该接受与传递给 `array_map()` 的数组数目相等的值作为参数。例如：
- en: '[PRE1]'
  id: totrans-1281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: array_merge
  id: totrans-1282
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: array_merge
- en: '`array array_merge(array` *array1*`, array` *array2*`[, ... array` *arrayN*`])`'
  id: totrans-1283
  prefs: []
  type: TYPE_NORMAL
  zh: '`array array_merge(array` *array1*`, array` *array2*`[, ... array` *arrayN*`])`'
- en: Returns an array created by appending the elements of every provided array to
    the previous. If any array has a value with the same string key, the last value
    encountered for the key is returned in the array; any elements with identical
    numeric keys are inserted into the resulting array.
  id: totrans-1284
  prefs: []
  type: TYPE_NORMAL
  zh: 返回通过将每个提供的数组的元素附加到前一个数组的数组。如果任何数组具有相同的字符串键的值，则返回数组中遇到的键的最后一个值；任何具有相同数值键的元素都插入到结果数组中。
- en: array_merge_recursive
  id: totrans-1285
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: array_merge_recursive
- en: '`array array_merge_recursive(array` *array1*`, array` *array2*`[, ... array`
    *arrayN*`])`'
  id: totrans-1286
  prefs: []
  type: TYPE_NORMAL
  zh: '`array array_merge_recursive(array` *array1*`, array` *array2*`[, ... array`
    *arrayN*`])`'
- en: Like `array_merge()`, creates and returns an array by appending each input array
    to the previous. However, unlike in `array_merge()`, when multiple elements have
    the same string key, an array containing each value is inserted into the resulting
    array.
  id: totrans-1287
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `array_merge()` 类似，通过将每个输入数组附加到前一个数组来创建并返回数组。但与 `array_merge()` 不同的是，当多个元素具有相同的字符串键时，将包含每个值的数组插入到结果数组中。
- en: array_multisort
  id: totrans-1288
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: array_multisort
- en: '`bool array_multisort(array` *array1*`[, SORT_ASC|SORT_DESC [, SORT_REGULAR|SORT_NUMERIC|SORT_STRING]]
    [, array` *array2*`[, SORT_ASC|SORT_DESC [, SORT_REGULAR|SORT_NUMERIC|SORT_STRING]],
    ...])`'
  id: totrans-1289
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool array_multisort(array` *array1*`[, SORT_ASC|SORT_DESC [, SORT_REGULAR|SORT_NUMERIC|SORT_STRING]]
    [, array` *array2*`[, SORT_ASC|SORT_DESC [, SORT_REGULAR|SORT_NUMERIC|SORT_STRING]],
    ...])`'
- en: Used to sort several arrays simultaneously, or to sort a multidimensional array
    in one or more dimensions. The input arrays are treated as columns in a table
    to be sorted by rows—the first array is the primary sort. Any values that compare
    the same according to that sort are sorted by the next input array, and so on.
  id: totrans-1290
  prefs: []
  type: TYPE_NORMAL
  zh: 用于同时对几个数组进行排序，或者对多维数组的一维或多维进行排序。输入数组被视为表中的列，按行排序——第一个数组是主要排序。根据该排序相同的任何值按照下一个输入数组进行排序，依此类推。
- en: 'The first argument is an array; following that, each argument may be an array
    or one of the following order flags (the order flags are used to change the default
    order of the sort):'
  id: totrans-1291
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数是一个数组；随后，每个参数可以是一个数组或以下排序标志之一（排序标志用于更改排序的默认顺序）：
- en: '| `SORT_ASC` (default) | Sort in ascending order |'
  id: totrans-1292
  prefs: []
  type: TYPE_TB
  zh: '| `SORT_ASC`（默认） | 按升序排序 |'
- en: '| `SORT_DESC` | Sort in descending order |'
  id: totrans-1293
  prefs: []
  type: TYPE_TB
  zh: '| `SORT_DESC` | 按降序排序 |'
- en: 'After that, a sorting type from the following list can be specified:'
  id: totrans-1294
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，可以指定以下列表中的排序类型：
- en: '| `SORT_REGULAR` (default) | Compare items normally |'
  id: totrans-1295
  prefs: []
  type: TYPE_TB
  zh: '| `SORT_REGULAR`（默认） | 普通比较项目 |'
- en: '| `SORT_NUMERIC` | Compare items numerically |'
  id: totrans-1296
  prefs: []
  type: TYPE_TB
  zh: '| `SORT_NUMERIC` | 按数值比较项目 |'
- en: '| `SORT_STRING` | Compare items as strings |'
  id: totrans-1297
  prefs: []
  type: TYPE_TB
  zh: '| `SORT_STRING` | 按字符串比较项目 |'
- en: The sorting flags apply only to the immediately preceding array, and they revert
    to `SORT_ASC` and `SORT_REGULAR` before each new array argument.
  id: totrans-1298
  prefs: []
  type: TYPE_NORMAL
  zh: 排序标志仅适用于紧接在前面的数组，并在每个新数组参数之前恢复为 `SORT_ASC` 和 `SORT_REGULAR`。
- en: This function returns `true` if the operation was successful and `false` otherwise.
  id: totrans-1299
  prefs: []
  type: TYPE_NORMAL
  zh: 如果操作成功则返回 `true`，否则返回 `false`。
- en: array_pad
  id: totrans-1300
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: array_pad
- en: '`array array_pad(array` *input*`, int` *size*`[, mixed` *padding*`])`'
  id: totrans-1301
  prefs: []
  type: TYPE_NORMAL
  zh: '`array array_pad(array` *input*`, int` *size*`[, mixed` *padding*`])`'
- en: Returns a copy of the input array padded to the length specified by *size*.
    Any new elements added to the array have the value of the optional third value.
    You can add elements to the beginning of the array by specifying a negative size—in
    this case, the new size of the array is the absolute value of the size.
  id: totrans-1302
  prefs: []
  type: TYPE_NORMAL
  zh: 返回输入数组的副本，填充到由 *size* 指定的长度。添加到数组的任何新元素都具有可选的第三个值的值。通过指定负数大小，可以将元素添加到数组的开头——在这种情况下，数组的新大小是大小的绝对值。
- en: If the array already has the specified number of elements or more, no padding
    takes place and an exact copy of the original array is returned.
  id: totrans-1303
  prefs: []
  type: TYPE_NORMAL
  zh: 如果数组已经具有指定数量的元素或更多，则不进行填充，并返回原始数组的精确副本。
- en: array_pop
  id: totrans-1304
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: array_pop
- en: '`mixed array_pop(array &`*stack*`)`'
  id: totrans-1305
  prefs: []
  type: TYPE_NORMAL
  zh: '`mixed array_pop(array &`*stack*`)`'
- en: Removes the last value from the given array and returns it. If the array is
    empty (or the argument is not an array), returns `NULL`. Note that the array pointer
    is reset on the provided array.
  id: totrans-1306
  prefs: []
  type: TYPE_NORMAL
  zh: 从给定数组中移除最后一个值并返回它。如果数组为空（或参数不是数组），则返回 `NULL`。请注意，提供的数组上的数组指针将被重置。
- en: array_product
  id: totrans-1307
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: array_product
- en: '`number array_product(array` *array*`)`'
  id: totrans-1308
  prefs: []
  type: TYPE_NORMAL
  zh: '`number array_product(array` *array*`)`'
- en: Returns the product of every element in *array*. If each value in *array* is
    an integer, the resulting product is an integer; otherwise, the resulting product
    is a float.
  id: totrans-1309
  prefs: []
  type: TYPE_NORMAL
  zh: 返回 *array* 中每个元素的乘积。如果 *array* 中的每个值都是整数，则结果乘积为整数；否则，结果乘积为浮点数。
- en: array_push
  id: totrans-1310
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: array_push
- en: '`int array_push(array &`*array*`, mixed` *value1*`[, ... mixed` *valueN*`])`'
  id: totrans-1311
  prefs: []
  type: TYPE_NORMAL
  zh: '`int array_push(array &`*array*`, mixed` *value1*`[, ... mixed` *valueN*`])`'
- en: Adds the given values to the end of the array specified in the first argument
    and returns the new size of the array. Performs the same function as calling `$array[]
    = $value` for each of the values in the list.
  id: totrans-1312
  prefs: []
  type: TYPE_NORMAL
  zh: 将给定值添加到第一个参数指定的数组末尾，并返回数组的新大小。对于列表中的每个值，执行与调用 `$array[] = $value` 相同的功能。
- en: array_rand
  id: totrans-1313
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: array_rand
- en: '`mixed array_rand(array` *array*`[, int` *count*`])`'
  id: totrans-1314
  prefs: []
  type: TYPE_NORMAL
  zh: '`mixed array_rand(array` *array*`[, int` *count*`])`'
- en: Picks a random element from the given array. The second (optional) parameter
    can be given to specify a number of elements to pick and return. If more than
    one element is returned, an array of keys is returned, rather than the element’s
    value.
  id: totrans-1315
  prefs: []
  type: TYPE_NORMAL
  zh: 从给定数组中随机选择一个元素。第二个（可选）参数可以给出以指定要选择和返回的元素数量。如果返回多个元素，则返回键的数组，而不是元素的值。
- en: array_reduce
  id: totrans-1316
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: array_reduce
- en: '`mixed array_reduce(array` *array*`, mixed` *callback*`[, int` *initial*`])`'
  id: totrans-1317
  prefs: []
  type: TYPE_NORMAL
  zh: '`mixed array_reduce(array` *array*`, mixed` *callback*`[, int` *initial*`])`'
- en: Returns a value derived by iteratively calling the given callback function with
    pairs of values from the array. If the third parameter is supplied, it, along
    with the first element in the array, is passed to the callback function for the
    initial call.
  id: totrans-1318
  prefs: []
  type: TYPE_NORMAL
  zh: 通过迭代调用给定的回调函数和数组中的值对，派生出一个值。如果提供了第三个参数，则将其与数组中的第一个元素一起传递给回调函数进行初始调用。
- en: array_replace
  id: totrans-1319
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: array_replace
- en: '`array array_replace(array` *array1*`, array` *array2*`[, ... array` *arrayN*`])`'
  id: totrans-1320
  prefs: []
  type: TYPE_NORMAL
  zh: '`array array_replace(array` *array1*`, array` *array2*`[, ... array` *arrayN*`])`'
- en: Returns an array created by replacing values in *array1* with values from the
    other arrays. Elements in *array1* with keys matching in the replacement arrays
    are replaced with the values of those elements.
  id: totrans-1321
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个由替换值中的值替换 *array1* 中的值而创建的数组。 *array1* 中与替换数组中的键匹配的元素将被这些元素的值替换。
- en: If multiple replacement arrays are provided, they are processed in order. Any
    elements in *array1* whose keys do not match any keys in the replacement arrays
    are preserved.
  id: totrans-1322
  prefs: []
  type: TYPE_NORMAL
  zh: 如果提供了多个替换数组，则按顺序处理。保留在 *array1* 中的任何键不匹配替换数组中任何键的元素。
- en: array_replace_recursive
  id: totrans-1323
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: array_replace_recursive
- en: '`array array_replace_recursive(array` *array1*`, array` *array2*`[, ... array`
    *arrayN*`])`'
  id: totrans-1324
  prefs: []
  type: TYPE_NORMAL
  zh: '`array array_replace_recursive(array` *array1*`, array` *array2*`[, ... array`
    *arrayN*`])`'
- en: Returns an array created by replacing values in *array1* with values from the
    other arrays. Elements in *array1* with keys matching in the replacement arrays
    are replaced with the values of those elements.
  id: totrans-1325
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个由替换值中的值替换 *array1* 中的值而创建的数组。 *array1* 中与替换数组中的键匹配的元素将被这些元素的值替换。
- en: If the value in both *array1* and a replacement array for a particular key are
    arrays, those values in those arrays are recursively merged using the same process.
  id: totrans-1326
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 *array1* 和特定键的替换数组中的值都是数组，则使用相同的过程递归合并这些数组中的值。
- en: If multiple replacement arrays are provided, they are processed in order. Any
    elements in *array1* whose keys do not match any keys in the replacement arrays
    are preserved.
  id: totrans-1327
  prefs: []
  type: TYPE_NORMAL
  zh: 如果提供了多个替换数组，则按顺序处理。保留在 *array1* 中的任何键不匹配替换数组中任何键的元素。
- en: array_reverse
  id: totrans-1328
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: array_reverse
- en: '`array array_reverse(array` *array*`[, bool` *preserve_keys*`])`'
  id: totrans-1329
  prefs: []
  type: TYPE_NORMAL
  zh: '`array array_reverse(array` *array*`[, bool` *preserve_keys*`])`'
- en: Returns an array containing the same elements as the input array, but whose
    order is reversed. If `preserve_keys` is set to `true`, then numeric keys are
    preserved. Non-numeric keys are not affected by this parameter and are always
    preserved.
  id: totrans-1330
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个包含与输入数组相同元素的数组，但其顺序相反。如果 `preserve_keys` 设置为 `true`，则保留数值键。非数值键不受此参数影响，始终保留。
- en: array_search
  id: totrans-1331
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: array_search
- en: '`mixed array_search(mixed` *value*`, array` *array*`[, bool` *strict*`])`'
  id: totrans-1332
  prefs: []
  type: TYPE_NORMAL
  zh: '`mixed array_search(mixed` *value*`, array` *array*`[, bool` *strict*`])`'
- en: Performs a search for a value in an array, as with `in_array()`. If the value
    is found, the key of the matching element is returned; `NULL` is returned if the
    value is not found. If *strict* is specified and is `true`, a matched element
    is returned only when it is of the same type and value as *value*.
  id: totrans-1333
  prefs: []
  type: TYPE_NORMAL
  zh: 执行在数组中搜索值的操作，类似于 `in_array()`。如果找到值，则返回匹配元素的键；如果未找到值，则返回 `NULL`。如果指定了 *strict*
    并且为 `true`，则仅当匹配的元素与 *value* 的类型和值相同时才返回。
- en: array_shift
  id: totrans-1334
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: array_shift
- en: '`mixed array_shift(array` *stack*`)`'
  id: totrans-1335
  prefs: []
  type: TYPE_NORMAL
  zh: '`mixed array_shift(array` *stack*`)`'
- en: Similar to `array_pop()`, but instead of removing and returning the last element
    in the array, it removes and returns the first element in the array. If the array
    is empty, or if the argument is not an array, returns `NULL`.
  id: totrans-1336
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于 `array_pop()`，但不是移除并返回数组中的最后一个元素，而是移除并返回数组中的第一个元素。如果数组为空，或者参数不是数组，则返回 `NULL`。
- en: array_slice
  id: totrans-1337
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: array_slice
- en: '`array array_slice(array` *array*`, int` *offset*`[, int` *length*`][, bool
    keepkeys])`'
  id: totrans-1338
  prefs: []
  type: TYPE_NORMAL
  zh: '`array array_slice(array` *array*`, int` *offset*`[, int` *length*`][, bool
    keepkeys])`'
- en: Returns an array containing a set of elements pulled from the given array. If
    *offset* is a positive number, elements starting from that index onward are used;
    if *offset* is a negative number, elements starting that many elements from the
    end of the array are used. If the third argument is provided and is a positive
    number, that many elements are returned; if negative, the sequence stops that
    many elements from the end of the array. If the third argument is omitted, the
    sequence returned contains all elements from the offset to the end of the array.
    If `keepkeys`, the fourth argument, is `true`, then the order of numeric keys
    will be preserved; otherwise, they will be renumbered and resorted.
  id: totrans-1339
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个包含从给定数组中提取的一组元素的数组。如果 *offset* 是正数，则使用从该索引开始的元素；如果 *offset* 是负数，则使用从数组末尾开始的那么多元素。如果提供了第三个参数并且是正数，则返回这么多元素；如果是负数，则从数组末尾开始计算停止这么多元素。如果省略了第三个参数，则返回包含从
    *offset* 到数组末尾的所有元素的序列。如果 `keepkeys`，即第四个参数为 `true`，则保留数字键的顺序；否则，它们将被重新编号和重新排序。
- en: array_splice
  id: totrans-1340
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: array_splice
- en: '`array array_splice(array` *array*`, int` *offset*`[, int` *length*`[, array`
    *replacement*`]])`'
  id: totrans-1341
  prefs: []
  type: TYPE_NORMAL
  zh: '`array array_splice(array` *array*`, int` *offset*`[, int` *length*`[, array`
    *replacement*`]])`'
- en: Selects a sequence of elements using the same rules as `array_slice()`, but
    instead of being returned, those elements are either removed or, if the fourth
    argument is provided, replaced with that array. An array containing the removed
    (or replaced) elements is returned.
  id: totrans-1342
  prefs: []
  type: TYPE_NORMAL
  zh: 使用与`array_slice()`相同的规则选择一系列元素，但不返回这些元素，而是将它们删除或者如果提供了第四个参数，则替换为该数组。返回一个包含已删除（或替换）元素的数组。
- en: array_sum
  id: totrans-1343
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: array_sum
- en: '`number array_sum(array` *array*`)`'
  id: totrans-1344
  prefs: []
  type: TYPE_NORMAL
  zh: '`number array_sum(array` *array*`)`'
- en: Returns the sum of every element in the array. If all of the values are integers,
    an integer is returned. If any of the values are floats, a float is returned.
  id: totrans-1345
  prefs: []
  type: TYPE_NORMAL
  zh: 返回数组中每个元素的总和。如果所有的值都是整数，则返回整数。如果任何值是浮点数，则返回浮点数。
- en: array_udiff
  id: totrans-1346
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: array_udiff
- en: '`array array_udiff(array` *array1*`, array` *array2*`[, ... array` *arrayN*`],
    string` *function*`)`'
  id: totrans-1347
  prefs: []
  type: TYPE_NORMAL
  zh: '`array array_udiff(array` *array1*`, array` *array2*`[, ... array` *arrayN*`],
    string` *function*`)`'
- en: Returns an array containing all the values in *array1* that are not present
    in any of the other arrays. Only the values are used to check for equality; that
    is, `"a" => 1` and `"b" => 1` are considered equal. The function *function* is
    used to compare the values of the elements for equality. The function is called
    with two parameters—the values to compare. It should return an integer less than
    zero if the first argument is less than the second, `0` if the first and second
    arguments are equal, and an integer greater than zero if the first argument is
    greater than the second. The keys of the values are preserved.
  id: totrans-1348
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个包含 *array1* 中所有未出现在任何其他数组中的值的数组。只使用值来检查相等性；即 `"a" => 1` 和 `"b" => 1` 被视为相等。函数
    *function* 用于比较元素的值是否相等。该函数使用两个参数——要比较的值。如果第一个参数小于第二个参数，则返回小于零的整数；如果第一个和第二个参数相等，则返回
    `0`；如果第一个参数大于第二个参数，则返回大于零的整数。保留值的键。
- en: array_udiff_assoc
  id: totrans-1349
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: array_udiff_assoc
- en: '`array array_udiff_assoc(array` *array1*`, array` *array2* `[, ... array` *arrayN*`],
    string` *function*`)`'
  id: totrans-1350
  prefs: []
  type: TYPE_NORMAL
  zh: '`array array_udiff_assoc(array` *array1*`, array` *array2* `[, ... array` *arrayN*`],
    string` *function*`)`'
- en: Returns an array containing all the values in *array1* that are not present
    in any of the other arrays. Both keys and values are used to check for equality;
    that is, `"a" => 1` and `"b" => 1` are not considered equal. The function *function*
    is used to compare the values of the elements for equality. The function is called
    with two parameters—the values to compare. It should return an integer less than
    zero if the first argument is less than the second, `0` if the first and second
    arguments are equal, and an integer greater than zero if the first argument is
    greater than the second. The keys of the values are preserved.
  id: totrans-1351
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个包含所有在*array1*中不存在于任何其他数组中的值的数组。键和值都用于检查相等性；即`"a" => 1`和`"b" => 1`不被认为是相等的。函数*function*用于比较元素的值是否相等。该函数使用两个参数调用——要比较的值。如果第一个参数小于第二个参数，则应返回小于零的整数，如果第一个和第二个参数相等，则应返回`0`，如果第一个参数大于第二个参数，则应返回大于零的整数。值的键将被保留。
- en: array_udiff_uassoc
  id: totrans-1352
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: array_udiff_uassoc
- en: '`array array_udiff_uassoc(array` *array1*`, array` *array2*`[, ... array` *arrayN*`],
    string` *function1*`, string` *function2*`)`'
  id: totrans-1353
  prefs: []
  type: TYPE_NORMAL
  zh: '`array array_udiff_uassoc(array` *array1*`, array` *array2*`[, ... array` *arrayN*`],
    string` *function1*`, string` *function2*`)`'
- en: Returns an array containing all the values in *array1* that are not present
    in any of the other arrays. Both keys and values are used to check for equality;
    that is, `"a" => 1` and `"b" => 1` are not considered equal. The function *function1*
    is used to compare the values of the elements for equality. The function *function2*
    is used to compare the values of the keys for equality. Each function is called
    with two parameters—the values to compare. It should return an integer less than
    zero if the first argument is less than the second, `0` if the first and second
    arguments are equal, and an integer greater than zero if the first argument is
    greater than the second. The keys of the values are preserved.
  id: totrans-1354
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个包含所有在*array1*中不存在于任何其他数组中的值的数组。键和值都用于检查相等性；即`"a" => 1`和`"b" => 1`不被认为是相等的。函数*function1*用于比较元素的值是否相等。函数*function2*用于比较键的值是否相等。每个函数使用两个参数调用——要比较的值。如果第一个参数小于第二个参数，则应返回小于零的整数，如果第一个和第二个参数相等，则应返回`0`，如果第一个参数大于第二个参数，则应返回大于零的整数。值的键将被保留。
- en: array_uintersect
  id: totrans-1355
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: array_uintersect
- en: '`array array_uintersect(array` *array1*`, array` *array2* `[, ... array` *arrayN*`],
    string` *function*`)`'
  id: totrans-1356
  prefs: []
  type: TYPE_NORMAL
  zh: '`array array_uintersect(array` *array1*`, array` *array2* `[, ... array` *arrayN*`],
    string` *function*`)`'
- en: Returns an array containing all the values in *array1* that are present in all
    of the other arrays. Only the values are used to check for equality; that is,
    `"a" => 1` and `"b" => 1` are considered equal. The function *function* is used
    to compare the values of the elements for equality. The function is called with
    two parameters—the values to compare. It should return an integer less than zero
    if the first argument is less than the second, `0` if the first and second arguments
    are equal, and an integer greater than zero if the first argument is greater than
    the second. The keys of the values are preserved.
  id: totrans-1357
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个包含所有在*array1*中存在于所有其他数组中的值的数组。仅使用值来检查相等性；即`"a" => 1`和`"b" => 1`被认为是相等的。函数*function*用于比较元素的值是否相等。该函数使用两个参数调用——要比较的值。如果第一个参数小于第二个参数，则应返回小于零的整数，如果第一个和第二个参数相等，则应返回`0`，如果第一个参数大于第二个参数，则应返回大于零的整数。值的键将被保留。
- en: array_uintersect_assoc
  id: totrans-1358
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: array_uintersect_assoc
- en: '`array array_uintersect_assoc(array` *array1*`, array` *array2*`[, ... array`
    *arrayN*`], string` *function*`)`'
  id: totrans-1359
  prefs: []
  type: TYPE_NORMAL
  zh: '`array array_uintersect_assoc(array` *array1*`, array` *array2*`[, ... array`
    *arrayN*`], string` *function*`)`'
- en: Returns an array containing all the values in *array1* that are present in all
    of the other arrays. Both keys and values are used to check for equality; that
    is, `"a" => 1` and `"b" => 1` are not considered equal. The function *function*
    is used to compare the values of the elements for equality. The function is called
    with two parameters—the values to compare. It should return an integer less than
    zero if the first argument is less than the second, `0` if the first and second
    arguments are equal, and an integer greater than zero if the first argument is
    greater than the second. The keys of the values are preserved.
  id: totrans-1360
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个包含所有在*array1*中存在于所有其他数组中的值的数组。键和值都用于检查相等性；即`"a" => 1`和`"b" => 1`不被认为是相等的。函数*function*用于比较元素的值是否相等。该函数使用两个参数调用——要比较的值。如果第一个参数小于第二个参数，则应返回小于零的整数，如果第一个和第二个参数相等，则应返回`0`，如果第一个参数大于第二个参数，则应返回大于零的整数。值的键将被保留。
- en: array_uintersect_uassoc
  id: totrans-1361
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: array_uintersect_uassoc
- en: '`array array_uintersect_uassoc(array` *array1*`, array` *array2*`[, ... array`
    *arrayN*`], string` *function1*`, string` *function2*`)`'
  id: totrans-1362
  prefs: []
  type: TYPE_NORMAL
  zh: '`array array_uintersect_uassoc(array` *array1*`, array` *array2*`[, ... array`
    *arrayN*`], string` *function1*`, string` *function2*`)`'
- en: Returns an array containing all the values in the first array that are also
    present in all of the other arrays. Both keys and values are used to check for
    equality; that is, `"a" => 1` and `"b" => 1` are not considered equal. The function
    *function1* is used to compare the values of the elements for equality. The function
    *function2* is used to compare the values of the keys for equality. Each function
    is called with two parameters—the values to compare. It should return an integer
    less than zero if the first argument is less than the second, `0` if the first
    and second arguments are equal, and an integer greater than zero if the first
    argument is greater than the second. The keys of the values are preserved.
  id: totrans-1363
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个包含第一个数组中所有其他数组中也存在的值的数组。同时使用键和值来检查相等性；即，`"a" => 1`和`"b" => 1`不被视为相等。使用*function1*函数比较元素的值相等性。使用*function2*函数比较键的值相等性。每个函数都接收两个参数——要比较的值。如果第一个参数小于第二个参数，则返回小于零的整数，如果第一个和第二个参数相等，则返回`0`，如果第一个参数大于第二个参数，则返回大于零的整数。保留值的键。
- en: array_unique
  id: totrans-1364
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: array_unique
- en: '`array array_unique(array` *array*`[, int sort_flags])`'
  id: totrans-1365
  prefs: []
  type: TYPE_NORMAL
  zh: '`array array_unique(array` *array*`[, int sort_flags])`'
- en: 'Creates and returns an array containing each element in the given array. If
    any values are duplicated, the later values are ignored. The `sort_flags` optional
    argument can be used to alter the sorting methods with constants: `SORT_REGULAR`,
    `SORT_NUMERIC`, `SORT_STRING` (default), and `SORT_LOCALE_STRING`. Keys from the
    original array are preserved.'
  id: totrans-1366
  prefs: []
  type: TYPE_NORMAL
  zh: 创建并返回一个包含给定数组中每个元素的数组。如果有重复的值，则忽略后续值。可使用`sort_flags`可选参数以常量`SORT_REGULAR`、`SORT_NUMERIC`、`SORT_STRING`（默认值）和`SORT_LOCALE_STRING`改变排序方法。保留原始数组的键。
- en: array_unshift
  id: totrans-1367
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: array_unshift
- en: '`int array_unshift(array` *stack*`, mixed` *value1*`[, ... mixed` *valueN*`])`'
  id: totrans-1368
  prefs: []
  type: TYPE_NORMAL
  zh: '`int array_unshift(array` *stack*`, mixed` *value1*`[, ... mixed` *valueN*`])`'
- en: Returns a copy of the given array with the additional arguments added to the
    beginning of the array; the added elements are added as a whole, so the elements
    as they appear in the array are in the same order as they appear in the argument
    list. Returns the number of elements in the new array.
  id: totrans-1369
  prefs: []
  type: TYPE_NORMAL
  zh: 返回给定数组的副本，并将额外的参数添加到数组的开头；添加的元素作为一个整体添加，因此数组中的元素与参数列表中的元素按照它们在列表中出现的顺序相同。返回新数组中的元素数目。
- en: array_values
  id: totrans-1370
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: array_values
- en: '`array array_values(array` *array*`)`'
  id: totrans-1371
  prefs: []
  type: TYPE_NORMAL
  zh: '`array array_values(array` *array*`)`'
- en: Returns an array containing all of the values from the input array. The keys
    for those values are not retained.
  id: totrans-1372
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个包含输入数组中所有值的数组。不保留这些值的键。
- en: array_walk
  id: totrans-1373
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: array_walk
- en: '`bool array_walk(array` *input*`, string` *callback*`[, mixed` *user_data*`])`'
  id: totrans-1374
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool array_walk(array` *input*`, string` *callback*`[, mixed` *user_data*`])`'
- en: Calls the named function for each element in the array. The function is called
    with the element’s value, key, and optional user data as arguments. To ensure
    that the function works directly on the values of the array, define the first
    parameter of the function by reference. Returns `true` on success, and `false`
    on failure.
  id: totrans-1375
  prefs: []
  type: TYPE_NORMAL
  zh: 对数组中的每个元素调用命名函数。将以元素的值、键和可选用户数据作为参数调用该函数。为确保函数直接作用于数组的值，请通过引用定义函数的第一个参数。成功时返回`true`，失败时返回`false`。
- en: array_walk_recursive
  id: totrans-1376
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: array_walk_recursive
- en: '`bool array_walk_recursive(array` *input*`, string` *function*`[, mixed` *user_data*`])`'
  id: totrans-1377
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool array_walk_recursive(array` *input*`, string` *function*`[, mixed` *user_data*`])`'
- en: Like `array_walk()`, calls the named function for each element in the array.
    Unlike in `array_walk()`, if an element’s value is an array, the function is called
    for each element in that array as well. The function is called with the element’s
    value, key, and optional user data as arguments. To ensure that the function works
    directly on the values of the array, define the first parameter of the function
    by reference. Returns `true` on success, and `false` on failure.
  id: totrans-1378
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于`array_walk()`，对数组中的每个元素调用命名函数。与`array_walk()`不同的是，如果元素的值是数组，则也会为该数组中的每个元素调用该函数。将以元素的值、键和可选用户数据作为参数调用该函数。为确保函数直接作用于数组的值，请通过引用定义函数的第一个参数。成功时返回`true`，失败时返回`false`。
- en: arsort
  id: totrans-1379
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: arsort
- en: '`bool arsort(array` *array*`[, int` *flags*`])`'
  id: totrans-1380
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool arsort(array` *array*`[, int` *flags*`])`'
- en: Sorts an array in reverse order, maintaining the keys for the array values.
    The optional second parameter contains additional sorting flags. Returns `true`
    on success, and `false` on failure. See [Chapter 5](ch05.xhtml#array) and `sort`
    for more information on using this function.
  id: totrans-1381
  prefs: []
  type: TYPE_NORMAL
  zh: 对数组按相反的顺序进行排序，保持数组值的键。可选的第二个参数包含额外的排序标志。成功时返回`true`，失败时返回`false`。有关使用此函数的更多信息，请参见[第5章](ch05.xhtml#array)和`sort`。
- en: asin
  id: totrans-1382
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: asin
- en: '`float asin(float` *value*`)`'
  id: totrans-1383
  prefs: []
  type: TYPE_NORMAL
  zh: '`float asin(float` *value*`)`'
- en: Returns the arc sine of *value* in radians.
  id: totrans-1384
  prefs: []
  type: TYPE_NORMAL
  zh: 返回以弧度表示的*value*的反正弦。
- en: asinh
  id: totrans-1385
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: asinh
- en: '`float asinh(float` *value*`)`'
  id: totrans-1386
  prefs: []
  type: TYPE_NORMAL
  zh: '`float asinh(float` *value*`)`'
- en: Returns the inverse hyperbolic sine of *value*.
  id: totrans-1387
  prefs: []
  type: TYPE_NORMAL
  zh: 返回*value*的反双曲正弦。
- en: asort
  id: totrans-1388
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: asort
- en: '`bool asort(array` *array*`[, int` *flags*`])`'
  id: totrans-1389
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool asort(array` *array*`[, int` *flags*`])`'
- en: Sorts an array, maintaining the keys for the array values. The optional second
    parameter contains additional sorting flags. Returns `true` on success, and `false`
    on failure. See [Chapter 5](ch05.xhtml#array) and `sort` for more information
    on using this function.
  id: totrans-1390
  prefs: []
  type: TYPE_NORMAL
  zh: 对数组进行排序，保持数组值的键。可选的第二个参数包含额外的排序标志。成功时返回`true`，失败时返回`false`。有关使用此函数的更多信息，请参见[第5章](ch05.xhtml#array)和`sort`。
- en: assert
  id: totrans-1391
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: assert
- en: '`bool assert(string|bool` *assertion*`[, string description])`'
  id: totrans-1392
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool assert(string|bool` *assertion*`[, string description])`'
- en: If *assertion* is `true`, generates a warning in executing the code. If *assertion*
    is a string, `assert()` evaluates that string as PHP code. The optional second
    argument allows for additional text to be added in with the failure message. Check
    the `assert_options()` function to see its related connection.
  id: totrans-1393
  prefs: []
  type: TYPE_NORMAL
  zh: 如果*assertion*为`true`，则在执行代码时生成警告。如果*assertion*是一个字符串，则`assert()`将该字符串作为PHP代码进行评估。可选的第二个参数允许在失败消息中添加额外的文本。查看`assert_options()`函数以查看其相关连接。
- en: assert_options
  id: totrans-1394
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: assert_options
- en: '`mixed assert_options(int` *option*`[, mixed` *value*`])`'
  id: totrans-1395
  prefs: []
  type: TYPE_NORMAL
  zh: '`mixed assert_options(int` *option*`[, mixed` *value*`])`'
- en: 'If *value* is specified, sets the assert control option *option* to *value*
    and returns the previous setting. If *value* is not specified, returns the current
    value of *option*. The following values for *option* are allowed:'
  id: totrans-1396
  prefs: []
  type: TYPE_NORMAL
  zh: 如果指定了*value*，则将断言控制选项*option*设置为*value*并返回先前的设置。如果未指定*value*，则返回*option*的当前值。*option*的以下值是允许的：
- en: '| `ASSERT_ACTIVE` | Enable assertions |'
  id: totrans-1397
  prefs: []
  type: TYPE_TB
  zh: '| `ASSERT_ACTIVE` | 启用断言 |'
- en: '| `ASSERT_WARNING` | Have assertions generate warnings |'
  id: totrans-1398
  prefs: []
  type: TYPE_TB
  zh: '| `ASSERT_WARNING` | 生成警告以显示断言 |'
- en: '| `ASSERT_BAIL` | Have execution of the script halt on an assertion |'
  id: totrans-1399
  prefs: []
  type: TYPE_TB
  zh: '| `ASSERT_BAIL` | 在断言上终止脚本的执行 |'
- en: '| `ASSERT_QUIET_EVAL` | Disable error reporting while evaluating assertion
    code given to the `assert()` function |'
  id: totrans-1400
  prefs: []
  type: TYPE_TB
  zh: '| `ASSERT_QUIET_EVAL` | 在评估传递给`assert()`函数的断言代码时禁用错误报告 |'
- en: '| `ASSERT_CALLBACK` | Call the specified user function to handle an assertion.
    Assertion callbacks are called with three arguments: the file, the line, and the
    expression where the assertion failed |'
  id: totrans-1401
  prefs: []
  type: TYPE_TB
  zh: '| `ASSERT_CALLBACK` | 调用指定的用户函数处理断言。断言回调以三个参数调用：文件、行和断言失败的表达式 |'
- en: atan
  id: totrans-1402
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: atan
- en: '`float atan(float` *value*`)`'
  id: totrans-1403
  prefs: []
  type: TYPE_NORMAL
  zh: '`float atan(float` *value*`)`'
- en: Returns the arc tangent of *value* in radians.
  id: totrans-1404
  prefs: []
  type: TYPE_NORMAL
  zh: 返回以弧度表示的*value*的反正切。
- en: atan2
  id: totrans-1405
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: atan2
- en: '`float atan2(float` *y*`, float` *x*`)`'
  id: totrans-1406
  prefs: []
  type: TYPE_NORMAL
  zh: '`float atan2(float` *y*`, float` *x*`)`'
- en: Using the signs of both parameters to determine the quadrant the value is in,
    returns the arc tangent of *x* and *y* in radians.
  id: totrans-1407
  prefs: []
  type: TYPE_NORMAL
  zh: 使用两个参数的符号确定值所在的象限，返回以弧度表示的*x*和*y*的反正切。
- en: atanh
  id: totrans-1408
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: atanh
- en: '`float atanh(float` *value*`)`'
  id: totrans-1409
  prefs: []
  type: TYPE_NORMAL
  zh: '`float atanh(float` *value*`)`'
- en: Returns the inverse hyperbolic tangent of *value*.
  id: totrans-1410
  prefs: []
  type: TYPE_NORMAL
  zh: 返回*value*的反双曲正切。
- en: base_convert
  id: totrans-1411
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: base_convert
- en: '`string base_convert(string` *number*`, int` *from*`, int` *to*`)`'
  id: totrans-1412
  prefs: []
  type: TYPE_NORMAL
  zh: '`string base_convert(string` *number*`, int` *from*`, int` *to*`)`'
- en: Converts *number* from one base to another. The base the number is currently
    in is *from*, and the base to convert to is *to*. The bases to convert from and
    to must be between 2 and 36\. Digits in a base higher than 10 are represented
    with the letters `a` (10) through `z` (35). Up to a 32-bit number, or 2,147,483,647
    decimal, can be converted.
  id: totrans-1413
  prefs: []
  type: TYPE_NORMAL
  zh: 将*number*从一种基数转换为另一种基数。当前数字所在的基数是*from*，要转换的基数是*to*。要从和转换的基数必须在2到36之间。在大于10的基数中，使用字母`a`（10）到`z`（35）表示数字。可以转换的最大32位数字或10进制2,147,483,647。
- en: base64_decode
  id: totrans-1414
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: base64_decode
- en: '`string base64_decode(string` *data*`)`'
  id: totrans-1415
  prefs: []
  type: TYPE_NORMAL
  zh: '`string base64_decode(string` *data*`)`'
- en: Decodes *data*, which is base-64-encoded data, into a string (which may contain
    binary data). For more information on base-64 encoding, see RFC 2045.
  id: totrans-1416
  prefs: []
  type: TYPE_NORMAL
  zh: 将经过base-64编码的数据*data*解码为字符串（可能包含二进制数据）。有关base-64编码的更多信息，请参见RFC 2045。
- en: base64_encode
  id: totrans-1417
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: base64_encode
- en: '`string base64_encode(string` *data*`)`'
  id: totrans-1418
  prefs: []
  type: TYPE_NORMAL
  zh: '`string base64_encode(string` *data*`)`'
- en: Returns a base-64-encoded version of *data*. MIME base-64 encoding is designed
    to allow binary or other 8-bit data to survive transition through protocols that
    may not be 8-bit safe, such as email messages.
  id: totrans-1419
  prefs: []
  type: TYPE_NORMAL
  zh: 返回*data*的Base64编码版本。MIME Base64编码旨在允许二进制或其他8位数据在通过可能不安全的8位协议（如电子邮件消息）时保持完整性。
- en: basename
  id: totrans-1420
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: basename
- en: '`string basename(string` *path*`[, string` *suffix*`])`'
  id: totrans-1421
  prefs: []
  type: TYPE_NORMAL
  zh: '`string basename(string *path*[, string *suffix*])`'
- en: 'Returns the filename component from the full path *path*. If the file’s name
    ends in *suffix*, that string is removed from the name. For example:'
  id: totrans-1422
  prefs: []
  type: TYPE_NORMAL
  zh: 从完整路径*path*中返回文件名组件。如果文件名以*suffix*结尾，则从名称中删除该字符串。例如：
- en: '[PRE2]'
  id: totrans-1423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: bin2hex
  id: totrans-1424
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: bin2hex
- en: '`string bin2hex(string` *binary*`)`'
  id: totrans-1425
  prefs: []
  type: TYPE_NORMAL
  zh: '`string bin2hex(string *binary*)`'
- en: Converts *binary* to a hexadecimal (base-16) value. Up to a 32-bit number, or
    2,147,483,647 decimal, can be converted.
  id: totrans-1426
  prefs: []
  type: TYPE_NORMAL
  zh: 将*binary*转换为十六进制（基数16）值。可以转换为32位数，或者十进制的2,147,483,647。
- en: bindec
  id: totrans-1427
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: bindec
- en: '`number bindec(string` *binary*`)`'
  id: totrans-1428
  prefs: []
  type: TYPE_NORMAL
  zh: '`number bindec(string *binary*)`'
- en: Converts *binary* to a decimal value. Up to a 32-bit number, or 2,147,483,647
    decimal, can be converted.
  id: totrans-1429
  prefs: []
  type: TYPE_NORMAL
  zh: 将*binary*转换为十进制值。可以转换为32位数，或者十进制的2,147,483,647。
- en: call_user_func
  id: totrans-1430
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: call_user_func
- en: '`mixed call_user_func(string` *function*`[, mixed` *parameter1*`[, ... mixed`
    *parameterN*`]])`'
  id: totrans-1431
  prefs: []
  type: TYPE_NORMAL
  zh: '`mixed call_user_func(string *function*[, mixed *parameter1*[, ... mixed *parameterN*]])`'
- en: Calls the function given in the first parameter. Additional parameters are used
    as such when calling the function. The comparison to check for a matching function
    is case-insensitive. Returns the value returned by the function.
  id: totrans-1432
  prefs: []
  type: TYPE_NORMAL
  zh: 调用第一个参数中给出的函数。额外的参数在调用函数时使用。检查匹配函数时不区分大小写。返回函数返回的值。
- en: call_user_func_array
  id: totrans-1433
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: call_user_func_array
- en: '`mixed call_user_func_array(string` *function*`, array` *parameters*`)`'
  id: totrans-1434
  prefs: []
  type: TYPE_NORMAL
  zh: '`mixed call_user_func_array(string *function*, array *parameters*)`'
- en: Similar to `call_user_func()`, this function calls the function named *function*
    with the parameters in the array *parameters*. The comparison to check for a matching
    function is case-insensitive. Returns the value returned by the function.
  id: totrans-1435
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于`call_user_func()`，此函数调用名为*function*的函数，并使用数组*parameters*中的参数进行调用。检查匹配函数时不区分大小写。返回函数返回的值。
- en: ceil
  id: totrans-1436
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: ceil
- en: '`float ceil(float` *number*`)`'
  id: totrans-1437
  prefs: []
  type: TYPE_NORMAL
  zh: '`float ceil(float *number*)`'
- en: Returns the next highest value to *number*, rounding upward if needed.
  id: totrans-1438
  prefs: []
  type: TYPE_NORMAL
  zh: 返回比*number*大的下一个最高值，如果需要则向上舍入。
- en: chdir
  id: totrans-1439
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: chdir
- en: '`bool chdir(string` *path*`)`'
  id: totrans-1440
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool chdir(string *path*)`'
- en: Sets the current working directory to *path*; returns `true` if the operation
    was successful and `false` if not.
  id: totrans-1441
  prefs: []
  type: TYPE_NORMAL
  zh: 将当前工作目录设置为*path*；如果操作成功返回`true`，否则返回`false`。
- en: checkdate
  id: totrans-1442
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: checkdate
- en: '`bool checkdate(int` *month*`, int` *day*`, int` *year*`)`'
  id: totrans-1443
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool checkdate(int *month*, int *day*, int *year*)`'
- en: Returns `true` if the month, date, and year as given in the parameters are valid
    (Gregorian), and `false` if not. A date is considered valid if the year falls
    between 1 and 32,767 inclusive, the month is between 1 and 12 inclusive, and the
    day is within the number of days the specified month has (including leap years).
  id: totrans-1444
  prefs: []
  type: TYPE_NORMAL
  zh: 如果参数中给出的月份、日期和年份（公历）有效，则返回`true`，否则返回`false`。如果年份在1到32,767之间（包括边界），月份在1到12之间（包括边界），并且日期在指定月份的有效日期范围内（包括闰年）。
- en: checkdnsrr
  id: totrans-1445
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: checkdnsrr
- en: '`bool checkdnsrr(string` *host*`[, string` *type*`])`'
  id: totrans-1446
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool checkdnsrr(string *host*[, string *type*])`'
- en: 'Searches DNS records for a host having the given type. Returns `true` if any
    records are found, and `false` if none are found. The host type can take any of
    the following values (if no value is specified, `MX` is the default):'
  id: totrans-1447
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索具有给定类型的主机的DNS记录。如果找到任何记录，则返回`true`，否则返回`false`。主机类型可以采用以下任何值（如果未指定值，则默认为`MX`）：
- en: '| `A` | IP address |'
  id: totrans-1448
  prefs: []
  type: TYPE_TB
  zh: '| `A` | IP地址'
- en: '| `MX` (default) | Mail exchanger |'
  id: totrans-1449
  prefs: []
  type: TYPE_TB
  zh: '| `MX` (默认) | 邮件交换器'
- en: '| `NS` | Name server |'
  id: totrans-1450
  prefs: []
  type: TYPE_TB
  zh: '| `NS` | 名称服务器'
- en: '| `SOA` | Start of authority |'
  id: totrans-1451
  prefs: []
  type: TYPE_TB
  zh: '| `SOA` | 权威起始'
- en: '| `PTR` | Pointer to information |'
  id: totrans-1452
  prefs: []
  type: TYPE_TB
  zh: '| `PTR` | 指向信息的指针'
- en: '| `CNAME` | Canonical name |'
  id: totrans-1453
  prefs: []
  type: TYPE_TB
  zh: '| `CNAME` | 规范名称'
- en: '| `AAAA` | 128-bit IPv6 address |'
  id: totrans-1454
  prefs: []
  type: TYPE_TB
  zh: '| `AAAA` | 128位IPv6地址'
- en: '| `A6` | Defined as part of early IPv6 but downgraded to experimental |'
  id: totrans-1455
  prefs: []
  type: TYPE_TB
  zh: '| `A6` | 定义为早期IPv6的一部分，但降级为实验性'
- en: '| `SRV` | Generalized service location record |'
  id: totrans-1456
  prefs: []
  type: TYPE_TB
  zh: '| `SRV` | 通用服务位置记录'
- en: '| `NAPTR` | Regular expression–based rewriting of domain names |'
  id: totrans-1457
  prefs: []
  type: TYPE_TB
  zh: '| `NAPTR` | 基于正则表达式的域名重写'
- en: '| `TXT` | Originally for human-readable text. However, this record also carries
    machine-readable data |'
  id: totrans-1458
  prefs: []
  type: TYPE_TB
  zh: '| `TXT` | 最初用于人类可读的文本。但是，这个记录也携带机器可读的数据。'
- en: '| `ANY` | Any of the above |'
  id: totrans-1459
  prefs: []
  type: TYPE_TB
  zh: '| `ANY` | 上述任何一种'
- en: Check the [DNS record entry on Wikipedia](http://en.wikipedia.org/wiki/List_of_DNS_record_types)
    for more details.
  id: totrans-1460
  prefs: []
  type: TYPE_NORMAL
  zh: 查看更多详情，请访问[Wikipedia上的DNS记录条目](http://en.wikipedia.org/wiki/List_of_DNS_record_types)。
- en: chgrp
  id: totrans-1461
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: chgrp
- en: '`bool chgrp(string` *path*`, mixed` *group*`)`'
  id: totrans-1462
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool chgrp(string` *path*`, mixed` *group*`)`'
- en: Changes the group for the file *path* to *group*; PHP must have appropriate
    privileges for this function to work. Returns `true` if the change was successful
    and `false` if not.
  id: totrans-1463
  prefs: []
  type: TYPE_NORMAL
  zh: 将文件*path*的组更改为*group*；PHP必须具有适当的权限才能使该函数工作。如果更改成功，则返回`true`，否则返回`false`。
- en: chmod
  id: totrans-1464
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`chmod`'
- en: '`bool chmod(string` *path*`, int` *mode*`)`'
  id: totrans-1465
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool chmod(string` *path*`, int` *mode*`)`'
- en: Attempts to change the permissions of *path* to *mode*. *mode* is expected to
    be an octal number, such as `0755`. An integer value such as `755` or a string
    value such as `"u+x"` will not work as expected. Returns `true` if the operation
    was successful and `false` if not.
  id: totrans-1466
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试将*path*的权限更改为*mode*。*mode*应为八进制数，例如`0755`。像`755`这样的整数值或`"u+x"`这样的字符串值将不能按预期工作。如果操作成功，则返回`true`，否则返回`false`。
- en: chown
  id: totrans-1467
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`chown`'
- en: '`bool chown(string` *path*`, mixed` *user*`)`'
  id: totrans-1468
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool chown(string` *path*`, mixed` *user*`)`'
- en: Changes ownership for the file *path* to the user named *user*. PHP must have
    appropriate privileges (generally, root for this function) for the function to
    operate. Returns `true` if the change was successful and `false` if not.
  id: totrans-1469
  prefs: []
  type: TYPE_NORMAL
  zh: 将文件*path*的所有权更改为名为*user*的用户。PHP必须具有适当的权限（通常为root）才能执行此功能。如果更改成功，则返回`true`，否则返回`false`。
- en: chr
  id: totrans-1470
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`chr`'
- en: '`string chr(int` *char*`)`'
  id: totrans-1471
  prefs: []
  type: TYPE_NORMAL
  zh: '`string chr(int` *char*`)`'
- en: Returns a string consisting of the single ASCII character *char*.
  id: totrans-1472
  prefs: []
  type: TYPE_NORMAL
  zh: 返回由单个ASCII字符*char*组成的字符串。
- en: chroot
  id: totrans-1473
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`chroot`'
- en: '`bool chroot(string` *path*`)`'
  id: totrans-1474
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool chroot(string` *path*`)`'
- en: Changes the root directory of the current process to *path*. You cannot use
    `chroot()` to restore the root directory to `/` when running PHP in a web server
    environment. Returns `true` if the change was successful and `false` if not.
  id: totrans-1475
  prefs: []
  type: TYPE_NORMAL
  zh: 将当前进程的根目录更改为*path*。在Web服务器环境中运行PHP时，无法使用`chroot()`将根目录恢复为`/`。如果更改成功，则返回`true`，否则返回`false`。
- en: chunk_split
  id: totrans-1476
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`chunk_split`'
- en: '`string chunk_split(string` *string*`[, int` *size*`[, string` *postfix*`]])`'
  id: totrans-1477
  prefs: []
  type: TYPE_NORMAL
  zh: '`string chunk_split(string` *string*`[, int` *size*`[, string` *postfix*`]])`'
- en: 'Inserts *postfix* into *string* after every *size* characters and at the end
    of the string; returns the resulting string. If not specified, *postfix* defaults
    to `\r\n` and *size* defaults to `76`. This function is most useful for encoding
    data to the RPF 2045 standard. For example:'
  id: totrans-1478
  prefs: []
  type: TYPE_NORMAL
  zh: 将*postfix*插入到*string*中，每隔*size*个字符插入一次，并在字符串末尾插入；返回生成的字符串。如果未指定，则*postfix*默认为`\r\n`，*size*默认为`76`。此函数最适合将数据编码为RPF
    2045标准。例如：
- en: '[PRE3]'
  id: totrans-1479
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: class_alias
  id: totrans-1480
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`class_alias`'
- en: '`bool class_alias(string` *name*`, string` *alias*`)`'
  id: totrans-1481
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool class_alias(string` *name*`, string` *alias*`)`'
- en: Creates an alias to the class *name*. From then on, you can reference the class
    (for example, to instantiate objects) with either *name* or *alias*. Returns `true`
    if the alias could be created; if not, it returns `false`.
  id: totrans-1482
  prefs: []
  type: TYPE_NORMAL
  zh: 创建到类*name*的别名。从此之后，您可以使用*name*或*alias*引用类（例如实例化对象）。如果可以创建别名，则返回`true`；否则返回`false`。
- en: class_exists
  id: totrans-1483
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`class_exists`'
- en: '`bool class_exists(string` *name*`[, bool` *autoload_class*`])`'
  id: totrans-1484
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool class_exists(string` *name*`[, bool` *autoload_class*`])`'
- en: Returns `true` if a class with the same name as the string has been defined;
    if not, it returns `false`. The comparison for class names is case-insensitive.
    If *autoload*`_class` is set and is `true`, the class is loaded through the class’s
    `__autoload()` function before getting the interfaces it implements.
  id: totrans-1485
  prefs: []
  type: TYPE_NORMAL
  zh: 如果具有与字符串同名的类已定义，则返回`true`；否则返回`false`。类名比较不区分大小写。如果设置了并且为`true`，则会通过类的`__autoload()`函数加载类，然后获取其实现的接口。
- en: class_implements
  id: totrans-1486
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`class_implements`'
- en: '`array class_implements(mixed` *class*`[, bool` *autoload_class*`])`'
  id: totrans-1487
  prefs: []
  type: TYPE_NORMAL
  zh: '`array class_implements(mixed` *class*`[, bool` *autoload_class*`])`'
- en: If *class* is an object, returns an array containing the names of the interfaces
    implemented by *class*’s object class. If *class* is a string, returns an array
    containing the names of the interfaces implemented by the class named *class*.
    Returns `false` if *class* is neither an object nor a string, or if *class* is
    a string but no object class of that name exists. If *autoload_class* is set and
    is `true`, the class is loaded through the class’s `__autoload()` function before
    getting the interfaces it implements.
  id: totrans-1488
  prefs: []
  type: TYPE_NORMAL
  zh: 如果*class*是对象，则返回包含由*class*对象类实现的接口名称的数组。如果*class*是字符串，则返回包含由名为*class*的类实现的接口名称的数组。如果*class*既不是对象也不是字符串，或者*class*是字符串但不存在该名称的对象类，则返回`false`。如果设置了并且为`true`，则会通过类的`__autoload()`函数加载类，然后获取其实现的接口。
- en: class_parents
  id: totrans-1489
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`class_parents`'
- en: '`array class_parents(mixed` *class*`[, bool` *autoload_class*`])`'
  id: totrans-1490
  prefs: []
  type: TYPE_NORMAL
  zh: '`array class_parents(mixed` *class*`[, bool` *autoload_class*`])`'
- en: If *class* is an object, returns an array containing the names of the parents
    of *class*’s object class. If *class* is a string, returns an array containing
    the class names of the parents of the class named *class*. Returns `false` if
    *class* is neither an object nor a string, or if *class* is a string but no object
    class of that name exists. If *autoload_class* is set and is `true`, the class
    is loaded through the class’s `__autoload()` function before getting its parents.
  id: totrans-1491
  prefs: []
  type: TYPE_NORMAL
  zh: 如果*class* 是一个对象，则返回一个包含*class* 对象类的父类名称的数组。如果*class* 是一个字符串，则返回一个包含命名为*class*
    的类的父类类名的数组。如果*class* 既不是对象也不是字符串，或者*class* 是一个字符串但没有该名称的对象类存在，则返回`false`。如果设置了*autoload_class*
    并且为`true`，则在获取其父类之前通过类的`__autoload()` 函数加载该类。
- en: clearstatcache
  id: totrans-1492
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: clearstatcache
- en: '`void clearstatcache([bool` *clear_realpath_cache*`[, string` *file*`]])`'
  id: totrans-1493
  prefs: []
  type: TYPE_NORMAL
  zh: '`void clearstatcache([bool` *clear_realpath_cache*`[, string` *file*`]])`'
- en: Clears the file status functions cache. The next call to any of the file status
    functions will retrieve the information from the disk. The *clear_realpath_cache*
    parameter allows for clearing the *realpath* cache. The `file` parameter allows
    for the clearing of the *realpath* and stat caches for a specific filename only,
    and it can be used only if *clear_realpath_cache* is `true`.
  id: totrans-1494
  prefs: []
  type: TYPE_NORMAL
  zh: 清除文件状态函数的缓存。下一次调用任何文件状态函数将从磁盘检索信息。*clear_realpath_cache* 参数允许清除*realpath* 缓存。`file`
    参数仅允许清除特定文件名的*realpath* 和 stat 缓存，并且仅在*clear_realpath_cache* 为 `true` 时可用。
- en: closedir
  id: totrans-1495
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: closedir
- en: '`void closedir([int` *handle*`])`'
  id: totrans-1496
  prefs: []
  type: TYPE_NORMAL
  zh: '`void closedir([int` *handle*`])`'
- en: Closes the directory stream referenced by *handle*. See `opendir()` for more
    information on directory streams. If *handle* is not specified, the most recently
    opened directory stream is closed.
  id: totrans-1497
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭由*handle* 引用的目录流。有关目录流的更多信息，请参见`opendir()`。如果未指定*handle*，则关闭最近打开的目录流。
- en: closelog
  id: totrans-1498
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: closelog
- en: '`int closelog()`'
  id: totrans-1499
  prefs: []
  type: TYPE_NORMAL
  zh: '`int closelog()`'
- en: Closes the file descriptor used to write to the system logger after an `openlog()`
    call. Returns `true` if the change was successful and `false` if not.
  id: totrans-1500
  prefs: []
  type: TYPE_NORMAL
  zh: 在调用`openlog()`后关闭用于写入系统日志的文件描述符。如果更改成功则返回`true`，否则返回`false`。
- en: compact
  id: totrans-1501
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: compact
- en: '`array compact(mixed` *variable1*`[, ... mixed` *variableN*`])`'
  id: totrans-1502
  prefs: []
  type: TYPE_NORMAL
  zh: '`array compact(mixed` *variable1*`[, ... mixed` *variableN*`])`'
- en: Creates an array by retrieving the values of the variables named in the parameters.
    If any of the parameters are arrays, the values of variables named in the arrays
    are also retrieved. The array returned is an associative array, with the keys
    being the arguments provided to the function and the values being the values of
    the named variables. This function is the opposite of `extract()`.
  id: totrans-1503
  prefs: []
  type: TYPE_NORMAL
  zh: 通过检索参数中命名的变量的值来创建数组。如果任何参数是数组，则还会检索数组中命名的变量的值。返回的数组是一个关联数组，其键是函数提供的参数，值是命名变量的值。此函数是`extract()`的相反函数。
- en: connection_aborted
  id: totrans-1504
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: connection_aborted
- en: '`int connection_aborted()`'
  id: totrans-1505
  prefs: []
  type: TYPE_NORMAL
  zh: '`int connection_aborted()`'
- en: Returns `true` (`1`) if the client disconnected (for example, clicked Stop in
    the browser) at any point before the function is called. Returns `false` (`0`)
    if the client is still connected.
  id: totrans-1506
  prefs: []
  type: TYPE_NORMAL
  zh: 如果客户端在函数调用之前断开连接（例如在浏览器中点击停止），则返回`true`（`1`）。如果客户端仍然连接，则返回`false`（`0`）。
- en: connection_status
  id: totrans-1507
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: connection_status
- en: '`int connection_status()`'
  id: totrans-1508
  prefs: []
  type: TYPE_NORMAL
  zh: '`int connection_status()`'
- en: 'Returns the status of the connection as a bitfield with three states: `NORMAL`
    (`0`), `ABORTED` (`1`), and `TIMEOUT` (`2`).'
  id: totrans-1509
  prefs: []
  type: TYPE_NORMAL
  zh: 以三个状态的位域形式返回连接的状态：`NORMAL`（`0`）、`ABORTED`（`1`）和`TIMEOUT`（`2`）。
- en: constant
  id: totrans-1510
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: constant
- en: '`mixed constant(string` *name*`)`'
  id: totrans-1511
  prefs: []
  type: TYPE_NORMAL
  zh: '`mixed constant(string` *name*`)`'
- en: Returns the value of the constant called *name*.
  id: totrans-1512
  prefs: []
  type: TYPE_NORMAL
  zh: 返回称为*name*的常量的值。
- en: convert_cyr_string
  id: totrans-1513
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: convert_cyr_string
- en: '`string convert_cyr_string(string` *value*`, string` *from*`, string` *to*`)`'
  id: totrans-1514
  prefs: []
  type: TYPE_NORMAL
  zh: '`string convert_cyr_string(string` *value*`, string` *from*`, string` *to*`)`'
- en: 'Converts *value* from one Cyrillic set to another. The *from* and *to* parameters
    are single-character strings representing the set and have the following valid
    values:'
  id: totrans-1515
  prefs: []
  type: TYPE_NORMAL
  zh: 将*value*从一个西里尔语集转换为另一个。*from* 和 *to* 参数是表示集的单字符字符串，并具有以下有效值：
- en: '| `k` | koi8-r |'
  id: totrans-1516
  prefs: []
  type: TYPE_TB
  zh: '| `k` | koi8-r |'
- en: '| `w` | Windows-1251 |'
  id: totrans-1517
  prefs: []
  type: TYPE_TB
  zh: '| `w` | Windows-1251 |'
- en: '| `i` | ISO 8859-5 |'
  id: totrans-1518
  prefs: []
  type: TYPE_TB
  zh: '| `i` | ISO 8859-5 |'
- en: '| `a` or `d` | x-cp866 |'
  id: totrans-1519
  prefs: []
  type: TYPE_TB
  zh: '| `a` 或 `d` | x-cp866 |'
- en: '| `m` | x-mac-cyrillic |'
  id: totrans-1520
  prefs: []
  type: TYPE_TB
  zh: '| `m` | x-mac-cyrillic |'
- en: convert_uudecode
  id: totrans-1521
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: convert_uudecode
- en: '`string convert_uudecode(string` *value*`)`'
  id: totrans-1522
  prefs: []
  type: TYPE_NORMAL
  zh: '`string convert_uudecode(string` *value*`)`'
- en: Decodes the `uuencode`d string *value* and returns it.
  id: totrans-1523
  prefs: []
  type: TYPE_NORMAL
  zh: 解码*uuencode*的字符串*value*并返回它。
- en: convert_uuencode
  id: totrans-1524
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: convert_uuencode
- en: '`string convert_uuencode(string` *value*`)`'
  id: totrans-1525
  prefs: []
  type: TYPE_NORMAL
  zh: '`string convert_uuencode(string` *value*`)`'
- en: Encodes the string *value* using `uuencode` and returns it.
  id: totrans-1526
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`uuencode`对字符串*value*进行编码并返回。
- en: copy
  id: totrans-1527
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: copy
- en: '`int copy(string` *path*`, string` *destination*`[, resource` *context*`])`'
  id: totrans-1528
  prefs: []
  type: TYPE_NORMAL
  zh: '`int copy(string` *path*`, string` *destination*`[, resource` *context*`])`'
- en: Copies the file at *path* to *destination*. If the operation succeeds, the function
    returns `true`; otherwise, it returns `false`. If the file at the destination
    exists, it will be replaced. The optional *context* parameter can make use of
    a valid context resource created with the `stream_context_create()` function.
  id: totrans-1529
  prefs: []
  type: TYPE_NORMAL
  zh: 将路径*path*的文件复制到*destination*。如果操作成功，函数返回`true`；否则，返回`false`。如果目标位置的文件已存在，则将其替换。可选的*context*参数可以利用使用`stream_context_create()`函数创建的有效上下文资源。
- en: cos
  id: totrans-1530
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: cos
- en: '`float cos(float` *value*`)`'
  id: totrans-1531
  prefs: []
  type: TYPE_NORMAL
  zh: '`float cos(float` *value*`)`'
- en: Returns the cosine of *value* in radians.
  id: totrans-1532
  prefs: []
  type: TYPE_NORMAL
  zh: 返回弧度中*value*的余弦值。
- en: cosh
  id: totrans-1533
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: cosh
- en: '`float cosh(float` *value*`)`'
  id: totrans-1534
  prefs: []
  type: TYPE_NORMAL
  zh: '`float cosh(float` *value*`)`'
- en: Returns the hyperbolic cosine of *value*.
  id: totrans-1535
  prefs: []
  type: TYPE_NORMAL
  zh: 返回*value*的双曲余弦值。
- en: count
  id: totrans-1536
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: count
- en: '`int count(mixed` *value*`[, int` *mode*`])`'
  id: totrans-1537
  prefs: []
  type: TYPE_NORMAL
  zh: '`int count(mixed` *value*`[, int` *mode*`])`'
- en: Returns the number of elements in the *value*; for arrays or objects, this is
    the number of elements; for any other *value*, this is `1`. If the parameter is
    a variable and the variable is not set, `0` is returned. If *mode* is set and
    is `COUNT_RECURSIVE`, the number of elements is counted recursively, counting
    the number of values in arrays inside arrays.
  id: totrans-1538
  prefs: []
  type: TYPE_NORMAL
  zh: 返回*value*中的元素数；对于数组或对象，这是元素的数量；对于任何其他*value*，这是`1`。如果参数是变量且变量未设置，则返回`0`。如果设置了*mode*并且为`COUNT_RECURSIVE`，则递归计算元素数，计算数组内部数组中的值的数量。
- en: count_chars
  id: totrans-1539
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: count_chars
- en: '`mixed count_chars(string` *string*`[, int` *mode*`])`'
  id: totrans-1540
  prefs: []
  type: TYPE_NORMAL
  zh: '`mixed count_chars(string` *string*`[, int` *mode*`])`'
- en: 'Returns the number of occurrences of each byte value from 0 to 255 in *string*;
    *mode* determines the form of the result. The possible values of *mode* are:'
  id: totrans-1541
  prefs: []
  type: TYPE_NORMAL
  zh: 返回*string*中从0到255的每个字节值的出现次数；*mode*确定结果的形式。*mode*的可能值为：
- en: '| `0` (default) | Returns an associative array with each byte value as a key
    and the frequency of that byte value as the value |'
  id: totrans-1542
  prefs: []
  type: TYPE_TB
  zh: '| `0` (default) | 返回一个关联数组，其中每个字节值作为键，该字节值的频率作为值 |'
- en: '| `1` | Same as above, except that only byte values with a nonzero frequency
    are listed |'
  id: totrans-1543
  prefs: []
  type: TYPE_TB
  zh: '| `1` | 与上述相同，但仅列出非零频率的字节值 |'
- en: '| `2` | Same as above, except that only byte values with a frequency of zero
    are listed |'
  id: totrans-1544
  prefs: []
  type: TYPE_TB
  zh: '| `2` | 与上述相同，但仅列出频率为零的字节值 |'
- en: '| `3` | Returns a string containing all byte values with a nonzero frequency
    |'
  id: totrans-1545
  prefs: []
  type: TYPE_TB
  zh: '| `3` | 返回一个包含所有非零频率字节值的字符串 |'
- en: '| `4` | Returns a string containing all byte values with a frequency of zero
    |'
  id: totrans-1546
  prefs: []
  type: TYPE_TB
  zh: '| `4` | 返回一个包含所有字节值频率为零的字符串 |'
- en: crc32
  id: totrans-1547
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: crc32
- en: '`int crc32(string` *value*`)`'
  id: totrans-1548
  prefs: []
  type: TYPE_NORMAL
  zh: '`int crc32(string` *value*`)`'
- en: Calculates and returns the *cyclic redundancy checksum* (CRC) for *value*.
  id: totrans-1549
  prefs: []
  type: TYPE_NORMAL
  zh: 计算并返回*value*的循环冗余校验（CRC）。
- en: create_function
  id: totrans-1550
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: create_function
- en: '`string create_function(string` *arguments*`, string` *code*`)`'
  id: totrans-1551
  prefs: []
  type: TYPE_NORMAL
  zh: '`string create_function(string` *arguments*`, string` *code*`)`'
- en: Creates an anonymous function with the given *arguments* and *code*; returns
    a generated name for the function. Such anonymous functions (also called *lambda
    functions*) are useful for short-term callback functions, such as when using `usort()`.
  id: totrans-1552
  prefs: []
  type: TYPE_NORMAL
  zh: 使用给定的*arguments*和*code*创建一个匿名函数；返回函数的生成名称。这种匿名函数（也称为*lambda函数*）对于短期回调函数非常有用，例如在使用`usort()`时。
- en: crypt
  id: totrans-1553
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: crypt
- en: '`string crypt(string` *string*`[, string` *salt*`])`'
  id: totrans-1554
  prefs: []
  type: TYPE_NORMAL
  zh: '`string crypt(string` *string*`[, string` *salt*`])`'
- en: Encrypts *string* using the DES encryption algorithm seeded with the two-character
    salt value *salt*. If *salt* is not supplied, a random *salt* value is generated
    the first time `crypt()` is called in a script; this value is used on subsequent
    calls to `crypt()`. Returns the encrypted string.
  id: totrans-1555
  prefs: []
  type: TYPE_NORMAL
  zh: 使用带有两个字符盐值*salt*的DES加密算法对*string*进行加密。如果未提供*salt*，则在脚本中首次调用`crypt()`时生成一个随机*salt*值；此值用于后续调用`crypt()`。返回加密后的字符串。
- en: current
  id: totrans-1556
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: current
- en: '`mixed current(array` *array*`)`'
  id: totrans-1557
  prefs: []
  type: TYPE_NORMAL
  zh: '`mixed current(array` *array*`)`'
- en: Returns the value of the element to which the internal pointer is set. The first
    time that `current()` is called, or when `current()` is called after `reset`,
    the pointer is set to the first element in the array.
  id: totrans-1558
  prefs: []
  type: TYPE_NORMAL
  zh: 返回内部指针设置的元素的值。第一次调用`current()`时，或在`reset`后调用`current()`时，将指针设置为数组中的第一个元素。
- en: date
  id: totrans-1559
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: date
- en: '`string date(string` *format*`[, int` *timestamp*`])`'
  id: totrans-1560
  prefs: []
  type: TYPE_NORMAL
  zh: '`string date(string` *format*`[, int` *timestamp*`])`'
- en: 'Formats a time and date according to the *format* string provided in the first
    parameter. If the second parameter is not specified, the current time and date
    is used. The following characters are recognized in the *format* string:'
  id: totrans-1561
  prefs: []
  type: TYPE_NORMAL
  zh: 根据第一个参数中提供的*format*字符串格式化时间和日期。如果未指定第二个参数，则使用当前时间和日期。*format*字符串中识别以下字符：
- en: '| `a` | “am” or “pm” |'
  id: totrans-1562
  prefs: []
  type: TYPE_TB
  zh: '| `a` | “am”或“pm” |'
- en: '| `A` | “AM” or “PM” |'
  id: totrans-1563
  prefs: []
  type: TYPE_TB
  zh: '| `A` | “AM”或“PM” |'
- en: '| `B` | Swatch internet time |'
  id: totrans-1564
  prefs: []
  type: TYPE_TB
  zh: '| `B` | 斯沃奇互联网时间 |'
- en: '| `d` | Day of the month as two digits, including a leading zero if necessary
    (e.g., “01” through “31”) |'
  id: totrans-1565
  prefs: []
  type: TYPE_TB
  zh: '| `d` | 月份中的日期，如果需要则包括前导零（例如，“01”到“31”） |'
- en: '| `D` | Name of the day of the week as a three-letter abbreviation (e.g., “Mon”)
    |'
  id: totrans-1566
  prefs: []
  type: TYPE_TB
  zh: '| `D` | 星期几的三字母缩写（例如，“Mon”） |'
- en: '| `F` | Name of the month (e.g., “August”) |'
  id: totrans-1567
  prefs: []
  type: TYPE_TB
  zh: '| `F` | 月份的全称（例如，“August”） |'
- en: '| `g` | Hour in 12-hour format (e.g., “1” through “12”) |'
  id: totrans-1568
  prefs: []
  type: TYPE_TB
  zh: '| `g` | 12小时制的小时数（例如，“1”到“12”） |'
- en: '| `G` | Hour in 24-hour format (e.g., “0” through “23”) |'
  id: totrans-1569
  prefs: []
  type: TYPE_TB
  zh: '| `G` | 24小时制的小时数（例如，“0”到“23”） |'
- en: '| `h` | Hour in 12-hour format, including a leading zero if necessary; e.g.,
    “01” through “12” |'
  id: totrans-1570
  prefs: []
  type: TYPE_TB
  zh: '| `h` | 12小时制的小时数，如果需要则包括前导零（例如，“01”到“12”） |'
- en: '| `H` | Hour in 24-hour format, including a leading zero if necessary (e.g.,
    “00” through “23”) |'
  id: totrans-1571
  prefs: []
  type: TYPE_TB
  zh: '| `H` | 24小时制的小时数，如果需要则包括前导零（例如，“00”到“23”） |'
- en: '| `i` | Minutes, including a leading zero if necessary (e.g., “00” through
    “59”) |'
  id: totrans-1572
  prefs: []
  type: TYPE_TB
  zh: '| `i` | 分钟数，如果需要则包括前导零（例如，“00”到“59”） |'
- en: '| `I` | “1” if Daylight Saving Time; “0” otherwise |'
  id: totrans-1573
  prefs: []
  type: TYPE_TB
  zh: '| `I` | 如果是夏令时则为“1”，否则为“0” |'
- en: '| `j` | Day of the month (e.g., “1” through “31”) |'
  id: totrans-1574
  prefs: []
  type: TYPE_TB
  zh: '| `j` | 月份中的日期（例如，“1”到“31”） |'
- en: '| `l` | Name of the day of the week (e.g., “Monday”) |'
  id: totrans-1575
  prefs: []
  type: TYPE_TB
  zh: '| `l` | 星期几的全称（例如，“Monday”） |'
- en: '| `L` | “0” if the year is not a leap year; “1” if it is |'
  id: totrans-1576
  prefs: []
  type: TYPE_TB
  zh: '| `L` | 如果年份不是闰年则为“0”，如果是则为“1” |'
- en: '| `m` | Month, including a leading zero if necessary (e.g., “01” through “12”)
    |'
  id: totrans-1577
  prefs: []
  type: TYPE_TB
  zh: '| `m` | 月份，如果需要则包括前导零（例如，“01”到“12”） |'
- en: '| `M` | Name of the month as a three-letter abbreviation (e.g., “Aug”) |'
  id: totrans-1578
  prefs: []
  type: TYPE_TB
  zh: '| `M` | 月份的三字母缩写（例如，“Aug”） |'
- en: '| `n` | Month without leading zeros (e.g., “1” to “12”) |'
  id: totrans-1579
  prefs: []
  type: TYPE_TB
  zh: '| `n` | 无前导零的月份（例如，“1”到“12”） |'
- en: '| `r` | Date formatted according to RFC 822 (e.g., “Thu, 21 Jun 2001 21:27:19
    +0600”) |'
  id: totrans-1580
  prefs: []
  type: TYPE_TB
  zh: '| `r` | 根据RFC 822格式化的日期（例如，“Thu, 21 Jun 2001 21:27:19 +0600”） |'
- en: '| `s` | Seconds, including a leading zero if necessary (e.g., “00” through
    “59”) |'
  id: totrans-1581
  prefs: []
  type: TYPE_TB
  zh: '| `s` | 秒数，如果需要则包括前导零（例如，“00”到“59”） |'
- en: '| `S` | English ordinal suffix for the day of the month; either “st”, “nd”,
    or “th” |'
  id: totrans-1582
  prefs: []
  type: TYPE_TB
  zh: '| `S` | 日期月份的英文序数后缀，“st”、“nd”或“th” |'
- en: '| `t` | Number of days in the month, from “28” to “31” |'
  id: totrans-1583
  prefs: []
  type: TYPE_TB
  zh: '| `t` | 月份的天数，从“28”到“31” |'
- en: '| `T` | Time zone setting of the machine running PHP (e.g., “MST”) |'
  id: totrans-1584
  prefs: []
  type: TYPE_TB
  zh: '| `T` | 运行PHP的机器的时区设置（例如，“MST”） |'
- en: '| `u` | Seconds since the Unix epoch |'
  id: totrans-1585
  prefs: []
  type: TYPE_TB
  zh: '| `u` | 自Unix纪元以来的秒数 |'
- en: '| `w` | Numeric day of the week, starting with “0” for Sunday |'
  id: totrans-1586
  prefs: []
  type: TYPE_TB
  zh: '| `w` | 数字形式的星期几，从星期天开始（例如，“0”代表星期日） |'
- en: '| `W` | Numeric week of the year according to ISO 8601 |'
  id: totrans-1587
  prefs: []
  type: TYPE_TB
  zh: '| `W` | ISO 8601标准下的年的第几周 |'
- en: '| `Y` | Year with four digits (e.g., “1998”) |'
  id: totrans-1588
  prefs: []
  type: TYPE_TB
  zh: '| `Y` | 四位数年份（例如，“1998”） |'
- en: '| `y` | Year with two digits (e.g., “98”) |'
  id: totrans-1589
  prefs: []
  type: TYPE_TB
  zh: '| `y` | 两位数年份（例如，“98”） |'
- en: '| `z` | Day of the year, from “0” through “365” |'
  id: totrans-1590
  prefs: []
  type: TYPE_TB
  zh: '| `z` | 一年中的第几天，从“0”到“365” |'
- en: '| `Z` | Time zone offset in seconds, from “–43200” (far west of UTC) to “43200”
    (far east of UTC) |'
  id: totrans-1591
  prefs: []
  type: TYPE_TB
  zh: '| `Z` | 时区偏移量（从“–43200”（UTC的远西）到“43200”（UTC的远东）） |'
- en: Any characters in the *format* string not matching one of the above will be
    kept in the resulting string as is. If a non-numeric value is provided for `timestamp`,
    then `false` is returned and a warning is issued.
  id: totrans-1592
  prefs: []
  type: TYPE_NORMAL
  zh: '*format*字符串中不匹配上述任何内容的任何字符将保留在结果字符串中。如果为`timestamp`提供了非数字值，则返回`false`并发出警告。'
- en: date_default_timezone_get
  id: totrans-1593
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`date_default_timezone_get`'
- en: '`string date_default_timezone_get()`'
  id: totrans-1594
  prefs: []
  type: TYPE_NORMAL
  zh: '`string date_default_timezone_get()`'
- en: Returns the current default time zone, set previously by the `date_default_timezone_set()`
    function or via the `date.timezone` option in the *php.ini* file. Returns `"UTC"`
    if neither is set.
  id: totrans-1595
  prefs: []
  type: TYPE_NORMAL
  zh: 返回当前默认时区，之前由`date_default_timezone_set()`函数或在*php.ini*文件中通过`date.timezone`选项设置。如果都没有设置，则返回`"UTC"`。
- en: date_default_timezone_set
  id: totrans-1596
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`date_default_timezone_set`'
- en: '`string date_default_timezone_set(string` *timezone*`)`'
  id: totrans-1597
  prefs: []
  type: TYPE_NORMAL
  zh: '`string date_default_timezone_set(string` *timezone*`)`'
- en: Sets the current default time zone.
  id: totrans-1598
  prefs: []
  type: TYPE_NORMAL
  zh: 设置当前默认时区。
- en: date_parse
  id: totrans-1599
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`date_parse`'
- en: '`array date_parse(string` *time*`)`'
  id: totrans-1600
  prefs: []
  type: TYPE_NORMAL
  zh: '`array date_parse(string` *time*`)`'
- en: Converts an English description of a time and date into an array describing
    that time and date. Returns `false` if the value could not be converted into a
    valid date. The returned array contains the same values as returned from `date_parse_from_format()`.
  id: totrans-1601
  prefs: []
  type: TYPE_NORMAL
  zh: 将时间和日期的英文描述转换为描述该时间和日期的数组。如果值无法转换为有效日期，则返回`false`。返回的数组包含从`date_parse_from_format()`返回的相同值。
- en: date_parse_from_format
  id: totrans-1602
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`date_parse_from_format`'
- en: '`array date_parse_from_format(string` *format*`, string` *time*`)`'
  id: totrans-1603
  prefs: []
  type: TYPE_NORMAL
  zh: '`array date_parse_from_format(string` *format*`, string` *time*`)`'
- en: 'Parses *time* into an associative array representing a date. The string *time*
    is given in the format specified by *format*, using the same character codes as
    described in `date()`. The returned array contains the following entries:'
  id: totrans-1604
  prefs: []
  type: TYPE_NORMAL
  zh: 将 *time* 解析为表示日期的关联数组。*time* 字符串的格式由 *format* 指定，使用与 `date()` 中描述的相同字符代码。返回的数组包含以下条目：
- en: '| `year` | Year |'
  id: totrans-1605
  prefs: []
  type: TYPE_TB
  zh: '| `year` | 年份 |'
- en: '| `month` | Month |'
  id: totrans-1606
  prefs: []
  type: TYPE_TB
  zh: '| `month` | 月份 |'
- en: '| `day` | Day of the month |'
  id: totrans-1607
  prefs: []
  type: TYPE_TB
  zh: '| `day` | 月份中的天数 |'
- en: '| `hour` | Hours |'
  id: totrans-1608
  prefs: []
  type: TYPE_TB
  zh: '| `hour` | 小时 |'
- en: '| `minute` | Minutes |'
  id: totrans-1609
  prefs: []
  type: TYPE_TB
  zh: '| `minute` | 分钟 |'
- en: '| `second` | Seconds |'
  id: totrans-1610
  prefs: []
  type: TYPE_TB
  zh: '| `second` | 秒 |'
- en: '| `fraction` | Fractions of seconds |'
  id: totrans-1611
  prefs: []
  type: TYPE_TB
  zh: '| `fraction` | 秒的小数部分 |'
- en: '| `warning_count` | Number of warnings that occurred during parsing |'
  id: totrans-1612
  prefs: []
  type: TYPE_TB
  zh: '| `warning_count` | 解析过程中发生的警告数量 |'
- en: '| `warnings` | An array of warnings that occurred during parsing |'
  id: totrans-1613
  prefs: []
  type: TYPE_TB
  zh: '| `warnings` | 解析过程中发生的警告数组 |'
- en: '| `error_count` | Number of errors that occurred during parsing |'
  id: totrans-1614
  prefs: []
  type: TYPE_TB
  zh: '| `error_count` | 解析过程中发生的错误数量 |'
- en: '| `errors` | An array of errors that occurred during parsing |'
  id: totrans-1615
  prefs: []
  type: TYPE_TB
  zh: '| `errors` | 解析过程中发生的错误数组 |'
- en: '| `is_localtime` | True if the time represents a time in the current default
    time zone |'
  id: totrans-1616
  prefs: []
  type: TYPE_TB
  zh: '| `is_localtime` | 如果时间表示当前默认时区的时间，则为 True |'
- en: '| `zone_type` | The type of time zone `zone` represents |'
  id: totrans-1617
  prefs: []
  type: TYPE_TB
  zh: '| `zone_type` | `zone` 表示的时区类型 |'
- en: '| `zone` | The time zone the time is in |'
  id: totrans-1618
  prefs: []
  type: TYPE_TB
  zh: '| `zone` | 时间所在的时区 |'
- en: '| `is_dst` | True if the time represents a time in Daylight Saving Time |'
  id: totrans-1619
  prefs: []
  type: TYPE_TB
  zh: '| `is_dst` | 如果时间表示夏令时，则为 True |'
- en: date_sun_info
  id: totrans-1620
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: date_sun_info
- en: '`array date_sun_info(int` *timestamp*`, float` *latitude*`, float` *longitude*`)`'
  id: totrans-1621
  prefs: []
  type: TYPE_NORMAL
  zh: '`array date_sun_info(int` *timestamp*`, float` *latitude*`, float` *longitude*`)`'
- en: 'Returns information as an associative array about the times of sunrise and
    sunset, and the times twilight begins and ends, at a given latitude and longitude.
    The resulting array contains the following keys:'
  id: totrans-1622
  prefs: []
  type: TYPE_NORMAL
  zh: 返回给定纬度和经度的日出和日落时间以及黄昏开始和结束时间的关联数组信息。结果数组包含以下键：
- en: '| `sunrise` | The time sunrise occurs |'
  id: totrans-1623
  prefs: []
  type: TYPE_TB
  zh: '| `sunrise` | 日出时间 |'
- en: '| `sunset` | The time sunset occurs |'
  id: totrans-1624
  prefs: []
  type: TYPE_TB
  zh: '| `sunset` | 日落时间 |'
- en: '| `transit` | The time the sun is at its zenith |'
  id: totrans-1625
  prefs: []
  type: TYPE_TB
  zh: '| `transit` | 太阳处于天顶的时间'
- en: '| `civil_twilight_begin` | The time civil twilight begins |'
  id: totrans-1626
  prefs: []
  type: TYPE_TB
  zh: '| `civil_twilight_begin` | 民用黄昏开始时间 |'
- en: '| `civil_twilight_end` | The time civil twilight ends |'
  id: totrans-1627
  prefs: []
  type: TYPE_TB
  zh: '| `civil_twilight_end` | 民用黄昏结束时间 |'
- en: '| `nautical_twilight_begin` | The time nautical twilight begins |'
  id: totrans-1628
  prefs: []
  type: TYPE_TB
  zh: '| `nautical_twilight_begin` | 航海黄昏开始时间 |'
- en: '| `nautical_twilight_end` | The time nautical twilight ends |'
  id: totrans-1629
  prefs: []
  type: TYPE_TB
  zh: '| `nautical_twilight_end` | 航海黄昏结束时间 |'
- en: '| `astronomical_twilight_begin` | The time astronomical twilight begins |'
  id: totrans-1630
  prefs: []
  type: TYPE_TB
  zh: '| `astronomical_twilight_begin` | 天文黄昏开始时间 |'
- en: '| `astronomical_twilight_end` | The time astronomical twilight ends |'
  id: totrans-1631
  prefs: []
  type: TYPE_TB
  zh: '| `astronomical_twilight_end` | 天文黄昏结束时间 |'
- en: date_sunrise
  id: totrans-1632
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 日出时间
- en: '`mixed date_sunrise(int` *timestamp*`[, int` *format*`[, float` *latitude*`[,
    float` *longitude* `[, float` *zenith*`[, float` *gmt_offset*`]]]]])`'
  id: totrans-1633
  prefs: []
  type: TYPE_NORMAL
  zh: '`mixed date_sunrise(int` *timestamp*`[, int` *format*`[, float` *latitude*`[,
    float` *longitude* `[, float` *zenith*`[, float` *gmt_offset*`]]]])`'
- en: 'Returns the time of the sunrise for the day in *timestamp*; `false` on failure.
    The *format* parameter determines the format the time is returned as (with a default
    of `SUNFUNCS_RET_STRING`), while the *latitude*, *longitude*, *zenith*, and *gmt_offset*
    parameters provide a specific location. They default to values given in the PHP
    configuration options (*php.ini*). Parameters include:'
  id: totrans-1634
  prefs: []
  type: TYPE_NORMAL
  zh: 返回给定 *timestamp* 的当天日出时间；失败时返回 `false`。*format* 参数确定时间的返回格式（默认为 `SUNFUNCS_RET_STRING`），而
    *latitude*、*longitude*、*zenith* 和 *gmt_offset* 参数提供特定位置的信息。它们默认为 PHP 配置选项中给出的值（*php.ini*）。参数包括：
- en: '| `SUNFUNCS_RET_STRING` | Returns the value as a string; for example, “06:14”
    |'
  id: totrans-1635
  prefs: []
  type: TYPE_TB
  zh: '| `SUNFUNCS_RET_STRING` | 返回字符串值；例如，“06:14” |'
- en: '| `SUNFUNCS_RET_DOUBLE` | Returns the value as a float; for example, 6.233
    |'
  id: totrans-1636
  prefs: []
  type: TYPE_TB
  zh: '| `SUNFUNCS_RET_DOUBLE` | 返回浮点数值；例如，6.233 |'
- en: '| `SUNFUNCS_RET_TIMESTAMP` | Returns the value as a Unix epochal timestamp
    |'
  id: totrans-1637
  prefs: []
  type: TYPE_TB
  zh: '| `SUNFUNCS_RET_TIMESTAMP` | 返回 Unix 时间戳 |'
- en: date_sunset
  id: totrans-1638
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 日落时间
- en: '`mixed date_sunset(int` *timestamp*`[, int` *format*`[, float` *latitude*`[,
    float` *longitude* `[, float` *zenith*`[, float` *gmt_offset*`]]]]])`'
  id: totrans-1639
  prefs: []
  type: TYPE_NORMAL
  zh: '`mixed date_sunset(int` *timestamp*`[, int` *format*`[, float` *latitude*`[,
    float` *longitude* `[, float` *zenith*`[, float` *gmt_offset*`]]]])`'
- en: 'Returns the time of the sunset for the day in *timestamp*; `false` on failure.
    The *format* parameter determines the format the time is returned as (with a default
    of `SUNFUNCS_RET_STRING`), while the *latitude*, *longitude*, *zenith*, and *gmt_offset*
    parameters provide a specific location. They default to values given in the PHP
    configuration options (*php.ini*). Parameters include:'
  id: totrans-1640
  prefs: []
  type: TYPE_NORMAL
  zh: 返回当天日落的时间戳；失败时返回 `false`。*format* 参数决定返回时间的格式（默认为 `SUNFUNCS_RET_STRING`），而 *latitude*、*longitude*、*zenith*
    和 *gmt_offset* 参数提供特定位置的信息。它们默认使用 PHP 配置选项（*php.ini*）中给出的值。参数包括：
- en: '| `SUNFUNCS_RET_STRING` | Returns the value as a string; for example, “19:02”
    |'
  id: totrans-1641
  prefs: []
  type: TYPE_TB
  zh: '| `SUNFUNCS_RET_STRING` | 返回字符串形式的值；例如，“19:02” |'
- en: '| `SUNFUNCS_RET_DOUBLE` | Returns the value as a float; for example, 19.033
    |'
  id: totrans-1642
  prefs: []
  type: TYPE_TB
  zh: '| `SUNFUNCS_RET_DOUBLE` | 返回浮点数形式的值；例如，19.033 |'
- en: '| `SUNFUNCS_RET_TIMESTAMP` | Returns the value as a Unix epochal timestamp
    |'
  id: totrans-1643
  prefs: []
  type: TYPE_TB
  zh: '| `SUNFUNCS_RET_TIMESTAMP` | 返回 Unix 时间戳形式的值 |'
- en: debug_backtrace
  id: totrans-1644
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: debug_backtrace
- en: '`array debug_backtrace([ int` *options* `[, int` *limit*`]])`'
  id: totrans-1645
  prefs: []
  type: TYPE_NORMAL
  zh: '`array debug_backtrace([ int` *options* `[, int` *limit*`]])`'
- en: 'Returns an array of associative arrays containing a backtrace of where PHP
    is currently executing. One element is included per function or file include,
    with the following elements:'
  id: totrans-1646
  prefs: []
  type: TYPE_NORMAL
  zh: 返回包含 PHP 当前执行位置的关联数组的数组。每个函数或文件包含都包含一个元素，具有以下元素：
- en: '| `function` | If in a function, the function’s name as a string |'
  id: totrans-1647
  prefs: []
  type: TYPE_TB
  zh: '| `function` | 如果在函数中，则为函数的名称作为字符串 |'
- en: '| `line` | The line number within the file where the current function or file
    include is located |'
  id: totrans-1648
  prefs: []
  type: TYPE_TB
  zh: '| `line` | 当前函数或文件包含所在文件中的行号 |'
- en: '| `file` | The name of the file the element is in |'
  id: totrans-1649
  prefs: []
  type: TYPE_TB
  zh: '| `file` | 元素所在文件的名称 |'
- en: '| `class` | If in an object instance or class method, the name of the class
    the element is in |'
  id: totrans-1650
  prefs: []
  type: TYPE_TB
  zh: '| `class` | 如果在对象实例或类方法中，则为元素所在的类的名称 |'
- en: '| `object` | If in an object, that object’s name |'
  id: totrans-1651
  prefs: []
  type: TYPE_TB
  zh: '| `object` | 如果在对象中，则为该对象的名称 |'
- en: '| `type` | The current call type: `::` if a static method; `->` if a method;
    nothing if a function |'
  id: totrans-1652
  prefs: []
  type: TYPE_TB
  zh: '| `type` | 当前调用类型：如果是静态方法，则为 `::`；如果是方法，则为 `->`；如果是函数，则为空 |'
- en: '| `args` | If in a function, the arguments used to call that function; if in
    a file include, the include file’s name |'
  id: totrans-1653
  prefs: []
  type: TYPE_TB
  zh: '| `args` | 如果在函数中，则为调用该函数时使用的参数；如果在文件包含中，则为包含文件的名称 |'
- en: Each function call or file include generates a new element in the array. The
    innermost function call or file include is the element with an index of 0; further
    elements are less deep function calls or file includes.
  id: totrans-1654
  prefs: []
  type: TYPE_NORMAL
  zh: 每次函数调用或文件包含都会在数组中生成一个新元素。最内层的函数调用或文件包含的索引为0；更深层次的元素为较浅的函数调用或文件包含。
- en: debug_print_backtrace
  id: totrans-1655
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: debug_print_backtrace
- en: '`void debug_print_backtrace()`'
  id: totrans-1656
  prefs: []
  type: TYPE_NORMAL
  zh: '`void debug_print_backtrace()`'
- en: Prints the current debug backtrace (see `debug_backtrace`) to the client.
  id: totrans-1657
  prefs: []
  type: TYPE_NORMAL
  zh: 打印当前的调试回溯（参见 `debug_backtrace`）到客户端。
- en: decbin
  id: totrans-1658
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: decbin
- en: '`string decbin(int` *decimal*`)`'
  id: totrans-1659
  prefs: []
  type: TYPE_NORMAL
  zh: '`string decbin(int` *decimal*`)`'
- en: Converts the provided *decimal* value to a binary representation of it. Up to
    a 32-bit number, or 2,147,483,647 decimal, can be converted.
  id: totrans-1660
  prefs: []
  type: TYPE_NORMAL
  zh: 将提供的 *decimal* 值转换为其二进制表示形式。最多可以转换为32位数字，或2,147,483,647十进制。
- en: dechex
  id: totrans-1661
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: dechex
- en: '`string dechex(int` *decimal*`)`'
  id: totrans-1662
  prefs: []
  type: TYPE_NORMAL
  zh: '`string dechex(int` *decimal*`)`'
- en: Converts *decimal* to a hexadecimal (base-16) representation of it. Up to a
    32-bit number, or 2,147,483,647 decimal (0x7FFFFFFF hexadecimal), can be converted.
  id: totrans-1663
  prefs: []
  type: TYPE_NORMAL
  zh: 将 *decimal* 转换为其十六进制（base-16）表示。最多可以转换为32位数字，或2,147,483,647十进制（0x7FFFFFFF 十六进制）。
- en: decoct
  id: totrans-1664
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: decoct
- en: '`string decoct(int` *decimal*`)`'
  id: totrans-1665
  prefs: []
  type: TYPE_NORMAL
  zh: '`string decoct(int` *decimal*`)`'
- en: Converts *decimal* to an octal (base-8) representation of it. Up to a 32-bit
    number, or 2,147,483,647 decimal (017777777777 octal), can be converted.
  id: totrans-1666
  prefs: []
  type: TYPE_NORMAL
  zh: 将 *decimal* 转换为其八进制（base-8）表示。最多可以转换为32位数字，或2,147,483,647十进制（017777777777 八进制）。
- en: define
  id: totrans-1667
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: define
- en: '`bool define(string` *name*`, mixed` *value*`[, int` *case_insensitive*`])`'
  id: totrans-1668
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool define(string` *name*`, mixed` *value*`[, int` *case_insensitive*`])`'
- en: Defines a constant named *name* and sets its value to *value*. If *case_insensitive*
    is set and is `true`, the operation fails if a constant with the same name, compared
    case-insensitively, is previously defined. Otherwise, the check for existing constants
    is done case-sensitively. Returns `true` if the constant could be created, and
    `false` if a constant with the given name already exists.
  id: totrans-1669
  prefs: []
  type: TYPE_NORMAL
  zh: 定义一个名为 *name* 的常量，并将其值设置为 *value*。如果 *case_insensitive* 设置为 `true`，则如果先前定义了与该名称（不区分大小写比较）相同的常量，则操作失败。否则，将区分大小写地检查现有的常量。如果常量可以创建，则返回
    `true`，如果已存在具有给定名称的常量，则返回 `false`。
- en: define_syslog_variables
  id: totrans-1670
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: define_syslog_variables
- en: '`void define_syslog_variables()`'
  id: totrans-1671
  prefs: []
  type: TYPE_NORMAL
  zh: '`void define_syslog_variables()`'
- en: Initializes all variables and constants used by the syslog functions `openlog()`,
    `syslog()`, and `closelog()`. This function should be called before using any
    of the syslog functions.
  id: totrans-1672
  prefs: []
  type: TYPE_NORMAL
  zh: 初始化由`openlog()`、`syslog()`和`closelog()`使用的所有变量和常量。在使用任何syslog函数之前应调用此函数。
- en: defined
  id: totrans-1673
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: defined
- en: '`bool defined(string` *name*`)`'
  id: totrans-1674
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool defined(string` *name*`)`'
- en: Returns `true` if a constant with the name *name* exists, and `false` if a constant
    with that name does not exist.
  id: totrans-1675
  prefs: []
  type: TYPE_NORMAL
  zh: 如果存在一个名为*name*的常量则返回`true`，否则返回`false`。
- en: deflate_add
  id: totrans-1676
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: deflate_add
- en: '`void deflate_init(resource` *context*`, string` *data*`[, int` *flush_mode*`])`'
  id: totrans-1677
  prefs: []
  type: TYPE_NORMAL
  zh: '`void deflate_init(resource` *context*`, string` *data*`[, int` *flush_mode*`])`'
- en: Adds *data* to the deflate context *context*, and checks if the context should
    be flushed based on *flush_mode*, which is one of `ZLIB_BLOCK`, `ZLIB_NO_FLUSH`,
    `ZLIB_PARTIAL_FLUSH`, `ZLIB_SYNC_FLUSH` (the default), `ZLIB_FULL_FLUSH`, or `ZLIB_FINISH`.
    When adding most chunks of data, choose `ZLIB_NO_FLUSH` to maximize compression
    attempts. After the last chunk has been added, use `ZLIB_FINISH` to indicate the
    context is complete.
  id: totrans-1678
  prefs: []
  type: TYPE_NORMAL
  zh: 将*data*添加到deflate上下文*context*中，并根据*flush_mode*检查上下文是否应该刷新。*flush_mode*可以是`ZLIB_BLOCK`、`ZLIB_NO_FLUSH`、`ZLIB_PARTIAL_FLUSH`、`ZLIB_SYNC_FLUSH`（默认）、`ZLIB_FULL_FLUSH`或`ZLIB_FINISH`之一。在添加大多数数据块时，选择`ZLIB_NO_FLUSH`以最大化压缩尝试。在添加最后一个数据块后，请使用`ZLIB_FINISH`指示上下文已完成。
- en: deflate_init
  id: totrans-1679
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: deflate_init
- en: '`void deflate_init(int` *encoding*`[, array` *options*`])`'
  id: totrans-1680
  prefs: []
  type: TYPE_NORMAL
  zh: '`void deflate_init(int` *encoding*`[, array` *options*`])`'
- en: Initializes and returns an incremental deflation context. This context can be
    used to incrementally deflate data using calls to `deflate_add()` using that context.
  id: totrans-1681
  prefs: []
  type: TYPE_NORMAL
  zh: 初始化并返回一个增量式的deflate上下文。可以使用对该上下文的`deflate_add()`调用来逐步进行数据的deflate压缩。
- en: '| `level` | The compression range from –1 through 9 |'
  id: totrans-1682
  prefs: []
  type: TYPE_TB
  zh: '| `level` | 压缩范围从–1到9 |'
- en: '| `memory` | The compression memory level from 1 through 9 |'
  id: totrans-1683
  prefs: []
  type: TYPE_TB
  zh: '| `memory` | 压缩内存级别从1到9 |'
- en: '| `window` | The zlib window size from 8 through 15 |'
  id: totrans-1684
  prefs: []
  type: TYPE_TB
  zh: '| `window` | zlib窗口大小从8到15 |'
- en: '| `strategy` | The compression strategy to use; either `ZLIB_FILTERED`, `ZLIB_HUFFMAN_ONLY`,
    `ZLIB_RLE`, `ZLIB_FIXED`, or `ZLIB_DEFAULT_STRATEGY` (default) |'
  id: totrans-1685
  prefs: []
  type: TYPE_TB
  zh: '| `strategy` | 使用的压缩策略；可以是`ZLIB_FILTERED`、`ZLIB_HUFFMAN_ONLY`、`ZLIB_RLE`、`ZLIB_FIXED`或`ZLIB_DEFAULT_STRATEGY`（默认）
    |'
- en: '| `dictionary` | A string or array of strings of the compression preset dictionary
    |'
  id: totrans-1686
  prefs: []
  type: TYPE_TB
  zh: '| `dictionary` | 压缩预设字典的字符串或字符串数组 |'
- en: deg2rad
  id: totrans-1687
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: deg2rad
- en: '`float deg2rad(float` *number*`)`'
  id: totrans-1688
  prefs: []
  type: TYPE_NORMAL
  zh: '`float deg2rad(float` *number*`)`'
- en: Converts *number* from degrees to radians and returns the result.
  id: totrans-1689
  prefs: []
  type: TYPE_NORMAL
  zh: 将*number*从度转换为弧度并返回结果。
- en: dir
  id: totrans-1690
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: dir
- en: '`directory dir(string` *path*`[, resource` *context*`])`'
  id: totrans-1691
  prefs: []
  type: TYPE_NORMAL
  zh: '`directory dir(string` *path*`[, resource` *context*`])`'
- en: Returns an instance of the `directory` class initialized to the given *path*.
    You can use the `read()`, `rewind()`, and `close()` methods on the object as equivalent
    to the `readdir()`, `rewinddir()`, and `closedir()` procedural functions.
  id: totrans-1692
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个初始化为给定路径的`directory`类实例。您可以在对象上使用`read()`、`rewind()`和`close()`方法，这些方法相当于过程函数`readdir()`、`rewinddir()`和`closedir()`。
- en: dirname
  id: totrans-1693
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: dirname
- en: '`string dirname(string` *path*`)`'
  id: totrans-1694
  prefs: []
  type: TYPE_NORMAL
  zh: '`string dirname(string` *path*`)`'
- en: Returns the directory component of *path*. This includes everything up to the
    filename portion (see `basename`) and doesn’t include the trailing path separator.
  id: totrans-1695
  prefs: []
  type: TYPE_NORMAL
  zh: 返回*path*的目录部分。这包括直到文件名部分的所有内容（参见`basename`），不包括尾部路径分隔符。
- en: disk_free_space
  id: totrans-1696
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: disk_free_space
- en: '`float disk_free_space(string` *path*`)`'
  id: totrans-1697
  prefs: []
  type: TYPE_NORMAL
  zh: '`float disk_free_space(string` *path*`)`'
- en: Returns the number of bytes of free space available on the disk partition or
    filesystem at *path*.
  id: totrans-1698
  prefs: []
  type: TYPE_NORMAL
  zh: 返回磁盘分区或文件系统上*path*处的空闲空间大小（以字节为单位）。
- en: disk_total_space
  id: totrans-1699
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: disk_total_space
- en: '`float disk_total_space(string` *path*`)`'
  id: totrans-1700
  prefs: []
  type: TYPE_NORMAL
  zh: '`float disk_total_space(string` *path*`)`'
- en: Returns the number of bytes of total space available (including both used and
    free) on the disk partition or filesystem at *path*.
  id: totrans-1701
  prefs: []
  type: TYPE_NORMAL
  zh: 返回磁盘分区或文件系统上*path*处的总空间大小（包括已使用和空闲的字节）。
- en: each
  id: totrans-1702
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: each
- en: '`array each(array &`*array*`)`'
  id: totrans-1703
  prefs: []
  type: TYPE_NORMAL
  zh: '`array each(array &`*array*`)`'
- en: 'Creates an array containing the keys and values of the element currently pointed
    at by the array’s internal pointer. The array contains four elements: elements
    with the keys `0` and *key* containing the key of the element, and elements with
    the keys `1` and *value* containing the value of the element.'
  id: totrans-1704
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个包含当前指向的数组元素的键和值的数组。数组包含四个元素：键为`0`和*key*，包含元素的键；值为`1`和*value*，包含元素的值。
- en: If the internal pointer of the array points beyond the end of the array, `each()`
    returns `false`.
  id: totrans-1705
  prefs: []
  type: TYPE_NORMAL
  zh: 如果数组的内部指针指向数组末尾之外，则`each()`返回`false`。
- en: echo
  id: totrans-1706
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: echo
- en: '`void echo string` *string*`[, string` *string2*`[, string` *stringN* `...]]`'
  id: totrans-1707
  prefs: []
  type: TYPE_NORMAL
  zh: '`void echo string` *string*`[, string` *string2*`[, string` *stringN* `...]]`'
- en: Outputs the given strings. `echo` is a language construct, and enclosing the
    parameters in parentheses is optional, unless multiple parameters are given—in
    which case, you cannot use parentheses.
  id: totrans-1708
  prefs: []
  type: TYPE_NORMAL
  zh: 输出给定的字符串。`echo` 是一种语言结构，可以选择性地用括号括起参数，除非有多个参数，否则不能使用括号。
- en: empty
  id: totrans-1709
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`empty`'
- en: '`bool empty(mixed` *value*`)`'
  id: totrans-1710
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool empty(mixed` *value*`)`'
- en: Returns `true` if *value* is either `0` or not set, and `false` otherwise.
  id: totrans-1711
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 *value* 是 `0` 或未设置，则返回 `true`，否则返回 `false`。
- en: end
  id: totrans-1712
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: end
- en: '`mixed end(array &`*array*`)`'
  id: totrans-1713
  prefs: []
  type: TYPE_NORMAL
  zh: '`mixed end(array &`*array*`)`'
- en: Advances the array’s internal pointer to the last element and returns the element’s
    value.
  id: totrans-1714
  prefs: []
  type: TYPE_NORMAL
  zh: 将数组的内部指针推进到最后一个元素并返回该元素的值。
- en: error_clear_last
  id: totrans-1715
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`error_clear_last`'
- en: '`array error_clear_last()`'
  id: totrans-1716
  prefs: []
  type: TYPE_NORMAL
  zh: '`array error_clear_last()`'
- en: Clears the most recent error; it will no longer be returned by `error_get_last()`.
  id: totrans-1717
  prefs: []
  type: TYPE_NORMAL
  zh: 清除最近的错误；它将不再被 `error_get_last()` 返回。
- en: error_get_last
  id: totrans-1718
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`error_get_last`'
- en: '`array error_get_last()`'
  id: totrans-1719
  prefs: []
  type: TYPE_NORMAL
  zh: '`array error_get_last()`'
- en: 'Returns an associative array of information about the most recent error that
    occurred, or `NULL` if no errors have yet occurred while processing the current
    script. The following values are included in the array:'
  id: totrans-1720
  prefs: []
  type: TYPE_NORMAL
  zh: 返回关于最近发生的错误的关联数组信息，如果在处理当前脚本时尚未发生错误，则返回 `NULL`。数组中包括以下值：
- en: '| `type` | The type of error |'
  id: totrans-1721
  prefs: []
  type: TYPE_TB
  zh: '| `type` | 错误的类型 |'
- en: '| `message` | Printable version of the error |'
  id: totrans-1722
  prefs: []
  type: TYPE_TB
  zh: '| `message` | 错误的可打印版本 |'
- en: '| `file` | The full path to the file where the error occurred |'
  id: totrans-1723
  prefs: []
  type: TYPE_TB
  zh: '| `file` | 发生错误的文件的完整路径 |'
- en: '| `line` | The line number within the file where the error occurred |'
  id: totrans-1724
  prefs: []
  type: TYPE_TB
  zh: '| `line` | 发生错误的文件中的行号 |'
- en: error_log
  id: totrans-1725
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`error_log`'
- en: '`bool error_log(string` *message*`, int` *type*`[, string` *destination*`[,
    string` *headers*`]])`'
  id: totrans-1726
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool error_log(string` *message*`, int` *type*`[, string` *destination*`[,
    string` *headers*`]])`'
- en: 'Records an error message to the web server’s error log, to an email address,
    or to a file. The first parameter is the message to log. The type is one of the
    following:'
  id: totrans-1727
  prefs: []
  type: TYPE_NORMAL
  zh: 记录错误消息到Web服务器的错误日志，电子邮件地址或文件中。第一个参数是要记录的消息。类型是以下之一：
- en: '| `0` | `message` is sent to the PHP system log; the message is put into the
    file pointed at by the `error_log` configuration directive. |'
  id: totrans-1728
  prefs: []
  type: TYPE_TB
  zh: '| `0` | `message` 发送到PHP系统日志；消息被放入由 `error_log` 配置指令指向的文件中。 |'
- en: '| `1` | `message` is sent to the email address destination. If specified, *headers*
    provides optional headers to use when creating the message (see `mail` for more
    information on the optional headers). |'
  id: totrans-1729
  prefs: []
  type: TYPE_TB
  zh: '| `1` | `message` 发送到电子邮件地址 *destination*。如果指定了 *headers*，则提供用于创建消息的可选头部（有关可选头部的更多信息，请参见
    `mail`）。 |'
- en: '| `3` | Appends *message* to the file *destination*. |'
  id: totrans-1730
  prefs: []
  type: TYPE_TB
  zh: '| `3` | 将 *message* 追加到文件 *destination* 中。 |'
- en: '| `4` | `message` is sent directly to the Server Application Programming Interface
    (SAPI) logging handler. |'
  id: totrans-1731
  prefs: []
  type: TYPE_TB
  zh: '| `4` | `message` 直接发送到服务器应用程序接口（SAPI）日志处理程序。 |'
- en: error_reporting
  id: totrans-1732
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`error_reporting`'
- en: '`int error_reporting([int` *level*`])`'
  id: totrans-1733
  prefs: []
  type: TYPE_NORMAL
  zh: '`int error_reporting([int` *level*`])`'
- en: 'Sets the level of errors reported by PHP to *level* and returns the current
    level; if *level* is omitted, the current level of error reporting is returned.
    The following values are available for the function:'
  id: totrans-1734
  prefs: []
  type: TYPE_NORMAL
  zh: 设置PHP报告的错误级别为 *level* 并返回当前级别；如果省略 *level*，则返回当前的错误报告级别。该函数可用以下值：
- en: '| `E_ERROR` | Fatal runtime errors (script execution halts) |'
  id: totrans-1735
  prefs: []
  type: TYPE_TB
  zh: '| `E_ERROR` | 致命的运行时错误（脚本执行停止） |'
- en: '| `E_WARNING` | Runtime warnings |'
  id: totrans-1736
  prefs: []
  type: TYPE_TB
  zh: '| `E_WARNING` | 运行时警告 |'
- en: '| `E_PARSE` | Compile-time parse errors |'
  id: totrans-1737
  prefs: []
  type: TYPE_TB
  zh: '| `E_PARSE` | 编译时解析错误 |'
- en: '| `E_NOTICE` | Runtime notices |'
  id: totrans-1738
  prefs: []
  type: TYPE_TB
  zh: '| `E_NOTICE` | 运行时通知 |'
- en: '| `E_CORE_ERROR` | Errors generated internally by PHP |'
  id: totrans-1739
  prefs: []
  type: TYPE_TB
  zh: '| `E_CORE_ERROR` | PHP内部生成的错误 |'
- en: '| `E_CORE_WARNING` | Warnings generated internally by PHP |'
  id: totrans-1740
  prefs: []
  type: TYPE_TB
  zh: '| `E_CORE_WARNING` | PHP内部生成的警告 |'
- en: '| `E_COMPILE_ERROR` | Errors generated internally by the Zend scripting engine
    |'
  id: totrans-1741
  prefs: []
  type: TYPE_TB
  zh: '| `E_COMPILE_ERROR` | Zend脚本引擎内部生成的错误 |'
- en: '| `E_COMPILE_WARNING` | Warnings generated internally by the Zend scripting
    engine |'
  id: totrans-1742
  prefs: []
  type: TYPE_TB
  zh: '| `E_COMPILE_WARNING` | Zend脚本引擎内部生成的警告 |'
- en: '| `E_USER_ERROR` | Runtime errors generated by a call to `trigger_error()`
    |'
  id: totrans-1743
  prefs: []
  type: TYPE_TB
  zh: '| `E_USER_ERROR` | 由调用 `trigger_error()` 生成的运行时错误 |'
- en: '| `E_USER_WARNING` | Runtime warnings generated by a call to `trigger_error()`
    |'
  id: totrans-1744
  prefs: []
  type: TYPE_TB
  zh: '| `E_USER_WARNING` | 由调用 `trigger_error()` 生成的运行时警告 |'
- en: '| `E_STRICT` | Direct PHP to suggest code changes to assist with forward compatibility
    |'
  id: totrans-1745
  prefs: []
  type: TYPE_TB
  zh: '| `E_STRICT` | 指示PHP建议代码更改以帮助实现向前兼容性 |'
- en: '| `E_RECOVERABLE_ERROR` | If a potentially fatal error has occurred, was caught,
    and properly handled, the code can continue execution |'
  id: totrans-1746
  prefs: []
  type: TYPE_TB
  zh: '| `E_RECOVERABLE_ERROR` | 如果发生潜在致命错误，并且已被捕获并正确处理，则代码可以继续执行 |'
- en: '| `E_DEPRECATED` | If enabled, warnings will be issued about deprecated code
    that will eventually not work properly |'
  id: totrans-1747
  prefs: []
  type: TYPE_TB
  zh: '| `E_DEPRECATED` | 如果启用，将发出有关即将无法正常工作的弃用代码的警告 |'
- en: '| `E_USER_DEPRECATED` | If enabled, any warning message triggered by deprecated
    code can be user-generated with the `trigger_error()` function |'
  id: totrans-1748
  prefs: []
  type: TYPE_TB
  zh: '| `E_USER_DEPRECATED` | 如果启用，通过 `trigger_error()` 函数可以生成任何由弃用代码触发的警告消息 |'
- en: '| `E_ALL` | All of the above options |'
  id: totrans-1749
  prefs: []
  type: TYPE_TB
  zh: '| `E_ALL` | 所有上述选项 |'
- en: 'Any number of these options can be ORed (bitwise OR, `|`) together, so that
    errors in each of the levels are reported. For example, the following code turns
    off user errors and warnings, performs some actions, and then restores the original
    level:'
  id: totrans-1750
  prefs: []
  type: TYPE_NORMAL
  zh: 这些选项可以使用位运算 OR（`|`）组合在一起，以便报告每个级别的错误。例如，以下代码关闭用户错误和警告，执行一些操作，然后恢复原始级别：
- en: '[PRE4]'
  id: totrans-1751
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: escapeshellarg
  id: totrans-1752
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`string escapeshellarg(string` *argument*`)`'
- en: '`string escapeshellarg(string` *argument*`)`'
  id: totrans-1753
  prefs: []
  type: TYPE_NORMAL
  zh: '`string escapeshellarg(string` *argument*`)`'
- en: Properly escapes *argument* so it can be used as a safe argument to a shell
    function. When directly passing user input (such as from forms) to a shell command,
    you should use this function to escape the data to ensure that the argument isn’t
    a security risk.
  id: totrans-1754
  prefs: []
  type: TYPE_NORMAL
  zh: 适当地转义 *argument*，使其可以作为 shell 函数的安全参数使用。当直接将用户输入（例如来自表单）传递给 shell 命令时，应使用此函数来转义数据，以确保参数不构成安全风险。
- en: escapeshellcmd
  id: totrans-1755
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: escapeshellcmd
- en: '`string escapeshellcmd(string` *command*`)`'
  id: totrans-1756
  prefs: []
  type: TYPE_NORMAL
  zh: '`string escapeshellcmd(string` *command*`)`'
- en: Escapes any characters in *command* that could cause a shell command to run
    additional commands. When directly passing user input (such as from forms) to
    the `exec()` or `system()` functions, you should use this function to escape the
    data to ensure that the argument isn’t a security risk.
  id: totrans-1757
  prefs: []
  type: TYPE_NORMAL
  zh: 对 *command* 中可能导致 shell 运行额外命令的字符进行转义。当直接将用户输入（例如来自表单）传递给 `exec()` 或 `system()`
    函数时，应使用此函数来转义数据，以确保参数不构成安全风险。
- en: exec
  id: totrans-1758
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: exec
- en: '`string exec(string` *command*`[, array` *output*`[, int` *return*`]])`'
  id: totrans-1759
  prefs: []
  type: TYPE_NORMAL
  zh: '`string exec(string` *command*`[, array` *output*`[, int` *return*`]])`'
- en: Executes *command* via the shell and returns the last line of output from the
    command’s result. If *output* is specified, it is filled with the lines returned
    by the command. If *return* is specified, it is set to the return status of the
    command.
  id: totrans-1760
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 shell 执行 *command* 并返回命令结果的最后一行输出。如果指定了 *output*，则用命令返回的行填充它。如果指定了 *return*，则设置为命令的返回状态。
- en: If you want to have the results of the command output into the PHP page, use
    `passthru()`.
  id: totrans-1761
  prefs: []
  type: TYPE_NORMAL
  zh: 如果想要将命令输出的结果嵌入到 PHP 页面中，请使用 `passthru()`。
- en: exp
  id: totrans-1762
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: exp
- en: '`float exp(float` *number*`)`'
  id: totrans-1763
  prefs: []
  type: TYPE_NORMAL
  zh: '`float exp(float` *number*`)`'
- en: Returns *e* raised to the *number* power.
  id: totrans-1764
  prefs: []
  type: TYPE_NORMAL
  zh: 返回 *number* 的 *e* 次幂。
- en: explode
  id: totrans-1765
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: explode
- en: '`array explode(string` *separator*`, string` *string*`[, int` *limit*`])`'
  id: totrans-1766
  prefs: []
  type: TYPE_NORMAL
  zh: '`array explode(string` *separator*`, string` *string*`[, int` *limit*`])`'
- en: Returns an array of substrings created by splitting *string* wherever *separator*
    is found. If supplied, a maximum of *limit* substrings will be returned, with
    the last substring returned containing the remainder of the string. If *separator*
    is not found, returns the original string.
  id: totrans-1767
  prefs: []
  type: TYPE_NORMAL
  zh: 返回由在 *separator* 处找到的 *string* 拆分而成的子字符串数组。如果提供了 *limit*，则最多返回 *limit* 个子字符串，最后一个子字符串包含剩余的字符串。如果未找到
    *separator*，则返回原始字符串。
- en: expm1
  id: totrans-1768
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: expm1
- en: '`float expm1(float` *number*`)`'
  id: totrans-1769
  prefs: []
  type: TYPE_NORMAL
  zh: '`float expm1(float` *number*`)`'
- en: Returns `exp(`*number*`) – 1`, computed such that the returned value is accurate
    even when *number* is near 0.
  id: totrans-1770
  prefs: []
  type: TYPE_NORMAL
  zh: 返回 `exp(`*number*`) – 1`，计算使得即使 *number* 接近 0，返回值也准确的结果。
- en: extension_loaded
  id: totrans-1771
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: extension_loaded
- en: '`bool extension_loaded(string` *name*`)`'
  id: totrans-1772
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool extension_loaded(string` *name*`)`'
- en: Returns `true` if the *name*d extension is loaded, and `false` if it is not.
  id: totrans-1773
  prefs: []
  type: TYPE_NORMAL
  zh: 如果加载了 *name* 扩展，返回 `true`，否则返回 `false`。
- en: extract
  id: totrans-1774
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: extract
- en: '`int extract(array` *array*`[, int` *type*`[, string` *prefix*`]])`'
  id: totrans-1775
  prefs: []
  type: TYPE_NORMAL
  zh: '`int extract(array` *array*`[, int` *type*`[, string` *prefix*`]])`'
- en: Sets the value of variables to the values of elements from an array. For each
    element in the array, the key is used to determine the variable name to set, and
    that variable is set to the value of the element.
  id: totrans-1776
  prefs: []
  type: TYPE_NORMAL
  zh: 将变量的值设置为来自数组元素的值。对于数组中的每个元素，使用其键来确定要设置的变量名，并将该变量设置为元素的值。
- en: 'The second argument, if given, takes one of the following values to determine
    behavior if the values in the array have the same name as variables that already
    exist in the local scope:'
  id: totrans-1777
  prefs: []
  type: TYPE_NORMAL
  zh: 如果数组中的值与本地作用域中已存在的变量同名，给定的第二个参数可以取以下任一值以确定行为：
- en: '| `EXTR_OVERWRITE` (default) | Overwrite the existing variable |'
  id: totrans-1778
  prefs: []
  type: TYPE_TB
  zh: '| `EXTR_OVERWRITE`（默认） | 覆盖现有变量 |'
- en: '| `EXTR_SKIP` | Don’t overwrite the existing variable (ignore the value provided
    in the array) |'
  id: totrans-1779
  prefs: []
  type: TYPE_TB
  zh: '| `EXTR_SKIP` | 不覆盖现有变量（忽略数组中提供的值） |'
- en: '| `EXTR_PREFIX_SAME` | Prefix the variable name with the string given as the
    third argument |'
  id: totrans-1780
  prefs: []
  type: TYPE_TB
  zh: '| `EXTR_PREFIX_SAME` | 使用作为第三个参数给出的字符串前缀变量名 |'
- en: '| `EXTR_PREFIX_ALL` | Prefix all variable names with the string given as the
    third argument |'
  id: totrans-1781
  prefs: []
  type: TYPE_TB
  zh: '| `EXTR_PREFIX_ALL` | 使用作为第三个参数给出的字符串前缀所有变量名 |'
- en: '| `EXTR_PREFIX_INVALID` | Prefix any invalid or numeric variable names with
    the string given as the third argument |'
  id: totrans-1782
  prefs: []
  type: TYPE_TB
  zh: '| `EXTR_PREFIX_INVALID` | 使用作为第三个参数给出的字符串前缀任何无效或数值变量名 |'
- en: '| `EXTR_IF_EXISTS` | Replace variable only if it exists in the current symbol
    table |'
  id: totrans-1783
  prefs: []
  type: TYPE_TB
  zh: '| `EXTR_IF_EXISTS` | 仅在当前符号表中存在变量时替换变量 |'
- en: '| `EXTR_PREFIX_IF_EXISTS` | Create prefixed variable names only if the nonprefixed
    version of the same variable exists |'
  id: totrans-1784
  prefs: []
  type: TYPE_TB
  zh: '| `EXTR_PREFIX_IF_EXISTS` | 仅在同一变量的非前缀版本存在时创建带有前缀的变量名 |'
- en: '| `EXTR_REFS` | Extract variables as references |'
  id: totrans-1785
  prefs: []
  type: TYPE_TB
  zh: '| `EXTR_REFS` | 提取变量作为引用 |'
- en: The function returns the number of successfully set variables.
  id: totrans-1786
  prefs: []
  type: TYPE_NORMAL
  zh: 函数返回成功设置的变量数。
- en: fclose
  id: totrans-1787
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 关闭文件
- en: '`bool fclose(int` *handle*`)`'
  id: totrans-1788
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool fclose(int` *handle* `)`'
- en: Closes the file referenced by *handle*; returns `true` if successful and `false`
    if not.
  id: totrans-1789
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭*handle*引用的文件；如果成功，则返回`true`，如果不成功，则返回`false`。
- en: feof
  id: totrans-1790
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: feof
- en: '`bool feof(int` *handle*`)`'
  id: totrans-1791
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool feof(int` *handle* `)`'
- en: Returns `true` if the marker for the file referenced by *handle* is at the end
    of the file (EOF) or if an error occurs. If the marker is not at EOF, returns
    `false`.
  id: totrans-1792
  prefs: []
  type: TYPE_NORMAL
  zh: 如果*handle*引用的文件的标记位于文件末尾（EOF）或发生错误时，则返回`true`。如果标记不在EOF，则返回`false`。
- en: fflush
  id: totrans-1793
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 刷新
- en: '`bool fflush(int` *handle*`)`'
  id: totrans-1794
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool fflush(int` *handle* `)`'
- en: Commits any changes to the file referenced by *handle* to disk, ensuring that
    the file contents are on disk and not just in a disk buffer. If the operation
    succeeds, the function returns `true`; otherwise, it returns `false`.
  id: totrans-1795
  prefs: []
  type: TYPE_NORMAL
  zh: 将对*handle*引用的文件的任何更改提交到磁盘，确保文件内容在磁盘上而不仅仅在磁盘缓冲区中。如果操作成功，则函数返回`true`；否则，返回`false`。
- en: fgetc
  id: totrans-1796
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: fgetc
- en: '`string fgetc(int` *handle*`)`'
  id: totrans-1797
  prefs: []
  type: TYPE_NORMAL
  zh: '`string fgetc(int` *handle* `)`'
- en: Returns the character at the marker for the file referenced by *handle* and
    moves the marker to the next character. If the marker is at the end of the file,
    the function returns `false`.
  id: totrans-1798
  prefs: []
  type: TYPE_NORMAL
  zh: 返回由*handle*引用的文件标记处的字符，并将标记移动到下一个字符。如果标记位于文件末尾，则函数返回`false`。
- en: fgetcsv
  id: totrans-1799
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: fgetcsv
- en: '`array fgetcsv(resource` *handle*`[, int` *length*`[, string` *delimiter*`[,
    string` *enclosure* `[, string` *escape*`]]]])`'
  id: totrans-1800
  prefs: []
  type: TYPE_NORMAL
  zh: '`array fgetcsv(resource` *handle* `[, int` *length* `[, string` *delimiter*
    `[, string` *enclosure* `[, string` *escape* `]]]])`'
- en: 'Reads the next line from the file referenced by *handle* and parses the line
    as a comma-separated values (CSV) line. The longest line to read is given by *length*.
    If *delimiter* is supplied, it is used to delimit the values for the line instead
    of commas. If supplied, *enclosure* is a single character that is used to enclose
    values (by default, the double quote character, `"`). *escape* sets the escape
    character to use; the default is backslash `\`; only one character can be specified.
    For example, to read and display all lines from a file containing tab-separated
    values, use:'
  id: totrans-1801
  prefs: []
  type: TYPE_NORMAL
  zh: 从被*handle*引用的文件中读取下一行，并将该行解析为逗号分隔的值（CSV）行。要读取的最长行由*length*给出。如果提供了*delimiter*，则用其作为行中的值的分隔符，而不是逗号。如果提供了*enclosure*，则用单个字符作为值的封闭符（默认为双引号字符，`"`）。*escape*设置要使用的转义字符；默认为反斜杠`\`；只能指定一个字符。例如，要读取并显示包含制表符分隔值的文件中的所有行，请使用：
- en: '[PRE5]'
  id: totrans-1802
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: fgets
  id: totrans-1803
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 获取文件行
- en: '`string fgets(resource` *handle* `[, int` *length*`])`'
  id: totrans-1804
  prefs: []
  type: TYPE_NORMAL
  zh: '`string fgets(resource` *handle* `[, int` *length* `])`'
- en: Reads a string from the file referenced by *handle*; a string of no more than
    *length* characters is returned, but the read ends at *length* `− 1` (for the
    end-of-line character) characters, at an end-of-line character, or at EOF. Returns
    `false` if any error occurs.
  id: totrans-1805
  prefs: []
  type: TYPE_NORMAL
  zh: 从被*handle*引用的文件中读取一个字符串；返回最多*length*个字符的字符串，但读取会在*length* `− 1`（用于换行字符）个字符处、换行字符处或EOF处结束。如果发生任何错误，则返回`false`。
- en: fgetss
  id: totrans-1806
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: fgetss
- en: '`string fgetss(resource` *handle* `[, int` *length*`[, string` *tags*`]])`'
  id: totrans-1807
  prefs: []
  type: TYPE_NORMAL
  zh: '`string fgetss(resource` *handle* `[, int` *length* `[, string` *tags* `]])`'
- en: Reads a string from the file referenced by *handle*; a string of no more than
    *length* characters is returned, but the read ends at *length* `− 1` (for the
    end-of-line character) characters, at an end-of-line character, or at EOF. Any
    PHP and HTML tags in the string, except those listed in *tags*, are stripped before
    returning it. Returns `false` if any error occurs.
  id: totrans-1808
  prefs: []
  type: TYPE_NORMAL
  zh: 从被*handle*引用的文件中读取一个字符串；返回最多*length*个字符的字符串，但读取会在*length* `− 1`（用于换行字符）个字符处、换行字符处或EOF处结束。返回字符串之前，将其中的任何PHP和HTML标签（除*tags*中列出的标签外）剥离。如果发生任何错误，则返回`false`。
- en: file
  id: totrans-1809
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 文件
- en: '`array file(string` *filename*`[, int` *flags* `[, resource` *context*`]])`'
  id: totrans-1810
  prefs: []
  type: TYPE_NORMAL
  zh: '`array file(string` *filename*`[, int` *flags* `[, resource` *context*`]])`'
- en: 'Reads the *file* into an array. *flags* can be one or more of the following
    constants:'
  id: totrans-1811
  prefs: []
  type: TYPE_NORMAL
  zh: 将*文件*读入数组中。*flags*可以是以下常量之一或多个：
- en: '| `FILE_USE_INCLUDE_PATH` | Search for the file in the include path as set
    in the *php.ini* file |'
  id: totrans-1812
  prefs: []
  type: TYPE_TB
  zh: '| `FILE_USE_INCLUDE_PATH` | 在*php.ini*文件中设置的包含路径中搜索文件 |'
- en: '| `FILE_IGNORE_NEW_LINES` | Do not add a newline at the end of the array elements
    |'
  id: totrans-1813
  prefs: []
  type: TYPE_TB
  zh: '| `FILE_IGNORE_NEW_LINES` | 不在数组元素末尾添加换行符 |'
- en: '| `FILE_SKIP_EMPTY_LINES` | Skip any empty lines |'
  id: totrans-1814
  prefs: []
  type: TYPE_TB
  zh: '| `FILE_SKIP_EMPTY_LINES` | 跳过任何空行 |'
- en: file_exists
  id: totrans-1815
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`file_exists`'
- en: '`bool file_exists(string` *path*`)`'
  id: totrans-1816
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool file_exists(string` *path*`)`'
- en: Returns `true` if the file at *path* exists and `false` if not.
  id: totrans-1817
  prefs: []
  type: TYPE_NORMAL
  zh: 如果*path*处的文件存在，则返回`true`，否则返回`false`。
- en: fileatime
  id: totrans-1818
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`fileatime`'
- en: '`int fileatime(string` *path*`)`'
  id: totrans-1819
  prefs: []
  type: TYPE_NORMAL
  zh: '`int fileatime(string` *path*`)`'
- en: Returns the last access time, as a Unix timestamp value, for the file *path*.
    Because of the cost involved in retrieving this information from the filesystem,
    this information is cached; you can clear the cache with `clearstatcache()`.
  id: totrans-1820
  prefs: []
  type: TYPE_NORMAL
  zh: 返回文件*path*的最后访问时间，作为Unix时间戳值。由于从文件系统检索此信息的成本，此信息已缓存；您可以使用`clearstatcache()`清除缓存。
- en: filectime
  id: totrans-1821
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`filectime`'
- en: '`int filectime(string` *path*`)`'
  id: totrans-1822
  prefs: []
  type: TYPE_NORMAL
  zh: '`int filectime(string` *path*`)`'
- en: Returns the inode change time value for the file at *path*. Because of the cost
    involved in retrieving this information from the filesystem, this information
    is cached; you can clear the cache with `clearstatcache()`.
  id: totrans-1823
  prefs: []
  type: TYPE_NORMAL
  zh: 返回*path*处文件的inode更改时间值。由于从文件系统检索此信息的成本，此信息已缓存；您可以使用`clearstatcache()`清除缓存。
- en: file_get_contents
  id: totrans-1824
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`file_get_contents`'
- en: '`string file_get_contents(string` *path*`[, bool` *include* `[, resource` *context*
    `[, int` *offset* `[, int` *maxlen*`]]]])`'
  id: totrans-1825
  prefs: []
  type: TYPE_NORMAL
  zh: '`string file_get_contents(string` *path*`[, bool` *include* `[, resource` *context*
    `[, int` *offset* `[, int` *maxlen*`]]]])`'
- en: Reads the file at *path* and returns its contents as a string, optionally starting
    at *offset*. If *include* is specified and is `true`, the include path is searched
    for the file. The length of the returned string can also be controlled with the
    *maxlen* parameter.
  id: totrans-1826
  prefs: []
  type: TYPE_NORMAL
  zh: 读取*path*处的文件，并将其内容作为字符串返回，可选从*offset*开始。如果指定了*include*并且为`true`，则在包含路径中搜索文件。还可以使用*maxlen*参数控制返回字符串的长度。
- en: filegroup
  id: totrans-1827
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`filegroup`'
- en: '`int filegroup(string` *path*`)`'
  id: totrans-1828
  prefs: []
  type: TYPE_NORMAL
  zh: '`int filegroup(string` *path*`)`'
- en: Returns the group ID of the group owning the file *path*. Because of the cost
    involved in retrieving this information from the filesystem, this information
    is cached; you can clear the cache with `clearstatcache()`.
  id: totrans-1829
  prefs: []
  type: TYPE_NORMAL
  zh: 返回*path*处文件的拥有组ID。由于从文件系统检索此信息的成本，此信息已缓存；您可以使用`clearstatcache()`清除缓存。
- en: fileinode
  id: totrans-1830
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`fileinode`'
- en: '`int fileinode(string` *path*`)`'
  id: totrans-1831
  prefs: []
  type: TYPE_NORMAL
  zh: '`int fileinode(string` *path*`)`'
- en: Returns the inode number of the file *path*, or `false` if an error occurs.
    This information is cached; see `clearstatcache`.
  id: totrans-1832
  prefs: []
  type: TYPE_NORMAL
  zh: 返回*path*处文件的inode编号，如果出现错误则返回`false`。此信息已缓存；参见`clearstatcache`。
- en: filemtime
  id: totrans-1833
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`filemtime`'
- en: '`int filemtime(string` *path*`)`'
  id: totrans-1834
  prefs: []
  type: TYPE_NORMAL
  zh: '`int filemtime(string` *path*`)`'
- en: Returns the last-modified time, as a Unix timestamp value, for the file *path*.
    This information is cached; you can clear the cache with `clearstatcache()`.
  id: totrans-1835
  prefs: []
  type: TYPE_NORMAL
  zh: 返回文件*path*的最后修改时间，作为Unix时间戳值。此信息已缓存；您可以使用`clearstatcache()`清除缓存。
- en: fileowner
  id: totrans-1836
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`fileowner`'
- en: '`int fileowner(string` *path*`)`'
  id: totrans-1837
  prefs: []
  type: TYPE_NORMAL
  zh: '`int fileowner(string` *path*`)`'
- en: Returns the user ID of the owner of the file *path*, or `false` if an error
    occurs. This information is cached; you can clear the cache with `clearstatcache()`.
  id: totrans-1838
  prefs: []
  type: TYPE_NORMAL
  zh: 返回*path*处文件的所有者用户ID，如果出现错误则返回`false`。此信息已缓存；您可以使用`clearstatcache()`清除缓存。
- en: fileperms
  id: totrans-1839
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`fileperms`'
- en: '`int fileperms(string` *path*`)`'
  id: totrans-1840
  prefs: []
  type: TYPE_NORMAL
  zh: '`int fileperms(string` *path*`)`'
- en: Returns the file permissions for the file *path*, or `false` if an error occurs.
    This information is cached; you can clear the cache with `clearstatcache()`.
  id: totrans-1841
  prefs: []
  type: TYPE_NORMAL
  zh: 返回文件*path*的文件权限，如果出现错误则返回`false`。此信息已缓存；您可以使用`clearstatcache()`清除缓存。
- en: file_put_contents
  id: totrans-1842
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`file_put_contents`'
- en: '`int file_put_contents(string` *path*`, mixed` *string* `[, int` *flags*`[,
    resource` *context*`]])`'
  id: totrans-1843
  prefs: []
  type: TYPE_NORMAL
  zh: '`int file_put_contents(string` *path*`, mixed` *string* `[, int` *flags*`[,
    resource` *context*`]])`'
- en: 'Opens the file specified by *path*, writes *string* to the file, and then closes
    the file. Returns the number of bytes written to the file, or `−1` on error. The
    *flags* argument is a bitfield with two possible values:'
  id: totrans-1844
  prefs: []
  type: TYPE_NORMAL
  zh: 打开由*path*指定的文件，将*string*写入文件，然后关闭文件。返回写入文件的字节数，如果发生错误则返回`−1`。*flags*参数是一个具有两个可能值的位字段：
- en: '| `FILE_USE_INCLUDE_PATH` | If specified, the include path is searched for
    the file and the file is written at the first location where it already exists
    |'
  id: totrans-1845
  prefs: []
  type: TYPE_TB
  zh: '| `FILE_USE_INCLUDE_PATH` | 如果指定，则在包含路径中搜索文件，并将文件写入其已存在的第一个位置 |'
- en: '| `FILE_APPEND` | If specified and if the file indicated by `path` already
    exists, `string` is appended to the existing contents of the file |'
  id: totrans-1846
  prefs: []
  type: TYPE_TB
  zh: '| `FILE_APPEND` | 如果指定并且由`path`指示的文件已经存在，则`string`将附加到文件的现有内容中 |'
- en: '| `LOCK_EX` | Exclusively lock the file before writing to it |'
  id: totrans-1847
  prefs: []
  type: TYPE_TB
  zh: '| `LOCK_EX` | 在写入文件之前独占锁定文件 |'
- en: filesize
  id: totrans-1848
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: filesize
- en: '`int filesize(string` *path*`)`'
  id: totrans-1849
  prefs: []
  type: TYPE_NORMAL
  zh: '`int filesize(string` *path*`)`'
- en: Returns the size, in bytes, of the file *path*. If the file does not exist or
    any other error occurs, the function returns `false`. This information is cached;
    you can clear the cache with `clearstatcache()`.
  id: totrans-1850
  prefs: []
  type: TYPE_NORMAL
  zh: 返回*path*指定的文件的大小（以字节为单位）。如果文件不存在或出现任何其他错误，则函数返回`false`。此信息被缓存；可以使用`clearstatcache()`清除缓存。
- en: filetype
  id: totrans-1851
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: filetype
- en: '`string filetype(string` *path*`)`'
  id: totrans-1852
  prefs: []
  type: TYPE_NORMAL
  zh: '`string filetype(string` *path*`)`'
- en: 'Returns the type of file given in *path*. The possible types are:'
  id: totrans-1853
  prefs: []
  type: TYPE_NORMAL
  zh: 返回给定*path*中的文件类型。可能的类型有：
- en: '| `Fifo` | The file is a FIFO pipe |'
  id: totrans-1854
  prefs: []
  type: TYPE_TB
  zh: '| `Fifo` | 文件是一个FIFO管道 |'
- en: '| `Char` | The file is a text file |'
  id: totrans-1855
  prefs: []
  type: TYPE_TB
  zh: '| `Char` | 文件是一个文本文件 |'
- en: '| `Dir` | *path* is a directory |'
  id: totrans-1856
  prefs: []
  type: TYPE_TB
  zh: '| `Dir` | *path*是一个目录 |'
- en: '| `Block` | A block reserved for use by the filesystem |'
  id: totrans-1857
  prefs: []
  type: TYPE_TB
  zh: '| `Block` | 由文件系统保留的块 |'
- en: '| `Link` | The file is a symbolic link |'
  id: totrans-1858
  prefs: []
  type: TYPE_TB
  zh: '| `Link` | 文件是一个符号链接 |'
- en: '| `File` | The file contains binary data |'
  id: totrans-1859
  prefs: []
  type: TYPE_TB
  zh: '| `File` | 文件包含二进制数据 |'
- en: '| `Socket` | A socket interface |'
  id: totrans-1860
  prefs: []
  type: TYPE_TB
  zh: '| `Socket` | 一个套接字接口 |'
- en: '| `Unknown` | The file’s type could not be determined |'
  id: totrans-1861
  prefs: []
  type: TYPE_TB
  zh: '| `Unknown` | 无法确定文件类型 |'
- en: filter_has_var
  id: totrans-1862
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: filter_has_var
- en: '`bool filter_has_var(int` *context*`, string` *name*`)`'
  id: totrans-1863
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool filter_has_var(int` *context*`, string` *name*`)`'
- en: Returns `true` if a value named *name* exists in the specified *context*, and
    `false` if it doesn’t. The context is one of `INPUT_GET`, `INPUT_POST`, `INPUT_COOKIE`,
    `INPUT_SERVER`, or `INPUT_ENV`.
  id: totrans-1864
  prefs: []
  type: TYPE_NORMAL
  zh: 如果指定的*context*中存在名为*name*的值，则返回`true`，否则返回`false`。*context*可以是`INPUT_GET`、`INPUT_POST`、`INPUT_COOKIE`、`INPUT_SERVER`或`INPUT_ENV`之一。
- en: filter_id
  id: totrans-1865
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: filter_id
- en: '`int filter_id(string` *name*`)`'
  id: totrans-1866
  prefs: []
  type: TYPE_NORMAL
  zh: '`int filter_id(string` *name*`)`'
- en: Returns the ID for the filter identified by *name*, or `false` if no such filter
    exists.
  id: totrans-1867
  prefs: []
  type: TYPE_NORMAL
  zh: 返回由*name*标识的过滤器的ID，如果没有这样的过滤器，则返回`false`。
- en: filter_input
  id: totrans-1868
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: filter_input
- en: '`mixed filter_input(mixed` *var*`[, int` *filter_id*`[, mixed` *options*`]])`'
  id: totrans-1869
  prefs: []
  type: TYPE_NORMAL
  zh: '`mixed filter_input(mixed` *var*`[, int` *filter_id*`[, mixed` *options*`]])`'
- en: Performs the filter identified by ID *filter_id* on *var* in the given context
    and returns the result. The context is one of `INPUT_GET`, `INPUT_POST`, `INPUT_COOKIE`,
    `INPUT_SERVER`, or `INPUT_ENV`. If *filter_id* is not specified, the default filter
    is used. The *options* parameter can either be a bitfield of flags or an associative
    array of options appropriate to the filter. See [Chapter 4](ch04.xhtml#strings)
    for more information on using filters.
  id: totrans-1870
  prefs: []
  type: TYPE_NORMAL
  zh: 在给定的*context*中对*var*执行由ID *filter_id*标识的过滤器，并返回结果。*context*可以是`INPUT_GET`、`INPUT_POST`、`INPUT_COOKIE`、`INPUT_SERVER`或`INPUT_ENV`之一。如果未指定*filter_id*，则使用默认过滤器。*options*参数可以是适用于过滤器的标志位字段或适当的选项的关联数组。有关使用过滤器的更多信息，请参见[第四章](ch04.xhtml#strings)。
- en: filter_input_array
  id: totrans-1871
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: filter_input_array
- en: '`mixed filter_input_array(array` *variables*`[, mixed` *filters*`])`'
  id: totrans-1872
  prefs: []
  type: TYPE_NORMAL
  zh: '`mixed filter_input_array(array` *variables*`[, mixed` *filters*`])`'
- en: Performs a series of filters against variables in the associative array *variables*
    and returns the results as an associative array. The context is one of `INPUT_GET`,
    `INPUT_POST`, `INPUT_COOKIE`, `INPUT_SERVER`, or `INPUT_ENV`.
  id: totrans-1873
  prefs: []
  type: TYPE_NORMAL
  zh: 对关联数组*variables*中的变量执行一系列过滤器，并将结果作为关联数组返回。*context*可以是`INPUT_GET`、`INPUT_POST`、`INPUT_COOKIE`、`INPUT_SERVER`或`INPUT_ENV`之一。
- en: 'The optional parameter is an associative array where each element’s key is
    a variable name, with the associated value defining the filter and options to
    use to filter that variable’s value. The definition is either the ID of the filter
    to use or an array containing one or more of the following elements:'
  id: totrans-1874
  prefs: []
  type: TYPE_NORMAL
  zh: 可选参数是一个关联数组，其中每个元素的键是变量名，关联值定义了要使用的过滤器及其选项以过滤该变量值。定义可以是要使用的过滤器的ID或包含以下一个或多个元素的数组：
- en: '| `filter` | The ID of the filter to apply |'
  id: totrans-1875
  prefs: []
  type: TYPE_TB
  zh: '| `filter` | 要应用的过滤器的ID |'
- en: '| `flags` | A bitfield of flags |'
  id: totrans-1876
  prefs: []
  type: TYPE_TB
  zh: '| `flags` | 一个标志位字段 |'
- en: '| `options` | An associative array of options specific to the filter |'
  id: totrans-1877
  prefs: []
  type: TYPE_TB
  zh: '| `options` | 一个与过滤器特定选项相关的关联数组 |'
- en: filter_list
  id: totrans-1878
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: filter_list
- en: '`array filter_list()`'
  id: totrans-1879
  prefs: []
  type: TYPE_NORMAL
  zh: '`array filter_list()`'
- en: Returns an array of the name of each available filter; these names can be passed
    into `filter_id()` to obtain a filter ID for use in the other filtering functions.
  id: totrans-1880
  prefs: []
  type: TYPE_NORMAL
  zh: 返回每个可用过滤器的名称的数组；这些名称可以传递给`filter_id()`以获取用于其他过滤函数中使用的过滤器ID。
- en: filter_var
  id: totrans-1881
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: filter_var
- en: '`mixed filter_var(mixed` *var*`[, int` *filter_id*`[, mixed` *options*`]])`'
  id: totrans-1882
  prefs: []
  type: TYPE_NORMAL
  zh: '`mixed filter_var(mixed` *var*`[, int` *filter_id*`[, mixed` *options*`]])`'
- en: Performs the filter identified by ID *filter_id* on *var* and returns the result.
    If *filter_id* is not specified, the default filter is used. The *options* parameter
    can either be a bitfield of flags or an associative array of options appropriate
    to the filter. See [Chapter 4](ch04.xhtml#strings) for more information on using
    filters.
  id: totrans-1883
  prefs: []
  type: TYPE_NORMAL
  zh: 对*var*执行由ID *filter_id*标识的过滤器，并返回结果。如果未指定*filter_id*，则使用默认过滤器。*options*参数可以是标志位组或适用于过滤器的关联数组选项。有关使用过滤器的更多信息，请参见[第四章](ch04.xhtml#strings)。
- en: filter_var_array
  id: totrans-1884
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: filter_var_array
- en: '`mixed filter_var_array(mixed` *var*`[, mixed` *options*`])`'
  id: totrans-1885
  prefs: []
  type: TYPE_NORMAL
  zh: '`mixed filter_var_array(mixed` *var*`[, mixed` *options*`])`'
- en: Performs a series of filters against variables in the specified context and
    returns the results as an associative array. The context is one of `INPUT_GET`,
    `INPUT_POST`, `INPUT_COOKIE`, `INPUT_SERVER`, or `INPUT_ENV`.
  id: totrans-1886
  prefs: []
  type: TYPE_NORMAL
  zh: 对指定上下文中的变量执行一系列过滤器，并将结果作为关联数组返回。上下文是`INPUT_GET`、`INPUT_POST`、`INPUT_COOKIE`、`INPUT_SERVER`或`INPUT_ENV`之一。
- en: 'The *options* parameter is an associative array where each element’s key is
    a variable name, with the associated value defining the filter and options to
    use to filter that variable’s value. The definition is either the ID of the filter
    to use or an array containing one or more of the following elements:'
  id: totrans-1887
  prefs: []
  type: TYPE_NORMAL
  zh: '*options*参数是一个关联数组，其中每个元素的键是变量名，关联的值定义了要用于过滤该变量值的过滤器和选项。定义可以是要使用的过滤器ID，也可以是一个包含以下一个或多个元素的数组：'
- en: '| `filter` | The ID of the filter to apply |'
  id: totrans-1888
  prefs: []
  type: TYPE_TB
  zh: '| `filter` | 应用的过滤器 ID |'
- en: '| `flags` | A bitfield of flags |'
  id: totrans-1889
  prefs: []
  type: TYPE_TB
  zh: '| `flags` | 标志位的位域 |'
- en: '| `options` | An associative array of options specific to the filter |'
  id: totrans-1890
  prefs: []
  type: TYPE_TB
  zh: '| `options` | 特定于过滤器的选项的关联数组 |'
- en: floatval
  id: totrans-1891
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: floatval
- en: '`float floatval(mixed` *value*`)`'
  id: totrans-1892
  prefs: []
  type: TYPE_NORMAL
  zh: '`float floatval(mixed` *value*`)`'
- en: Returns the float value for *value*. If value is a nonscalar (object or array),
    `1` is returned.
  id: totrans-1893
  prefs: []
  type: TYPE_NORMAL
  zh: 返回*value*的浮点数值。如果value是非标量（对象或数组），则返回`1`。
- en: flock
  id: totrans-1894
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: flock
- en: '`bool flock(resource` *handle*`, int` *operation*`[, int` *would_block*`])`'
  id: totrans-1895
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool flock(resource` *handle*`, int` *operation*`[, int` *would_block*`])`'
- en: 'Attempts to lock the file path of the file specified by *handle*. The operation
    is one of the following values:'
  id: totrans-1896
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试锁定由*handle*指定的文件路径。操作是以下值之一：
- en: '| `LOCK_SH` | Shared lock (reader) |'
  id: totrans-1897
  prefs: []
  type: TYPE_TB
  zh: '| `LOCK_SH` | 共享锁（读者） |'
- en: '| `LOCK_EX` | Exclusive lock (writer) |'
  id: totrans-1898
  prefs: []
  type: TYPE_TB
  zh: '| `LOCK_EX` | 独占锁（写者） |'
- en: '| `LOCK_UN` | Release a lock (either shared or exclusive) |'
  id: totrans-1899
  prefs: []
  type: TYPE_TB
  zh: '| `LOCK_UN` | 释放锁定（共享或独占） |'
- en: '| `LOCK_NB` | Add to `LOCK_SH` or `LOCK_EX` to obtain a nonblocking lock |'
  id: totrans-1900
  prefs: []
  type: TYPE_TB
  zh: '| `LOCK_NB` | 将`LOCK_SH`或`LOCK_EX`添加到获取非阻塞锁 |'
- en: If specified, *would_block* is set to `true` if the operation would cause a
    block on the file. The function returns `false` if the lock could not be obtained,
    and `true` if the operation succeeded.
  id: totrans-1901
  prefs: []
  type: TYPE_NORMAL
  zh: 如果指定，如果操作将导致文件阻塞，则*would_block*设置为`true`。如果无法获取锁定，则函数返回`false`，如果操作成功，则返回`true`。
- en: Because file locking is implemented at the process level on most systems, `flock()`
    cannot prevent two PHP scripts running in the same web server process from accessing
    a file at the same time.
  id: totrans-1902
  prefs: []
  type: TYPE_NORMAL
  zh: 因为大多数系统在进程级别实现文件锁定，所以`flock()`无法阻止同一Web服务器进程中运行的两个PHP脚本同时访问文件。
- en: floor
  id: totrans-1903
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: floor
- en: '`float floor(float` *number*`)`'
  id: totrans-1904
  prefs: []
  type: TYPE_NORMAL
  zh: '`float floor(float` *number*`)`'
- en: Returns the largest integer value less than or equal to *number*.
  id: totrans-1905
  prefs: []
  type: TYPE_NORMAL
  zh: 返回小于或等于*number*的最大整数值。
- en: flush
  id: totrans-1906
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: flush
- en: '`void flush()`'
  id: totrans-1907
  prefs: []
  type: TYPE_NORMAL
  zh: '`void flush()`'
- en: Sends the current output buffer to the client and empties the output buffer.
    See [Chapter 15](ch15.xhtml#application_techniques) for more information on using
    the output buffer.
  id: totrans-1908
  prefs: []
  type: TYPE_NORMAL
  zh: 将当前输出缓冲区发送给客户端并清空输出缓冲区。有关使用输出缓冲区的更多信息，请参见[第十五章](ch15.xhtml#application_techniques)。
- en: fmod
  id: totrans-1909
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: fmod
- en: '`float fmod(float` *x*`, float` *y*`)`'
  id: totrans-1910
  prefs: []
  type: TYPE_NORMAL
  zh: '`float fmod(float` *x*`, float` *y*`)`'
- en: Returns the floating-point modulo of the division of *x* by *y*.
  id: totrans-1911
  prefs: []
  type: TYPE_NORMAL
  zh: 返回*x*除以*y*的浮点数模数。
- en: fnmatch
  id: totrans-1912
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: fnmatch
- en: '`bool fnmatch(string` *pattern*`, string` *string*`[, int` *flags*`])`'
  id: totrans-1913
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool fnmatch(string` *pattern*`, string` *string*`[, int` *flags*`])`'
- en: 'Returns `true` if *string* matches the shell wildcard pattern given in *pattern*.
    See `glob` for the pattern-matching rules. The flags value is a bitwise OR of
    any of the following values:'
  id: totrans-1914
  prefs: []
  type: TYPE_NORMAL
  zh: 如果*string*与*pattern*中给出的shell通配符模式匹配，则返回`true`。有关匹配规则，请参见`glob`。flags值是以下任何一个的按位OR：
- en: '| `FNM_NOESCAPE` | Treat backslashes in `pattern` as backslashes, rather than
    as the start of an escape sequence |'
  id: totrans-1915
  prefs: []
  type: TYPE_TB
  zh: '| `FNM_NOESCAPE` | 将`pattern`中的反斜杠视为反斜杠，而不是转义序列的开始 |'
- en: '| `FNM_PATHNAME` | Slash characters in `string` must be matched explicitly
    by slashes in `pattern` |'
  id: totrans-1916
  prefs: []
  type: TYPE_TB
  zh: '| `FNM_PATHNAME` | `string`中的斜杠字符必须与`pattern`中的斜杠显式匹配 |'
- en: '| `FNM_PERIOD` | A period at the beginning of the string, or before any slash
    if `FNM_PATHNAME` is also specified, must be explicitly matched by periods in
    `pattern` |'
  id: totrans-1917
  prefs: []
  type: TYPE_TB
  zh: 打开由*path*指定的文件，并返回指向打开文件的文件资源句柄。如果*path*以`http://`开头，则打开一个HTTP连接并返回响应起始处的文件指针。如果*path*以`ftp://`开头，则打开FTP连接并返回文件起始处的文件指针；远程服务器必须支持被动FTP。
- en: '| `FNM_CASEFOLD` | Ignore case when matching `string` to `pattern` |'
  id: totrans-1918
  prefs: []
  type: TYPE_TB
  zh: forward_static_call
- en: fopen
  id: totrans-1919
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '| `w` | 仅打开文件进行写入。如果文件存在，则将其截断为零长度；如果文件不存在，则创建该文件。 |'
- en: '`resource fopen(string` *path*`, string` *mode*`[, bool` *include* `[, resource`
    *context*`]])`'
  id: totrans-1920
  prefs: []
  type: TYPE_NORMAL
  zh: 调用*function*指定的静态方法，并传递提供的参数。如果*function*包含类名，则使用延迟静态绑定来找到方法的适当类。返回函数返回的值。
- en: Opens the file specified by *path* and returns a file resource handle to the
    open file. If *path* begins with `http://`, an HTTP connection is opened and a
    file pointer to the start of the response is returned. If *path* begins with `ftp://`,
    an FTP connection is opened and a file pointer to the start of the file is returned;
    the remote server must support passive FTP.
  id: totrans-1921
  prefs: []
  type: TYPE_NORMAL
  zh: '`resource fopen(string` *path*`, string` *mode*`[, bool` *include* `[, resource`
    *context*`]])`'
- en: If *path* is `php://stdin`, `php://stdout`, or `php://stderr`, a file pointer
    to the appropriate stream is returned.
  id: totrans-1922
  prefs: []
  type: TYPE_NORMAL
  zh: '| `FNM_CASEFOLD` | 在将`string`与`pattern`匹配时忽略大小写。 |'
- en: 'The parameter *mode* specifies the permissions to open the file with. It must
    be one of the following:'
  id: totrans-1923
  prefs: []
  type: TYPE_NORMAL
  zh: '| `a+` | 以读写方式打开文件。如果文件存在，则文件指针将位于文件末尾；如果文件不存在，则创建该文件。 |'
- en: '| `r` | Open the file for reading; file pointer will be at beginning of file.
    |'
  id: totrans-1924
  prefs: []
  type: TYPE_TB
  zh: 如果尝试打开文件时发生任何错误，则返回`false`。
- en: '| `r+` | Open the file for reading and writing; file pointer will be at beginning
    of file. |'
  id: totrans-1925
  prefs: []
  type: TYPE_TB
  zh: '| `a` | 仅打开文件进行写入。如果文件存在，则文件指针将位于文件末尾；如果文件不存在，则创建该文件。 |'
- en: '| `w` | Open the file for writing. If the file exists, it will be truncated
    to zero length; if the file doesn’t already exist, it will be created. |'
  id: totrans-1926
  prefs: []
  type: TYPE_TB
  zh: '| `x` | 创建并仅打开文件进行写入；将文件指针置于文件开头。 |'
- en: '| `w+` | Open the file for reading and writing. If the file exists, it will
    be truncated to zero length; if the file doesn’t already exist, it will be created.
    The file pointer starts at the beginning of the file. |'
  id: totrans-1927
  prefs: []
  type: TYPE_TB
  zh: 如果指定了*include*并且为`true`，`fopen()`会尝试在当前*include*路径中定位文件。
- en: '| `a` | Open the file for writing. If the file exists, the file pointer will
    be at the end of the file; if the file does not exist, it is created. |'
  id: totrans-1928
  prefs: []
  type: TYPE_TB
  zh: fopen
- en: '| `a+` | Open the file for reading and writing. If the file exists, the file
    pointer will be at the end of the file; if the file does not exist, it is created.
    |'
  id: totrans-1929
  prefs: []
  type: TYPE_TB
  zh: '| `r+` | 以读写方式打开文件；文件指针将位于文件开头。 |'
- en: '| `x` | Create and open file for writing only; place the file pointer at the
    beginning of the file. |'
  id: totrans-1930
  prefs: []
  type: TYPE_TB
  zh: 如果*path*为`php://stdin`、`php://stdout`或`php://stderr`，则返回适当流的文件指针。
- en: '| `x+` | Create and open file for reading and writing. |'
  id: totrans-1931
  prefs: []
  type: TYPE_TB
  zh: 参数*mode*指定打开文件的权限。必须是以下之一：
- en: '| `c` | Open the file for writing only. If the file does not exist, it is created.
    If it exists, it is not truncated (as is the case with `w`), nor does the call
    to this function fail (as is the case with `x`). The file pointer is positioned
    at the beginning of the file. |'
  id: totrans-1932
  prefs: []
  type: TYPE_TB
  zh: '| `FNM_PERIOD` | 字符串开头处的句点，或者如果同时指定了`FNM_PATHNAME`，则在任何斜杠之前必须显式匹配`pattern`中的句点。
    |'
- en: '| `c+` | Open the file for reading and writing. |'
  id: totrans-1933
  prefs: []
  type: TYPE_TB
  zh: '`mixed forward_static_call_array(callable` *function*`, array` *parameters*`)`'
- en: If *include* is specified and is `true`, `fopen()` tries to locate the file
    in the current *include* path.
  id: totrans-1934
  prefs: []
  type: TYPE_NORMAL
  zh: '| `c` | 仅打开文件进行写入。如果文件不存在，则创建该文件。如果文件存在，则不截断（与`w`不同），也不会调用失败（与`x`不同）。文件指针定位在文件开头。
    |'
- en: If any error occurs while attempting to open the file, `false` is returned.
  id: totrans-1935
  prefs: []
  type: TYPE_NORMAL
  zh: '| `x+` | 创建并以读写方式打开文件。 |'
- en: forward_static_call
  id: totrans-1936
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: forward_static_call_array
- en: '`mixed forward_static_call(callable` *function*`[, mixed` *parameter1*`[, ...
    mixed` *parameterN*`]])`'
  id: totrans-1937
  prefs: []
  type: TYPE_NORMAL
  zh: '`mixed forward_static_call(callable` *function*`[, mixed` *parameter1*`[, ...
    mixed` *parameterN*`]])`'
- en: Calls the function named *function* in the current object’s context with the
    parameters provided. If *function* includes a class name, it uses late static
    binding to find the appropriate class for the method. Returns the value returned
    by the function.
  id: totrans-1938
  prefs: []
  type: TYPE_NORMAL
  zh: 调用当前对象上下文中名为*function*的函数，并使用提供的参数。如果*function*包含类名，则使用延迟静态绑定来找到方法的适当类。返回函数返回的值。
- en: forward_static_call_array
  id: totrans-1939
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '| `w+` | 以读写方式打开文件。如果文件存在，将截断为零长度；如果文件不存在，则创建该文件。文件指针从文件开头开始。 |'
- en: '`mixed forward_static_call_array(callable` *function*`, array` *parameters*`)`'
  id: totrans-1940
  prefs: []
  type: TYPE_NORMAL
  zh: '| `r` | 以读取方式打开文件；文件指针将位于文件开头。 |'
- en: Calls the function named *function* in the current object’s context with the
    parameters in the array *parameters*. If *function* includes a class name, it
    uses late static binding to find the appropriate class for the method. Returns
    the value returned by the function.
  id: totrans-1941
  prefs: []
  type: TYPE_NORMAL
  zh: 在当前对象的上下文中调用名为*function*的函数，并使用数组*parameters*中的参数。如果*function*包括类名，则使用延迟静态绑定查找方法的适当类。返回函数返回的值。
- en: fpassthru
  id: totrans-1942
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: fpassthru
- en: '`int fpassthru(resource` *handle*`)`'
  id: totrans-1943
  prefs: []
  type: TYPE_NORMAL
  zh: '`int fpassthru(resource` *handle*`)`'
- en: Outputs the file pointed to by *handle* and closes the file. The file is output
    from the current file pointer location to EOF. If any error occurs, `false` is
    returned; if the operation is successful, `true` is returned.
  id: totrans-1944
  prefs: []
  type: TYPE_NORMAL
  zh: 输出指向的文件，并关闭文件句柄。文件从当前文件指针位置输出直到文件结束。如果发生任何错误，返回`false`；如果操作成功，返回`true`。
- en: fprintf
  id: totrans-1945
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: fprintf
- en: '`int fprintf(resource` *handle*`, string` *format*`[, mixed` *value1*`[, ...`
    *valueN*`]])`'
  id: totrans-1946
  prefs: []
  type: TYPE_NORMAL
  zh: '`int fprintf(resource` *handle*`, string` *format*`[, mixed` *value1*`[, ...`
    *valueN*`]])`'
- en: Writes a string created by filling *format* with the given arguments to the
    stream resource *handle*. See `printf()` for more information on using this function.
  id: totrans-1947
  prefs: []
  type: TYPE_NORMAL
  zh: 将使用给定参数填充*format*的字符串写入流资源*handle*。有关如何使用此函数的更多信息，请参见`printf()`。
- en: fputcsv
  id: totrans-1948
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: fputcsv
- en: '`int fputcsv(resource` *handle*`[, array` *fields*`[, string` *delimiter*`[,
    string` *enclosure*`]]])`'
  id: totrans-1949
  prefs: []
  type: TYPE_NORMAL
  zh: '`int fputcsv(resource` *handle*`[, array` *fields*`[, string` *delimiter*`[,
    string` *enclosure*`]]])`'
- en: Formats the items contained in *fields* in comma-separated values (CSV) format
    and writes the result to the file handle *handle*. If supplied, *delimiter* is
    a single character used to delimit the values for the line instead of commas.
    If supplied, *enclosure* is a single character that is used to enclose values
    (by default, the double quote character, `"`). Returns the length of the string
    written, or `false` if a failure occurred.
  id: totrans-1950
  prefs: []
  type: TYPE_NORMAL
  zh: 以逗号分隔值（CSV）格式格式化*fields*中包含的项目，并将结果写入文件句柄*handle*。如果提供*delimiter*，则使用单个字符代替逗号分隔行中的值。如果提供*enclosure*，则使用单个字符将值括起来（默认为双引号字符`"`）。返回写入的字符串长度，如果失败则返回`false`。
- en: fread
  id: totrans-1951
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: fread
- en: '`string fread(int` *handle*`, int` *length*`)`'
  id: totrans-1952
  prefs: []
  type: TYPE_NORMAL
  zh: '`string fread(int` *handle*`, int` *length*`)`'
- en: Reads *length* bytes from the file referenced by *handle* and returns them as
    a string. If fewer than *length* bytes are available before EOF is reached, the
    bytes up to EOF are returned.
  id: totrans-1953
  prefs: []
  type: TYPE_NORMAL
  zh: 从文件句柄*handle*引用的文件中读取*length*字节并将它们作为字符串返回。如果在到达EOF之前可用的字节数少于*length*，则返回直到EOF的字节。
- en: fscanf
  id: totrans-1954
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: fscanf
- en: '`mixed fscanf(resource` *handle*`, string` *format*`[, string` *name1*`[, ...
    string` *nameN*`]])`'
  id: totrans-1955
  prefs: []
  type: TYPE_NORMAL
  zh: '`mixed fscanf(resource` *handle*`, string` *format*`[, string` *name1*`[, ...
    string` *nameN*`]])`'
- en: Reads data from the file referenced by *handle* and returns a value from it
    based on *format*. For more information on how to use this function, see `sscanf`.
  id: totrans-1956
  prefs: []
  type: TYPE_NORMAL
  zh: 从文件句柄*handle*引用的文件中读取数据并根据*format*返回一个值。有关如何使用此函数的更多信息，请参见`sscanf`。
- en: If the optional *name1* through *nameN* parameters are not given, the values
    scanned from the file are returned as an array; otherwise, they are put into the
    variables named by *name1* through *nameN*.
  id: totrans-1957
  prefs: []
  type: TYPE_NORMAL
  zh: 如果未提供可选参数*name1*到*nameN*，则从文件中扫描的值将作为数组返回；否则，它们将放入由*name1*到*nameN*命名的变量中。
- en: fseek
  id: totrans-1958
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: fseek
- en: '`int fseek(resource` *handle*`, int` *offset*`[, int` *from*`])`'
  id: totrans-1959
  prefs: []
  type: TYPE_NORMAL
  zh: '`int fseek(resource` *handle*`, int` *offset*`[, int` *from*`])`'
- en: 'Moves the file pointer in *handle* to the byte *offset*. If *from* is specified,
    it determines how to move the file pointer. *from* must be one of the following
    values:'
  id: totrans-1960
  prefs: []
  type: TYPE_NORMAL
  zh: 将文件句柄*handle*中的文件指针移动到*offset*字节处。如果指定了*from*，它确定如何移动文件指针。*from*必须是以下值之一：
- en: '| `SEEK_SET` | Sets the file pointer to the byte *offset* (the default) |'
  id: totrans-1961
  prefs: []
  type: TYPE_TB
  zh: '| `SEEK_SET` | 将文件指针设置为字节*offset*（默认）|'
- en: '| `SEEK_CUR` | Sets the file pointer to the current location plus *offset*
    bytes |'
  id: totrans-1962
  prefs: []
  type: TYPE_TB
  zh: '| `SEEK_CUR` | 将文件指针设置为当前位置加上*offset*字节 |'
- en: '| `SEEK_END` | Sets the file pointer to EOF minus *offset* bytes |'
  id: totrans-1963
  prefs: []
  type: TYPE_TB
  zh: '| `SEEK_END` | 将文件指针设置为EOF减去*offset*字节处 |'
- en: This function returns `0` if the function was successful and `−1` if the operation
    failed.
  id: totrans-1964
  prefs: []
  type: TYPE_NORMAL
  zh: 如果函数成功，则此函数返回`0`，如果操作失败，则返回`−1`。
- en: fsockopen
  id: totrans-1965
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: fsockopen
- en: '`resource fsockopen(string` *host*`, int` *port*`[, int` *error*`[, string`
    *message*`[, float` *timeout*`]]])`'
  id: totrans-1966
  prefs: []
  type: TYPE_NORMAL
  zh: '`resource fsockopen(string` *host*`, int` *port*`[, int` *error*`[, string`
    *message*`[, float` *timeout*`]]])`'
- en: Opens a TCP or UDP connection to a remote *host* on a specific *port*. By default,
    TCP is used; to connect via UDP, *host* must begin with the protocol `udp://`.
    If specified, *timeout* indicates the length of time in seconds to wait before
    timing out.
  id: totrans-1967
  prefs: []
  type: TYPE_NORMAL
  zh: 打开到远程*host*在特定*port*上的TCP或UDP连接。默认使用TCP；要通过UDP连接，*host*必须以协议`udp://`开头。如果指定*timeout*，则指示超时前等待的时间长度（以秒为单位）。
- en: If the connection is successful, a virtual file pointer is returned, which can
    be used with functions such as `fgets()` and `fputs()`. If the connection fails,
    `false` is returned. If *error* and *message* are supplied, they are set to the
    error number and error string, respectively.
  id: totrans-1968
  prefs: []
  type: TYPE_NORMAL
  zh: 如果连接成功，将返回一个虚拟文件指针，可以与`fgets()`和`fputs()`等函数一起使用。如果连接失败，则返回`false`。如果提供了*error*和*message*，它们将分别设置为错误编号和错误字符串。
- en: fstat
  id: totrans-1969
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: fstat
- en: '`array fstat(resource` *handle*`)`'
  id: totrans-1970
  prefs: []
  type: TYPE_NORMAL
  zh: '`array fstat(resource` *handle*`)`'
- en: 'Returns an associative array of information about the file referenced by *handle*.
    The following values (given here with their numeric and key indices) are included
    in the array:'
  id: totrans-1971
  prefs: []
  type: TYPE_NORMAL
  zh: 返回关于*handle*引用的文件的信息的关联数组。数组包含以下值（以其数值和键索引形式给出）：
- en: '| `dev` (`0`) | The device on which the file resides |'
  id: totrans-1972
  prefs: []
  type: TYPE_TB
  zh: '| `dev` (`0`) | 文件所在设备 |'
- en: '| `ino` (`1`) | The file’s inode |'
  id: totrans-1973
  prefs: []
  type: TYPE_TB
  zh: '| `ino` (`1`) | 文件的inode |'
- en: '| `mode` (`2`) | The mode with which the file was opened |'
  id: totrans-1974
  prefs: []
  type: TYPE_TB
  zh: '| `mode` (`2`) | 文件打开的模式 |'
- en: '| `nlink` (`3`) | The number of links to this file |'
  id: totrans-1975
  prefs: []
  type: TYPE_TB
  zh: '| `nlink` (`3`) | 指向此文件的硬链接数 |'
- en: '| `uid` (`4`) | The user ID of the file’s owner |'
  id: totrans-1976
  prefs: []
  type: TYPE_TB
  zh: '| `uid` (`4`) | 文件所有者的用户ID |'
- en: '| `gid` (`5`) | The group ID of the file’s owner |'
  id: totrans-1977
  prefs: []
  type: TYPE_TB
  zh: '| `gid` (`5`) | 文件所有者的组ID |'
- en: '| `rdev` (`6`) | The device type (if the file is on an inode device) |'
  id: totrans-1978
  prefs: []
  type: TYPE_TB
  zh: '| `rdev` (`6`) | 设备类型（如果文件在inode设备上） |'
- en: '| `size` (`7`) | The file’s size (in bytes) |'
  id: totrans-1979
  prefs: []
  type: TYPE_TB
  zh: '| `size` (`7`) | 文件大小（字节为单位） |'
- en: '| `atime` (`8`) | The time of last access (in Unix timestamp format) |'
  id: totrans-1980
  prefs: []
  type: TYPE_TB
  zh: '| `atime` (`8`) | 上次访问时间（Unix时间戳格式） |'
- en: '| `mtime` (`9`) | The time of last modification (in Unix timestamp format)
    |'
  id: totrans-1981
  prefs: []
  type: TYPE_TB
  zh: '| `mtime` (`9`) | 上次修改时间（Unix时间戳格式） |'
- en: '| `ctime` (`10`) | The time the file was created (in Unix timestamp format)
    |'
  id: totrans-1982
  prefs: []
  type: TYPE_TB
  zh: '| `ctime` (`10`) | 文件创建时间（Unix时间戳格式） |'
- en: '| `blksize` (`11`) | The blocksize (in bytes) for the filesystem |'
  id: totrans-1983
  prefs: []
  type: TYPE_TB
  zh: '| `blksize` (`11`) | 文件系统的块大小（以字节为单位） |'
- en: '| `blocks` (`12`) | The number of blocks allocated to the file |'
  id: totrans-1984
  prefs: []
  type: TYPE_TB
  zh: '| `blocks` (`12`) | 分配给文件的块数 |'
- en: ftell
  id: totrans-1985
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: ftell
- en: '`int ftell(resource` *handle*`)`'
  id: totrans-1986
  prefs: []
  type: TYPE_NORMAL
  zh: '`int ftell(resource` *handle*`)`'
- en: Returns the byte offset to which the file referenced by *handle* is set. If
    an error occurs, returns `false`.
  id: totrans-1987
  prefs: []
  type: TYPE_NORMAL
  zh: 返回*handle*引用的文件的字节偏移量。如果发生错误，则返回`false`。
- en: ftruncate
  id: totrans-1988
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: ftruncate
- en: '`bool ftruncate(resource` *handle*`, int` *length*`)`'
  id: totrans-1989
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool ftruncate(resource` *handle*`, int` *length*`)`'
- en: Truncates the file referenced by *handle* to *length* bytes. Returns `true`
    if the operation is successful and `false` if not.
  id: totrans-1990
  prefs: []
  type: TYPE_NORMAL
  zh: 将*handle*引用的文件截断为*length*字节。如果操作成功，则返回`true`，否则返回`false`。
- en: func_get_arg
  id: totrans-1991
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: func_get_arg
- en: '`mixed func_get_arg(int` *index*`)`'
  id: totrans-1992
  prefs: []
  type: TYPE_NORMAL
  zh: '`mixed func_get_arg(int` *index*`)`'
- en: Returns the *index* element in the function argument array. If called outside
    a function, or if *index* is greater than the number of arguments in the argument
    array, `func_get_arg()` generates a warning and returns `false`.
  id: totrans-1993
  prefs: []
  type: TYPE_NORMAL
  zh: 返回函数参数数组中的*index*元素。如果在函数外调用，或者*index*大于参数数组中的参数数量，`func_get_arg()`会生成警告并返回`false`。
- en: func_get_args
  id: totrans-1994
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: func_get_args
- en: '`array func_get_args()`'
  id: totrans-1995
  prefs: []
  type: TYPE_NORMAL
  zh: '`array func_get_args()`'
- en: Returns the array of arguments given to the function as an indexed array. If
    called outside a function, `func_get_args()` returns `false` and generates a warning.
  id: totrans-1996
  prefs: []
  type: TYPE_NORMAL
  zh: 返回作为索引数组给定给函数的参数数组。如果在函数外调用，`func_get_args()`返回`false`并生成警告。
- en: func_num_args
  id: totrans-1997
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: func_num_args
- en: '`int func_num_args()`'
  id: totrans-1998
  prefs: []
  type: TYPE_NORMAL
  zh: '`int func_num_args()`'
- en: Returns the number of arguments passed to the current user-defined function.
    If called outside a function, `func_num_args()` returns `false` and generates
    a warning.
  id: totrans-1999
  prefs: []
  type: TYPE_NORMAL
  zh: 返回传递给当前用户定义函数的参数数目。如果在函数外调用，`func_num_args()`返回`false`并生成警告。
- en: function_exists
  id: totrans-2000
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: function_exists
- en: '`bool function_exists(string` *function*`)`'
  id: totrans-2001
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool function_exists(string` *function*`)`'
- en: Returns `true` if a function with *function* has been defined (both user-defined
    and built-in functions are checked), and `false` otherwise. The comparison to
    check for a matching function is case-insensitive.
  id: totrans-2002
  prefs: []
  type: TYPE_NORMAL
  zh: 如果已定义具有*function*名称的函数（检查用户定义和内置函数），则返回`true`，否则返回`false`。检查匹配函数时不区分大小写。
- en: fwrite
  id: totrans-2003
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: fwrite
- en: '`int fwrite(resource` *handle*`, string` *string*`[, int` *length*`])`'
  id: totrans-2004
  prefs: []
  type: TYPE_NORMAL
  zh: '`int fwrite(resource` *handle*`, string` *string*`[, int` *length*`])`'
- en: Writes *string* to the file referenced by *handle*. The file must be open with
    write privileges. If *length* is given, only that many bytes of the string will
    be written. Returns the number of bytes written, or `−1` on error.
  id: totrans-2005
  prefs: []
  type: TYPE_NORMAL
  zh: 向*handle*引用的文件写入*string*。文件必须以写权限打开。如果给定了*length*，则只写入字符串的指定字节数。返回写入的字节数，或者在错误时返回`−1`。
- en: gc_collect_cycles
  id: totrans-2006
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: gc_collect_cycles
- en: '`int gc_collect_cycles()`'
  id: totrans-2007
  prefs: []
  type: TYPE_NORMAL
  zh: '`int gc_collect_cycles()`'
- en: Performs a garbage collection cycle and returns the number of references that
    were freed. Does nothing if garbage collection is not currently enabled.
  id: totrans-2008
  prefs: []
  type: TYPE_NORMAL
  zh: 执行一次垃圾回收循环，并返回释放的引用数。如果当前未启用垃圾回收，则不执行任何操作。
- en: gc_disable
  id: totrans-2009
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: gc_disable
- en: '`void gc_disable()`'
  id: totrans-2010
  prefs: []
  type: TYPE_NORMAL
  zh: '`void gc_disable()`'
- en: Disables the garbage collector. If the garbage collector was on, performs a
    collection prior to disabling it.
  id: totrans-2011
  prefs: []
  type: TYPE_NORMAL
  zh: 禁用垃圾收集器。如果垃圾收集器已启用，则在禁用之前进行垃圾回收。
- en: gc_enable
  id: totrans-2012
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: gc_enable
- en: '`void gc_enable()`'
  id: totrans-2013
  prefs: []
  type: TYPE_NORMAL
  zh: '`void gc_enable()`'
- en: Enables the garbage collector; typically, only very long-running scripts can
    benefit from the garbage collector.
  id: totrans-2014
  prefs: []
  type: TYPE_NORMAL
  zh: 启用垃圾收集器；通常只有运行时间非常长的脚本才能从垃圾收集器中受益。
- en: gc_enabled
  id: totrans-2015
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: gc_enabled
- en: '`bool gc_enabled()`'
  id: totrans-2016
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool gc_enabled()`'
- en: Returns `true` if the garbage collector is currently enabled, and `false` if
    it’s disabled.
  id: totrans-2017
  prefs: []
  type: TYPE_NORMAL
  zh: 如果当前垃圾收集器启用，则返回 `true`，如果禁用则返回 `false`。
- en: get_browser
  id: totrans-2018
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: get_browser
- en: '`mixed get_browser([string` *name*`[, bool` *return_array*`]])`'
  id: totrans-2019
  prefs: []
  type: TYPE_NORMAL
  zh: '`mixed get_browser([string` *name*`[, bool` *return_array*`]])`'
- en: Returns an object containing information about the user’s current browser, as
    found in `$HTTP_USER_AGENT`, or the browser identified by the user agent *name*.
    The information is gleaned from the *browscap.ini* file. The version of the browser
    and various capabilities of the browser—such as whether or not the browser supports
    frames, cookies, and so on—are returned in the object. If `return_array` is `true`,
    an array will be returned rather than an object.
  id: totrans-2020
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个包含用户当前浏览器信息的对象，从 `$HTTP_USER_AGENT` 中获取，或从用户代理 *name* 识别的浏览器。信息从 *browscap.ini*
    文件获取。浏览器的版本和各种能力（如是否支持框架、cookie等）以对象形式返回。如果 `return_array` 是 `true`，则返回一个数组而不是对象。
- en: get_called_class
  id: totrans-2021
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: get_called_class
- en: '`string get_called_class()`'
  id: totrans-2022
  prefs: []
  type: TYPE_NORMAL
  zh: '`string get_called_class()`'
- en: Returns the name of the class that a static method was called on via late static
    binding, or `false` if called outside a class static method.
  id: totrans-2023
  prefs: []
  type: TYPE_NORMAL
  zh: 返回通过后期静态绑定调用静态方法的类名，或者如果在类静态方法外部调用，则返回 `false`。
- en: get_cfg_var
  id: totrans-2024
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: get_cfg_var
- en: '`string get_cfg_var(string` *name*`)`'
  id: totrans-2025
  prefs: []
  type: TYPE_NORMAL
  zh: '`string get_cfg_var(string` *name*`)`'
- en: Returns the value of the PHP configuration variable *name*. If *name* does not
    exist, `get_cfg_var()` returns `false`. Only those configuration variables set
    in a configuration file, as returned by `cfg_file_path()`, are returned by this
    function; compile-time settings and Apache configuration file variables are not
    returned.
  id: totrans-2026
  prefs: []
  type: TYPE_NORMAL
  zh: 返回PHP配置变量 *name* 的值。如果 *name* 不存在，`get_cfg_var()` 返回 `false`。只返回配置文件中设置的变量，如`cfg_file_path()`所返回的；编译时设置和Apache配置文件变量不会返回。
- en: get_class
  id: totrans-2027
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: get_class
- en: '`string get_class(object` *object*`)`'
  id: totrans-2028
  prefs: []
  type: TYPE_NORMAL
  zh: '`string get_class(object` *object*`)`'
- en: Returns the name of the class of which the given object is an instance. The
    class name is returned as a lowercase string. If *object* is not an object, then
    `false` is returned.
  id: totrans-2029
  prefs: []
  type: TYPE_NORMAL
  zh: 返回给定对象的类名。类名以小写字符串形式返回。如果 *object* 不是对象，则返回 `false`。
- en: get_class_methods
  id: totrans-2030
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: get_class_methods
- en: '`array get_class_methods(mixed` *class*`)`'
  id: totrans-2031
  prefs: []
  type: TYPE_NORMAL
  zh: '`array get_class_methods(mixed` *class*`)`'
- en: If the parameter is a string, returns an array containing the names of each
    method defined for the specified *class*. If the parameter is an object, this
    function returns the methods defined in the class of which the object is an instance.
  id: totrans-2032
  prefs: []
  type: TYPE_NORMAL
  zh: 如果参数是字符串，则返回包含指定 *class* 的每个方法名的数组。如果参数是对象，则返回该对象所属类中定义的方法。
- en: get_class_vars
  id: totrans-2033
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: get_class_vars
- en: '`array get_class_vars(string` *class*`)`'
  id: totrans-2034
  prefs: []
  type: TYPE_NORMAL
  zh: '`array get_class_vars(string` *class*`)`'
- en: Returns an associative array of default properties for the given *class*. For
    each property, an element with a key of the property name and a value of the default
    value is added to the array. Properties that do not have default values are not
    returned in the array.
  id: totrans-2035
  prefs: []
  type: TYPE_NORMAL
  zh: 返回给定 *class* 的默认属性的关联数组。对于每个属性，数组中添加一个键为属性名、值为默认值的元素。不返回没有默认值的属性。
- en: get_current_user
  id: totrans-2036
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: get_current_user
- en: '`string get_current_user()`'
  id: totrans-2037
  prefs: []
  type: TYPE_NORMAL
  zh: '`string get_current_user()`'
- en: Returns the name of the user under whose privileges the current PHP script is
    executing.
  id: totrans-2038
  prefs: []
  type: TYPE_NORMAL
  zh: 返回当前PHP脚本执行的用户特权下的用户名称。
- en: get_declared_classes
  id: totrans-2039
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: get_declared_classes
- en: '`array get_declared_classes()`'
  id: totrans-2040
  prefs: []
  type: TYPE_NORMAL
  zh: '`array get_declared_classes()`'
- en: Returns an array containing the name of each defined class. This includes any
    classes defined in extensions currently loaded in PHP.
  id: totrans-2041
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个包含每个定义类名的数组。包括PHP当前加载的扩展中定义的任何类。
- en: get_declared_interfaces
  id: totrans-2042
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: get_declared_interfaces
- en: '`array get_declared_interfaces()`'
  id: totrans-2043
  prefs: []
  type: TYPE_NORMAL
  zh: '`array get_declared_interfaces()`'
- en: Returns an array containing the name of each declared interface. This includes
    any interfaces declared in extensions currently loaded in PHP and built-in interfaces.
  id: totrans-2044
  prefs: []
  type: TYPE_NORMAL
  zh: 返回包含每个已声明接口名称的数组。这包括当前加载的PHP扩展和内置接口中声明的任何接口。
- en: get_declared_traits
  id: totrans-2045
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: get_declared_traits
- en: '`array get_declared_traits()`'
  id: totrans-2046
  prefs: []
  type: TYPE_NORMAL
  zh: '`array get_declared_traits()`'
- en: Returns an array containing the name of each defined trait. This includes any
    traits defined in extensions currently loaded in PHP.
  id: totrans-2047
  prefs: []
  type: TYPE_NORMAL
  zh: 返回包含每个已定义特性名称的数组。这包括当前加载的PHP扩展中定义的任何特性。
- en: get_defined_constants
  id: totrans-2048
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: get_defined_constants
- en: '`array get_defined_constants([bool` *categories*`])`'
  id: totrans-2049
  prefs: []
  type: TYPE_NORMAL
  zh: '`array get_defined_constants([bool` *categories*`])`'
- en: Returns an associative array of all constants defined by extensions and the
    `define()` function and their values. If *categories* is set and is `true`, the
    associative array contains subarrays, one for each category of constant.
  id: totrans-2050
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个关联数组，其中包含由扩展和`define()`函数定义的所有常量及其值。如果设置了*categories*并且为`true`，则关联数组包含子数组，每个子数组对应一个常量类别。
- en: get_defined_functions
  id: totrans-2051
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: get_defined_functions
- en: '`array get_defined_functions()`'
  id: totrans-2052
  prefs: []
  type: TYPE_NORMAL
  zh: '`array get_defined_functions()`'
- en: Returns an array containing the name of each defined function. The returned
    array is an associative array with two keys, `internal` and `user`. The value
    of the first key is an array containing the names of all internal PHP functions;
    the value of the second key is an array containing the names of all user-defined
    functions.
  id: totrans-2053
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个包含每个已定义函数名称的数组。返回的数组是一个关联数组，包括两个键，`internal`和`user`。第一个键的值是一个包含所有内部PHP函数名称的数组；第二个键的值是一个包含所有用户定义函数名称的数组。
- en: get_defined_vars
  id: totrans-2054
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: get_defined_vars
- en: '`array get_defined_vars()`'
  id: totrans-2055
  prefs: []
  type: TYPE_NORMAL
  zh: '`array get_defined_vars()`'
- en: Returns an array of all variables defined in the environment, server, global,
    and local scopes.
  id: totrans-2056
  prefs: []
  type: TYPE_NORMAL
  zh: 返回在环境、服务器、全局和局部范围内定义的所有变量的数组。
- en: get_extension_funcs
  id: totrans-2057
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: get_extension_funcs
- en: '`array get_extension_funcs(string` *name*`)`'
  id: totrans-2058
  prefs: []
  type: TYPE_NORMAL
  zh: '`array get_extension_funcs(string` *name*`)`'
- en: Returns an array of functions provided by the extension specified by *name*.
  id: totrans-2059
  prefs: []
  type: TYPE_NORMAL
  zh: 返回由*name*指定的扩展提供的函数数组。
- en: get_headers
  id: totrans-2060
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: get_headers
- en: '`array get_headers(string` *url*`[, int` *format*`])`'
  id: totrans-2061
  prefs: []
  type: TYPE_NORMAL
  zh: '`array get_headers(string` *url*`[, int` *format*`])`'
- en: Returns an array of headers that are sent by the remote server for the page
    given in *url*. If *format* is `0` or not set, the headers are returned in a simple
    array, with each entry in the array corresponding to a single header. If `format`
    is set and is `1`, an associative array is returned with keys and values corresponding
    to the header fields.
  id: totrans-2062
  prefs: []
  type: TYPE_NORMAL
  zh: 返回由远程服务器发送到给定*url*页面的标头数组。如果*format*为`0`或未设置，则以简单数组形式返回标头，数组中的每个条目对应一个标头。如果设置并且为`1`，则返回一个关联数组，键和值对应标头字段。
- en: get_html_translation_table
  id: totrans-2063
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: get_html_translation_table
- en: '`array get_html_translation_table([int` *which*`[, int` *style*`[, string`
    *encoding*`]]])`'
  id: totrans-2064
  prefs: []
  type: TYPE_NORMAL
  zh: '`array get_html_translation_table([int` *which*`[, int` *style*`[, string`
    *encoding*`]]])`'
- en: 'Returns the translation table used by either `htmlspecialchars()` or `htmlentities()`.
    If *which* is `HTML_ENTITIES`, the table used by `htmlentities()` is returned;
    if *which* is `HTML_SPECIALCHARS`, the table used by `htmlspecialchars()` is returned.
    Optionally, you can specify which quotes style you want returned; the possible
    values are the same as those in the translation functions:'
  id: totrans-2065
  prefs: []
  type: TYPE_NORMAL
  zh: 返回`htmlspecialchars()`或`htmlentities()`使用的转换表。如果*which*是`HTML_ENTITIES`，则返回`htmlentities()`使用的表；如果*which*是`HTML_SPECIALCHARS`，则返回`htmlspecialchars()`使用的表。可选地，您可以指定希望返回的引号样式；可能的值与转换函数中的值相同：
- en: '| `ENT_COMPAT` (default) | Converts double quotes, but not single quotes |'
  id: totrans-2066
  prefs: []
  type: TYPE_TB
  zh: '| `ENT_COMPAT`（默认） | 转换双引号，但不转换单引号 |'
- en: '| `ENT_NOQUOTES` | Does not convert either double quotes or single quotes |'
  id: totrans-2067
  prefs: []
  type: TYPE_TB
  zh: '| `ENT_NOQUOTES` | 不转换单引号和双引号 |'
- en: '| `ENT_QUOTES` | Converts both single and double quotes |'
  id: totrans-2068
  prefs: []
  type: TYPE_TB
  zh: '| `ENT_QUOTES` | 转换单引号和双引号 |'
- en: '| `ENT_HTML401` | Table for HTML 4.01 entities |'
  id: totrans-2069
  prefs: []
  type: TYPE_TB
  zh: '| `ENT_HTML401` | HTML 4.01实体表 |'
- en: '| `ENT_XML1` | Table for XML 1 entities |'
  id: totrans-2070
  prefs: []
  type: TYPE_TB
  zh: '| `ENT_XML1` | XML 1实体表 |'
- en: '| `ENT_XHTML` | Table for XHTML entities |'
  id: totrans-2071
  prefs: []
  type: TYPE_TB
  zh: '| `ENT_XHTML` | XHTML实体表 |'
- en: '| `ENT_HTML5` | Table for HTML 5 entities |'
  id: totrans-2072
  prefs: []
  type: TYPE_TB
  zh: '| `ENT_HTML5` | HTML 5实体表 |'
- en: 'The `encoding` optional parameter has the following possible selections:'
  id: totrans-2073
  prefs: []
  type: TYPE_NORMAL
  zh: 可选的*encoding*参数具有以下可能的选择：
- en: '| `ISO-8859-1` | Western European, Latin-1. |'
  id: totrans-2074
  prefs: []
  type: TYPE_TB
  zh: '| `ISO-8859-1` | 西欧，拉丁-1。 |'
- en: '| `ISO-8859-5` | Cyrillic charset (Latin/Cyrillic), rarely used. |'
  id: totrans-2075
  prefs: []
  type: TYPE_TB
  zh: '| `ISO-8859-5` | 西里尔字符集（拉丁/西里尔文），很少使用。 |'
- en: '| `ISO-8859-15` | Western European, Latin-9\. Adds the Euro sign, French and
    Finnish letters missing in Latin-1. |'
  id: totrans-2076
  prefs: []
  type: TYPE_TB
  zh: '| `ISO-8859-15` | 西欧，拉丁-9。添加欧元符号，拉丁-1中缺少的法国和芬兰字母。 |'
- en: '| `UTF-8` | ASCII compatible multibyte 8-bit Unicode. |'
  id: totrans-2077
  prefs: []
  type: TYPE_TB
  zh: '| `UTF-8` | 兼容ASCII的多字节8位Unicode。 |'
- en: '| `cp866` | DOS-specific Cyrillic charset. |'
  id: totrans-2078
  prefs: []
  type: TYPE_TB
  zh: '| `cp866` | DOS特定的西里尔字符集。 |'
- en: '| `cp1251` | Windows-specific Cyrillic charset. |'
  id: totrans-2079
  prefs: []
  type: TYPE_TB
  zh: '| `cp1251` | 用于Windows的特定西里尔字符集。 |'
- en: '| `cp1252` | Windows-specific charset for Western European. |'
  id: totrans-2080
  prefs: []
  type: TYPE_TB
  zh: '| `cp1252` | 用于西欧的Windows特定字符集。 |'
- en: '| `KOI8-R` | Russian. |'
  id: totrans-2081
  prefs: []
  type: TYPE_TB
  zh: '| `KOI8-R` | 俄语。 |'
- en: '| `BIG5` | Traditional Chinese, mainly used in Taiwan. |'
  id: totrans-2082
  prefs: []
  type: TYPE_TB
  zh: '| `BIG5` | 主要用于台湾的繁体中文。 |'
- en: '| `GB2312` | Simplified Chinese, national standard character set. |'
  id: totrans-2083
  prefs: []
  type: TYPE_TB
  zh: '| `GB2312` | 简体中文，国家标准字符集。 |'
- en: '| `BIG5-HKSCS` | Big5 with Hong Kong extensions, Traditional Chinese. |'
  id: totrans-2084
  prefs: []
  type: TYPE_TB
  zh: '| `BIG5-HKSCS` | 带香港扩展的Big5，繁体中文。 |'
- en: '| `Shift_JIS` | Japanese. |'
  id: totrans-2085
  prefs: []
  type: TYPE_TB
  zh: '| `Shift_JIS` | 日语。 |'
- en: '| `EUC-JP` | Japanese. |'
  id: totrans-2086
  prefs: []
  type: TYPE_TB
  zh: '| `EUC-JP` | 日语。 |'
- en: '| `MacRoman` | Charset that was used by macOS. |'
  id: totrans-2087
  prefs: []
  type: TYPE_TB
  zh: '| `MacRoman` | macOS使用的字符集。 |'
- en: '| `""` | An empty string activates detection from script encoding (Zend multibyte),
    `default_charset`, and current locale, in this order. Not recommended. |'
  id: totrans-2088
  prefs: []
  type: TYPE_TB
  zh: '| `""` | 空字符串激活脚本编码（Zend多字节）、`default_charset`和当前语言环境的检测顺序。不建议使用。 |'
- en: get_included_files
  id: totrans-2089
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: get_included_files
- en: '`array get_included_files()`'
  id: totrans-2090
  prefs: []
  type: TYPE_NORMAL
  zh: '`array get_included_files()`'
- en: Returns an array of the files included into the current script by `include()`,
    `include_once()`, `require()`, and `require_once()`.
  id: totrans-2091
  prefs: []
  type: TYPE_NORMAL
  zh: 返回通过`include()`、`include_once()`、`require()`和`require_once()`包含到当前脚本中的文件数组。
- en: get_include_path
  id: totrans-2092
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: get_include_path
- en: '`string get_include_path()`'
  id: totrans-2093
  prefs: []
  type: TYPE_NORMAL
  zh: '`string get_include_path()`'
- en: 'Returns the value of the include path configuration option, giving you a list
    of include path locations. If you want to split the returned value into individual
    entries, be sure to split on the `PATH_SEPARATOR` constant, which is set separately
    for Unix and Windows compiles:'
  id: totrans-2094
  prefs: []
  type: TYPE_NORMAL
  zh: 返回包含include路径配置选项值的数组，提供包含路径位置列表。如果要将返回的值拆分为单独的条目，请确保使用`PATH_SEPARATOR`常量进行分割，该常量为Unix和Windows编译分别设置：
- en: '[PRE6]'
  id: totrans-2095
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: get_loaded_extensions
  id: totrans-2096
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: get_loaded_extensions
- en: '`array get_loaded_extensions([ bool` *zend_extensions*`])`'
  id: totrans-2097
  prefs: []
  type: TYPE_NORMAL
  zh: '`array get_loaded_extensions([ bool *zend_extensions* ])`'
- en: Returns an array containing the names of every extension compiled and loaded
    into PHP. If the `zend_extensions` option is `true`, only return the Zend extensions;
    it defaults to `false`.
  id: totrans-2098
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个包含编译并加载到PHP中的每个扩展的名称的数组。如果`zend_extensions`选项为`true`，则仅返回Zend扩展；默认为`false`。
- en: get_meta_tags
  id: totrans-2099
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: get_meta_tags
- en: '`array get_meta_tags(string` *path*`[, int` *include*`])`'
  id: totrans-2100
  prefs: []
  type: TYPE_NORMAL
  zh: '`array get_meta_tags(string *path* [, int *include* ])`'
- en: Parses the file *path* and extracts any HTML meta tags it locates. Returns an
    associative array, the keys of which are `name` attributes for the meta tags,
    and the values of which are the appropriate values for the tags. The keys are
    in lowercase regardless of the case of the original attributes. If *include* is
    specified and `true`, the function searches for *path* in the include path.
  id: totrans-2101
  prefs: []
  type: TYPE_NORMAL
  zh: 解析文件*path*并提取其定位的HTML meta标签。返回一个关联数组，其中键是meta标签的`name`属性，值是标签的适当值。无论原始属性的大小写如何，键都是小写的。如果指定了*include*并且为`true`，函数将在包含路径中搜索*path*。
- en: getmygid
  id: totrans-2102
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: getmygid
- en: '`int getmygid()`'
  id: totrans-2103
  prefs: []
  type: TYPE_NORMAL
  zh: '`int getmygid()`'
- en: Returns the group ID for the PHP process executing the current script. If the
    group ID cannot be determined, `false` is returned.
  id: totrans-2104
  prefs: []
  type: TYPE_NORMAL
  zh: 返回当前脚本执行的PHP进程的组ID。如果无法确定组ID，则返回`false`。
- en: getmyuid
  id: totrans-2105
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: getmyuid
- en: '`int getmyuid()`'
  id: totrans-2106
  prefs: []
  type: TYPE_NORMAL
  zh: '`int getmyuid()`'
- en: Returns the user ID for the PHP process executing the current script. If the
    user ID cannot be determined, `false` is returned.
  id: totrans-2107
  prefs: []
  type: TYPE_NORMAL
  zh: 返回当前脚本执行的PHP进程的用户ID。如果无法确定用户ID，则返回`false`。
- en: get_object_vars
  id: totrans-2108
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: get_object_vars
- en: '`array get_object_vars(object` *object*`)`'
  id: totrans-2109
  prefs: []
  type: TYPE_NORMAL
  zh: '`array get_object_vars(object *object* )`'
- en: Returns an associative array of the properties for the given *object*. For each
    property, an element with a key of the property name and a value of the current
    value is added to the array. Properties that do not have current values are not
    returned in the array, even if they are defined in the class.
  id: totrans-2110
  prefs: []
  type: TYPE_NORMAL
  zh: 返回给定*object*的属性的关联数组。对于每个属性，将添加一个具有属性名称键和当前值值的元素到数组中。不返回没有当前值的属性，即使它们在类中定义了。
- en: get_parent_class
  id: totrans-2111
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: get_parent_class
- en: '`string get_parent_class(mixed` *object*`)`'
  id: totrans-2112
  prefs: []
  type: TYPE_NORMAL
  zh: '`string get_parent_class(mixed *object* )`'
- en: Returns the name of the parent class for the given *object*. If the object does
    not inherit from another class, returns an empty string.
  id: totrans-2113
  prefs: []
  type: TYPE_NORMAL
  zh: 返回给定*object*的父类名称。如果对象不继承自其他类，则返回空字符串。
- en: get_resource_type
  id: totrans-2114
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: get_resource_type
- en: '`string get_resource_type(resource` *handle*`)`'
  id: totrans-2115
  prefs: []
  type: TYPE_NORMAL
  zh: '`string get_resource_type(resource *handle* )`'
- en: Returns a string representing the type of the specified resource *handle*. If
    *handle* is not a valid resource, the function generates an error and returns
    `false`. The kinds of resources available are dependent on the extensions loaded,
    but include `file`, `mysql link`, and so on.
  id: totrans-2116
  prefs: []
  type: TYPE_NORMAL
  zh: 返回表示指定资源*handle*类型的字符串。如果*handle*不是有效的资源，则函数生成错误并返回`false`。可用资源类型取决于加载的扩展，但包括`file`，`mysql
    link`等。
- en: getcwd
  id: totrans-2117
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`getcwd`'
- en: '`string getcwd()`'
  id: totrans-2118
  prefs: []
  type: TYPE_NORMAL
  zh: '`string getcwd()`'
- en: Returns the path of the PHP process’s current working directory.
  id: totrans-2119
  prefs: []
  type: TYPE_NORMAL
  zh: 返回PHP进程当前工作目录的路径。
- en: getdate
  id: totrans-2120
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`getdate`'
- en: '`array getdate([int` *timestamp*`])`'
  id: totrans-2121
  prefs: []
  type: TYPE_NORMAL
  zh: '`array getdate([int` *timestamp*`])`'
- en: 'Returns an associative array containing values for various components for the
    given *timestamp* time and date. If no *timestamp* is given, the current date
    and time is used. A variation of the `date()` function. The array contains the
    following keys and values:'
  id: totrans-2122
  prefs: []
  type: TYPE_NORMAL
  zh: 返回包含给定*timestamp*时间和日期各个组件值的关联数组。如果没有给出*timestamp*，则使用当前日期和时间。这是`date()`函数的变体。数组包含以下键和值：
- en: '| `seconds` | Seconds |'
  id: totrans-2123
  prefs: []
  type: TYPE_TB
  zh: '| `seconds` | 秒 |'
- en: '| `minutes` | Minutes |'
  id: totrans-2124
  prefs: []
  type: TYPE_TB
  zh: '| `minutes` | 分钟 |'
- en: '| `hours` | Hours |'
  id: totrans-2125
  prefs: []
  type: TYPE_TB
  zh: '| `hours` | 小时 |'
- en: '| `mday` | Day of the month |'
  id: totrans-2126
  prefs: []
  type: TYPE_TB
  zh: '| `mday` | 月份中的日期 |'
- en: '| `wday` | Numeric day of the week (Sunday is `0`) |'
  id: totrans-2127
  prefs: []
  type: TYPE_TB
  zh: '| `wday` | 数字星期几（星期日为`0`） |'
- en: '| `mon` | Month |'
  id: totrans-2128
  prefs: []
  type: TYPE_TB
  zh: '| `mon` | 月份 |'
- en: '| `year` | Year |'
  id: totrans-2129
  prefs: []
  type: TYPE_TB
  zh: '| `year` | 年份 |'
- en: '| `yday` | Day of the year |'
  id: totrans-2130
  prefs: []
  type: TYPE_TB
  zh: '| `yday` | 年份中的日期 |'
- en: '| `weekday` | Name of the day of the week (Sunday through Saturday) |'
  id: totrans-2131
  prefs: []
  type: TYPE_TB
  zh: '| `weekday` | 星期几的名称（星期日到星期六） |'
- en: '| `month` | Name of the month (January through December) |'
  id: totrans-2132
  prefs: []
  type: TYPE_TB
  zh: '| `month` | 月份（一月到十二月）的名称 |'
- en: getenv
  id: totrans-2133
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`getenv`'
- en: '`string getenv(string` *name*`)`'
  id: totrans-2134
  prefs: []
  type: TYPE_NORMAL
  zh: '`string getenv(string` *name*`)`'
- en: Returns the value of the environment variable *name*. If *name* does not exist,
    `getenv()` returns `false`.
  id: totrans-2135
  prefs: []
  type: TYPE_NORMAL
  zh: 返回环境变量*name*的值。如果*name*不存在，则`getenv()`返回`false`。
- en: gethostbyaddr
  id: totrans-2136
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`gethostbyaddr`'
- en: '`string gethostbyaddr(string` *address*`)`'
  id: totrans-2137
  prefs: []
  type: TYPE_NORMAL
  zh: '`string gethostbyaddr(string` *address*`)`'
- en: Returns the hostname of the machine with the IP address *address*. If no such
    address can be found, or if *address* doesn’t resolve to a hostname, *address*
    is returned.
  id: totrans-2138
  prefs: []
  type: TYPE_NORMAL
  zh: 返回具有IP地址*address*的机器的主机名。如果找不到这样的地址或*address*不解析为主机名，则返回*address*。
- en: gethostbyname
  id: totrans-2139
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`gethostbyname`'
- en: '`string gethostbyname(string` *host*`)`'
  id: totrans-2140
  prefs: []
  type: TYPE_NORMAL
  zh: '`string gethostbyname(string` *host*`)`'
- en: Returns the IP address for *host*. If no such host exists, *host* is returned.
  id: totrans-2141
  prefs: []
  type: TYPE_NORMAL
  zh: 返回*host*的IP地址。如果没有这样的主机，则返回*host*。
- en: gethostbynamel
  id: totrans-2142
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`gethostbynamel`'
- en: '`array gethostbynamel(string` *host*`)`'
  id: totrans-2143
  prefs: []
  type: TYPE_NORMAL
  zh: '`array gethostbynamel(string` *host*`)`'
- en: Returns an array of IP addresses for *host*. If no such host exists, returns
    `false`.
  id: totrans-2144
  prefs: []
  type: TYPE_NORMAL
  zh: 返回*host*的IP地址数组。如果没有这样的主机，则返回`false`。
- en: gethostname
  id: totrans-2145
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`gethostname`'
- en: '`string gethostname()`'
  id: totrans-2146
  prefs: []
  type: TYPE_NORMAL
  zh: '`string gethostname()`'
- en: Returns the hostname of the machine running the current script.
  id: totrans-2147
  prefs: []
  type: TYPE_NORMAL
  zh: 返回运行当前脚本的机器的主机名。
- en: getlastmod
  id: totrans-2148
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`getlastmod`'
- en: '`int getlastmod()`'
  id: totrans-2149
  prefs: []
  type: TYPE_NORMAL
  zh: '`int getlastmod()`'
- en: Returns the Unix timestamp value for the last modification date of the file
    containing the current script. If an error occurs while retrieving the information,
    returns `false`.
  id: totrans-2150
  prefs: []
  type: TYPE_NORMAL
  zh: 返回包含当前脚本所在文件的最后修改日期的Unix时间戳值。如果在检索信息时发生错误，则返回`false`。
- en: getmxrr
  id: totrans-2151
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`getmxrr`'
- en: '`bool getmxrr(string` *host*`, array &`*hosts*`[, array &`*weights*`])`'
  id: totrans-2152
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool getmxrr(string` *host*`, array &`*hosts*`[, array &`*weights*`])`'
- en: Searches DNS for all Mail Exchanger (MX) records for *host*. The results are
    put into the array *hosts*. If given, the weights for each MX record are put into
    *weights*. Returns `true` if any records are found and `false` if none are found.
  id: totrans-2153
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索所有邮件交换器（MX）记录的DNS *host*。结果放入数组*hosts*中。如果提供了权重，每个MX记录的权重放入*weights*中。如果找到任何记录，则返回`true`，如果没有找到则返回`false`。
- en: getmyinode
  id: totrans-2154
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`getmyinode`'
- en: '`int getmyinode()`'
  id: totrans-2155
  prefs: []
  type: TYPE_NORMAL
  zh: '`int getmyinode()`'
- en: Returns the inode value of the file containing the current script. If an error
    occurs, returns `false`.
  id: totrans-2156
  prefs: []
  type: TYPE_NORMAL
  zh: 返回包含当前脚本的文件的inode值。如果发生错误，则返回`false`。
- en: getmypid
  id: totrans-2157
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`getmypid`'
- en: '`int getmypid()`'
  id: totrans-2158
  prefs: []
  type: TYPE_NORMAL
  zh: '`int getmypid()`'
- en: Returns the process ID for the PHP process executing the current script. When
    PHP runs as a server module, any number of scripts may share the same process
    ID, so it is not necessarily a unique number.
  id: totrans-2159
  prefs: []
  type: TYPE_NORMAL
  zh: 返回执行当前脚本的PHP进程的进程ID。当PHP作为服务器模块运行时，可能有多个脚本共享相同的进程ID，因此不一定是唯一的数字。
- en: getopt
  id: totrans-2160
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`getopt`'
- en: '`array getopt(string` *short_options*`[, array` *long_options*`])`'
  id: totrans-2161
  prefs: []
  type: TYPE_NORMAL
  zh: '`array getopt(string` *short_options*`[, array` *long_options*`])`'
- en: Parses the command-line arguments list used to invoke the current script and
    returns an associative array of optional name/value pairs. The *short_options*
    and *long_options* parameters define the command-line arguments to parse.
  id: totrans-2162
  prefs: []
  type: TYPE_NORMAL
  zh: 解析用于调用当前脚本的命令行参数列表，并返回可选名称/值对的关联数组。*short_options*和*long_options*参数定义要解析的命令行参数。
- en: The *short_options* parameter is a single string, with each character representing
    a single argument passed into the script via a single hyphen. For example, the
    short options string `"ar"` matches the command-line arguments `-a -r`. Any character
    followed by a single colon `:` requires a value to match, while any character
    followed by two colons `::` optionally includes a value to match. For example,
    `"a:r::x"` would match the command-line arguments `-aTest -r -x` but not `-a -r
    -x`.
  id: totrans-2163
  prefs: []
  type: TYPE_NORMAL
  zh: 参数 *short_options* 是一个字符串，每个字符表示通过单破折号传递到脚本的单个参数。例如，短选项字符串`"ar"`匹配命令行参数`-a -r`。任何后跟一个冒号`:`的字符需要匹配一个值，而后跟两个冒号`::`的字符则可选择包含一个值进行匹配。例如，`"a:r::x"`可以匹配命令行参数`-aTest
    -r -x`，但不会匹配`-a -r -x`。
- en: The *long_options* parameter is an array of strings, with each element representing
    a single argument passed into the script via a double hyphen. For example, the
    element `"verbose"` matches the command-line argument `--verbose`. All parameters
    specified in the *long_options* parameter optionally match values in the command
    line separated from the option name with an equals sign. For example, `"verbose"`
    will match both `--verbose` and `--verbose=1`.
  id: totrans-2164
  prefs: []
  type: TYPE_NORMAL
  zh: 参数*long_options*是一个字符串数组，每个元素表示通过双破折号传递到脚本的单个参数。例如，元素`"verbose"`匹配命令行参数`--verbose`。*long_options*参数中指定的所有参数都可以选择与通过等号与选项名称分隔的命令行中的值匹配。例如，`"verbose"`将匹配`--verbose`和`--verbose=1`。
- en: getprotobyname
  id: totrans-2165
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 获取由名称指定的协议。
- en: '`int getprotobyname(string` *name*`)`'
  id: totrans-2166
  prefs: []
  type: TYPE_NORMAL
  zh: '`int getprotobyname(string` *name*`)`'
- en: Returns the protocol number associated with *name* in */etc/protocols*.
  id: totrans-2167
  prefs: []
  type: TYPE_NORMAL
  zh: 返回*/etc/protocols*中与*name*关联的协议号。
- en: getprotobynumber
  id: totrans-2168
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 获取由协议号指定的协议。
- en: '`string getprotobynumber(int` *protocol*`)`'
  id: totrans-2169
  prefs: []
  type: TYPE_NORMAL
  zh: '`string getprotobynumber(int` *protocol*`)`'
- en: Returns the protocol name associated with *protocol* in */etc/protocols*.
  id: totrans-2170
  prefs: []
  type: TYPE_NORMAL
  zh: 返回*/etc/protocols*中与*protocol*关联的协议名称。
- en: getrandmax
  id: totrans-2171
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 获取最大可能返回的值。
- en: '`int getrandmax()`'
  id: totrans-2172
  prefs: []
  type: TYPE_NORMAL
  zh: '`int getrandmax()`'
- en: Returns the largest value that can be returned by `rand()`.
  id: totrans-2173
  prefs: []
  type: TYPE_NORMAL
  zh: 返回由`rand()`返回的最大值。
- en: getrusage
  id: totrans-2174
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 获取资源使用情况。
- en: '`array getrusage([int` *who*`])`'
  id: totrans-2175
  prefs: []
  type: TYPE_NORMAL
  zh: '`array getrusage([int` *who*`])`'
- en: Returns an associative array of information describing the resources being used
    by the process running the current script. If *who* is specified and is equal
    to `1`, information about the process’s children is returned. A list of the keys
    and descriptions of the values can be found under the `getrusage(2)` Unix command.
  id: totrans-2176
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个关联数组，描述当前脚本运行的进程正在使用的资源信息。如果指定了 *who*，并且等于`1`，则返回有关进程子级的信息。有关键和值描述的列表可以在Unix命令`getrusage(2)`下找到。
- en: getservbyname
  id: totrans-2177
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 获取由名称指定的服务。
- en: '`int getservbyname(string` *service*`, string` *protocol*`)`'
  id: totrans-2178
  prefs: []
  type: TYPE_NORMAL
  zh: '`int getservbyname(string` *service*`, string` *protocol*`)`'
- en: Returns the port associated with *service* in */etc/services*. *protocol* must
    be either TCP or UDP.
  id: totrans-2179
  prefs: []
  type: TYPE_NORMAL
  zh: 返回*/etc/services*中与*service*关联的端口。*protocol*必须是TCP或UDP。
- en: getservbyport
  id: totrans-2180
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 获取由端口和协议指定的服务。
- en: '`string getservbyport(int` *port*`, string` *protocol*`)`'
  id: totrans-2181
  prefs: []
  type: TYPE_NORMAL
  zh: '`string getservbyport(int` *port*`, string` *protocol*`)`'
- en: Returns the service name associated with *port* and *protocol* in */etc/services*.
    *protocol* must be either TCP or UDP.
  id: totrans-2182
  prefs: []
  type: TYPE_NORMAL
  zh: 返回*/etc/services*中与*port*和*protocol*关联的服务名称。*protocol*必须是TCP或UDP。
- en: gettimeofday
  id: totrans-2183
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 获取当前时间。
- en: '`mixed gettimeofday([ bool` *return_float*`])`'
  id: totrans-2184
  prefs: []
  type: TYPE_NORMAL
  zh: '`mixed gettimeofday([ bool` *return_float*`])`'
- en: Returns an associative array containing information about the current time,
    as obtained through `gettimeofday(2)`. When `return_float` is set to `true`, a
    float is returned rather than an array.
  id: totrans-2185
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个包含有关当前时间的信息的关联数组，通过`gettimeofday(2)`获取。当设置`return_float`为`true`时，将返回一个浮点数而不是数组。
- en: 'The array contains the following keys and values:'
  id: totrans-2186
  prefs: []
  type: TYPE_NORMAL
  zh: 数组包含以下键和值：
- en: '| `sec` | The current number of seconds since the Unix epoch |'
  id: totrans-2187
  prefs: []
  type: TYPE_TB
  zh: '| `sec` | 自Unix时代以来的当前秒数 |'
- en: '| `usec` | The current number of microseconds to add to the number of seconds
    |'
  id: totrans-2188
  prefs: []
  type: TYPE_TB
  zh: '| `usec` | 添加到秒数的当前微秒数 |'
- en: '| `minuteswest` | The number of minutes west of Greenwich the current time
    zone is |'
  id: totrans-2189
  prefs: []
  type: TYPE_TB
  zh: '| `minuteswest` | 当前时区比格林威治西的分钟数 |'
- en: '| `dsttime` | The type of Daylight Saving Time correction to apply (during
    the appropriate time of year, a positive number if the time zone observes Daylight
    Saving Time) |'
  id: totrans-2190
  prefs: []
  type: TYPE_TB
  zh: '| `dsttime` | 应用夏令时修正的类型（在适当的时间年份，如果时区遵循夏令时，则为正数） |'
- en: gettype
  id: totrans-2191
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 获取类型。
- en: '`string gettype(mixed` *value*`)`'
  id: totrans-2192
  prefs: []
  type: TYPE_NORMAL
  zh: '`string gettype(mixed` *value*`)`'
- en: Returns a string description of the type of *value*. The possible values for
    *value* are `"boolean"`, `"integer"`, `"float"`, `"string"`, `"array"`, `"object"`,
    `"resource"`, `"NULL"`, and `"unknown type"`.
  id: totrans-2193
  prefs: []
  type: TYPE_NORMAL
  zh: 返回*value*类型的字符串描述。*value*的可能值为`"boolean"`、`"integer"`、`"float"`、`"string"`、`"array"`、`"object"`、`"resource"`、`"NULL"`和`"unknown
    type"`。
- en: glob
  id: totrans-2194
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 全局模式匹配。
- en: '`globarray(string` *pattern*`[, int` *flags*`])`'
  id: totrans-2195
  prefs: []
  type: TYPE_NORMAL
  zh: '`globarray(string` *pattern*`[, int` *flags*`])`'
- en: 'Returns a list of filenames matching the shell wildcard pattern given in *pattern*.
    The following characters and sequences make matches:'
  id: totrans-2196
  prefs: []
  type: TYPE_NORMAL
  zh: 返回符合给定*pattern*的shell通配符模式的文件名列表。以下字符和序列进行匹配：
- en: '| `*` | Matches any number of any character (equivalent to the regex pattern
    `.*`) |'
  id: totrans-2197
  prefs: []
  type: TYPE_TB
  zh: '| `*` | 匹配任意数量的任意字符（等同于正则表达式模式 `.*`） |'
- en: '| `?` | Matches any one character (equivalent to the regex pattern `.`) |'
  id: totrans-2198
  prefs: []
  type: TYPE_TB
  zh: '| `?` | 匹配任意一个字符（等同于正则表达式模式 `.`） |'
- en: 'For example, to process every JPEG file in a particular directory, you might
    write:'
  id: totrans-2199
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要处理特定目录中的每个JPEG文件，您可以编写：
- en: '[PRE7]'
  id: totrans-2200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The *flags* value is a bitwise OR of any of the following values:'
  id: totrans-2201
  prefs: []
  type: TYPE_NORMAL
  zh: '*flags*值是以下任意值的按位OR：'
- en: '| `GLOB_MARK` | Adds a slash to each item returned |'
  id: totrans-2202
  prefs: []
  type: TYPE_TB
  zh: '| `GLOB_MARK` | 对返回的每个项添加斜杠 |'
- en: '| `GLOB_NOSORT` | Returns files in the same order as found in the directory
    itself. If this is not specified, the names are sorted by ASCII value |'
  id: totrans-2203
  prefs: []
  type: TYPE_TB
  zh: '| `GLOB_NOSORT` | 返回的文件与目录中的顺序相同。如果未指定，则按ASCII值排序名称 |'
- en: '| `GLOB_NOCHECK` | If no files matching *pattern* are found, *pattern* is returned
    |'
  id: totrans-2204
  prefs: []
  type: TYPE_TB
  zh: '| `GLOB_NOCHECK` | 如果未找到匹配*pattern*的文件，则返回*pattern* |'
- en: '| `GLOB_NOESCAPE` | Treat backslashes in *pattern* as backslashes, rather than
    as the start of an escape sequence |'
  id: totrans-2205
  prefs: []
  type: TYPE_TB
  zh: '| `GLOB_NOESCAPE` | 将*pattern*中的反斜杠视为反斜杠，而不是作为转义序列的开始 |'
- en: '| `GLOB_BRACE` | In addition to the normal matches, strings in the form `{foo,
    bar, baz}` match either `"foo"`, `"bar"`, or `"baz"` |'
  id: totrans-2206
  prefs: []
  type: TYPE_TB
  zh: '| `GLOB_BRACE` | 除了正常匹配外，形如`{foo, bar, baz}`的字符串也匹配`"foo"`、`"bar"`或`"baz"`
    |'
- en: '| `GLOB_ONLYDIR` | Returns only directories matching *pattern* |'
  id: totrans-2207
  prefs: []
  type: TYPE_TB
  zh: '| `GLOB_ONLYDIR` | 仅返回匹配*pattern*的目录 |'
- en: '| `GLOB_ERR` | Stop on read errors |'
  id: totrans-2208
  prefs: []
  type: TYPE_TB
  zh: '| `GLOB_ERR` | 在读取错误时停止 |'
- en: gmdate
  id: totrans-2209
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: gmdate
- en: '`string gmdate(string` *format*`[, int` *timestamp*`])`'
  id: totrans-2210
  prefs: []
  type: TYPE_NORMAL
  zh: '`string gmdate(string` *format*`[, int` *timestamp*`])`'
- en: Returns a formatted string for a timestamp date and time. Identical to `date()`,
    except that it always uses Greenwich Mean Time (GMT) rather than the time zone
    specified on the local machine.
  id: totrans-2211
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个时间戳日期和时间的格式化字符串。与`date()`相同，但它始终使用格林威治标准时间（GMT），而不是本地机器上指定的时区。
- en: gmmktime
  id: totrans-2212
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: gmmktime
- en: '`int gmmktime(int` *hour*`, int` *minutes*`, int` *seconds*`, int` *month*`,
    int` *day*`, int` *year*`, int` *is_dst*`)`'
  id: totrans-2213
  prefs: []
  type: TYPE_NORMAL
  zh: '`int gmmktime(int` *hour*`, int` *minutes*`, int` *seconds*`, int` *month*`,
    int` *day*`, int` *year*`, int` *is_dst*`)`'
- en: Returns a timestamp date and time value from the provided set of values. Identical
    to `mktime()`, except that the values represent a GMT time and date rather than
    one in the local time zone.
  id: totrans-2214
  prefs: []
  type: TYPE_NORMAL
  zh: 从提供的值集合返回一个时间戳日期和时间值。与`mktime()`相同，但这些值代表的是GMT时间和日期，而不是本地时区的时间。
- en: gmstrftime
  id: totrans-2215
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: gmstrftime
- en: '`string gmstrftime(string` *format*`[, int` *timestamp*`])`'
  id: totrans-2216
  prefs: []
  type: TYPE_NORMAL
  zh: '`string gmstrftime(string` *format*`[, int` *timestamp*`])`'
- en: Formats a GMT timestamp. See `strftime` for more information on how to use this
    function.
  id: totrans-2217
  prefs: []
  type: TYPE_NORMAL
  zh: 格式化GMT时间戳。查看`strftime`获取更多关于如何使用该函数的信息。
- en: hash
  id: totrans-2218
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: hash
- en: '`string hash(string` *algorithm*`, string` *data* `[, bool` *output*`])`'
  id: totrans-2219
  prefs: []
  type: TYPE_NORMAL
  zh: '`string hash(string` *algorithm*`, string` *data* `[, bool` *output*`])`'
- en: Generates a hash value on the provided *data* based on the given *algorithm*.
    When *output* is set to `true`, defaults to `false`; the returned hash value is
    raw binary data. *Algorithm* values can be `md5`, `sha1`, `sha256`, and so on.
    See `hash_algos` for more algorithm information.
  id: totrans-2220
  prefs: []
  type: TYPE_NORMAL
  zh: 根据给定的*算法*生成提供的*数据*的哈希值。当*output*设置为`true`时，默认为`false`；返回的哈希值是原始二进制数据。*算法*的值可以是`md5`、`sha1`、`sha256`等。查看`hash_algos`获取更多算法信息。
- en: hash_algos
  id: totrans-2221
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: hash_algos
- en: '`array hash_algos(void)`'
  id: totrans-2222
  prefs: []
  type: TYPE_NORMAL
  zh: '`array hash_algos(void)`'
- en: Returns a numerically indexed array of all the supported hash algorithms.
  id: totrans-2223
  prefs: []
  type: TYPE_NORMAL
  zh: 返回所有支持的哈希算法的数字索引数组。
- en: hash_file
  id: totrans-2224
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: hash_file
- en: '`string hash_file(string` *algorithm*`, string` *filename* `[, bool` *output*`])`'
  id: totrans-2225
  prefs: []
  type: TYPE_NORMAL
  zh: '`string hash_file(string` *algorithm*`, string` *filename* `[, bool` *output*`])`'
- en: Generates a hash value string on the contents of *filename* (URL for location
    of the file) based on the given *algorithm*. When *output* is set to `true`, defaults
    to `false`; the returned hash value is raw binary data. *Algorithm* values can
    be `md5`, `sha1`, `sha256`, and so on.
  id: totrans-2226
  prefs: []
  type: TYPE_NORMAL
  zh: 根据给定的*算法*在*filename*（文件位置的URL）的内容上生成哈希值字符串。当*output*设置为`true`时，默认为`false`；返回的哈希值是原始二进制数据。*算法*的值可以是`md5`、`sha1`、`sha256`等。
- en: header
  id: totrans-2227
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 头部
- en: '`void header(string` *header*`[, bool` *replace* `[, int` *http_response_code*`]])`'
  id: totrans-2228
  prefs: []
  type: TYPE_NORMAL
  zh: '`void header(string` *header*`[, bool` *replace* `[, int` *http_response_code*`]])`'
- en: Sends *header* as a raw HTTP header string; must be called before any output
    is generated (including blank lines—a common mistake). If the *header* is a `Location`
    header, PHP also generates the appropriate `REDIRECT` status code. If *replace*
    is specified and `false`, the header does not replace a header of the same name;
    otherwise, the header replaces any header of the same name.
  id: totrans-2229
  prefs: []
  type: TYPE_NORMAL
  zh: 将*header*作为原始HTTP头字符串发送；必须在生成任何输出之前调用（包括空行——这是一个常见错误）。如果*header*是`Location`头，则PHP还会生成适当的`REDIRECT`状态码。如果指定了*replace*且为`false`，则该头部不会替换同名头部；否则，该头部将替换同名头部。
- en: header_remove
  id: totrans-2230
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: header_remove
- en: '`void header_remove([string` *header*`])`'
  id: totrans-2231
  prefs: []
  type: TYPE_NORMAL
  zh: '`void header_remove([string` *header*`])`'
- en: If *header* is specified, removes the HTTP header with named *header* from the
    current response. If *header* is not specified, or is an empty string, removes
    all headers generated by the `header()` function from the current response. Note
    that the headers cannot be removed if they have already been sent to the client.
  id: totrans-2232
  prefs: []
  type: TYPE_NORMAL
  zh: 如果指定了*header*，则从当前响应中删除名为*header*的HTTP头。如果未指定*header*或为一个空字符串，则从当前响应中删除`header()`函数生成的所有头部。请注意，如果头部已发送到客户端，则无法删除。
- en: headers_list
  id: totrans-2233
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: headers_list
- en: '`array headers_list()`'
  id: totrans-2234
  prefs: []
  type: TYPE_NORMAL
  zh: '`array headers_list()`'
- en: Returns an array of the HTTP response headers that have been prepared for sending
    (or have been sent) to the client.
  id: totrans-2235
  prefs: []
  type: TYPE_NORMAL
  zh: 返回已准备发送（或已发送）到客户端的HTTP响应头的数组。
- en: headers_sent
  id: totrans-2236
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: headers_sent
- en: '`bool headers_sent([ string &`*file* `[, int &`*line*`]])`'
  id: totrans-2237
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool headers_sent([ string &`*file* `[, int &`*line*`]])`'
- en: Returns `true` if the HTTP headers have already been sent. If they have not
    yet been sent, the function returns `false`. If *file* and *line* options are
    provided, the filename and the line number where the output began are placed in
    *file* and *line* variables.
  id: totrans-2238
  prefs: []
  type: TYPE_NORMAL
  zh: 如果HTTP头已发送，则返回`true`。如果尚未发送，则函数返回`false`。如果提供了*file*和*line*选项，则将输出开始的文件名和行号放置在*file*和*line*变量中。
- en: hebrev
  id: totrans-2239
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: hebrev
- en: '`string hebrev(string` *string*`[, int` *size*`])`'
  id: totrans-2240
  prefs: []
  type: TYPE_NORMAL
  zh: '`string hebrev(string` *string*`[, int` *size*`])`'
- en: Converts the logical Hebrew text *string* to visual Hebrew text. If the second
    parameter is specified, each line will contain no more than *size* characters;
    the function attempts to avoid breaking words.
  id: totrans-2241
  prefs: []
  type: TYPE_NORMAL
  zh: 将逻辑希伯来文本*string*转换为视觉希伯来文本。如果指定第二个参数，每行的字符数不超过*size*个字符；函数尝试避免断开单词。
- en: hex2bin
  id: totrans-2242
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: hex2bin
- en: '`string hex2bin(string` *hex*`)`'
  id: totrans-2243
  prefs: []
  type: TYPE_NORMAL
  zh: '`string hex2bin(string` *hex*`)`'
- en: Converts *hex* to its binary value.
  id: totrans-2244
  prefs: []
  type: TYPE_NORMAL
  zh: 将*十六进制*转换为其二进制值。
- en: hexdec
  id: totrans-2245
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: hexdec
- en: '`number hexdec(string` *hex*`)`'
  id: totrans-2246
  prefs: []
  type: TYPE_NORMAL
  zh: '`number hexdec(string` *hex*`)`'
- en: Converts *hex* to its decimal value. Up to a 32-bit number, or 2,147,483,647
    decimal (0x7FFFFFFF hexadecimal), can be converted.
  id: totrans-2247
  prefs: []
  type: TYPE_NORMAL
  zh: 将*十六进制*转换为其十进制值。可转换为32位数字，即2,147,483,647十进制（0x7FFFFFFF十六进制）。
- en: highlight_file
  id: totrans-2248
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: highlight_file
- en: '`mixed highlight_file(string` *filename* `[, bool` *return*`])`'
  id: totrans-2249
  prefs: []
  type: TYPE_NORMAL
  zh: '`mixed highlight_file(string` *filename* `[, bool` *return*`])`'
- en: Prints a syntax-colored version of the PHP source file *filename* using PHP’s
    built-in syntax highlighter. Returns `true` if *filename* exists and is a PHP
    source file; otherwise, returns `false`. If *return* is `true`, the highlighted
    code is returned as a string rather than being sent to the output device.
  id: totrans-2250
  prefs: []
  type: TYPE_NORMAL
  zh: 使用PHP内置的语法高亮器打印*filename*的语法着色版本。如果*filename*存在且为PHP源文件，则返回`true`；否则返回`false`。如果*return*为`true`，则高亮代码作为字符串返回，而不是发送到输出设备。
- en: highlight_string
  id: totrans-2251
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: highlight_string
- en: '`mixed highlight_string(string` *source* `[, bool` *return*`])`'
  id: totrans-2252
  prefs: []
  type: TYPE_NORMAL
  zh: '`mixed highlight_string(string` *source* `[, bool` *return*`])`'
- en: Prints a syntax-colored version of the string *source* using PHP’s built-in
    syntax highlighter. Returns `true` if successful; otherwise, returns `false`.
    If *return* is `true`, then the highlighted code is returned as a string rather
    than being sent to the output device.
  id: totrans-2253
  prefs: []
  type: TYPE_NORMAL
  zh: 使用PHP内置的语法高亮器打印字符串*source*的语法着色版本。如果成功，则返回`true`；否则返回`false`。如果*return*为`true`，则高亮代码作为字符串返回，而不是发送到输出设备。
- en: hrtime
  id: totrans-2254
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: hrtime
- en: '`mixed hrtime([bool` *get_as_number*`])`'
  id: totrans-2255
  prefs: []
  type: TYPE_NORMAL
  zh: '`mixed hrtime([bool` *get_as_number*`])`'
- en: Returns the system’s high-resolution time as an array, counted from an arbitrary
    point in time. The delivered timestamp is monotonic and cannot be adjusted. *get_as_number*
    returns as an array (`false`) or a number (`true`); defaults to `false`.
  id: totrans-2256
  prefs: []
  type: TYPE_NORMAL
  zh: 将系统的高分辨率时间作为数组返回，从任意时间点开始计算。交付的时间戳是单调的，不可调整。*get_as_number*返回数组（`false`）或数字（`true`）；默认为`false`。
- en: htmlentities
  id: totrans-2257
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: htmlentities
- en: '`string htmlentities(string` *string*`[, int` *style*`[, string` *encoding*
    `[, bool` *double_encode*`]]])`'
  id: totrans-2258
  prefs: []
  type: TYPE_NORMAL
  zh: '`string htmlentities(string` *string*`[, int` *style*`[, string` *encoding*
    `[, bool` *double_encode*`]]])`'
- en: 'Converts all characters in *string* that have special meaning in HTML and returns
    the resulting string. All entities defined in the HTML standard are converted.
    If supplied, *style* determines the manner in which quotes are translated. The
    possible values for *style* are:'
  id: totrans-2259
  prefs: []
  type: TYPE_NORMAL
  zh: 转换*string*中所有在HTML中具有特殊含义的字符，并返回结果字符串。转换所有HTML标准中定义的实体。如果提供了*style*，则确定引号翻译的方式。*style*的可能取值包括：
- en: '| `ENT_COMPAT` (default) | Converts double quotes, but not single quotes |'
  id: totrans-2260
  prefs: []
  type: TYPE_TB
  zh: '| `ENT_COMPAT`（默认） | 转换双引号，但不转换单引号 |'
- en: '| `ENT_NOQUOTES` | Does not convert either double quotes or single quotes |'
  id: totrans-2261
  prefs: []
  type: TYPE_TB
  zh: '| `ENT_NOQUOTES` | 不转换双引号或单引号 |'
- en: '| `ENT_QUOTES` | Converts both single and double quotes |'
  id: totrans-2262
  prefs: []
  type: TYPE_TB
  zh: '| `ENT_QUOTES` | 转换双引号和单引号 |'
- en: '| `ENT_SUBSTITUTE` | Replace invalid code unit sequences with a Unicode Replacement
    Character |'
  id: totrans-2263
  prefs: []
  type: TYPE_TB
  zh: '| `ENT_SUBSTITUTE` | 用Unicode替换字符替换无效的代码单元序列 |'
- en: '| `ENT_DISALLOWED` | Replace invalid code points for the given document type
    with a Unicode Replacement Character |'
  id: totrans-2264
  prefs: []
  type: TYPE_TB
  zh: '| `ENT_DISALLOWED` | 替换给定文档类型的无效代码点为Unicode替换字符 |'
- en: '| `ENT_HTML401` | Handle code as HTML 4.01 |'
  id: totrans-2265
  prefs: []
  type: TYPE_TB
  zh: '| `ENT_HTML401` | 将代码视为HTML 4.01处理 |'
- en: '| `ENT_XML1` | Handle code as XML 1 |'
  id: totrans-2266
  prefs: []
  type: TYPE_TB
  zh: '| `ENT_XML1` | 将代码视为XML 1处理 |'
- en: '| `ENT_XHTML` | Handle code as XHTML |'
  id: totrans-2267
  prefs: []
  type: TYPE_TB
  zh: '| `ENT_XHTML` | 将代码视为XHTML处理 |'
- en: '| `ENT_HTML5` | Handle code as HTML 5 |'
  id: totrans-2268
  prefs: []
  type: TYPE_TB
  zh: '| `ENT_HTML5` | 将代码视为HTML 5处理 |'
- en: 'If supplied, *encoding* determines the final encoding for the characters. The
    possible values for *encoding* are:'
  id: totrans-2269
  prefs: []
  type: TYPE_NORMAL
  zh: 如果提供了*encoding*，则确定字符的最终编码方式。*encoding*的可能取值包括：
- en: '| `ISO-8859-1` | Western European, Latin-1 |'
  id: totrans-2270
  prefs: []
  type: TYPE_TB
  zh: '| `ISO-8859-1` | 西欧、拉丁-1 |'
- en: '| `ISO-8859-5` | Cyrillic charset (Latin/Cyrillic), rarely used |'
  id: totrans-2271
  prefs: []
  type: TYPE_TB
  zh: '| `ISO-8859-5` | 西里尔文字符集（拉丁/西里尔文），很少使用 |'
- en: '| `ISO-8859-15` | Western European, Latin-9\. Adds the Euro sign, French and
    Finnish letters missing in Latin-1. |'
  id: totrans-2272
  prefs: []
  type: TYPE_TB
  zh: '| `ISO-8859-15` | 西欧、拉丁-9。增加了欧元符号、法语和芬兰语中拉丁-1中缺失的字符。 |'
- en: '| `UTF-8` | ASCII-compatible multi-byte 8-bit Unicode |'
  id: totrans-2273
  prefs: []
  type: TYPE_TB
  zh: '| `UTF-8` | 兼容ASCII的多字节8位Unicode |'
- en: '| `cp866` | DOS-specific Cyrillic charset |'
  id: totrans-2274
  prefs: []
  type: TYPE_TB
  zh: '| `cp866` | DOS特定的西里尔文字符集 |'
- en: '| `cp1251` | Windows-specific Cyrillic charset |'
  id: totrans-2275
  prefs: []
  type: TYPE_TB
  zh: '| `cp1251` | Windows特定的西里尔文字符集 |'
- en: '| `cp1252` | Windows-specific charset for Western European |'
  id: totrans-2276
  prefs: []
  type: TYPE_TB
  zh: '| `cp1252` | 西欧Windows特定字符集 |'
- en: '| `KOI8-R` | Russian |'
  id: totrans-2277
  prefs: []
  type: TYPE_TB
  zh: '| `KOI8-R` | 俄语 |'
- en: '| `BIG5` | Traditional Chinese, mainly used in Taiwan |'
  id: totrans-2278
  prefs: []
  type: TYPE_TB
  zh: '| `BIG5` | 主要用于台湾的繁体中文 |'
- en: '| `GB2312` | Simplified Chinese, national standard character set |'
  id: totrans-2279
  prefs: []
  type: TYPE_TB
  zh: '| `GB2312` | 简体中文，国家标准字符集 |'
- en: '| `BIG5-HKSCS` | Big5 with Hong Kong extensions, Traditional Chinese |'
  id: totrans-2280
  prefs: []
  type: TYPE_TB
  zh: '| `BIG5-HKSCS` | 带有香港扩展的Big5，繁体中文 |'
- en: '| `Shift_JIS` | Japanese |'
  id: totrans-2281
  prefs: []
  type: TYPE_TB
  zh: '| `Shift_JIS` | 日语 |'
- en: '| `EUC-JP` | Japanese |'
  id: totrans-2282
  prefs: []
  type: TYPE_TB
  zh: '| `EUC-JP` | 日语 |'
- en: '| `MacRoman` | Charset that was used by Mac OS |'
  id: totrans-2283
  prefs: []
  type: TYPE_TB
  zh: '| `MacRoman` | Mac OS使用的字符集 |'
- en: '| `""` | An empty string activates detection from script encoding (Zend multibyte),
    `default_charset`, and current locale, in this order. Not recommended. |'
  id: totrans-2284
  prefs: []
  type: TYPE_TB
  zh: '| `""` | 空字符串会依次从脚本编码（Zend多字节）、`default_charset`和当前区域设置中进行检测。不推荐使用。 |'
- en: html_entity_decode
  id: totrans-2285
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: html_entity_decode
- en: '`string html_entity_decode(string` *string*`[, int` *style*`[, string` *encoding*`]])`'
  id: totrans-2286
  prefs: []
  type: TYPE_NORMAL
  zh: '`string html_entity_decode(string` *string*`[, int` *style*`[, string` *encoding*`]])`'
- en: Converts all HTML entities in *string* to the equivalent character. All entities
    defined in the HTML standard are converted. If supplied, *style* determines the
    manner in which quotes are translated. The possible values for *style* are the
    same as those for *htmlentities*.
  id: totrans-2287
  prefs: []
  type: TYPE_NORMAL
  zh: 将*string*中所有HTML实体转换为等效字符。转换所有HTML标准中定义的实体。如果提供了*style*，则确定引号翻译的方式。*style*的可能取值与*htmlentities*相同。
- en: If supplied, *encoding* determines the final encoding for the characters. The
    possible values for *encoding* are the same as those for *htmlentities*.
  id: totrans-2288
  prefs: []
  type: TYPE_NORMAL
  zh: 如果提供了*encoding*，则确定字符的最终编码方式。*encoding*的可能取值与*htmlentities*相同。
- en: htmlspecialchars
  id: totrans-2289
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: htmlspecialchars
- en: '`string htmlspecialchars(string` *string*`[, int` *style*`[, string` *encoding*`[,
    bool` *double_encode*`]]])`'
  id: totrans-2290
  prefs: []
  type: TYPE_NORMAL
  zh: '`string htmlspecialchars(string` *string*`[, int` *style*`[, string` *encoding*`[,
    bool` *double_encode*`]]])`'
- en: 'Converts characters in *string* that have special meaning in HTML and returns
    the resulting string. A subset of all HTML entities covering the most common characters
    is used to perform the translation. If supplied, *style* determines the manner
    in which quotes are translated. The characters translated are:'
  id: totrans-2291
  prefs: []
  type: TYPE_NORMAL
  zh: 转换*string*中在HTML中具有特殊含义的字符，并返回结果字符串。使用了所有HTML标准中定义的常见字符实体的子集来执行转换。如果提供了*style*，则确定引号翻译的方式。转换的字符包括：
- en: Ampersand (`&`) becomes `&amp;`
  id: totrans-2292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 和号（&）变成`&amp;`
- en: Double quotes (`"`) become `&quot;`
  id: totrans-2293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 双引号（"）变成`&quot;`
- en: Single quote (`'`) becomes `&#039;`
  id: totrans-2294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单引号（'）变成`&#039;`
- en: Less than sign (`<`) becomes `&lt;`
  id: totrans-2295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 小于号（<）变成`&lt;`
- en: Greater than sign (`>`) becomes `&gt;`
  id: totrans-2296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大于号（`>`）变成 `&gt;`
- en: The possible values for *style* are the same as those for *htmlentities*. If
    supplied, *encoding* determines the final encoding for the characters. The possible
    values for *encoding* are the same as those for *htmlentities*. When *double_encode*
    is turned off, PHP will not encode existing *htmlentities*.
  id: totrans-2297
  prefs: []
  type: TYPE_NORMAL
  zh: '*style* 的可能取值与 *htmlentities* 中的相同。如果提供了 *encoding*，则确定字符的最终编码方式，其可能取值也与 *htmlentities*
    中的相同。当 *double_encode* 关闭时，PHP 不会对已有的 *htmlentities* 进行编码。'
- en: htmlspecialchars_decode
  id: totrans-2298
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: htmlspecialchars_decode
- en: '`string htmlspecialchars_decode(string` *string*`[, int` *style*`])`'
  id: totrans-2299
  prefs: []
  type: TYPE_NORMAL
  zh: '`string htmlspecialchars_decode(string` *string*`[, int` *style*`])`'
- en: Converts HTML entities in *string* to characters. A subset of all HTML entities
    covering the most common characters is used to perform the translation. If supplied,
    *style* determines the manner in which quotes are translated. See `htmlentities()`
    for the possible values for *style*. The characters translated are those found
    in `htmlspecialchars()`.
  id: totrans-2300
  prefs: []
  type: TYPE_NORMAL
  zh: 将 *string* 中的 HTML 实体转换为字符。使用的 HTML 实体子集覆盖了最常见的字符，用于执行转换。如果提供了 *style*，则决定引号的转换方式。有关
    *style* 可能的取值，请参阅 `htmlentities()`。转换的字符是在 `htmlspecialchars()` 中找到的那些。
- en: http_build_query
  id: totrans-2301
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: http_build_query
- en: '`string http_build_query(mixed` *values*`[, string` *prefix* `[, string` *arg_separator*
    `[, int` *enc_type*`]]])`'
  id: totrans-2302
  prefs: []
  type: TYPE_NORMAL
  zh: '`string http_build_query(mixed` *values*`[, string` *prefix* `[, string` *arg_separator*
    `[, int` *enc_type*`]]])`'
- en: Returns a URL-encoded query string from *values*. The array values can be either
    numerically indexed or associative (or a combination). Because strictly numeric
    names may be illegal in some languages interpreting the query string on the other
    side (PHP, for example), if you use numeric indices in values, you should also
    provide *prefix*. The value of *prefix* is prepended to all numeric names in the
    resulting query string. The *arg_separator* allows for assigning a customized
    delimiter and the *enc_type* option allows for selecting different encoding types.
  id: totrans-2303
  prefs: []
  type: TYPE_NORMAL
  zh: 根据第一个参数中提供的 *format* 字符串，将时间和日期格式化为整数。如果未指定第二个参数，则使用当前的时间和日期。*format* 字符串中可以识别以下字符：
- en: hypot
  id: totrans-2304
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: hypot
- en: '`float hypot(float` *x*`, float` *y*`)`'
  id: totrans-2305
  prefs: []
  type: TYPE_NORMAL
  zh: '`float hypot(float` *x*`, float` *y*`)`'
- en: Calculates and returns the length of the hypotenuse of a right-angle triangle
    whose other sides have lengths *x* and *y*.
  id: totrans-2306
  prefs: []
  type: TYPE_NORMAL
  zh: 计算并返回直角三角形斜边的长度，其中其他两边的长度分别为 *x* 和 *y*。
- en: idate
  id: totrans-2307
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: idate
- en: '`int idate(string` *format*`[, int` *timestamp*`])`'
  id: totrans-2308
  prefs: []
  type: TYPE_NORMAL
  zh: '`int idate(string` *format*`[, int` *timestamp*`])`'
- en: 'Formats a time and date as an integer according to the *format* string provided
    in the first parameter. If the second parameter is not specified, the current
    time and date is used. The following characters are recognized in the *format*
    string:'
  id: totrans-2309
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个 URL 编码的查询字符串，该字符串来自 *values*。数组值可以是数值索引或关联索引（或两者结合）。由于某些语言可能不允许严格的数值名称解析查询字符串（例如
    PHP），如果在 *values* 中使用数值索引，则还应提供 *prefix*。*prefix* 的值将添加到结果查询字符串中的所有数值名称之前。*arg_separator*
    允许分配自定义分隔符，*enc_type* 选项允许选择不同的编码类型。
- en: '| `B` | Swatch internet time |'
  id: totrans-2310
  prefs: []
  type: TYPE_TB
  zh: '| `B` | 斯沃奇因特网时间 |'
- en: '| `d` | Day of the month |'
  id: totrans-2311
  prefs: []
  type: TYPE_TB
  zh: '| `d` | 月份中的天数 |'
- en: '| `h` | Hour in 12-hour format |'
  id: totrans-2312
  prefs: []
  type: TYPE_TB
  zh: '| `h` | 12 小时制的小时数 |'
- en: '| `H` | Hour in 24-hour format |'
  id: totrans-2313
  prefs: []
  type: TYPE_TB
  zh: '| `H` | 24 小时制的小时数 |'
- en: '| `i` | Minutes |'
  id: totrans-2314
  prefs: []
  type: TYPE_TB
  zh: '| `i` | 分钟数 |'
- en: '| `I` | `1` if Daylight Saving Time; `0` otherwise |'
  id: totrans-2315
  prefs: []
  type: TYPE_TB
  zh: '| `I` | 如果是夏令时则为 `1`；否则为 `0` |'
- en: '| `j` | Day of the month (e.g., 1 through 31) |'
  id: totrans-2316
  prefs: []
  type: TYPE_TB
  zh: '| `j` | 月份中的天数（例如，1 到 31） |'
- en: '| `L` | `0` if the year is not a leap year; `1` if it is |'
  id: totrans-2317
  prefs: []
  type: TYPE_TB
  zh: '| `L` | 如果年份不是闰年则为 `0`；如果是则为 `1` |'
- en: '| `m` | Month (1 through 12) |'
  id: totrans-2318
  prefs: []
  type: TYPE_TB
  zh: '| `m` | 月份（1 到 12） |'
- en: '| `s` | Seconds |'
  id: totrans-2319
  prefs: []
  type: TYPE_TB
  zh: '| `s` | 秒数 |'
- en: '| `t` | Number of days in the month, from 28 to 31 |'
  id: totrans-2320
  prefs: []
  type: TYPE_TB
  zh: '| `t` | 月份中的天数，从 28 到 31 |'
- en: '| `U` | Seconds since the Unix epoch |'
  id: totrans-2321
  prefs: []
  type: TYPE_TB
  zh: '| `U` | 从 Unix 纪元开始计算的秒数 |'
- en: '| `w` | Numeric day of the week, starting with `0` for Sunday |'
  id: totrans-2322
  prefs: []
  type: TYPE_TB
  zh: '| `w` | 一周中的星期数，从星期日开始，用 `0` 表示 |'
- en: '| `W` | Numeric week of the year according to ISO 8601 |'
  id: totrans-2323
  prefs: []
  type: TYPE_TB
  zh: '| `W` | 根据 ISO 8601 定义的年份中的周数 |'
- en: '| `Y` | Year with four digits (e.g., 1998) |'
  id: totrans-2324
  prefs: []
  type: TYPE_TB
  zh: '| `Y` | 四位数表示的年份（例如，1998） |'
- en: '| `y` | Year with one or two digits (e.g., 98) |'
  id: totrans-2325
  prefs: []
  type: TYPE_TB
  zh: '| `y` | 一位或两位数字表示的年份（例如，98） |'
- en: '| `z` | Day of the year, from 1 through 365 |'
  id: totrans-2326
  prefs: []
  type: TYPE_TB
  zh: '| `z` | 年份中的第几天，从 1 到 365 |'
- en: '| `Z` | Time zone offset in seconds, from −43200 (far west of UTC) to 43200
    (far east of UTC) |'
  id: totrans-2327
  prefs: []
  type: TYPE_TB
  zh: '| `Z` | 时区偏移量（以秒为单位），从 −43200（UTC 的极西）到 43200（UTC 的极东） |'
- en: Any characters in the *format* string not matching one of the above are ignored.
    Although the character strings used in `idate` are similar to those in `date`,
    because `idate` returns an integer, in places where `date` would return a two-digit
    number with leading zero, the leading zero is not preserved; for example, `date('y');`
    will return `05` for a timestamp in 2005, while `idate('y');` will return `5`.
  id: totrans-2328
  prefs: []
  type: TYPE_NORMAL
  zh: '*format* 字符串中不匹配上述任一内容的字符将被忽略。尽管 `idate` 中使用的字符字符串与 `date` 中的类似，但因为 `idate`
    返回整数，在 `date` 返回带有前导零的两位数数字的地方，前导零不会保留；例如，对于 2005 年的时间戳，`date(''y'');` 将返回 `05`，而
    `idate(''y'');` 将返回 `5`。'
- en: ignore_user_abort
  id: totrans-2329
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: ignore_user_abort
- en: '`int ignore_user_abort([string` *ignore*`])`'
  id: totrans-2330
  prefs: []
  type: TYPE_NORMAL
  zh: '`int ignore_user_abort([string` *ignore*`])`'
- en: Sets whether the client disconnecting from the script should stop processing
    of the PHP script. If *ignore* is `true`, the script will continue processing,
    even after a client disconnect. Returns the current value; if *ignore* is not
    given, the current value is returned without a new value being set.
  id: totrans-2331
  prefs: []
  type: TYPE_NORMAL
  zh: 设置客户端断开连接时是否应停止处理 PHP 脚本。如果 *ignore* 是 `true`，则脚本将继续处理，即使客户端断开连接。返回当前值；如果未提供
    *ignore*，则返回当前值，而不设置新值。
- en: implode
  id: totrans-2332
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: implode
- en: '`string implode(string` *separator*`, array` *strings*`)`'
  id: totrans-2333
  prefs: []
  type: TYPE_NORMAL
  zh: '`string implode(string` *separator*`, array` *strings*`)`'
- en: Returns a string created by joining every element in *strings* with *separator*.
  id: totrans-2334
  prefs: []
  type: TYPE_NORMAL
  zh: 返回由将 *strings* 中的每个元素用 *separator* 连接而创建的字符串。
- en: inet_ntop
  id: totrans-2335
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: inet_ntop
- en: '`string inet_ntop(string` *address*`)`'
  id: totrans-2336
  prefs: []
  type: TYPE_NORMAL
  zh: '`string inet_ntop(string` *address*`)`'
- en: Unpacks the packed IPv4 or IPv6 IP address *address* and returns it as a human-readable
    string.
  id: totrans-2337
  prefs: []
  type: TYPE_NORMAL
  zh: 将打包的 IPv4 或 IPv6 IP 地址 *address* 解包并以人类可读的字符串形式返回。
- en: inet_pton
  id: totrans-2338
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: inet_pton
- en: '`string inet_pton(string` *address*`)`'
  id: totrans-2339
  prefs: []
  type: TYPE_NORMAL
  zh: '`string inet_pton(string` *address*`)`'
- en: Packs the human-readable IP address *address* into a 32- or 128-bit value and
    returns it.
  id: totrans-2340
  prefs: []
  type: TYPE_NORMAL
  zh: 将人类可读的 IP 地址 *address* 打包成 32 位或 128 位值并返回。
- en: in_array
  id: totrans-2341
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: in_array
- en: '`bool in_array(mixed` *value*`, array` *array*`[, bool` *strict*`])`'
  id: totrans-2342
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool in_array(mixed` *value*`, array` *array*`[, bool` *strict*`])`'
- en: Returns `true` if the given *value* exists in the *array*. If the third argument
    is provided and is `true`, the function will return `true` only if the element
    exists in the array and has the same type as the provided value (that is, `"1.23"`
    in the array will not match `1.23` as the argument). If the argument is not found
    in the array, the function returns `false`.
  id: totrans-2343
  prefs: []
  type: TYPE_NORMAL
  zh: 如果给定 *value* 存在于 *array* 中则返回 `true`。如果提供了第三个参数并且是 `true`，则该函数仅在元素存在于数组中且与提供的值具有相同类型时才返回
    `true`（即数组中的 `"1.23"` 将不会与参数中的 `1.23` 匹配）。如果数组中未找到参数，则该函数返回 `false`。
- en: ini_get
  id: totrans-2344
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: ini_get
- en: '`string ini_get(string` *variable*`)`'
  id: totrans-2345
  prefs: []
  type: TYPE_NORMAL
  zh: '`string ini_get(string` *variable*`)`'
- en: Returns the value for the configuration option *variable*. If *variable* does
    not exist, returns `false`.
  id: totrans-2346
  prefs: []
  type: TYPE_NORMAL
  zh: 返回配置选项 *variable* 的值。如果 *variable* 不存在，则返回 `false`。
- en: ini_get_all
  id: totrans-2347
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: ini_get_all
- en: '`array ini_get_all([string` *extension* `[, bool` *details*`]])`'
  id: totrans-2348
  prefs: []
  type: TYPE_NORMAL
  zh: '`array ini_get_all([string` *extension* `[, bool` *details*`]])`'
- en: 'Returns all configuration options as an associative array. If a valid *extension*
    is specified then only values pertaining to that named *extension* are returned.
    If *details* is `true` (default), then detail settings are retrieved. Each value
    returned in the array is an associative array with three keys:'
  id: totrans-2349
  prefs: []
  type: TYPE_NORMAL
  zh: 以关联数组形式返回所有配置选项。如果指定了有效的 *extension*，则仅返回与该命名 *extension* 相关的值。如果 *details*
    是 `true`（默认），则检索详细设置。数组中返回的每个值都是一个带有三个键的关联数组：
- en: '| `global_value` | The global value for the configuration option, as set in
    *php.ini* |'
  id: totrans-2350
  prefs: []
  type: TYPE_TB
  zh: '| `global_value` | 作为 *php.ini* 中设置的配置选项的全局值 |'
- en: '| `local_value` | The local override for the configuration option, as set through
    `ini_set()`, for example |'
  id: totrans-2351
  prefs: []
  type: TYPE_TB
  zh: '| `local_value` | 通过 `ini_set()` 设置的配置选项的本地覆盖值，例如 |'
- en: '| `access` | A bitmask with the levels at which the value can be set (see `ini_set`
    for more information on access levels) |'
  id: totrans-2352
  prefs: []
  type: TYPE_TB
  zh: '| `access` | 一个位掩码，表示可以设置值的级别（有关访问级别的更多信息，请参阅 `ini_set`） |'
- en: ini_restore
  id: totrans-2353
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: ini_restore
- en: '`void ini_restore(string` *variable*`)`'
  id: totrans-2354
  prefs: []
  type: TYPE_NORMAL
  zh: '`void ini_restore(string` *variable*`)`'
- en: Restores the value for the configuration option *variable*. This is done automatically
    when a script completes execution for all configuration options set using `ini_set()`
    during the script.
  id: totrans-2355
  prefs: []
  type: TYPE_NORMAL
  zh: 运行完整个脚本后，通过 `ini_set()` 设置的所有配置选项将自动恢复。
- en: ini_set
  id: totrans-2356
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: ini_set
- en: '`string ini_set(string` *variable*`, string` *value*`)`'
  id: totrans-2357
  prefs: []
  type: TYPE_NORMAL
  zh: '`string ini_set(string` *variable*`, string` *value*`)`'
- en: Sets the configuration option *variable* to *value*. Returns the previous value
    if successful, or `false` if not. The new value is kept for the duration of the
    current script and is restored after the script ends.
  id: totrans-2358
  prefs: []
  type: TYPE_NORMAL
  zh: 将配置选项 *variable* 设置为 *value*。如果成功，返回先前的值；否则返回 `false`。新值在当前脚本执行期间保持，并在脚本结束后恢复。
- en: intdiv
  id: totrans-2359
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: intdiv
- en: '`int intdiv (int` *dividend*`, int` *vdivisor*`)`'
  id: totrans-2360
  prefs: []
  type: TYPE_NORMAL
  zh: '`int intdiv (int` *dividend*`, int` *vdivisor*`)`'
- en: Returns the quotient of the division of *dividend* by *divisor*. The quotient
    is returned as an integer.
  id: totrans-2361
  prefs: []
  type: TYPE_NORMAL
  zh: 返回 *dividend* 除以 *divisor* 的商。商作为整数返回。
- en: interface_exists
  id: totrans-2362
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: interface_exists
- en: '`bool interface_exists(string` *name* `[, bool` *autoload_**interface*`])`'
  id: totrans-2363
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool interface_exists(string` *name* `[, bool` *autoload_**interface*`])`'
- en: Returns `true` if an interface named *name* has been defined and `false` otherwise.
    By default, the function will call `__autoload()` on the interface; if `autoload_interface`
    is set and is `false`, `__autoload()` will not be called.
  id: totrans-2364
  prefs: []
  type: TYPE_NORMAL
  zh: 返回 `true` 如果名为 *name* 的接口已定义，否则返回 `false`。默认情况下，函数将在接口上调用 `__autoload()`；如果设置了
    `autoload_interface` 并且为 `false`，则不会调用 `__autoload()`。
- en: intval
  id: totrans-2365
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: intval
- en: '`int intval(mixed` *value*`[, int` *base*`])`'
  id: totrans-2366
  prefs: []
  type: TYPE_NORMAL
  zh: '`int intval(mixed` *value*`[, int` *base*`])`'
- en: Returns the integer value for *value* using the optional base *base* (if unspecified,
    base-10 is used). If *value* is a nonscalar value (object or array), the function
    returns `0`.
  id: totrans-2367
  prefs: []
  type: TYPE_NORMAL
  zh: 使用可选的基数 *base* 返回 *value* 的整数值（如果未指定，则使用基数10）。如果 *value* 是非标量值（对象或数组），则函数返回
    `0`。
- en: ip2long
  id: totrans-2368
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: ip2long
- en: '`int ip2long(string` *address*`)`'
  id: totrans-2369
  prefs: []
  type: TYPE_NORMAL
  zh: '`int ip2long(string` *address*`)`'
- en: Converts a dotted (standard format) IP address to an IPv4 address.
  id: totrans-2370
  prefs: []
  type: TYPE_NORMAL
  zh: 将标点格式的IP地址转换为IPv4地址。
- en: is_a
  id: totrans-2371
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: is_a
- en: '`bool is_a(object` *object*`, string` *class* `[, bool` *allow_string*`])`'
  id: totrans-2372
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool is_a(object` *object*`, string` *class* `[, bool` *allow_string*`])`'
- en: Returns `true` if *object* is of the class *class*, or if its class has *class*
    as one of its parents; otherwise, returns `false`. If *allow_string* is `false`,
    then string *class* name as *object* is not allowed.
  id: totrans-2373
  prefs: []
  type: TYPE_NORMAL
  zh: 返回 `true` 如果 *object* 是 *class* 类的实例，或者其类有 *class* 作为其父类之一；否则返回 `false`。如果 *allow_string*
    是 `false`，则不允许将字符串 *class* 名称作为 *object*。
- en: is_array
  id: totrans-2374
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: is_array
- en: '`bool is_array(mixed` *value*`)`'
  id: totrans-2375
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool is_array(mixed` *value*`)`'
- en: Returns `true` if *value* is an array; otherwise, returns `false`.
  id: totrans-2376
  prefs: []
  type: TYPE_NORMAL
  zh: 返回 `true` 如果 *value* 是数组；否则返回 `false`。
- en: is_bool
  id: totrans-2377
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: is_bool
- en: '`bool is_bool(mixed` *value*`)`'
  id: totrans-2378
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool is_bool(mixed` *value*`)`'
- en: Returns `true` if *value* is a boolean; otherwise, returns `false`.
  id: totrans-2379
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 *value* 是布尔值，则返回 `true`；否则返回 `false`。
- en: is_callable
  id: totrans-2380
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: is_callable
- en: '`int is_callable(callable` *callback*`[, int` *lazy*`[, string` *name*`]])`'
  id: totrans-2381
  prefs: []
  type: TYPE_NORMAL
  zh: '`int is_callable(callable` *callback*`[, int` *lazy*`[, string` *name*`]])`'
- en: Returns `true` if *callback* is a valid callback, `false` otherwise. To be valid,
    *callback* must either be the name of a function or an array containing two values—an
    object and the name of a method on that object. If *lazy* is given and is `true`,
    the actual existence of the function in the first form, or that the first element
    in callback is an object with a method named the second element, is not checked.
    The arguments merely have to have the correct kind of values to qualify as `true`.
    If supplied, the final argument is filled with the callable name for the function—though
    in the case of the callback being a method on an object, the resulting name in
    *name* is not actually usable to call the function directly.
  id: totrans-2382
  prefs: []
  type: TYPE_NORMAL
  zh: 返回 `true` 如果 *callback* 是有效的回调函数，否则返回 `false`。要有效，*callback* 必须是函数名或包含两个值的数组——一个对象和该对象上的方法名称。如果给出了
    *lazy* 并且为 `true`，则不检查函数存在性（第一种形式）或 *callback* 的第一个元素是否为对象且该对象有名为第二个元素的方法。参数只需具有正确类型的值即可符合条件。如果提供了最后一个参数，该函数的可调用名称将填充到
    *name* 中——尽管在回调是对象方法的情况下，*name* 中的结果名称实际上无法直接用于调用函数。
- en: is_countable
  id: totrans-2383
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: is_countable
- en: '`bool is_countable(mixed` *variable*`)`'
  id: totrans-2384
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool is_countable(mixed` *variable*`)`'
- en: Verify that the contents of *variable* is an [array](https://oreil.ly/rjM9i)
    or an object implementing [`Countable`](https://oreil.ly/b97Lx).
  id: totrans-2385
  prefs: []
  type: TYPE_NORMAL
  zh: 验证 *variable* 的内容是否为 [数组](https://oreil.ly/rjM9i) 或实现 [`Countable`](https://oreil.ly/b97Lx)
    的对象。
- en: is_dir
  id: totrans-2386
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: is_dir
- en: '`bool is_dir(string` *path*`)`'
  id: totrans-2387
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool is_dir(string` *path*`)`'
- en: Returns `true` if *path* exists and is a directory; otherwise, returns `false`.
    This information is cached; you can clear the cache with `clearstatcache()`.
  id: totrans-2388
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 *path* 存在且为目录，则返回 `true`；否则返回 `false`。此信息已缓存；你可以使用 `clearstatcache()` 清除缓存。
- en: is_executable
  id: totrans-2389
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: is_executable
- en: '`bool is_executable(string` *path*`)`'
  id: totrans-2390
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool is_executable(string` *path*`)`'
- en: Returns `true` if *path* exists and is executable; otherwise, returns `false`.
    This information is cached; you can clear the cache with `clearstatcache()`.
  id: totrans-2391
  prefs: []
  type: TYPE_NORMAL
  zh: 返回 `true` 如果 *path* 存在且可执行；否则返回 `false`。此信息已缓存；你可以使用 `clearstatcache()` 清除缓存。
- en: is_file
  id: totrans-2392
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: is_file
- en: '`bool is_file(string` *path*`)`'
  id: totrans-2393
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool is_file(string` *path*`)`'
- en: Returns `true` if *path* exists and is a file; otherwise, returns `false`. This
    information is cached; you can clear the cache with `clearstatcache()`.
  id: totrans-2394
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 *path* 存在且是文件，则返回 `true`；否则返回 `false`。此信息已缓存；您可以使用 `clearstatcache()` 清除缓存。
- en: is_finite
  id: totrans-2395
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: is_finite
- en: '`bool is_finite(float` *value*`)`'
  id: totrans-2396
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool is_finite(float` *value*`)`'
- en: Returns `true` if *value* is not positive or negative infinity, and `false`
    otherwise.
  id: totrans-2397
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 *value* 不是正或负无穷大，则返回 `true`；否则返回 `false`。
- en: is_float
  id: totrans-2398
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: is_float
- en: '`bool is_float(mixed` *value*`)`'
  id: totrans-2399
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool is_float(mixed` *value*`)`'
- en: Returns `true` if *value* is a float; otherwise, returns `false`.
  id: totrans-2400
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 *value* 是浮点数，则返回 `true`；否则返回 `false`。
- en: is_infinite
  id: totrans-2401
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: is_infinite
- en: '`bool is_infinite(float` *value*`)`'
  id: totrans-2402
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool is_infinite(float` *value*`)`'
- en: Returns `true` if *value* is positive or negative infinity, and `false` otherwise.
  id: totrans-2403
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 *value* 是正或负无穷大，则返回 `true`，否则返回 `false`。
- en: is_int
  id: totrans-2404
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: is_int
- en: '`bool is_int(mixed` *value*`)`'
  id: totrans-2405
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool is_int(mixed` *value*`)`'
- en: Returns `true` if *value* is an integer; otherwise, returns `false`.
  id: totrans-2406
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 *value* 是整数，则返回 `true`；否则返回 `false`。
- en: is_iterable
  id: totrans-2407
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: is_iterable
- en: '`bool is_iterable(mixed` *value*`)`'
  id: totrans-2408
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool is_iterable(mixed` *value*`)`'
- en: Returns `true` if *value* is an iterable pseudotype, an array, or a traversable
    object; otherwise, returns `false`.
  id: totrans-2409
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 *value* 是可迭代伪类型、数组或可遍历对象，则返回 `true`；否则返回 `false`。
- en: is_link
  id: totrans-2410
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: is_link
- en: '`bool is_link(string` *path*`)`'
  id: totrans-2411
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool is_link(string` *path*`)`'
- en: Returns `true` if *path* exists and is a symbolic link file; otherwise, returns
    `false`. This information is cached; you can clear the cache with `clearstatcache()`.
  id: totrans-2412
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 *path* 存在且是符号链接文件，则返回 `true`；否则返回 `false`。此信息已缓存；您可以使用 `clearstatcache()`
    清除缓存。
- en: is_nan
  id: totrans-2413
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: is_nan
- en: '`bool is_nan(float` *value*`)`'
  id: totrans-2414
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool is_nan(float` *value*`)`'
- en: Returns `true` if *value* is a “not a number” value, or `false` if *value* is
    a number.
  id: totrans-2415
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 *value* 是“非数字”值，则返回 `true`；如果 *value* 是数字，则返回 `false`。
- en: is_null
  id: totrans-2416
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: is_null
- en: '`bool is_null(mixed` *value*`)`'
  id: totrans-2417
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool is_null(mixed` *value*`)`'
- en: Returns `true` if *value* is null (that is, the keyword `NULL`); otherwise,
    returns `false`.
  id: totrans-2418
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 *value* 是 null（即关键字 `NULL`），则返回 `true`；否则返回 `false`。
- en: is_numeric
  id: totrans-2419
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: is_numeric
- en: '`bool is_numeric(mixed` *value*`)`'
  id: totrans-2420
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool is_numeric(mixed` *value*`)`'
- en: Returns `true` if *value* is an integer, a floating-point value, or a string
    containing a number; otherwise, returns `false`.
  id: totrans-2421
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 *value* 是整数、浮点数值或包含数字的字符串，则返回 `true`；否则返回 `false`。
- en: is_object
  id: totrans-2422
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: is_object
- en: '`bool is_object(mixed` *value*`)`'
  id: totrans-2423
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool is_object(mixed` *value*`)`'
- en: Returns `true` if *value* is an object; otherwise, returns `false`.
  id: totrans-2424
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 *value* 是对象，则返回 `true`；否则返回 `false`。
- en: is_readable
  id: totrans-2425
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: is_readable
- en: '`bool is_readable(string` *path*`)`'
  id: totrans-2426
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool is_readable(string` *path*`)`'
- en: Returns `true` if *path* exists and is readable; otherwise, returns `false`.
    This information is cached; you can clear the cache with `clearstatcache()`.
  id: totrans-2427
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 *path* 存在且可读，则返回 `true`；否则返回 `false`。此信息已缓存；您可以使用 `clearstatcache()` 清除缓存。
- en: is_resource
  id: totrans-2428
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: is_resource
- en: '`bool is_resource(mixed` *value*`)`'
  id: totrans-2429
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool is_resource(mixed` *value*`)`'
- en: Returns `true` if *value* is a resource; otherwise, returns `false`.
  id: totrans-2430
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 *value* 是资源，则返回 `true`；否则返回 `false`。
- en: is_scalar
  id: totrans-2431
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: is_scalar
- en: '`bool is_scalar(mixed` *value*`)`'
  id: totrans-2432
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool is_scalar(mixed` *value*`)`'
- en: Returns `true` if *value* is a scalar value—an integer, boolean, floating-point
    value, resource, or string. If *value* is not a scalar value, the function returns
    `false`.
  id: totrans-2433
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 *value* 是标量值——整数、布尔值、浮点数值、资源或字符串，则返回 `true`。如果 *value* 不是标量值，则函数返回 `false`。
- en: is_string
  id: totrans-2434
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: is_string
- en: '`bool is_string(mixed` *value*`)`'
  id: totrans-2435
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool is_string(mixed` *value*`)`'
- en: Returns `true` if *value* is a string; otherwise, returns `false`.
  id: totrans-2436
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 *value* 是字符串，则返回 `true`；否则返回 `false`。
- en: is_subclass_of
  id: totrans-2437
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: is_subclass_of
- en: '`bool is_subclass_of(object` *object*`, string` *class* `[, bool` *allow_string*`])`'
  id: totrans-2438
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool is_subclass_of(object` *object*`, string` *class* `[, bool` *allow_string*`])`'
- en: Returns `true` if *object* is an instance of the class *class* or an instance
    of a subclass of *class*. If not, the function returns `false`. If the *allow_string*
    parameter is set to `false`, *class* “as object” is not allowed.
  id: totrans-2439
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 *object* 是 *class* 类或 *class* 类的子类的实例，则返回 `true`。否则，返回 `false`。如果 *allow_string*
    参数设置为 `false`，则不允许 *class* “作为对象”。
- en: is_uploaded_file
  id: totrans-2440
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: is_uploaded_file
- en: '`bool is_uploaded_file(string` *path*`)`'
  id: totrans-2441
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool is_uploaded_file(string` *path*`)`'
- en: Returns `true` if *path* exists and was uploaded to the web server using the
    `file` element in a web page form; otherwise, returns `false`. See [Chapter 8](ch08.xhtml#web_techniques)
    for more information on using uploaded files.
  id: totrans-2442
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 *path* 存在且是通过 web 页面表单中的 `file` 元素上传到 Web 服务器的文件，则返回 `true`；否则返回 `false`。有关使用上传文件的更多信息，请参见[第
    8 章](ch08.xhtml#web_techniques)。
- en: is_writable
  id: totrans-2443
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: is_writable
- en: '`bool is_writable(string` *path*`)`'
  id: totrans-2444
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool is_writable(string` *path*`)`'
- en: Returns `true` if *path* exists and is a directory; otherwise, returns `false`.
    This information is cached; you can clear the cache with `clearstatcache()`.
  id: totrans-2445
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 *path* 存在并且是一个目录，则返回 `true`；否则返回 `false`。这些信息被缓存；您可以使用 `clearstatcache()`
    清除缓存。
- en: isset
  id: totrans-2446
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: isset
- en: '`bool isset(mixed` *value1*`)[, ... mixed` *valueN*`])`'
  id: totrans-2447
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool isset(mixed` *value1*`[, ... mixed` *valueN*`])`'
- en: Returns `true` if *value*, a variable, has been set; if the variable has never
    been set or has been `unset()`, the function returns `false`. If multiple *values*
    are provided, then `isset` will return `true` only if they are all set.
  id: totrans-2448
  prefs: []
  type: TYPE_NORMAL
  zh: 如果已设置变量 *value*，则返回 `true`；如果变量从未设置过或已经被 `unset()`，则返回 `false`。如果提供了多个 *values*，则只有当它们都设置了时，`isset`
    才会返回 `true`。
- en: json_decode
  id: totrans-2449
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: json_decode
- en: '`mixed json_decode(string` *json*`[, bool` *assoc* `[, int` *depth* `[, int`
    *options*`]]])`'
  id: totrans-2450
  prefs: []
  type: TYPE_NORMAL
  zh: '`mixed json_decode(string` *json*`, [bool` *assoc* `[, int` *depth* `[, int`
    *options*`]]])`'
- en: Takes a JSON-encoded string, *json*, and returns it as a converted PHP variable.
    If the JSON cannot be decoded, then `NULL` is returned. When *assoc* is `true`,
    objects will be converted into associative arrays. *depth* is user-controlled
    recursion level. *options* controls how some of the provided data in the string
    can be alternatively returned.
  id: totrans-2451
  prefs: []
  type: TYPE_NORMAL
  zh: 将一个 JSON 编码的字符串 *json* 转换为 PHP 变量。如果无法解码 JSON，则返回 `NULL`。当 *assoc* 为 `true`
    时，对象将转换为关联数组。*depth* 是用户控制的递归级别。*options* 控制如何替代返回字符串中提供的一些数据。
- en: json_encode
  id: totrans-2452
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: json_encode
- en: '`mixed json_encode(mixed` *value* `[, int` *options* `[, int` *depth*`]])`'
  id: totrans-2453
  prefs: []
  type: TYPE_NORMAL
  zh: '`mixed json_encode(mixed` *value* `[, int` *options* `[, int` *depth*`]])`'
- en: Returns a string containing the JSON representation of *value*. *options* controls
    how some of the provided data in the string can be alternatively returned. If
    *depth* is used, it must be greater than zero.
  id: totrans-2454
  prefs: []
  type: TYPE_NORMAL
  zh: 返回包含 *value* 的 JSON 表示的字符串。*options* 控制如何替代返回字符串中提供的一些数据。如果使用了 *depth*，它必须大于零。
- en: key
  id: totrans-2455
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: key
- en: '`mixed key(array &`*array*`)`'
  id: totrans-2456
  prefs: []
  type: TYPE_NORMAL
  zh: '`mixed key(array &`*array*`)`'
- en: Returns the key for the element currently pointed to by the internal array pointer.
  id: totrans-2457
  prefs: []
  type: TYPE_NORMAL
  zh: 返回当前由内部数组指针指向的元素的键名。
- en: krsort
  id: totrans-2458
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: krsort
- en: '`int krsort(array` *array*`[, int` *flags*`])`'
  id: totrans-2459
  prefs: []
  type: TYPE_NORMAL
  zh: '`int krsort(array` *array*`[, int` *flags*`])`'
- en: Sorts an array by key in reverse order, maintaining the keys for the array values.
    The optional second parameter contains additional sorting flags. See [Chapter 5](ch05.xhtml#array)
    and `sort` for more information on using this function.
  id: totrans-2460
  prefs: []
  type: TYPE_NORMAL
  zh: 通过键名以逆序对数组进行排序，保留数组值的键名。可选的第二个参数包含额外的排序标志。有关使用此函数的更多信息，请参阅 [第5章](ch05.xhtml#array)
    和 `sort`。
- en: ksort
  id: totrans-2461
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: ksort
- en: '`int ksort(array` *array*`[, int` *flags*`])`'
  id: totrans-2462
  prefs: []
  type: TYPE_NORMAL
  zh: '`int ksort(array` *array*`[, int` *flags*`])`'
- en: Sorts an array by key, maintaining the keys for the array values. The optional
    second parameter contains additional sorting flags. See [Chapter 5](ch05.xhtml#array)
    and `sort` for more information on using this function.
  id: totrans-2463
  prefs: []
  type: TYPE_NORMAL
  zh: 通过键名对数组进行排序，保留数组值的键名。可选的第二个参数包含额外的排序标志。有关使用此函数的更多信息，请参阅 [第5章](ch05.xhtml#array)
    和 `sort`。
- en: lcfirst
  id: totrans-2464
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: lcfirst
- en: '`string lcfirst(string` *string*`)`'
  id: totrans-2465
  prefs: []
  type: TYPE_NORMAL
  zh: '`string lcfirst(string` *string*`)`'
- en: Returns *string* with the first character, if alphabetic, converted to lowercase.
    The table used for converting characters is locale-specific.
  id: totrans-2466
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个字符串，其中第一个字符（如果是字母）将转换为小写。用于转换字符的表是特定于区域设置的。
- en: lcg_value
  id: totrans-2467
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: lcg_value
- en: '`float lcg_value()`'
  id: totrans-2468
  prefs: []
  type: TYPE_NORMAL
  zh: '`float lcg_value()`'
- en: Returns a pseudorandom float number between 0 and 1, inclusive, using a linear
    congruential number generator.
  id: totrans-2469
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个介于 0 和 1 之间的伪随机浮点数，使用线性同余数生成器。
- en: lchgrp
  id: totrans-2470
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: lchgrp
- en: '`bool lchgrp(string` *path*`, mixed` *group*`)`'
  id: totrans-2471
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool lchgrp(string` *path*`, mixed` *group*`)`'
- en: Changes the group for the symlink *path* to *group*; PHP must have appropriate
    privileges for this function to work. Returns `true` if the change was successful
    and `false` if not.
  id: totrans-2472
  prefs: []
  type: TYPE_NORMAL
  zh: 将符号链接 *path* 的组更改为 *group*；PHP 必须具有适当的特权才能使此函数正常工作。如果更改成功，则返回 `true`；如果不成功，则返回
    `false`。
- en: lchown
  id: totrans-2473
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: lchown
- en: '`bool lchown(string` *path*`, mixed` *user*`)`'
  id: totrans-2474
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool lchown(string` *path*`, mixed` *user*`)`'
- en: Changes ownership for the symlink *path* to the user named *user*. PHP must
    have appropriate privileges (generally, root) for the function to operate. Returns
    `true` if the change was successful and `false` if not.
  id: totrans-2475
  prefs: []
  type: TYPE_NORMAL
  zh: 将符号链接 *path* 的所有权更改为名为 *user* 的用户。PHP 必须具有适当的特权（通常是 root）才能使函数正常工作。如果更改成功，则返回
    `true`；如果不成功，则返回 `false`。
- en: levenshtein
  id: totrans-2476
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: levenshtein
- en: '`int levenshtein(string` *one*`, string` *two*`[, int` *insert*`, int` *replace*`,int`
    *delete*`]) int levenshtein(string` *one*`, string` *two*`[, mixed` *callback*`])`'
  id: totrans-2477
  prefs: []
  type: TYPE_NORMAL
  zh: '`int levenshtein(string` *one*`, string` *two*`[, int` *insert*`, int` *replace*`,int`
    *delete*`]) int levenshtein(string` *one*`, string` *two*`[, mixed` *callback*`])`'
- en: Calculates the Levenshtein distance between two strings. This is the number
    of characters you have to replace, insert, or delete to transform *one* into *two*.
    By default, replacements, inserts, and deletes have the same cost, but you can
    specify different costs with *insert*, *replace*, and *delete*. In the second
    form, just the total cost of inserts, replaces, and deletes are returned, not
    broken down.
  id: totrans-2478
  prefs: []
  type: TYPE_NORMAL
  zh: 计算两个字符串之间的Levenshtein距离。这是将*one*转换为*two*所需的替换、插入或删除字符数。默认情况下，替换、插入和删除具有相同的成本，但可以使用*insert*、*replace*和*delete*指定不同的成本。在第二种形式中，仅返回插入、替换和删除的总成本，而不是分解成部分成本。
- en: link
  id: totrans-2479
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: link
- en: '`bool link(string` *path*`, string` *new*`)`'
  id: totrans-2480
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool link(string` *path*`, string` *new*`)`'
- en: Creates a hard link to *path* at the path *new*. Returns `true` if the link
    was successfully created and `false` if not.
  id: totrans-2481
  prefs: []
  type: TYPE_NORMAL
  zh: 在路径 *new* 处创建到 *path* 的硬链接。如果成功创建链接，则返回`true`，否则返回`false`。
- en: linkinfo
  id: totrans-2482
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: linkinfo
- en: '`int linkinfo(string` *path*`)`'
  id: totrans-2483
  prefs: []
  type: TYPE_NORMAL
  zh: '`int linkinfo(string` *path*`)`'
- en: Returns `true` if *path* is a link and if the file referenced by *path* exists.
    Returns `false` if *path* is not a link, if the file referenced by it does not
    exist, or if an error occurs.
  id: totrans-2484
  prefs: []
  type: TYPE_NORMAL
  zh: 如果*path*是一个链接并且*path*引用的文件存在，则返回`true`。如果*path*不是链接，*path*引用的文件不存在或发生错误，则返回`false`。
- en: list
  id: totrans-2485
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: list
- en: '`array list(mixed` *value1*`[, ...` *valueN*`])`'
  id: totrans-2486
  prefs: []
  type: TYPE_NORMAL
  zh: '`array list(mixed` *value1*`[, ...` *valueN*`])`'
- en: 'Assigns a set of variables from elements in an array. For example:'
  id: totrans-2487
  prefs: []
  type: TYPE_NORMAL
  zh: 从数组中的元素分配一组变量。例如：
- en: '[PRE8]'
  id: totrans-2488
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Note
  id: totrans-2489
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: '`list` is actually a language construct.'
  id: totrans-2490
  prefs: []
  type: TYPE_NORMAL
  zh: '`list` 实际上是一种语言结构。'
- en: localeconv
  id: totrans-2491
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: localeconv
- en: '`array localeconv()`'
  id: totrans-2492
  prefs: []
  type: TYPE_NORMAL
  zh: '`array localeconv()`'
- en: 'Returns an associative array of information about the current locale’s numeric
    and monetary formatting. The array contains the following elements:'
  id: totrans-2493
  prefs: []
  type: TYPE_NORMAL
  zh: 返回当前区域设置的数字和货币格式的关联数组信息。数组包含以下元素：
- en: '| `decimal_point` | Decimal-point character |'
  id: totrans-2494
  prefs: []
  type: TYPE_TB
  zh: '| `decimal_point` | 小数点字符 |'
- en: '| `thousands_sep` | Separator character for thousands |'
  id: totrans-2495
  prefs: []
  type: TYPE_TB
  zh: '| `thousands_sep` | 千位分隔符字符 |'
- en: '| `grouping` | Array of numeric groupings; indicates where the number should
    be separated using the thousands separator character |'
  id: totrans-2496
  prefs: []
  type: TYPE_TB
  zh: '| `grouping` | 数字分组的数组；指示数字应在哪里使用千位分隔符字符分隔 |'
- en: '| `int_curr_symbol` | International currency symbol (e.g., USD) |'
  id: totrans-2497
  prefs: []
  type: TYPE_TB
  zh: '| `int_curr_symbol` | 国际货币符号（例如，USD） |'
- en: '| `currency_symbol` | Local currency symbol (e.g., $) |'
  id: totrans-2498
  prefs: []
  type: TYPE_TB
  zh: '| `currency_symbol` | 本地货币符号（例如，$） |'
- en: '| `mon_decimal_point` | Decimal-point character for monetary values |'
  id: totrans-2499
  prefs: []
  type: TYPE_TB
  zh: '| `mon_decimal_point` | 货币值的小数点字符 |'
- en: '| `mon_thousands_sep` | Separator character for thousands in monetary values
    |'
  id: totrans-2500
  prefs: []
  type: TYPE_TB
  zh: '| `mon_thousands_sep` | 用于货币值中千位分隔符的分隔符字符 |'
- en: '| `positive_sign` | Sign for positive values |'
  id: totrans-2501
  prefs: []
  type: TYPE_TB
  zh: '| `positive_sign` | 正值的符号 |'
- en: '| `negative_sign` | Sign for negative values |'
  id: totrans-2502
  prefs: []
  type: TYPE_TB
  zh: '| `negative_sign` | 负值的符号 |'
- en: '| `int_frac_digits` | International fractional digits |'
  id: totrans-2503
  prefs: []
  type: TYPE_TB
  zh: '| `int_frac_digits` | 国际小数位数 |'
- en: '| `frac_digits` | Local fractional digits |'
  id: totrans-2504
  prefs: []
  type: TYPE_TB
  zh: '| `frac_digits` | 本地小数位数 |'
- en: '| `p_cs_precedes` | `true` if the local currency symbol precedes a positive
    value; `false` if it follows the value |'
  id: totrans-2505
  prefs: []
  type: TYPE_TB
  zh: '| `p_cs_precedes` | 如果本地货币符号在正值之前，则为`true`；如果在值之后，则为`false` |'
- en: '| `p_sep_by_space` | `true` if a space separates the local currency symbol
    from a positive value |'
  id: totrans-2506
  prefs: []
  type: TYPE_TB
  zh: '| `p_sep_by_space` | 如果本地货币符号与正值之间有空格，则为`true` |'
- en: '| `p_sign_posn` | `0` if parentheses surround the value and currency symbol
    for positive values, `1` if the sign precedes the currency symbol and value, `2`
    if the sign follows the currency symbol and value, `3` if the sign precedes the
    currency symbol, and `4` if the sign follows the currency symbol |'
  id: totrans-2507
  prefs: []
  type: TYPE_TB
  zh: '| `p_sign_posn` | 如果符号用括号括起来且用于正值和货币符号，则为`0`；如果符号在货币符号和值之前，则为`1`；如果符号在货币符号和值之后，则为`2`；如果符号在货币符号之前，则为`3`；如果符号在货币符号之后，则为`4`
    |'
- en: '| `n_cs_precedes` | `true` if the local currency symbol precedes a negative
    value; `false` if it follows the value |'
  id: totrans-2508
  prefs: []
  type: TYPE_TB
  zh: '| `n_cs_precedes` | 如果本地货币符号在负值之前，则为`true`；如果在值之后，则为`false` |'
- en: '| `n_sep_by_space` | `true` if a space separates the local currency symbol
    from a negative value |'
  id: totrans-2509
  prefs: []
  type: TYPE_TB
  zh: '| `n_sep_by_space` | 如果本地货币符号与负值之间有空格，则为`true` |'
- en: '| `n_sign_posn` | `0` if parentheses surround the value and currency symbol
    for negative values, `1` if the sign precedes the currency symbol and value, `2`
    if the sign follows the currency symbol and value, `3` if the sign precedes the
    currency symbol, and `4` if the sign follows the currency symbol |'
  id: totrans-2510
  prefs: []
  type: TYPE_TB
  zh: '| `n_sign_posn` | 如果符号用括号括起来且用于负值和货币符号，则为`0`；如果符号在货币符号和值之前，则为`1`；如果符号在货币符号和值之后，则为`2`；如果符号在货币符号之前，则为`3`；如果符号在货币符号之后，则为`4`
    |'
- en: localtime
  id: totrans-2511
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: localtime
- en: '`array localtime([int` *timestamp*`[, bool` *associative*`]])`'
  id: totrans-2512
  prefs: []
  type: TYPE_NORMAL
  zh: '`array localtime([int` *timestamp*`[, bool` *associative*`]])`'
- en: 'Returns an array of values as given by the C function of the same name. The
    first argument is the timestamp; if the second argument is provided and is `true`,
    the values are returned as an associative array. If the second argument is not
    provided or is `false`, a numeric array is returned. The keys and values returned
    are:'
  id: totrans-2513
  prefs: []
  type: TYPE_NORMAL
  zh: 返回与同名C函数所给定的值数组。第一个参数是时间戳；如果提供第二个参数并且为`true`，则将作为关联数组返回值。如果未提供第二个参数或为`false`，则返回数字数组。返回的键和值为：
- en: '| `tm_sec` | Seconds |'
  id: totrans-2514
  prefs: []
  type: TYPE_TB
  zh: '| `tm_sec` | 秒数 |'
- en: '| `tm_min` | Minutes |'
  id: totrans-2515
  prefs: []
  type: TYPE_TB
  zh: '| `tm_min` | 分钟数 |'
- en: '| `tm_hour` | Hour |'
  id: totrans-2516
  prefs: []
  type: TYPE_TB
  zh: '| `tm_hour` | 小时数 |'
- en: '| `tm_mday` | Day of the month |'
  id: totrans-2517
  prefs: []
  type: TYPE_TB
  zh: '| `tm_mday` | 月份中的日期 |'
- en: '| `tm_mon` | Month of the year |'
  id: totrans-2518
  prefs: []
  type: TYPE_TB
  zh: '| `tm_mon` | 年份中的月份 |'
- en: '| `tm_year` | Number of years since 1900 |'
  id: totrans-2519
  prefs: []
  type: TYPE_TB
  zh: '| `tm_year` | 自1900年以来的年数 |'
- en: '| `tm_wday` | Day of the week |'
  id: totrans-2520
  prefs: []
  type: TYPE_TB
  zh: '| `tm_wday` | 星期中的日期 |'
- en: '| `tm_yday` | Day of the year |'
  id: totrans-2521
  prefs: []
  type: TYPE_TB
  zh: '| `tm_yday` | 年份中的日数 |'
- en: '| `tm_isdst` | `1` if Daylight Saving Time was in effect at the date and time
    |'
  id: totrans-2522
  prefs: []
  type: TYPE_TB
  zh: '| `tm_isdst` | 如果日期和时间处于夏令时，则为`1` |'
- en: If a numeric array is returned, the values are in the order given above.
  id: totrans-2523
  prefs: []
  type: TYPE_NORMAL
  zh: 如果返回数字数组，则其值按上述顺序给出。
- en: log
  id: totrans-2524
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: log
- en: '`float log(float` *number* `[, float` *base*`])`'
  id: totrans-2525
  prefs: []
  type: TYPE_NORMAL
  zh: '`float log(float` *number* `[, float` *base* `])`'
- en: Returns the natural log of *number*. The *base* option controls the logarithmic
    base that will be used; it defaults to *e*, which is a natural logarithm.
  id: totrans-2526
  prefs: []
  type: TYPE_NORMAL
  zh: 返回*number*的自然对数。*base*选项控制将使用的对数基数；默认为*e*，即自然对数。
- en: log10
  id: totrans-2527
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: log10
- en: '`float log10(float` *number*`)`'
  id: totrans-2528
  prefs: []
  type: TYPE_NORMAL
  zh: '`float log10(float` *number* `)`'
- en: Returns the base-10 logarithm of *number*.
  id: totrans-2529
  prefs: []
  type: TYPE_NORMAL
  zh: 返回*number*的十进制对数。
- en: log1p
  id: totrans-2530
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: log1p
- en: '`float log1p(float` *number*`)`'
  id: totrans-2531
  prefs: []
  type: TYPE_NORMAL
  zh: '`float log1p(float` *number* `)`'
- en: Returns the `log(1 +` *number*`)`, computed in such a way that the returned
    value is accurate even when *number* is close to zero.
  id: totrans-2532
  prefs: []
  type: TYPE_NORMAL
  zh: 返回`log(1 +` *number* `)`，以确保即使*number*接近零，返回的值也是准确的。
- en: long2ip
  id: totrans-2533
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: long2ip
- en: '`string long2ip(string` *address*`)`'
  id: totrans-2534
  prefs: []
  type: TYPE_NORMAL
  zh: '`string long2ip(string` *address* `)`'
- en: Converts an IPv4 address to a dotted (standard format) address.
  id: totrans-2535
  prefs: []
  type: TYPE_NORMAL
  zh: 将IPv4地址转换为点分（标准格式）地址。
- en: lstat
  id: totrans-2536
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: lstat
- en: '`array lstat(string` *path*`)`'
  id: totrans-2537
  prefs: []
  type: TYPE_NORMAL
  zh: '`array lstat(string` *path* `)`'
- en: Returns an associative array of information about the file *path*. If *path*
    is a symbolic link, information about *path* is returned, rather than information
    about the file to which *path* points. See `fstat` for a list of the values returned
    and their meanings.
  id: totrans-2538
  prefs: []
  type: TYPE_NORMAL
  zh: 返回关于文件*path*的信息的关联数组。如果*path*是符号链接，则返回关于*path*的信息，而不是指向的文件的信息。参见`fstat`以获取返回的值及其含义的列表。
- en: ltrim
  id: totrans-2539
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: ltrim
- en: '`string ltrim(string` *string*`[, string` *characters*`])`'
  id: totrans-2540
  prefs: []
  type: TYPE_NORMAL
  zh: '`string ltrim(string` *string* `[, string` *characters* `])`'
- en: Returns *string* with all characters in *characters* stripped from the beginning.
    If *characters* is not specified, the characters stripped are `\n`, `\r`, `\t`,
    `\v`, `\0`, and spaces.
  id: totrans-2541
  prefs: []
  type: TYPE_NORMAL
  zh: 返回从*characters*中剥离开头的所有字符的*string*。如果未指定*characters*，则剥离的字符为`\n`、`\r`、`\t`、`\v`、`\0`和空格。
- en: mail
  id: totrans-2542
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: mail
- en: '`bool mail(string` *recipient*`, string` *subject*`, string` *message*`[, string`
    *headers* `[, string` *parameters*`]])`'
  id: totrans-2543
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool mail(string` *recipient* `, string` *subject* `, string` *message* `[,
    string` *headers* `[, string` *parameters* `]])`'
- en: Sends *message* to *recipient* via email with the subject *subject* and returns
    `true` if the message was successfully sent and `false` if it wasn’t. If given,
    *headers* is added to the end of the headers generated for the message, allowing
    you to add cc:, bcc:, and other headers. To add multiple headers, separate them
    with `\n` characters (or `\r\n` characters on Windows servers). Finally, if specified,
    *parameters* is added to the parameters of the call to the mailer program used
    to send the mail.
  id: totrans-2544
  prefs: []
  type: TYPE_NORMAL
  zh: 将*message*通过电子邮件发送给*recipient*，并在成功发送时返回`true`，如果发送失败则返回`false`。如果指定了*headers*，则将其添加到为消息生成的标题末尾，允许您添加cc：、bcc：和其他标题。要添加多个标题，请使用`\n`字符（或Windows服务器上的`\r\n`字符）分隔它们。最后，如果指定了*parameters*，则将其添加到用于发送邮件的邮件程序的参数中。
- en: max
  id: totrans-2545
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: max
- en: '`mixed max(mixed` *value1*`[, mixed` *value2*`[, ... mixed` *valueN*`]])`'
  id: totrans-2546
  prefs: []
  type: TYPE_NORMAL
  zh: '`mixed max(mixed` *value1* `[, mixed` *value2* `[, ... mixed` *valueN* `]])`'
- en: If *value1* is an array, returns the largest number found in the values of the
    array. If not, returns the largest number found in the arguments.
  id: totrans-2547
  prefs: []
  type: TYPE_NORMAL
  zh: 如果*value1*是一个数组，则返回数组值中的最大数值。如果不是，则返回参数中的最大数值。
- en: md5
  id: totrans-2548
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: md5
- en: '`string md5(string` *string* `[, bool` *binary*`])`'
  id: totrans-2549
  prefs: []
  type: TYPE_NORMAL
  zh: '`string md5(string` *string* `[, bool` *binary* `])`'
- en: Calculates the MD5 encryption hash of *string* and returns it. If the *binary*
    option is `true`, then the `MD5` hash returned is in raw binary format (length
    of 16); *binary* defaults to `false`, thus making `md5` return a full 32-character
    hex string.
  id: totrans-2550
  prefs: []
  type: TYPE_NORMAL
  zh: 计算*string*的MD5加密哈希并返回。如果*binary*选项为`true`，则返回的MD5哈希以原始二进制格式（长度为16）；*binary*默认为`false`，因此`md5`返回一个完整的32字符十六进制字符串。
- en: md5_file
  id: totrans-2551
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: md5_file
- en: '`string md5_file(string` *path*`[, bool` *binary*`])`'
  id: totrans-2552
  prefs: []
  type: TYPE_NORMAL
  zh: '`string md5_file(string` *path*`[, bool` *binary*`])`'
- en: Calculates and returns the MD5 encryption hash for the file at *path*. An MD5
    hash is a 32-character hexadecimal value that can be used to checksum a file’s
    data. If *binary* is supplied and is `true`, the result is sent as a 16-bit binary
    value instead.
  id: totrans-2553
  prefs: []
  type: TYPE_NORMAL
  zh: 计算并返回*path*处文件的MD5加密哈希值。MD5哈希是一个32字符的十六进制值，可用于对文件数据进行校验和。如果提供了*binary*并且为`true`，则结果将作为16位二进制值发送。
- en: memory_get_peak_usage
  id: totrans-2554
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: memory_get_peak_usage
- en: '`int memory_get_peak_usage([bool` *actual*`])`'
  id: totrans-2555
  prefs: []
  type: TYPE_NORMAL
  zh: '`int memory_get_peak_usage([bool` *actual*`])`'
- en: Returns the peak memory usage so far, in bytes, of the currently running script.
    If *actual* is specified and `true`, returns the actual bytes allocated; otherwise,
    it returns the bytes allocated through PHP’s internal memory allocation routines.
  id: totrans-2556
  prefs: []
  type: TYPE_NORMAL
  zh: 返回当前运行脚本的迄今为止的最大内存使用量（以字节为单位）。如果指定了*actual*且为`true`，则返回实际分配的字节数；否则，返回通过PHP内部内存分配例程分配的字节数。
- en: memory_get_usage
  id: totrans-2557
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: memory_get_usage
- en: '`int memory_get_usage([bool` *actual*`])`'
  id: totrans-2558
  prefs: []
  type: TYPE_NORMAL
  zh: '`int memory_get_usage([bool` *actual*`])`'
- en: Returns the current memory usage, in bytes, of the currently running script.
    If *actual* is specified and `true`, returns the actual bytes allocated; otherwise,
    it returns the bytes allocated through PHP’s internal memory allocation routines.
  id: totrans-2559
  prefs: []
  type: TYPE_NORMAL
  zh: 返回当前运行脚本的内存使用量（以字节为单位）。如果指定了*actual*且为`true`，则返回实际分配的字节数；否则，返回通过PHP内部内存分配例程分配的字节数。
- en: metaphone
  id: totrans-2560
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: metaphone
- en: '`string metaphone(string` *string*`, int` *max_phonemes*`)`'
  id: totrans-2561
  prefs: []
  type: TYPE_NORMAL
  zh: '`string metaphone(string` *string*`, int` *max_phonemes*`)`'
- en: Calculates the metaphone key for *string*. The maximum number of phonemes to
    use in calculating the value is given in *max_phonemes*. Similar-sounding English
    words generate the same key.
  id: totrans-2562
  prefs: []
  type: TYPE_NORMAL
  zh: 计算*string*的metaphone键。在计算值时，使用的最大音素数由*max_phonemes*指定。发音相似的英语单词生成相同的键。
- en: method_exists
  id: totrans-2563
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: method_exists
- en: '`bool method_exists(object` *object*`, string` *name*`)`'
  id: totrans-2564
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool method_exists(object` *object*`, string` *name*`)`'
- en: Returns `true` if the object contains a method with the name given in the second
    parameter, and `false` otherwise. The method may be defined in the class of which
    the object is an instance, or in any superclass of that class.
  id: totrans-2565
  prefs: []
  type: TYPE_NORMAL
  zh: 如果对象包含第二个参数指定名称的方法，则返回`true`，否则返回`false`。方法可以在对象是其实例的类中定义，或者在该类的任何超类中定义。
- en: microtime
  id: totrans-2566
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: microtime
- en: '`mixed microtime([ bool` *get_as_float*`])`'
  id: totrans-2567
  prefs: []
  type: TYPE_NORMAL
  zh: '`mixed microtime([ bool` *get_as_float*`])`'
- en: Returns a string in the format *microseconds seconds*, where *seconds* is the
    number of seconds since the Unix epoch (January 1, 1970), and *microseconds* is
    the microseconds portion of the time since the Unix epoch. If *get_as_float* is
    `true`, a float will be returned instead of a string.
  id: totrans-2568
  prefs: []
  type: TYPE_NORMAL
  zh: 返回以*秒数自Unix纪元（1970年1月1日）起的秒数*微秒格式的字符串，其中*seconds*是秒数，*microseconds*是自Unix纪元以来的微秒部分。如果*get_as_float*为`true`，则返回浮点数而不是字符串。
- en: min
  id: totrans-2569
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: min
- en: '`mixed min(mixed` *value1*`[, mixed` *value2*`[, ... mixed` *valueN*`]])`'
  id: totrans-2570
  prefs: []
  type: TYPE_NORMAL
  zh: '`mixed min(mixed` *value1*`[, mixed` *value2*`[, ... mixed` *valueN*`]])`'
- en: If *value1* is an array, returns the smallest number found in the values of
    the array. If not, returns the smallest number found in the arguments.
  id: totrans-2571
  prefs: []
  type: TYPE_NORMAL
  zh: 如果*value1*是数组，则返回数组值中找到的最小数。否则，返回参数中找到的最小数。
- en: mkdir
  id: totrans-2572
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: mkdir
- en: '`bool mkdir(string` *path*`[, int` *mode* `[, bool` *recursive* `[, resource`
    *context*`]]])`'
  id: totrans-2573
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool mkdir(string` *path*`[, int` *mode* `[, bool` *recursive* `[, resource`
    *context*`]]])`'
- en: Creates the directory *path* with *mode* permissions. The mode is expected to
    be an octal number such as `0755`. An integer value such as `755` or a string
    value such as `"u+x"` will not work as expected. Returns `true` if the operation
    was successful and `false` if not. If recursive is used, it allows for the creation
    of nested directories.
  id: totrans-2574
  prefs: []
  type: TYPE_NORMAL
  zh: 创建具有*mode*权限的目录*path*。*mode*期望是八进制数字，如`0755`。像`755`这样的整数值或像`"u+x"`这样的字符串值将无法按预期工作。如果操作成功，则返回`true`，否则返回`false`。如果使用了递归参数，允许创建嵌套目录。
- en: mktime
  id: totrans-2575
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: mktime
- en: '`int mktime(int` *hours*`, int` *minutes*`, int` *seconds*`, int` *month*`,
    int` *day*`, int` *year* `[, int` *is_dst*`])`'
  id: totrans-2576
  prefs: []
  type: TYPE_NORMAL
  zh: '`int mktime(int` *hours*`, int` *minutes*`, int` *seconds*`, int` *month*`,
    int` *day*`, int` *year* `[, int` *is_dst*`])`'
- en: Returns the Unix timestamp value corresponding to the parameters, which are
    supplied in the order *hours*, *minutes*, *seconds*, *month*, *day*, *year*, and
    (optionally) whether the value is in Daylight Saving Time. This timestamp is the
    number of seconds elapsed between the Unix epoch and the given date and time.
  id: totrans-2577
  prefs: []
  type: TYPE_NORMAL
  zh: 返回与参数对应的Unix时间戳值，参数顺序为*hours*、*minutes*、*seconds*、*month*、*day*、*year*，以及（可选）时间是否处于夏令时。此时间戳是Unix纪元和给定日期时间之间经过的秒数。
- en: The order of the parameters is different from that of the standard Unix `mktime()`
    call, to make it simpler to leave out unneeded arguments. Any arguments left out
    are given the current local date and time.
  id: totrans-2578
  prefs: []
  type: TYPE_NORMAL
  zh: 参数的顺序与标准的Unix `mktime()`调用不同，使得可以更简单地忽略不需要的参数。任何省略的参数都将使用当前的本地日期和时间。
- en: move_uploaded_file
  id: totrans-2579
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: move_uploaded_file
- en: '`bool move_uploaded_file(string` *from*`, string` *to*`)`'
  id: totrans-2580
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool move_uploaded_file(string` *from*`, string` *to*`)`'
- en: Moves the file *from* to the new location *to*. The function moves the file
    only if *from* was uploaded by an HTTP `POST`. If *from* does not exist or is
    not an uploaded file, or if any other error occurs, `false` is returned; if the
    operation is successful, `true` is returned.
  id: totrans-2581
  prefs: []
  type: TYPE_NORMAL
  zh: 将文件从*from*移动到新位置*to*。该函数仅在*from*通过HTTP `POST`上传时才移动文件。如果*from*不存在或不是已上传的文件，或者发生任何其他错误，则返回`false`；如果操作成功，则返回`true`。
- en: mt_getrandmax
  id: totrans-2582
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: mt_getrandmax
- en: '`int mt_getrandmax()`'
  id: totrans-2583
  prefs: []
  type: TYPE_NORMAL
  zh: '`int mt_getrandmax()`'
- en: Returns the largest value that can be returned by `mt_rand()`.
  id: totrans-2584
  prefs: []
  type: TYPE_NORMAL
  zh: 返回`mt_rand()`可以返回的最大值。
- en: mt_rand
  id: totrans-2585
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: mt_rand
- en: '`int mt_rand([int` *min*`, int` *max*`])`'
  id: totrans-2586
  prefs: []
  type: TYPE_NORMAL
  zh: '`int mt_rand([int` *min*`, int` *max*`])`'
- en: Returns a random number from *min* to *max*, inclusive, generated using the
    Mersenne Twister pseudorandom number generator. If *min* and *max* are not provided,
    returns a random number from 0 to the value returned by `mt_getrandmax()`.
  id: totrans-2587
  prefs: []
  type: TYPE_NORMAL
  zh: 返回使用Mersenne Twister伪随机数生成器生成的从*min*到*max*之间的随机数（包括*min*和*max*）。如果没有提供*min*和*max*，则返回从0到`mt_getrandmax()`返回值之间的随机数。
- en: mt_srand
  id: totrans-2588
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: mt_srand
- en: '`void mt_srand(int` *seed*`)`'
  id: totrans-2589
  prefs: []
  type: TYPE_NORMAL
  zh: '`void mt_srand(int` *seed*`)`'
- en: Seeds the Mersenne Twister generator with *seed*. You should call this function
    with a varying number, such as that returned by `time()`, before making calls
    to `mt_rand()`.
  id: totrans-2590
  prefs: []
  type: TYPE_NORMAL
  zh: 使用*seed*初始化Mersenne Twister生成器。在调用`mt_rand()`之前，应该使用类似`time()`返回的变化的数值来调用此函数。
- en: natcasesort
  id: totrans-2591
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: natcasesort
- en: '`void natcasesort(array` *array*`)`'
  id: totrans-2592
  prefs: []
  type: TYPE_NORMAL
  zh: '`void natcasesort(array` *array*`)`'
- en: Sorts the elements in the given array using a case-insensitive *natural order*
    algorithm; see `natsort` for more information.
  id: totrans-2593
  prefs: []
  type: TYPE_NORMAL
  zh: 使用不区分大小写的“自然顺序”算法对给定数组的元素进行排序；有关更多信息，请参阅`natsort`。
- en: natsort
  id: totrans-2594
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: natsort
- en: '`bool natsort(array` *array*`)`'
  id: totrans-2595
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool natsort(array` *array*`)`'
- en: 'Sorts the values of the array using “natural order”: numeric values are sorted
    in the manner expected by language, rather than the often bizarre order in which
    computers insist on putting them (ASCII ordered). For example:'
  id: totrans-2596
  prefs: []
  type: TYPE_NORMAL
  zh: 使用“自然顺序”对数组的值进行排序：数字值按语言预期的方式排序，而不是计算机通常强迫将它们放入的怪异顺序（ASCII顺序）。例如：
- en: '[PRE9]'
  id: totrans-2597
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: next
  id: totrans-2598
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: next
- en: '`mixed next(array` *array*`)`'
  id: totrans-2599
  prefs: []
  type: TYPE_NORMAL
  zh: '`mixed next(array` *array*`)`'
- en: Increments the internal pointer to the element after the current element and
    returns the value of the element to which the internal pointer is now set. If
    the internal pointer already points beyond the last element in the array, the
    function returns `false`.
  id: totrans-2600
  prefs: []
  type: TYPE_NORMAL
  zh: 将内部指针增加到当前元素后的元素，并返回现在指针指向的元素的值。如果内部指针已经指向数组中最后一个元素之后，则函数返回`false`。
- en: Be careful when iterating over an array using this function—if an array contains
    an empty element or an element with a key value of `0`, a value equivalent to
    `false` is returned, causing the loop to end. If an array might contain empty
    elements or an element with a key of `0`, use the `each` function instead of a
    loop with `next`.
  id: totrans-2601
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此函数迭代数组时要小心——如果数组包含空元素或键值为`0`的元素，则返回等效于`false`的值，导致循环结束。如果数组可能包含空元素或键值为`0`的元素，请改用`each`函数而不是带有`next`的循环。
- en: nl_langinfo
  id: totrans-2602
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: nl_langinfo
- en: '`string nl_langinfo(int` *item*`)`'
  id: totrans-2603
  prefs: []
  type: TYPE_NORMAL
  zh: '`string nl_langinfo(int` *item*`)`'
- en: Returns the string containing the information for *item* in the current locale;
    *item* is one of a number of different values such as day names, time format strings,
    and so on. The actual possible values are different on different implementations
    of the C library; see `<langinfo.h>` on your machine for the values on your OS.
  id: totrans-2604
  prefs: []
  type: TYPE_NORMAL
  zh: 返回当前区域设置中关于*item*的信息字符串；*item*是许多不同值之一，例如日期名称、时间格式字符串等。实际的可能值因C库的不同实现而异；请参阅您的机器上的`<langinfo.h>`获取您的操作系统的值。
- en: nl2br
  id: totrans-2605
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: nl2br
- en: '`string nl2br(string` *string* `[, bool` *xhtml_lb*`])`'
  id: totrans-2606
  prefs: []
  type: TYPE_NORMAL
  zh: '`string nl2br(string` *string* `[, bool` *xhtml_lb*`])`'
- en: Returns a string created by inserting `<br />` before all newline characters
    in *string*. If *xhtml_lb* is `true`, then `nl2br` will use XHTML-compatible line
    breaks.
  id: totrans-2607
  prefs: []
  type: TYPE_NORMAL
  zh: 在*string*中的所有换行字符前插入`<br />`，并返回新字符串。如果*xhtml_lb*为`true`，则`nl2br`将使用符合XHTML的换行符。
- en: number_format
  id: totrans-2608
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: number_format
- en: '`string number_format(float` *number*`[, int` *precision*`[, string` *decimal_separator*`,
    string` *thousands_separator*`]])`'
  id: totrans-2609
  prefs: []
  type: TYPE_NORMAL
  zh: '`string number_format(float` *number*`[, int` *precision*`[, string` *decimal_separator*`,
    string` *thousands_separator*`]])`'
- en: 'Creates a string representation of *number*. If *precision* is given, the number
    is rounded to that many decimal places; the default is no decimal places, creating
    an integer. If *decimal_separator* and *thousands_separator* are provided, they
    are used as the decimal-place character and thousands separator, respectively.
    They default to the English locale versions (`.` and `,`). For example:'
  id: totrans-2610
  prefs: []
  type: TYPE_NORMAL
  zh: 创建*number*的字符串表示。如果给定*precision*，则将数字四舍五入到指定的小数位数；默认为不保留小数位数，创建整数。如果提供*decimal_separator*和*thousands_separator*，它们将分别用作小数点字符和千位分隔符，默认为英语区域设置版本（`.`和`,`）。例如：
- en: '[PRE10]'
  id: totrans-2611
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: If rounding occurs, proper rounding is performed, which may not be what you
    expect (see `round`).
  id: totrans-2612
  prefs: []
  type: TYPE_NORMAL
  zh: 如果进行四舍五入，则执行适当的四舍五入，这可能不是您期望的（参见`round`）。
- en: ob_clean
  id: totrans-2613
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`ob_clean`'
- en: '`void ob_clean()`'
  id: totrans-2614
  prefs: []
  type: TYPE_NORMAL
  zh: '`void ob_clean()`'
- en: Discards the contents of the output buffer. Unlike `ob_end_clean()`, the output
    buffer is not closed.
  id: totrans-2615
  prefs: []
  type: TYPE_NORMAL
  zh: 清空输出缓冲区的内容。与`ob_end_clean()`不同，输出缓冲区不会被关闭。
- en: ob_end_clean
  id: totrans-2616
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`ob_end_clean`'
- en: '`bool ob_end_clean()`'
  id: totrans-2617
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool ob_end_clean()`'
- en: Turns off output buffering and empties the current buffer without sending it
    to the client. See [Chapter 15](ch15.xhtml#application_techniques) for more information
    on using the output buffer.
  id: totrans-2618
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭输出缓冲并清空当前缓冲区，但不发送到客户端。更多关于使用输出缓冲的信息，请参见[第15章](ch15.xhtml#application_techniques)。
- en: ob_end_flush
  id: totrans-2619
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`ob_end_flush`'
- en: '`bool ob_end_flush()`'
  id: totrans-2620
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool ob_end_flush()`'
- en: Sends the current output buffer to the client and stops output buffering. See
    [Chapter 15](ch15.xhtml#application_techniques) for more information on using
    the output buffer.
  id: totrans-2621
  prefs: []
  type: TYPE_NORMAL
  zh: 将当前输出缓冲区发送到客户端并停止输出缓冲。更多关于使用输出缓冲的信息，请参见[第15章](ch15.xhtml#application_techniques)。
- en: ob_flush
  id: totrans-2622
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`ob_flush`'
- en: '`void ob_flush()`'
  id: totrans-2623
  prefs: []
  type: TYPE_NORMAL
  zh: '`void ob_flush()`'
- en: Sends the contents of the output buffer to the client and discards the contents.
    Unlike calling `ob_end_flush()`, the output buffer itself is not closed.
  id: totrans-2624
  prefs: []
  type: TYPE_NORMAL
  zh: 将输出缓冲区的内容发送到客户端并丢弃内容。与调用`ob_end_flush()`不同，不会关闭输出缓冲区本身。
- en: ob_get_clean
  id: totrans-2625
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`ob_get_clean`'
- en: '`string ob_get_clean()`'
  id: totrans-2626
  prefs: []
  type: TYPE_NORMAL
  zh: '`string ob_get_clean()`'
- en: Returns the contents of the output buffer and ends output buffering.
  id: totrans-2627
  prefs: []
  type: TYPE_NORMAL
  zh: 返回输出缓冲区的内容并结束输出缓冲。
- en: ob_get_contents
  id: totrans-2628
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`ob_get_contents`'
- en: '`string ob_get_contents()`'
  id: totrans-2629
  prefs: []
  type: TYPE_NORMAL
  zh: '`string ob_get_contents()`'
- en: Returns the current contents of the output buffer; if buffering has not been
    enabled with a previous call to `ob_start()`, returns `false`. See [Chapter 15](ch15.xhtml#application_techniques)
    for more information on using the output buffer.
  id: totrans-2630
  prefs: []
  type: TYPE_NORMAL
  zh: 返回当前输出缓冲区的内容；如果之前未使用`ob_start()`启用缓冲，则返回`false`。更多关于使用输出缓冲的信息，请参见[第15章](ch15.xhtml#application_techniques)。
- en: ob_get_flush
  id: totrans-2631
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`ob_get_flush`'
- en: '`string ob_get_flush()`'
  id: totrans-2632
  prefs: []
  type: TYPE_NORMAL
  zh: '`string ob_get_flush()`'
- en: Returns the contents of the output buffer, flushes the output buffer to the
    client, and ends output buffering.
  id: totrans-2633
  prefs: []
  type: TYPE_NORMAL
  zh: 返回输出缓冲区的内容，将输出缓冲刷新到客户端，并结束输出缓冲。
- en: ob_get_length
  id: totrans-2634
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`ob_get_length`'
- en: '`int ob_get_length()`'
  id: totrans-2635
  prefs: []
  type: TYPE_NORMAL
  zh: '`int ob_get_length()`'
- en: Returns the length of the current output buffer, or `false` if output buffering
    isn’t enabled. See [Chapter 15](ch15.xhtml#application_techniques) for more information
    on using the output buffer.
  id: totrans-2636
  prefs: []
  type: TYPE_NORMAL
  zh: 返回当前输出缓冲区的长度，如果输出缓冲未启用，则返回`false`。更多关于使用输出缓冲的信息，请参见[第15章](ch15.xhtml#application_techniques)。
- en: ob_get_level
  id: totrans-2637
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`ob_get_level`'
- en: '`int ob_get_level()`'
  id: totrans-2638
  prefs: []
  type: TYPE_NORMAL
  zh: '`int ob_get_level()`'
- en: Returns the count of nested output buffers, or `0` if output buffering is not
    currently active.
  id: totrans-2639
  prefs: []
  type: TYPE_NORMAL
  zh: 返回嵌套输出缓冲区的计数，如果当前未启用输出缓冲，则返回`0`。
- en: ob_get_status
  id: totrans-2640
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`ob_get_status`'
- en: '`array ob_get_status([bool` *verbose*`])`'
  id: totrans-2641
  prefs: []
  type: TYPE_NORMAL
  zh: '`array ob_get_status([bool` *verbose*`])`'
- en: Returns status information about the current output buffer. If *verbose* is
    supplied and is `true`, returns information about all nested output buffers.
  id: totrans-2642
  prefs: []
  type: TYPE_NORMAL
  zh: 返回有关当前输出缓冲区的状态信息。如果提供了*verbose*并且为`true`，则返回所有嵌套输出缓冲区的信息。
- en: ob_gzhandler
  id: totrans-2643
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`ob_gzhandler`'
- en: '`string ob_gzhandler(string` *buffer*`[, int` *mode*`])`'
  id: totrans-2644
  prefs: []
  type: TYPE_NORMAL
  zh: '`string ob_gzhandler(string` *buffer*`[, int` *mode*`])`'
- en: 'This function *gzip*-compresses output before it is sent to the browser. You
    don’t call this function directly. Rather, it is used as a handler for output
    buffering using the `ob_start()` function. To enable *gzip*-compression, call
    `ob_start()` with this function’s name:'
  id: totrans-2645
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数在将输出发送到浏览器之前对其进行*gzip*压缩。不直接调用此函数，而是使用`ob_start()`函数进行输出缓冲的处理。要启用*gzip*压缩，请使用此函数的名称调用`ob_start()`：
- en: '[PRE11]'
  id: totrans-2646
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: ob_implicit_flush
  id: totrans-2647
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`ob_implicit_flush`'
- en: '`void ob_implicit_flush([int` *flag*`])`'
  id: totrans-2648
  prefs: []
  type: TYPE_NORMAL
  zh: '`void ob_implicit_flush([int` *flag*`])`'
- en: If *flag* is `true` or unspecified, turns on output buffering with implicit
    flushing. When implicit flushing is enabled, the output buffer is cleared and
    sent to the client after any output (such as the `printf()` and `echo()` functions).
    See [Chapter 15](ch15.xhtml#application_techniques) for more information on using
    the output buffer.
  id: totrans-2649
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 *flag* 是 `true` 或未指定，则打开具有隐式刷新的输出缓冲。启用隐式刷新时，输出缓冲在任何输出（如 `printf()` 和 `echo()`
    函数）后被清除并发送到客户端。有关使用输出缓冲的更多信息，请参见 [第 15 章](ch15.xhtml#application_techniques)。
- en: ob_list_handlers
  id: totrans-2650
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: ob_list_handlers
- en: '`array ob_list_handlers()`'
  id: totrans-2651
  prefs: []
  type: TYPE_NORMAL
  zh: '`array ob_list_handlers()`'
- en: Returns an array with the names of the active output handlers. If PHP’s built-in
    output buffering is enabled, the array contains the value `default output handler`.
    If no output handlers are active, it returns an empty array.
  id: totrans-2652
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个数组，其中包含活动输出处理程序的名称。如果启用了 PHP 的内置输出缓冲，数组包含值 `default output handler`。如果没有活动的输出处理程序，则返回一个空数组。
- en: ob_start
  id: totrans-2653
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: ob_start
- en: '`bool ob_start([string` *callback* `[, int` *chunk* `[, bool` *erase*`]]])`'
  id: totrans-2654
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool ob_start([string` *callback* `[, int` *chunk* `[, bool` *erase*`]]])`'
- en: Turns on output buffering, which causes all output to be accumulated in a buffer
    instead of being sent directly to the browser. If *callback* is specified, it
    is a function (called before sending the output buffer to the client) that can
    modify the data in any way; the `ob_gzhandler()` function is provided to compress
    the output buffer in a client-aware manner. The *chunk* option can be used to
    trigger the flushing of the buffer when the buffer size equals the chunk number.
    If the *erase* option is set to `false`, then the buffer will not be deleted until
    the end of the script. See [Chapter 15](ch15.xhtml#application_techniques) for
    more information on using the output buffer.
  id: totrans-2655
  prefs: []
  type: TYPE_NORMAL
  zh: 打开输出缓冲，导致所有输出都累积在缓冲区中，而不直接发送到浏览器。如果指定了 *callback*，它是一个函数（在将输出缓冲发送到客户端之前调用），可以以任何方式修改数据；提供了
    `ob_gzhandler()` 函数以客户端感知的方式压缩输出缓冲。*chunk* 选项可用于在缓冲区大小等于块号时触发刷新缓冲区。如果将 *erase*
    选项设置为 `false`，则缓冲区将在脚本结束时才被删除。有关使用输出缓冲的更多信息，请参见 [第 15 章](ch15.xhtml#application_techniques)。
- en: octdec
  id: totrans-2656
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: octdec
- en: '`number octdec(string` *octal*`)`'
  id: totrans-2657
  prefs: []
  type: TYPE_NORMAL
  zh: '`number octdec(string` *octal*`)`'
- en: Converts *octal* to its decimal value. Up to a 32-bit number, or 2,147,483,647
    decimal (017777777777 octal), can be converted.
  id: totrans-2658
  prefs: []
  type: TYPE_NORMAL
  zh: 将 *octal* 转换为其十进制值。最多可以转换为 32 位数字，或者十进制的 2,147,483,647（017777777777 八进制）。
- en: opendir
  id: totrans-2659
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: opendir
- en: '`resource opendir(string` *path*`[, resource context])`'
  id: totrans-2660
  prefs: []
  type: TYPE_NORMAL
  zh: '`resource opendir(string` *path*`[, resource context])`'
- en: Opens the directory *path* and returns a directory handle for the path that
    is suitable for use in subsequent `readdir()`, `rewinddir()`, and `closedir()`
    calls. If *path* is not a valid directory, if permissions do not allow the PHP
    process to read the directory, or if any other error occurs, `false` is returned.
  id: totrans-2661
  prefs: []
  type: TYPE_NORMAL
  zh: 打开目录 *path* 并返回一个目录句柄，用于后续调用 `readdir()`、`rewinddir()` 和 `closedir()`。如果 *path*
    不是有效的目录，如果权限不允许 PHP 进程读取目录，或者发生任何其他错误，则返回 `false`。
- en: openlog
  id: totrans-2662
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: openlog
- en: '`bool openlog(string` *identity*`, int` *options*`, int` *facility*`)`'
  id: totrans-2663
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool openlog(string` *identity*`, int` *options*`, int` *facility*`)`'
- en: 'Opens a connection to the system logger. Each message sent to the logger with
    a subsequent call to `syslog()` is prepended by *identity*. Various options can
    be specified by *options*; `OR` any options you want to include. The valid options
    are:'
  id: totrans-2664
  prefs: []
  type: TYPE_NORMAL
  zh: 打开到系统日志记录器的连接。每个使用后续调用 `syslog()` 发送到记录器的消息都以 *identity* 开头。可以通过 *options* 指定各种选项；`OR`
    任何你想要包括的选项。有效的选项包括：
- en: '| `LOG_CONS` | If an error occurs while writing to the system log, write the
    error to the system console |'
  id: totrans-2665
  prefs: []
  type: TYPE_TB
  zh: '| `LOG_CONS` | 如果在写入系统日志时发生错误，则将错误写入系统控制台 |'
- en: '| `LOG_NDELAY` | Open the system log immediately |'
  id: totrans-2666
  prefs: []
  type: TYPE_TB
  zh: '| `LOG_NDELAY` | 立即打开系统日志 |'
- en: '| `LOG_ODELAY` | Delay opening the system log until the first message is written
    to it |'
  id: totrans-2667
  prefs: []
  type: TYPE_TB
  zh: '| `LOG_ODELAY` | 直到写入第一条消息时才延迟打开系统日志 |'
- en: '| `LOG_PERROR` | Print this message to standard error in addition to writing
    it to the system log |'
  id: totrans-2668
  prefs: []
  type: TYPE_TB
  zh: '| `LOG_PERROR` | 将此消息打印到标准错误输出，同时写入系统日志 |'
- en: '| `LOG_PID` | Include the PID in each message |'
  id: totrans-2669
  prefs: []
  type: TYPE_TB
  zh: '| `LOG_PID` | 每条消息中包含进程 ID |'
- en: 'The third parameter, *facility*, tells the system log what kind of program
    is logging to the system log. The following facilities are available:'
  id: totrans-2670
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个参数 *facility* 告诉系统日志正在记录到系统日志的程序类型。以下设施可用：
- en: '| `LOG_AUTH` | Security and authorization errors (deprecated; if `LOG_AUTHPRIV`
    is available, use it instead) |'
  id: totrans-2671
  prefs: []
  type: TYPE_TB
  zh: '| `LOG_AUTH` | 安全和授权错误（已弃用；如果有 `LOG_AUTHPRIV` 可用，请使用它） |'
- en: '| `LOG_AUTHPRIV` | Security and authorization errors |'
  id: totrans-2672
  prefs: []
  type: TYPE_TB
  zh: '| `LOG_AUTHPRIV` | 安全和授权错误 |'
- en: '| `LOG_CRON` | Clock daemon (*cron* and *at*) errors |'
  id: totrans-2673
  prefs: []
  type: TYPE_TB
  zh: '| `LOG_CRON` | 时钟守护进程（*cron* 和 *at*）错误 |'
- en: '| `LOG_DAEMON` | Errors for system daemons not given their own codes |'
  id: totrans-2674
  prefs: []
  type: TYPE_TB
  zh: '| `LOG_DAEMON` | 系统守护程序的错误 |'
- en: '| `LOG_KERN` | Kernel errors |'
  id: totrans-2675
  prefs: []
  type: TYPE_TB
  zh: '| `LOG_KERN` | 内核错误 |'
- en: '| `LOG_LPR` | Line printer subsystem errors |'
  id: totrans-2676
  prefs: []
  type: TYPE_TB
  zh: '| `LOG_LPR` | 行打印子系统错误 |'
- en: '| `LOG_MAIL` | Mail errors |'
  id: totrans-2677
  prefs: []
  type: TYPE_TB
  zh: '| `LOG_MAIL` | 邮件错误 |'
- en: '| `LOG_NEWS` | USENET news system errors |'
  id: totrans-2678
  prefs: []
  type: TYPE_TB
  zh: '| `LOG_NEWS` | USENET 新闻系统错误 |'
- en: '| `LOG_SYSLOG` | Errors generated internally by *syslogd* |'
  id: totrans-2679
  prefs: []
  type: TYPE_TB
  zh: '| `LOG_SYSLOG` | *syslogd* 内部生成的错误 |'
- en: '| `LOG_AUTHPRIV` | Security and authorization errors |'
  id: totrans-2680
  prefs: []
  type: TYPE_TB
  zh: '| `LOG_AUTHPRIV` | 安全和授权错误 |'
- en: '| `LOG_USER` | Generic user-level errors |'
  id: totrans-2681
  prefs: []
  type: TYPE_TB
  zh: '| `LOG_USER` | 通用用户级错误 |'
- en: '| `LOG_UUCP` | UUCP errors |'
  id: totrans-2682
  prefs: []
  type: TYPE_TB
  zh: '| `LOG_UUCP` | UUCP 错误 |'
- en: ord
  id: totrans-2683
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: ord
- en: '`int ord(string` *string*`)`'
  id: totrans-2684
  prefs: []
  type: TYPE_NORMAL
  zh: '`int ord(string` *string*`)`'
- en: Returns the ASCII value of the first character in *string*.
  id: totrans-2685
  prefs: []
  type: TYPE_NORMAL
  zh: 返回 *string* 中第一个字符的 ASCII 值。
- en: output_add_rewrite_var
  id: totrans-2686
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: output_add_rewrite_var
- en: '`bool output_add_rewrite_var(string` *name*`, string` *value*`)`'
  id: totrans-2687
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool output_add_rewrite_var(string` *name*`, string` *value*`)`'
- en: 'Begins using the value rewriting output handler by appending the name and value
    to all HTML anchor elements and forms. For example:'
  id: totrans-2688
  prefs: []
  type: TYPE_NORMAL
  zh: 开始使用值重写输出处理程序，通过将名称和值附加到所有 HTML 锚点元素和表单来实现。例如：
- en: '[PRE12]'
  id: totrans-2689
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: output_reset_rewrite_vars
  id: totrans-2690
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: output_reset_rewrite_vars
- en: '`bool output_reset_rewrite_vars()`'
  id: totrans-2691
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool output_reset_rewrite_vars()`'
- en: Resets the value writing output handler; if the value writing output handler
    was in effect, any still unflushed output will no longer be affected by rewriting
    even if put into the buffer before this call.
  id: totrans-2692
  prefs: []
  type: TYPE_NORMAL
  zh: 重置值写入输出处理程序；如果值写入输出处理程序正在生效，则任何尚未刷新的输出在调用此方法后将不再受重写的影响，即使在此调用之前已放入缓冲区。
- en: pack
  id: totrans-2693
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: pack
- en: '`string pack(string` *format*`, mixed` *arg1*`[, mixed` *arg2*`[, ... mixed`
    *argN*`]])`'
  id: totrans-2694
  prefs: []
  type: TYPE_NORMAL
  zh: '`string pack(string` *format*`, mixed` *arg1*`[, mixed` *arg2*`[, ... mixed`
    *argN*`]])`'
- en: 'Creates a binary string containing packed versions of the given arguments according
    to format. Each character may be followed by a number of arguments to use in that
    format, or an asterisk (`*`), which uses all arguments to the end of the input
    data. If no repeater argument is specified, a single argument is used for the
    format character. The following characters are meaningful in the *format* string:'
  id: totrans-2695
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个包含根据格式字符串对给定参数进行打包的二进制字符串。每个字符后面可以跟随一系列用于该格式的参数，或者一个星号（`*`），表示使用所有输入数据的剩余参数。如果未指定重复参数，则每个格式字符将使用一个参数。以下字符在
    *format* 字符串中有特殊含义：
- en: '| `a` | NUL-byte-padded string |'
  id: totrans-2696
  prefs: []
  type: TYPE_TB
  zh: '| `a` | 以 NUL 字节填充的字符串 |'
- en: '| `A` | Space-padded string |'
  id: totrans-2697
  prefs: []
  type: TYPE_TB
  zh: '| `A` | 空格填充的字符串 |'
- en: '| `h` | Hexadecimal string, with the low nibble first |'
  id: totrans-2698
  prefs: []
  type: TYPE_TB
  zh: '| `h` | 十六进制字符串，低半字节在前 |'
- en: '| `H` | Hexadecimal string, with the high nibble first |'
  id: totrans-2699
  prefs: []
  type: TYPE_TB
  zh: '| `H` | 十六进制字符串，高半字节在前 |'
- en: '| `c` | Signed char |'
  id: totrans-2700
  prefs: []
  type: TYPE_TB
  zh: '| `c` | 有符号字符型 |'
- en: '| `C` | Unsigned char |'
  id: totrans-2701
  prefs: []
  type: TYPE_TB
  zh: '| `C` | 无符号字符型 |'
- en: '| `s` | 16-bit, machine-dependent byte-ordered signed short |'
  id: totrans-2702
  prefs: []
  type: TYPE_TB
  zh: '| `s` | 16 位，机器相关字节顺序的有符号短整型 |'
- en: '| `S` | 16-bit, machine-dependent byte-ordered unsigned short |'
  id: totrans-2703
  prefs: []
  type: TYPE_TB
  zh: '| `S` | 16 位，机器相关字节顺序的无符号短整型 |'
- en: '| `n` | 16-bit, big-endian byte-ordered unsigned short |'
  id: totrans-2704
  prefs: []
  type: TYPE_TB
  zh: '| `n` | 16 位，大端字节顺序的无符号短整型 |'
- en: '| `v` | 16-bit, little-endian byte-ordered unsigned short |'
  id: totrans-2705
  prefs: []
  type: TYPE_TB
  zh: '| `v` | 16 位，小端字节顺序的无符号短整型 |'
- en: '| `i` | Machine-dependent size and byte-ordered signed integer |'
  id: totrans-2706
  prefs: []
  type: TYPE_TB
  zh: '| `i` | 机器相关大小和字节顺序的有符号整型 |'
- en: '| `I` | Machine-dependent size and byte-ordered unsigned integer |'
  id: totrans-2707
  prefs: []
  type: TYPE_TB
  zh: '| `I` | 机器相关大小和字节顺序的无符号整型 |'
- en: '| `l` | 32-bit, machine-dependent byte-ordered signed long |'
  id: totrans-2708
  prefs: []
  type: TYPE_TB
  zh: '| `l` | 机器相关字节顺序的有符号长整型 |'
- en: '| `L` | 32-bit, machine-dependent byte-ordered unsigned long |'
  id: totrans-2709
  prefs: []
  type: TYPE_TB
  zh: '| `L` | 32 位，机器相关字节顺序的无符号长整型 |'
- en: '| `N` | 32-bit, big-endian byte-ordered unsigned long |'
  id: totrans-2710
  prefs: []
  type: TYPE_TB
  zh: '| `N` | 32 位，大端字节顺序的无符号长整型 |'
- en: '| `V` | 32-bit, little-endian byte-ordered unsigned long |'
  id: totrans-2711
  prefs: []
  type: TYPE_TB
  zh: '| `V` | 32 位，小端字节顺序的无符号长整型 |'
- en: '| `f` | Float in machine-dependent size and representation |'
  id: totrans-2712
  prefs: []
  type: TYPE_TB
  zh: '| `f` | 机器相关大小和表示的浮点型 |'
- en: '| `d` | Double in machine-dependent size and representation |'
  id: totrans-2713
  prefs: []
  type: TYPE_TB
  zh: '| `d` | 机器相关大小和表示的双精度浮点型 |'
- en: '| `x` | NUL-byte |'
  id: totrans-2714
  prefs: []
  type: TYPE_TB
  zh: '| `x` | NUL 字节 |'
- en: '| `X` | Back up one byte |'
  id: totrans-2715
  prefs: []
  type: TYPE_TB
  zh: '| `X` | 向后备份一个字节 |'
- en: '| `@` | Fill to absolute position (given by the repeater argument) with NUL-bytes
    |'
  id: totrans-2716
  prefs: []
  type: TYPE_TB
  zh: '| `@` | 用 NUL 字节填充到绝对位置（由重复参数给出） |'
- en: parse_ini_file
  id: totrans-2717
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: parse_ini_file
- en: '`array parse_ini_file(string` *filename*`[, bool` *process_sections*`[, int`
    *scanner_mode*`]])`'
  id: totrans-2718
  prefs: []
  type: TYPE_NORMAL
  zh: '`array parse_ini_file(string` *filename*`[, bool` *process_sections*`[, int`
    *scanner_mode*`]])`'
- en: Loads *filename*—which must be a file in the standard *php.ini* format—and returns
    the values contained in it as an associative array, or `false` if the file could
    not be parsed. If *process_sections* is set and is `true`, a multidimensional
    array with values for the sections in the file is returned. The *scanner_mode*
    option is either `INI_SCANNER_NORMAL`, the default, or `INI_SCANNER_RAW`, indicating
    that the function should not parse option values.
  id: totrans-2719
  prefs: []
  type: TYPE_NORMAL
  zh: 载入 *filename* — 必须是标准 *php.ini* 格式的文件 — 并将其中的值作为关联数组返回，如果无法解析文件，则返回 `false`。如果设置了
    *process_sections* 且为 `true`，则返回包含文件各部分值的多维数组。*scanner_mode* 选项为 `INI_SCANNER_NORMAL`（默认），或
    `INI_SCANNER_RAW`，表示函数不应解析选项值。
- en: parse_ini_string
  id: totrans-2720
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: parse_ini_string
- en: '`array parse_ini_string(string` *config*`[, bool` *process_sections*`[, int`
    *scanner_mode*`]])`'
  id: totrans-2721
  prefs: []
  type: TYPE_NORMAL
  zh: '`array parse_ini_string(string` *config*`[, bool` *process_sections*`[, int`
    *scanner_mode*`]])`'
- en: Parses a string in the *php.ini* format and returns the values contained in
    it in an associative array, or `false` if the string could not be parsed. If *process_sections*
    is set and is `true`, a multidimensional array with values for the sections in
    the file is returned. The *scanner_mode* option is either `INI_SCANNER_NORMAL`,
    the default, or `INI_SCANNER_RAW`, indicating that the function should not parse
    option values.
  id: totrans-2722
  prefs: []
  type: TYPE_NORMAL
  zh: 解析 *php.ini* 格式的字符串，并将其中的值作为关联数组返回，如果无法解析字符串，则返回 `false`。如果设置了 *process_sections*
    且为 `true`，则返回包含文件各部分值的多维数组。*scanner_mode* 选项为 `INI_SCANNER_NORMAL`（默认），或 `INI_SCANNER_RAW`，表示函数不应解析选项值。
- en: parse_str
  id: totrans-2723
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: parse_str
- en: '`void parse_str(string` *string*`[, array` *variables*`])`'
  id: totrans-2724
  prefs: []
  type: TYPE_NORMAL
  zh: '`void parse_str(string` *string*`[, array` *variables*`])`'
- en: Parses *string* as if coming from an HTTP `POST` request, setting variables
    in the local scope to the values found in the string. If *variables* is given,
    the array is set with keys and values from the string.
  id: totrans-2725
  prefs: []
  type: TYPE_NORMAL
  zh: 解析 *string*，就像来自 HTTP `POST` 请求一样，将找到的值设置为本地作用域中的变量。如果提供了 *variables*，则使用字符串中的键和值设置数组。
- en: parse_url
  id: totrans-2726
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: parse_url
- en: '`mixed parse_url(string` *url*`)[, int` *component*`])`'
  id: totrans-2727
  prefs: []
  type: TYPE_NORMAL
  zh: '`mixed parse_url(string` *url*`[, int` *component*`])`'
- en: 'Returns an associative array of the component parts of *url*. The array contains
    the following values:'
  id: totrans-2728
  prefs: []
  type: TYPE_NORMAL
  zh: 返回包含 *url* 的各组成部分信息的关联数组。数组包含以下值：
- en: '| `fragment` | The named anchor in the URL |'
  id: totrans-2729
  prefs: []
  type: TYPE_TB
  zh: '| `fragment` | URL 中的命名锚点 |'
- en: '| `host` | The host |'
  id: totrans-2730
  prefs: []
  type: TYPE_TB
  zh: '| `host` | 主机名 |'
- en: '| `pass` | The user’s password |'
  id: totrans-2731
  prefs: []
  type: TYPE_TB
  zh: '| `pass` | 用户的密码 |'
- en: '| `path` | The requested path (which may be a directory or a file) |'
  id: totrans-2732
  prefs: []
  type: TYPE_TB
  zh: '| `path` | 请求的路径（可能是目录或文件） |'
- en: '| `port` | The port to use for the protocol |'
  id: totrans-2733
  prefs: []
  type: TYPE_TB
  zh: '| `port` | 协议使用的端口 |'
- en: '| `query` | The query information |'
  id: totrans-2734
  prefs: []
  type: TYPE_TB
  zh: '| `query` | 查询信息 |'
- en: '| `scheme` | The protocol in the URL, such as “http” |'
  id: totrans-2735
  prefs: []
  type: TYPE_TB
  zh: '| `scheme` | URL 中的协议，如 “http” |'
- en: '| `user` | The user given in the URL |'
  id: totrans-2736
  prefs: []
  type: TYPE_TB
  zh: '| `user` | URL 中提供的用户 |'
- en: 'The array will not contain values for components not specified in the URL.
    For example:'
  id: totrans-2737
  prefs: []
  type: TYPE_NORMAL
  zh: 数组不包含 URL 中未指定的组件值。例如：
- en: '[PRE13]'
  id: totrans-2738
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: If the component option is provided, then just that particular component of
    the URL will be returned.
  id: totrans-2739
  prefs: []
  type: TYPE_NORMAL
  zh: 如果提供了组件选项，则仅返回URL的特定组件。
- en: passthru
  id: totrans-2740
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: passthru
- en: '`void passthru(string` *command*`[, int` *return*`])`'
  id: totrans-2741
  prefs: []
  type: TYPE_NORMAL
  zh: '`void passthru(string` *command*`[, int` *return*`])`'
- en: Executes *command* via the shell and outputs the results of the command into
    the page. If *return* is specified, it is set to the return status of the command.
    If you want to capture the results of the command, use `exec()`.
  id: totrans-2742
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 shell 执行 *command* 并将命令的结果输出到页面。如果指定了 *return*，则将其设置为命令的返回状态。如果想捕获命令的结果，请使用
    `exec()`。
- en: pathinfo
  id: totrans-2743
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: pathinfo
- en: '`mixed pathinfo(string` *path*`[, int` *options*`])`'
  id: totrans-2744
  prefs: []
  type: TYPE_NORMAL
  zh: '`mixed pathinfo(string` *path*`[, int` *options*`])`'
- en: Returns an associative array containing information about *path*. If the *options*
    parameter is given, it specifies a particular element to be returned. `PATHINFO_DIRNAME`,
    `PATHINFO_BASENAME`, `PATHINFO_EXTENSION`, and `PATHINFO_FILENAME` are valid *options*
    values.
  id: totrans-2745
  prefs: []
  type: TYPE_NORMAL
  zh: 返回包含关于 *path* 的信息的关联数组。如果给定了 *options* 参数，则指定要返回的特定元素。`PATHINFO_DIRNAME`、`PATHINFO_BASENAME`、`PATHINFO_EXTENSION`
    和 `PATHINFO_FILENAME` 是有效的 *options* 值。
- en: 'The following elements are in the returned array:'
  id: totrans-2746
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的数组包括以下元素：
- en: '| `dirname` | The directory in which *path* is contained. |'
  id: totrans-2747
  prefs: []
  type: TYPE_TB
  zh: '| `dirname` | *path* 所在的目录 |'
- en: '| `basename` | The basename (see `basename`) of *path*, including the file’s
    extension. |'
  id: totrans-2748
  prefs: []
  type: TYPE_TB
  zh: '| `basename` | *path* 的基本名称（参见 `basename`），包括文件的扩展名。 |'
- en: '| `extension` | The extension, if any, on the file’s name. Does not include
    the period at the beginning of the extension. |'
  id: totrans-2749
  prefs: []
  type: TYPE_TB
  zh: '| `extension` | 文件名的扩展名（如果有）。不包括扩展名开头的句点。'
- en: pclose
  id: totrans-2750
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: pclose
- en: '`int pclose(resource` *handle*`)`'
  id: totrans-2751
  prefs: []
  type: TYPE_NORMAL
  zh: '`int pclose(resource` *handle*`)`'
- en: Closes the pipe referenced by *handle*. Returns the termination code of the
    process that was run in the pipe.
  id: totrans-2752
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭由*handle*引用的管道。返回在管道中运行的进程的终止代码。
- en: pfsockopen
  id: totrans-2753
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: pfsockopen
- en: '`resource pfsockopen(string` *host*`, int` *port*`[, int` *error*`[, string`
    *message* `[, float` *timeout*`]]])`'
  id: totrans-2754
  prefs: []
  type: TYPE_NORMAL
  zh: '`resource pfsockopen(string` *host*`, int` *port*`[, int` *error*`[, string`
    *message* `[, float` *timeout*`]]])`'
- en: Opens a persistent TCP or UDP connection to a remote *host* on a specific *port*.
    By default, TCP is used; to connect via UDP, *host* must begin with `udp://`.
    If specified, *timeout* indicates the length of time in seconds to wait before
    timing out.
  id: totrans-2755
  prefs: []
  type: TYPE_NORMAL
  zh: 在特定*port*上对远程*host*开启持久的TCP或UDP连接。默认情况下使用TCP；若要通过UDP连接，*host*必须以`udp://`开头。如果指定了*timeout*，则表示等待超时的秒数。
- en: If the connection is successful, the function returns a virtual file pointer
    that can be used with functions such as `fgets()` and `fputs()`. If the connection
    fails, it returns `false`. If *error* and *message* are supplied, they are set
    to the error number and error string, respectively.
  id: totrans-2756
  prefs: []
  type: TYPE_NORMAL
  zh: 如果连接成功，则该函数返回一个虚拟文件指针，可用于函数（如`fgets()`和`fputs()`）。如果连接失败，则返回`false`。如果提供了*error*和*message*，则设置为错误号和错误字符串，分别。
- en: Unlike `fsockopen()`, the socket opened by this function does not close automatically
    after completing a read or write operation on it; you must close it explicitly
    with a call to `fsclose()`.
  id: totrans-2757
  prefs: []
  type: TYPE_NORMAL
  zh: 与`fsockopen()`不同，此函数打开的套接字在完成读取或写入操作后不会自动关闭；您必须显式调用`fsclose()`关闭它。
- en: php_ini_loaded_file
  id: totrans-2758
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: php_ini_loaded_file
- en: '`string php_ini_loaded_file()`'
  id: totrans-2759
  prefs: []
  type: TYPE_NORMAL
  zh: '`string php_ini_loaded_file()`'
- en: Returns the path of the current *php.ini* file if there is one, or `false` otherwise.
  id: totrans-2760
  prefs: []
  type: TYPE_NORMAL
  zh: 如果存在当前的*php.ini*文件，则返回其路径；否则返回`false`。
- en: php_ini_scanned_files
  id: totrans-2761
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: php_ini_scanned_files
- en: '`string php_ini_scanned_files()`'
  id: totrans-2762
  prefs: []
  type: TYPE_NORMAL
  zh: '`string php_ini_scanned_files()`'
- en: Returns a string containing the names of the configuration files parsed when
    PHP started up. The files are returned in a comma-separated list. If the compile-time
    configuration option `--with-config-file-scan-dir` was not set, `false` is returned
    instead.
  id: totrans-2763
  prefs: []
  type: TYPE_NORMAL
  zh: 返回包含PHP启动时解析的配置文件名称的字符串列表，以逗号分隔。如果编译时配置选项`--with-config-file-scan-dir`未设置，则返回`false`。
- en: php_logo_guid
  id: totrans-2764
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: php_logo_guid
- en: '`string php_logo_guid()`'
  id: totrans-2765
  prefs: []
  type: TYPE_NORMAL
  zh: '`string php_logo_guid()`'
- en: 'Returns an ID that you can use to link to the PHP logo. For example:'
  id: totrans-2766
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个用于链接到PHP标志的ID。例如：
- en: '[PRE14]'
  id: totrans-2767
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: php_sapi_name
  id: totrans-2768
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: php_sapi_name
- en: '`string php_sapi_name()`'
  id: totrans-2769
  prefs: []
  type: TYPE_NORMAL
  zh: '`string php_sapi_name()`'
- en: Returns a string describing the server API under which PHP is running—for example,
    `"cgi"` or `"apache"`.
  id: totrans-2770
  prefs: []
  type: TYPE_NORMAL
  zh: 返回描述PHP运行的服务器API的字符串，例如，`"cgi"`或`"apache"`。
- en: php_strip_whitespace
  id: totrans-2771
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: php_strip_whitespace
- en: '`string php_strip_whitespace(string` *path*`)`'
  id: totrans-2772
  prefs: []
  type: TYPE_NORMAL
  zh: '`string php_strip_whitespace(string` *path*`)`'
- en: Returns a string containing the source from the file *path* with whitespace
    and comment tokens stripped.
  id: totrans-2773
  prefs: []
  type: TYPE_NORMAL
  zh: 返回从文件*path*中去除空白和注释标记的源代码字符串。
- en: php_uname
  id: totrans-2774
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: php_uname
- en: '`string php_uname(string` *mode*`)`'
  id: totrans-2775
  prefs: []
  type: TYPE_NORMAL
  zh: '`string php_uname(string` *mode*`)`'
- en: 'Returns a string describing the operating system under which PHP is running.
    The *mode* parameter is a single character used to control what is returned. The
    possible values are:'
  id: totrans-2776
  prefs: []
  type: TYPE_NORMAL
  zh: 返回描述PHP运行的操作系统的字符串。*mode*参数是一个单字符，用于控制返回内容。可能的值包括：
- en: '| `a` (default) | All modes included (`s`, `n`, `r`, `v`, `m`) |'
  id: totrans-2777
  prefs: []
  type: TYPE_TB
  zh: '| `a`（默认） | 包括所有模式（`s`，`n`，`r`，`v`，`m`） |'
- en: '| `s` | Name of the operating system |'
  id: totrans-2778
  prefs: []
  type: TYPE_TB
  zh: '| `s` | 操作系统的名称 |'
- en: '| `n` | The hostname |'
  id: totrans-2779
  prefs: []
  type: TYPE_TB
  zh: '| `n` | 主机名 |'
- en: '| `r` | Release name |'
  id: totrans-2780
  prefs: []
  type: TYPE_TB
  zh: '| `r` | 发布名称 |'
- en: '| `v` | Version information |'
  id: totrans-2781
  prefs: []
  type: TYPE_TB
  zh: '| `v` | 版本信息 |'
- en: '| `m` | Machine type |'
  id: totrans-2782
  prefs: []
  type: TYPE_TB
  zh: '| `m` | 机器类型 |'
- en: phpcredits
  id: totrans-2783
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: phpcredits
- en: '`bool phpcredits([int` *what*`])`'
  id: totrans-2784
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool phpcredits([int` *what*`])`'
- en: 'Outputs information about PHP and its developers; the information that is displayed
    is based on the value of *what*. To use more than one option, `OR` the values
    together. The possible values of *what* are:'
  id: totrans-2785
  prefs: []
  type: TYPE_NORMAL
  zh: 输出有关PHP及其开发人员的信息；显示的信息基于*what*的值。要使用多个选项，请将值进行`OR`运算。*what*的可能值包括：
- en: '| `CREDITS_ALL` (default) | All credits except `CREDITS_SAPI` |'
  id: totrans-2786
  prefs: []
  type: TYPE_TB
  zh: '| `CREDITS_ALL`（默认） | 除了`CREDITS_SAPI`之外的所有贡献 |'
- en: '| `CREDITS_GENERAL` | General credits about PHP |'
  id: totrans-2787
  prefs: []
  type: TYPE_TB
  zh: '| `CREDITS_GENERAL` | PHP的一般贡献信息 |'
- en: '| `CREDITS_GROUP` | A list of the core PHP developers |'
  id: totrans-2788
  prefs: []
  type: TYPE_TB
  zh: '| `CREDITS_GROUP` | PHP核心开发人员列表 |'
- en: '| `CREDITS_DOCS` | Information about the documentation team |'
  id: totrans-2789
  prefs: []
  type: TYPE_TB
  zh: '| `CREDITS_DOCS` | 文档团队信息 |'
- en: '| `CREDITS_MODULES` | A list of the extension modules currently loaded and
    the authors for each |'
  id: totrans-2790
  prefs: []
  type: TYPE_TB
  zh: '| `CREDITS_MODULES` | 当前加载的扩展模块及其各自的作者列表 |'
- en: '| `CREDITS_SAPI` | A list of the server API modules and the authors for each
    |'
  id: totrans-2791
  prefs: []
  type: TYPE_TB
  zh: '| `CREDITS_SAPI` | 服务器API模块及其各自的作者列表 |'
- en: '| `CREDITS_FULLPAGE` | Indicates that the credits should be returned as a full
    HTML page, rather than just a fragment of HTML code. Must be used in conjunction
    with one or more other options—for example, `phpcredits(CREDITS_MODULES &#124;
    CREDITS_FULLPAGE)` |'
  id: totrans-2792
  prefs: []
  type: TYPE_TB
  zh: '| `CREDITS_FULLPAGE` | 表示应返回完整的HTML页面，而不仅仅是HTML代码片段。必须与一个或多个其他选项一起使用，例如`phpcredits(CREDITS_MODULES
    &#124; CREDITS_FULLPAGE)` |'
- en: phpinfo
  id: totrans-2793
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: phpinfo
- en: '`bool phpinfo([int` *what*`])`'
  id: totrans-2794
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool phpinfo([int` *what*`])`'
- en: 'Outputs a great deal of information about the state of the current PHP environment,
    including loaded extensions, compilation options, version, server information,
    and so on. If specified, *what* can limit the output to specific pieces of information;
    *what* may contain several options `OR`ed together. The possible values of *what*
    are:'
  id: totrans-2795
  prefs: []
  type: TYPE_NORMAL
  zh: 输出有关当前PHP环境状态的大量信息，包括加载的扩展、编译选项、版本、服务器信息等等。如果指定了*what*，可以限制输出到特定的信息片段；*what*可以包含多个使用`OR`操作符连接的选项。*what*的可能取值有：
- en: '| `INFO_ALL` (default) | All information |'
  id: totrans-2796
  prefs: []
  type: TYPE_TB
  zh: '| `INFO_ALL`（默认） | 所有信息 |'
- en: '| `INFO_GENERAL` | General information about PHP |'
  id: totrans-2797
  prefs: []
  type: TYPE_TB
  zh: '| `INFO_GENERAL` | PHP的一般信息 |'
- en: '| `INFO_CREDITS` | Credits for PHP, including the authors |'
  id: totrans-2798
  prefs: []
  type: TYPE_TB
  zh: '| `INFO_CREDITS` | PHP的贡献者信息，包括作者 |'
- en: '| `INFO_CONFIGURATION` | Configuration and compilation options |'
  id: totrans-2799
  prefs: []
  type: TYPE_TB
  zh: '| `INFO_CONFIGURATION` | 配置和编译选项 |'
- en: '| `INFO_MODULES` | Currently loaded extensions |'
  id: totrans-2800
  prefs: []
  type: TYPE_TB
  zh: '| `INFO_MODULES` | 当前加载的扩展 |'
- en: '| `INFO_ENVIRONMENT` | Information about the PHP environment |'
  id: totrans-2801
  prefs: []
  type: TYPE_TB
  zh: '| `INFO_ENVIRONMENT` | PHP环境信息 |'
- en: '| `INFO_VARIABLES` | A list of the current variables and their values |'
  id: totrans-2802
  prefs: []
  type: TYPE_TB
  zh: '| `INFO_VARIABLES` | 当前变量及其值的列表 |'
- en: '| `INFO_LICENSE` | The PHP license |'
  id: totrans-2803
  prefs: []
  type: TYPE_TB
  zh: '| `INFO_LICENSE` | PHP许可证 |'
- en: phpversion
  id: totrans-2804
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: phpversion
- en: '`string phpversion(string` *extension*`)`'
  id: totrans-2805
  prefs: []
  type: TYPE_NORMAL
  zh: '`string phpversion(string` *extension*`)`'
- en: Returns the version of the currently running PHP parser. If the *extension*
    option is used, by naming a particular extension, the version information about
    that extension is all that is returned.
  id: totrans-2806
  prefs: []
  type: TYPE_NORMAL
  zh: 返回当前运行的PHP解析器的版本。如果使用*extension*选项，并命名特定的扩展，那么将仅返回关于该扩展的版本信息。
- en: pi
  id: totrans-2807
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: pi
- en: '`float pi()`'
  id: totrans-2808
  prefs: []
  type: TYPE_NORMAL
  zh: '`float pi()`'
- en: Returns an approximate value of pi (3.14159265359).
  id: totrans-2809
  prefs: []
  type: TYPE_NORMAL
  zh: 返回pi的近似值（3.14159265359）。
- en: popen
  id: totrans-2810
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: popen
- en: '`resource popen(string` *command*`, string` *mode*`)`'
  id: totrans-2811
  prefs: []
  type: TYPE_NORMAL
  zh: '`resource popen(string` *command*`, string` *mode*`)`'
- en: Opens a pipe to a process executed by running *command* on the shell.
  id: totrans-2812
  prefs: []
  type: TYPE_NORMAL
  zh: 打开一个到通过在shell上运行*command*执行的进程的管道。
- en: 'The parameter *mode* specifies the permissions to open the file with, which
    can only be unidirectional (that is, for reading or writing only). *mode* must
    be one of the following:'
  id: totrans-2813
  prefs: []
  type: TYPE_NORMAL
  zh: 参数*mode*指定以只读或只写的权限打开文件的模式。*mode*必须是以下之一：
- en: '| `r` | Open file for reading; file pointer will be at beginning of file |'
  id: totrans-2814
  prefs: []
  type: TYPE_TB
  zh: '| `r` | 以读取模式打开文件；文件指针将位于文件的开头 |'
- en: '| `w` | Open file for writing. If the file exists, it will be truncated to
    zero length; if the file doesn’t already exist, it will be created |'
  id: totrans-2815
  prefs: []
  type: TYPE_TB
  zh: '| `w` | 以写入模式打开文件。如果文件存在，则将其截断为零长度；如果文件不存在，则创建该文件 |'
- en: If any error occurs while attempting to open the pipe, `false` is returned.
    If not, the resource handle for the pipe is returned.
  id: totrans-2816
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在尝试打开管道时发生任何错误，则返回`false`。如果成功打开管道，则返回管道的资源句柄。
- en: pow
  id: totrans-2817
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: pow
- en: '`number pow(number` *base*`, number` *exponent*`)`'
  id: totrans-2818
  prefs: []
  type: TYPE_NORMAL
  zh: '`number pow(number` *base*`, number` *exponent*`)`'
- en: Returns *base* raised to the *exponent* power. When possible, the return value
    is an integer; if not, it is a float.
  id: totrans-2819
  prefs: []
  type: TYPE_NORMAL
  zh: 返回*base*的*exponent*次幂。如果可能，返回值是整数；否则为浮点数。
- en: prev
  id: totrans-2820
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: prev
- en: '`mixed prev(array` *array*`)`'
  id: totrans-2821
  prefs: []
  type: TYPE_NORMAL
  zh: '`mixed prev(array` *array*`)`'
- en: Moves the internal pointer to the element before its current location and returns
    the value of the element to which the internal pointer is now set. If the internal
    pointer is already set to the first element in the array, returns `false`. Be
    careful when iterating over an array using this function—if an array has an empty
    element or an element with a key value of `0`, a value equivalent to `false` is
    returned, causing the loop to end. If an array might contain empty elements or
    an element with a key of `0`, use the `each()` function instead of a loop with
    `prev()`.
  id: totrans-2822
  prefs: []
  type: TYPE_NORMAL
  zh: 将内部指针移动到其当前位置之前的元素，并返回内部指针现在设置的元素的值。如果内部指针已经设置为数组的第一个元素，则返回`false`。在使用此函数迭代数组时要小心——如果数组具有空元素或键值为`0`的元素，则返回等效于`false`的值，导致循环结束。如果数组可能包含空元素或键为`0`的元素，请改用`each()`函数而不是使用`prev()`的循环。
- en: print_r
  id: totrans-2823
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: print_r
- en: '`mixed print_r(mixed` *value*`[, bool` *return*`])`'
  id: totrans-2824
  prefs: []
  type: TYPE_NORMAL
  zh: '`mixed print_r(mixed` *value*`[, bool` *return*`])`'
- en: Outputs *value* in a human-readable manner. If *value* is a string, integer,
    or float, the value itself is output; if it is an array, the keys and elements
    are shown; and if it is an object, the keys and values for the object are displayed.
    This function returns `true`. If *return* is set to `true`, then the output is
    returned rather than displayed.
  id: totrans-2825
  prefs: []
  type: TYPE_NORMAL
  zh: 以人类可读的方式输出 *value*。如果 *value* 是字符串、整数或浮点数，则输出该值；如果是数组，则显示键和元素；如果是对象，则显示对象的键和值。此函数返回
    `true`。如果将 *return* 设置为 `true`，则返回输出而不是显示。
- en: printf
  id: totrans-2826
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: printf
- en: '`int printf(string` *format*`[, mixed` *arg1* `...])`'
  id: totrans-2827
  prefs: []
  type: TYPE_NORMAL
  zh: '`int printf(string` *format*`[, mixed` *arg1* `...])`'
- en: Outputs a string created by using *format* and the given arguments. The arguments
    are placed into the string in various places denoted by special markers in the
    *format* string.
  id: totrans-2828
  prefs: []
  type: TYPE_NORMAL
  zh: 输出通过使用 *format* 和给定参数创建的字符串。参数放置到字符串中的各个位置，这些位置由 *format* 字符串中的特殊标记表示。
- en: Each marker starts with a percent sign (`%`) and consists of the following elements,
    in order. Except for the type specifier, the specifiers are all optional. To include
    a percent sign in the string, use `%%`.
  id: totrans-2829
  prefs: []
  type: TYPE_NORMAL
  zh: 每个标记以百分号（`%`）开头，并按顺序包含以下元素。除了类型说明符外，所有说明符都是可选的。要在字符串中包含百分号，请使用 `%%`。
- en: An optional sign specifier that forces a sign (– or +) to be used on a number.
    By default, only the – sign is used on a number if it’s negative. Additionally,
    this specifier forces positive numbers to have the + sign attached.
  id: totrans-2830
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 强制使用符号（-或+）的可选符号说明符。默认情况下，仅在数字为负数时使用-号。此外，此说明符强制正数附加+号。
- en: A padding specifier denoting the character to use to pad the results to the
    appropriate string size (given below). Either `0`, a space, or any character prefixed
    with a single quote may be specified; padding with spaces is the default.
  id: totrans-2831
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 补位说明符表示用于将结果填充到适当字符串大小的字符（如下所示）。可以指定 `0`、空格或以单引号前缀的任何字符；使用空格进行填充是默认的。
- en: An alignment specifier. By default, the string is padded to make it right-justified.
    To make it left-justified, specify a dash (`–`) here.
  id: totrans-2832
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对齐说明符。默认情况下，字符串被填充为右对齐。要使其左对齐，请在此处指定破折号（`–`）。
- en: The minimum number of characters this element should contain. If the result
    would be less than this number of characters, the preceding specifiers determine
    the behavior to pad to the appropriate width.
  id: totrans-2833
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此元素应包含的最小字符数。如果结果少于此数字的字符数，则前面的说明符决定填充到适当宽度的行为。
- en: For floating-point numbers, a precision specifier consisting of a period and
    a number; this dictates how many decimal digits will be displayed. For types other
    than float, this specifier is ignored.
  id: totrans-2834
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浮点数的精度说明符由句点和数字组成；这决定了显示多少位小数。对于除了浮点数以外的类型，此说明符将被忽略。
- en: 'Finally, a type specifier. This specifier tells `printf()` what type of data
    is being handed to the function for this marker. There are eight possible types:'
  id: totrans-2835
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后是类型说明符。此说明符告诉 `printf()` 正在向该标记的函数传递的数据类型。有八种可能的类型：
- en: '| `b` | The argument is an integer and is displayed as a binary number |'
  id: totrans-2836
  prefs: []
  type: TYPE_TB
  zh: '| `b` | 参数是整数，并显示为二进制数字 |'
- en: '| `c` | The argument is an integer and is displayed as the character with that
    value |'
  id: totrans-2837
  prefs: []
  type: TYPE_TB
  zh: '| `c` | 参数是整数，并显示为具有该值的字符 |'
- en: '| `d` | The argument is an integer and is displayed as a decimal number |'
  id: totrans-2838
  prefs: []
  type: TYPE_TB
  zh: '| `d` | 参数是整数，并显示为十进制数字 |'
- en: '| `f` | The argument is a float and is displayed as a floating-point number
    |'
  id: totrans-2839
  prefs: []
  type: TYPE_TB
  zh: '| `f` | 参数是浮点数，并显示为浮点数 |'
- en: '| `o` | The argument is an integer and is displayed as an octal (base-8) number
    |'
  id: totrans-2840
  prefs: []
  type: TYPE_TB
  zh: '| `o` | 参数是整数，并显示为八进制（基数为8）数字 |'
- en: '| `s` | The argument is treated and displayed as a string |'
  id: totrans-2841
  prefs: []
  type: TYPE_TB
  zh: '| `s` | 参数被视为字符串并显示 |'
- en: '| `x` | The argument is an integer and is displayed as a hexadecimal (base-16)
    number; lowercase letters are used |'
  id: totrans-2842
  prefs: []
  type: TYPE_TB
  zh: '| `x` | 参数是整数，并显示为十六进制（基数为16）数字；使用小写字母 |'
- en: '| `X` | Same as `x`, except uppercase letters are used |'
  id: totrans-2843
  prefs: []
  type: TYPE_TB
  zh: '| `X` | 与 `x` 相同，但使用大写字母 |'
- en: proc_close
  id: totrans-2844
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: proc_close
- en: '`int proc_close(resource` *handle*`)`'
  id: totrans-2845
  prefs: []
  type: TYPE_NORMAL
  zh: '`int proc_close(resource` *handle*`)`'
- en: Closes the process referenced by *handle* and previously opened by `proc_open()`.
    Returns the termination code of the process.
  id: totrans-2846
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭由 *handle* 引用并先前由 `proc_open()` 打开的进程。返回进程的终止代码。
- en: proc_get_status
  id: totrans-2847
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: proc_get_status
- en: '`array proc_get_status(resource` *handle*`)`'
  id: totrans-2848
  prefs: []
  type: TYPE_NORMAL
  zh: '`array proc_get_status(resource` *handle*`)`'
- en: 'Returns an associative array containing information about the process *handle*,
    previously opened by `proc_open()`. The array contains the following values:'
  id: totrans-2849
  prefs: []
  type: TYPE_NORMAL
  zh: 返回包含有关先前由 `proc_open()` 打开的 *handle* 进程的信息的关联数组。数组包含以下值：
- en: '| `command` | The command string this process was opened with |'
  id: totrans-2850
  prefs: []
  type: TYPE_TB
  zh: '| `command` | 打开此进程的命令字符串 |'
- en: '| `pid` | The process ID |'
  id: totrans-2851
  prefs: []
  type: TYPE_TB
  zh: '| `pid` | 进程ID |'
- en: '| `running` | `true` if the process is currently running, and `false` otherwise
    |'
  id: totrans-2852
  prefs: []
  type: TYPE_TB
  zh: '| `running` | 如果进程当前正在运行，则为`true`，否则为`false` |'
- en: '| `signaled` | `true` if the process has been terminated by an uncaught signal,
    and `false` otherwise |'
  id: totrans-2853
  prefs: []
  type: TYPE_TB
  zh: '| `signaled` | 如果进程被未捕获的信号终止，则为`true`，否则为`false` |'
- en: '| `stopped` | `true` if the process has been stopped by a signal, and `false`
    otherwise |'
  id: totrans-2854
  prefs: []
  type: TYPE_TB
  zh: '| `stopped` | 如果进程被信号停止，则为`true`，否则为`false` |'
- en: '| `exitcode` | If the process has terminated, the exit code from the process,
    and `–1` otherwise |'
  id: totrans-2855
  prefs: []
  type: TYPE_TB
  zh: '| `exitcode` | 如果进程已终止，则来自进程的退出代码，否则为`–1` |'
- en: '| `termsig` | The signal that caused the process to be terminated if `signaled`
    is `true`, and `undefined` otherwise |'
  id: totrans-2856
  prefs: []
  type: TYPE_TB
  zh: '| `termsig` | 如果`signaled`为`true`，则导致进程终止的信号，否则为`undefined` |'
- en: '| `stopsig` | The signal that caused the process to be stopped if `stopped`
    is `true`, and `undefined` otherwise |'
  id: totrans-2857
  prefs: []
  type: TYPE_TB
  zh: '| `stopsig` | 如果`stopped`为`true`，则导致进程停止的信号，否则为`undefined` |'
- en: proc_nice
  id: totrans-2858
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: proc_nice
- en: '`bool proc_nice(int` *increment*`)`'
  id: totrans-2859
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool proc_nice(int` *increment*`)`'
- en: Changes the priority of the process executing the current script by *increment*.
    A negative value raises the priority of the process, while a positive value lowers
    the priority of the process. Returns `true` if the operation was successful, and
    `false` otherwise.
  id: totrans-2860
  prefs: []
  type: TYPE_NORMAL
  zh: 通过*increment*改变执行当前脚本的进程的优先级。负值提高进程的优先级，正值降低进程的优先级。如果操作成功则返回`true`，否则返回`false`。
- en: proc_open
  id: totrans-2861
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: proc_open
- en: '`resource proc_open(string` *command*`, array` *descriptors*`, array` *pipes*`[,
    string` *dir*`[, array` *env*`[, array` *options*`]]])`'
  id: totrans-2862
  prefs: []
  type: TYPE_NORMAL
  zh: '`resource proc_open(string` *command*`, array` *descriptors*`, array` *pipes*`[,
    string` *dir*`[, array` *env*`[, array` *options*`]]])`'
- en: 'Opens a pipe to a process executed by running *command* on the shell, with
    a variety of options. The descriptors parameter must be an array with three elements—in
    order, they describe the `stdin`, `stdout`, and `stderr` descriptors. For each,
    specify either an array containing two elements or a stream resource. In the first
    case, if the first element is `"pipe"`, the second element is either `"r"` to
    read from the pipe or `"w"` to write to the pipe. If the first is `"file"`, the
    second must be a filename. The *pipes* array is filled with an array of file pointers
    corresponding to the processes’ descriptors. If *dir* is specified, the process
    has its current working directory set to that path. If *env* is specified, the
    process has its environment set up with the values from that array. Finally, *options*
    contains an associative array with additional options. The following options can
    be set in the array:'
  id: totrans-2863
  prefs: []
  type: TYPE_NORMAL
  zh: 打开管道以通过shell运行*command*执行的进程，并带有各种选项。descriptors参数必须是一个包含三个元素的数组，依次描述`stdin`、`stdout`和`stderr`描述符。对于每个描述符，指定一个包含两个元素的数组或一个流资源。在第一种情况下，如果第一个元素是`"pipe"`，第二个元素可以是`"r"`以从管道读取或`"w"`以向管道写入。如果第一个是`"file"`，则第二个必须是文件名。*pipes*数组被填充为对应进程描述符的文件指针数组。如果指定了*dir*，则该进程的当前工作目录设置为该路径。如果指定了*env*，则该进程的环境设置为该数组中的值。最后，*options*包含一个带有额外选项的关联数组。可以在数组中设置以下选项：
- en: '| `suppress_errors` | If set and `true`, suppresses errors generated by the
    process (Windows only) |'
  id: totrans-2864
  prefs: []
  type: TYPE_TB
  zh: '| `suppress_errors` | 如果设置为`true`，则抑制由进程生成的错误（仅限Windows） |'
- en: '| `bypass_shell` | If set and `true`, bypasses *cmd.exe* when running the process
    |'
  id: totrans-2865
  prefs: []
  type: TYPE_TB
  zh: '| `bypass_shell` | 如果设置为`true`，则在运行进程时绕过*cmd.exe* |'
- en: '| `context` | If set, specifies the stream context when opening files |'
  id: totrans-2866
  prefs: []
  type: TYPE_TB
  zh: '| `context` | 如果设置，则在打开文件时指定流上下文 |'
- en: If any error occurs while attempting to open the process, `false` is returned.
    If not, the resource handle for the process is returned.
  id: totrans-2867
  prefs: []
  type: TYPE_NORMAL
  zh: 如果尝试打开进程时发生任何错误，则返回`false`。否则返回进程的资源句柄。
- en: proc_terminate
  id: totrans-2868
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: proc_terminate
- en: '`bool proc_terminate(resource` *handle*`[, int` *signal*`])`'
  id: totrans-2869
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool proc_terminate(resource` *handle*`[, int` *signal*`])`'
- en: Signals to the process referenced by *handle* and previously opened by `proc_open()`
    that it should terminate. If *signal* is supplied, the process is sent that signal.
    The call returns immediately, which may be prior to the process finishing termination.
    To poll for a process’s status, use `proc_get_status()`. Returns `true` if the
    operation was successful, and `false` otherwise.
  id: totrans-2870
  prefs: []
  type: TYPE_NORMAL
  zh: 向由`proc_open()`打开并引用的进程发送终止信号。如果提供了*signal*，则发送该信号给进程。调用立即返回，这可能早于进程完成终止。要轮询进程的状态，使用`proc_get_status()`。如果操作成功则返回`true`，否则返回`false`。
- en: property_exists
  id: totrans-2871
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: property_exists
- en: '`bool property_exists(mixed` *class*`, string` *name*`)`'
  id: totrans-2872
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool property_exists(mixed` *class*`, string` *name*`)`'
- en: Returns `true` if the object or *class* has a data member named *name* defined
    on it, and `false` if it does not.
  id: totrans-2873
  prefs: []
  type: TYPE_NORMAL
  zh: 如果对象或*class*定义了名为*name*的数据成员，则返回`true`，否则返回`false`。
- en: putenv
  id: totrans-2874
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: putenv
- en: '`bool putenv(string` *setting*`)`'
  id: totrans-2875
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool putenv(string` *setting*`)`'
- en: Sets an environment variable using *setting*, which is typically in the form
    *name* `=` *value*. Returns `true` if successful and `false` if not.
  id: totrans-2876
  prefs: []
  type: TYPE_NORMAL
  zh: 使用*setting*设置环境变量，通常形式为*name* `=` *value*。如果成功则返回`true`，否则返回`false`。
- en: quoted_printable_decode
  id: totrans-2877
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: quoted_printable_decode
- en: '`string quoted_printable_decode(string` *string*`)`'
  id: totrans-2878
  prefs: []
  type: TYPE_NORMAL
  zh: '`string quoted_printable_decode(string` *string*`)`'
- en: Decodes *string*, which is data encoded using the quoted printable encoding,
    and returns the resulting string.
  id: totrans-2879
  prefs: []
  type: TYPE_NORMAL
  zh: 解码使用quoted printable编码的*string*数据，并返回结果字符串。
- en: quoted_printable_encode
  id: totrans-2880
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: quoted_printable_encode
- en: '`string quoted_printable_encode(string` *string*`)`'
  id: totrans-2881
  prefs: []
  type: TYPE_NORMAL
  zh: '`string quoted_printable_encode(string` *string*`)`'
- en: Returns *string* formatted in quoted printable encoding. See RFC 2045 for a
    description of the encoding format.
  id: totrans-2882
  prefs: []
  type: TYPE_NORMAL
  zh: 返回用quoted printable编码格式化的*string*。详见RFC 2045描述的编码格式。
- en: quotemeta
  id: totrans-2883
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: quotemeta
- en: '`string quotemeta(string` *string*`)`'
  id: totrans-2884
  prefs: []
  type: TYPE_NORMAL
  zh: '`string quotemeta(string` *string*`)`'
- en: 'Escapes instances of certain characters in *string* by appending a backslash
    (`\`) to them and returns the resulting string. The following characters are escaped:
    period (`.`), backslash (`\`), plus sign (`+`), asterisk (`*`), question mark
    (`?`), brackets (`[` and `]`), caret (`^`), parentheses (`(` and `)`), and dollar
    sign (`$`).'
  id: totrans-2885
  prefs: []
  type: TYPE_NORMAL
  zh: 通过向其追加反斜杠（`\`）来转义字符串中的某些字符，并返回结果字符串。需要转义的字符包括：句点（`.`）、反斜杠（`\`）、加号（`+`）、星号（`*`）、问号（`?`）、方括号（`[`
    和 `]`）、插入符号（`^`）、括号（`(` 和 `)`）以及美元符号（`$`）。
- en: rad2deg
  id: totrans-2886
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: rad2deg
- en: '`float rad2deg(float` *number*`)`'
  id: totrans-2887
  prefs: []
  type: TYPE_NORMAL
  zh: '`float rad2deg(float` *number*`)`'
- en: Converts *number* from radians to degrees and returns the result.
  id: totrans-2888
  prefs: []
  type: TYPE_NORMAL
  zh: 将*number*从弧度转换为度并返回结果。
- en: rand
  id: totrans-2889
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: rand
- en: '`int rand([int` *min*`, int` *max*`])`'
  id: totrans-2890
  prefs: []
  type: TYPE_NORMAL
  zh: '`int rand([int` *min*`, int` *max*`])`'
- en: Returns a random number from *min* to *max*, inclusive. If the *min* and *max*
    parameters are not provided, returns a random number from 0 to the value returned
    by the `getrandmax()` function.
  id: totrans-2891
  prefs: []
  type: TYPE_NORMAL
  zh: 返回从*min*到*max*的随机数（包括两端）。如果未提供*min*和*max*参数，则返回一个介于0和由`getrandmax()`函数返回的值之间的随机数。
- en: random_bytes
  id: totrans-2892
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: random_bytes
- en: '`string random_bytes(int` *length*`)`'
  id: totrans-2893
  prefs: []
  type: TYPE_NORMAL
  zh: '`string random_bytes(int` *length*`)`'
- en: Generates an arbitrary *length* string of cryptographic random bytes that are
    suitable for cryptographic use, such as when generating salts, keys, or initialization
    vectors.
  id: totrans-2894
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一串具有密码学随机字节的任意*length*长度字符串，适合用于密码学用途，例如生成盐、密钥或初始化向量。
- en: random_int
  id: totrans-2895
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: random_int
- en: '`int random_int(int` *min,* `int` *max*`)`'
  id: totrans-2896
  prefs: []
  type: TYPE_NORMAL
  zh: '`int random_int(int` *min,* `int` *max*`)`'
- en: Generates cryptographic random integers that can be used where unbiased results
    are mandatory, such as when mixing “balls” for Bingo. *Min* sets the lowest value
    range to be returned (must be `PHP_INT_MIN` or greater), *max* sets the highest
    (must be `PHP_INT_MAX` or lower).
  id: totrans-2897
  prefs: []
  type: TYPE_NORMAL
  zh: 生成可以用于必须具有无偏差结果的情况的密码学随机整数，例如用于Bingo游戏中的"balls"混合。*Min*设置要返回的最小值范围（必须是`PHP_INT_MIN`或更大），*max*设置最高值（必须是`PHP_INT_MAX`或更低）。
- en: range
  id: totrans-2898
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: range
- en: '`array range(mixed` *first*`, mixed` *second*`[, number` *step*`])`'
  id: totrans-2899
  prefs: []
  type: TYPE_NORMAL
  zh: '`array range(mixed` *first*`, mixed` *second*`[, number` *step*`])`'
- en: Creates and returns an array containing integers or characters from *first*
    to *second*, inclusive. If *second* is smaller than *first*, the sequence is returned
    in reverse order. If *step* is provided, then the created array will have the
    specified step gaps in it.
  id: totrans-2900
  prefs: []
  type: TYPE_NORMAL
  zh: 创建并返回一个包含从*first*到*second*之间的整数或字符的数组。如果*second*小于*first*，则以倒序返回序列。如果提供了*step*，则创建的数组将具有指定的步长间隔。
- en: rawurldecode
  id: totrans-2901
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: rawurldecode
- en: '`string rawurldecode(string` *url*`)`'
  id: totrans-2902
  prefs: []
  type: TYPE_NORMAL
  zh: '`string rawurldecode(string` *url*`)`'
- en: Returns a string created from decoding the URI-encoded *url*. Sequences of characters
    beginning with a `%` followed by a hexadecimal number are replaced with the literal
    the sequence represents.
  id: totrans-2903
  prefs: []
  type: TYPE_NORMAL
  zh: 返回从URI编码的*url*解码后创建的字符串。以`%`开头的十六进制数字序列将被替换为表示的字面字符。
- en: rawurlencode
  id: totrans-2904
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: rawurlencode
- en: '`string rawurlencode(string` *url*`)`'
  id: totrans-2905
  prefs: []
  type: TYPE_NORMAL
  zh: '`string rawurlencode(string` *url*`)`'
- en: Returns a string created by URI encoding *url*. Certain characters are replaced
    by sequences of characters beginning with a `%` followed by a hexadecimal number;
    for example, spaces are replaced with `%20`.
  id: totrans-2906
  prefs: []
  type: TYPE_NORMAL
  zh: 返回通过URI编码*url*创建的字符串。某些字符将被以以`%`开头的十六进制数字序列替换；例如，空格将被替换为`%20`。
- en: readdir
  id: totrans-2907
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: readdir
- en: '`string readdir([resource` *handle*`])`'
  id: totrans-2908
  prefs: []
  type: TYPE_NORMAL
  zh: '`string readdir([resource` *handle*`])`'
- en: Returns the name of the next file in the directory referenced by *handle*. If
    not specified, *handle* defaults to the last directory handle resource returned
    by `opendir()`. The order in which files in a directory are returned by calls
    to `readdir()` is undefined. If there are no more files in the directory to return,
    `readdir()` returns `false`.
  id: totrans-2909
  prefs: []
  type: TYPE_NORMAL
  zh: 返回由 *handle* 引用的目录中的下一个文件的名称。如果未指定 *handle*，则 *handle* 默认为 `opendir()` 返回的最后一个目录句柄资源。调用
    `readdir()` 时返回目录中文件的顺序是未定义的。如果目录中没有更多要返回的文件，则 `readdir()` 返回 `false`。
- en: readfile
  id: totrans-2910
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: readfile
- en: '`int readfile(string` *path*`[, bool` *include*`[, resource` *context*`]])`'
  id: totrans-2911
  prefs: []
  type: TYPE_NORMAL
  zh: '`int readfile(string` *path*`[, bool` *include*`[, resource` *context*`]])`'
- en: Reads the file at *path*, in the streams context *context* if provided, and
    outputs the contents. If *include* is specified and is `true`, the include path
    is searched for the file. If *path* begins with `http://`, an HTTP connection
    is opened and the file is read from it. If *path* begins with `ftp://`, an FTP
    connection is opened and the file is read from it; the remote server must support
    passive FTP.
  id: totrans-2912
  prefs: []
  type: TYPE_NORMAL
  zh: 在提供了流上下文 *context* 的情况下，读取 *path* 处的文件并输出内容。如果指定了 *include* 并且为 `true`，则会在包含路径中搜索文件。如果
    *path* 以 `http://` 开头，则打开 HTTP 连接并从中读取文件。如果 *path* 以 `ftp://` 开头，则打开 FTP 连接并从中读取文件；远程服务器必须支持被动
    FTP。
- en: This function returns the number of bytes output.
  id: totrans-2913
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数返回输出的字节数。
- en: readlink
  id: totrans-2914
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: readlink
- en: '`string readlink(string` *path*`)`'
  id: totrans-2915
  prefs: []
  type: TYPE_NORMAL
  zh: '`string readlink(string` *path*`)`'
- en: Returns the path contained in the symbolic link file *path*. If *path* does
    not exist or is not a symbolic link file, or if any other error occurs, the function
    returns `false`.
  id: totrans-2916
  prefs: []
  type: TYPE_NORMAL
  zh: 返回包含在符号链接文件 *path* 中的路径。如果 *path* 不存在或不是符号链接文件，或者发生任何其他错误，则函数返回 `false`。
- en: realpath
  id: totrans-2917
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: realpath
- en: '`string realpath(string` *path*`)`'
  id: totrans-2918
  prefs: []
  type: TYPE_NORMAL
  zh: '`string realpath(string` *path*`)`'
- en: Expands all symbolic links, resolves references to `/./` and `/../`, removes
    extra `/` characters in *path*, and returns the result.
  id: totrans-2919
  prefs: []
  type: TYPE_NORMAL
  zh: 展开所有符号链接，解析对 `/./` 和 `/../` 的引用，移除路径中多余的 `/` 字符，并返回结果。
- en: realpath_cache_get
  id: totrans-2920
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: realpath_cache_get
- en: '`array realpath_cache_get()`'
  id: totrans-2921
  prefs: []
  type: TYPE_NORMAL
  zh: '`array realpath_cache_get()`'
- en: 'Returns the contents of the `realpath` cache as an associative array. The key
    for each item is the path name, and the value for each item is an associative
    array containing values that have been cached for the path. The possible values
    include:'
  id: totrans-2922
  prefs: []
  type: TYPE_NORMAL
  zh: 返回 `realpath` 缓存的内容作为关联数组。每个条目的键是路径名，每个条目的值是一个关联数组，其中包含已为该路径缓存的值。可能的值包括：
- en: '| `expires` | The time when this cache entry will expire |'
  id: totrans-2923
  prefs: []
  type: TYPE_TB
  zh: '| `expires` | 缓存条目将过期的时间 |'
- en: '| `is_dir` | Whether this path represents a directory or not |'
  id: totrans-2924
  prefs: []
  type: TYPE_TB
  zh: '| `is_dir` | 此路径是否表示目录 |'
- en: '| `key` | A unique ID for the cache entry |'
  id: totrans-2925
  prefs: []
  type: TYPE_TB
  zh: '| `key` | 缓存条目的唯一标识符 |'
- en: '| `realpath` | The resolved path for the path |'
  id: totrans-2926
  prefs: []
  type: TYPE_TB
  zh: '| `realpath` | 路径的解析后路径 |'
- en: realpath_cache_size
  id: totrans-2927
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: realpath_cache_size
- en: '`int realpath_cache_size()`'
  id: totrans-2928
  prefs: []
  type: TYPE_NORMAL
  zh: '`int realpath_cache_size()`'
- en: Returns the size in bytes the `realpath` cache currently occupies in memory.
  id: totrans-2929
  prefs: []
  type: TYPE_NORMAL
  zh: 返回 `realpath` 缓存当前在内存中占用的字节数。
- en: register_shutdown_function
  id: totrans-2930
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: register_shutdown_function
- en: '`void register_shutdown_function(callable` *function*`[, mixed` *arg1* `[,
    mixed` *arg2* `[, ... mixed` *argN*`]]])`'
  id: totrans-2931
  prefs: []
  type: TYPE_NORMAL
  zh: '`void register_shutdown_function(callable` *function*`[, mixed` *arg1* `[,
    mixed` *arg2* `[, ... mixed` *argN*`]]])`'
- en: Registers a shutdown function. The function is called when the page completes
    processing with the given arguments. You can register multiple shutdown functions,
    and they will be called in the order in which they were registered. If a shutdown
    function contains an exit command, functions registered after that function will
    not be called.
  id: totrans-2932
  prefs: []
  type: TYPE_NORMAL
  zh: 注册一个关闭函数。当页面完成处理时，将调用该函数以及给定的参数。可以注册多个关闭函数，并且它们将按照注册的顺序调用。如果关闭函数包含退出命令，则在该函数之后注册的函数将不会被调用。
- en: Because the shutdown function is called after the page has completely processed,
    you cannot add data to the page with `print()`, `echo()`, or similar functions
    or commands.
  id: totrans-2933
  prefs: []
  type: TYPE_NORMAL
  zh: 由于关闭函数在页面完全处理后才调用，因此不能使用 `print()`、`echo()` 或类似函数或命令向页面添加数据。
- en: register_tick_function
  id: totrans-2934
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: register_tick_function
- en: '`bool register_tick_function(callable` *function*`[, mixed` *arg1* `[, mixed`
    *arg2* `[, ... mixed` *argN*`]]])`'
  id: totrans-2935
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool register_tick_function(callable` *function*`[, mixed` *arg1* `[, mixed`
    *arg2* `[, ... mixed` *argN*`]]])`'
- en: Registers the function *name* to be called on each tick. The function is called
    with the given arguments. Obviously, registering a tick function can have a serious
    impact on the performance of your script. Returns `true` if the operation was
    successful, and `false` otherwise.
  id: totrans-2936
  prefs: []
  type: TYPE_NORMAL
  zh: 注册将在每个时钟周期调用的函数 *name*。函数将使用给定的参数进行调用。显然，注册时钟函数可能会严重影响脚本的性能。如果操作成功，则返回 `true`，否则返回
    `false`。
- en: rename
  id: totrans-2937
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: rename
- en: '`bool rename(string` *old*`, string` *new*`[, resource` *context*`]))`'
  id: totrans-2938
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool rename(string` *old*`, string` *new*`[, resource` *context*`])`'
- en: Renames the file *old*, using the streams context *context* if provided, to
    *new*; returns `true` if the renaming was successful and `false` if not.
  id: totrans-2939
  prefs: []
  type: TYPE_NORMAL
  zh: 将文件 *old* 重命名为 *new*，若提供了流上下文 *context*，则使用该上下文；若重命名成功则返回 `true`，否则返回 `false`。
- en: reset
  id: totrans-2940
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: reset
- en: '`mixed reset(array` *array*`)`'
  id: totrans-2941
  prefs: []
  type: TYPE_NORMAL
  zh: '`mixed reset(array` *array*`)`'
- en: Resets the *array*’s internal pointer to the first element and returns the value
    of that element.
  id: totrans-2942
  prefs: []
  type: TYPE_NORMAL
  zh: 将 *array* 的内部指针重置为第一个元素并返回该元素的值。
- en: restore_error_handler
  id: totrans-2943
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: restore_error_handler
- en: '`bool restore_error_handler()`'
  id: totrans-2944
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool restore_error_handler()`'
- en: Reverts to the error handler in place prior to the most recent call to `set_error_``handler()`
    and returns `true`.
  id: totrans-2945
  prefs: []
  type: TYPE_NORMAL
  zh: 恢复至最近一次调用 `set_error_handler()` 前的错误处理程序，并返回 `true`。
- en: restore_exception_handler
  id: totrans-2946
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: restore_exception_handler
- en: '`bool restore_exception_handler()`'
  id: totrans-2947
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool restore_exception_handler()`'
- en: Reverts to the exception handler in place prior to the most recent call to `set_``exception_handler()`
    and returns `true`.
  id: totrans-2948
  prefs: []
  type: TYPE_NORMAL
  zh: 恢复至最近一次调用 `set_exception_handler()` 前的异常处理程序，并返回 `true`。
- en: rewind
  id: totrans-2949
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: rewind
- en: '`int rewind(resource` *handle*`)`'
  id: totrans-2950
  prefs: []
  type: TYPE_NORMAL
  zh: '`int rewind(resource` *handle*`)`'
- en: Sets the file pointer for *handle* to the beginning of the file. Returns `true`
    if the operation was successful and `false` if not.
  id: totrans-2951
  prefs: []
  type: TYPE_NORMAL
  zh: 将 *handle* 文件指针设置到文件开头。如果操作成功则返回 `true`，否则返回 `false`。
- en: rewinddir
  id: totrans-2952
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: rewinddir
- en: '`void rewinddir([resource` *handle*`])`'
  id: totrans-2953
  prefs: []
  type: TYPE_NORMAL
  zh: '`void rewinddir([resource` *handle*`])`'
- en: Sets the file pointer for *handle* to the beginning of the list of files in
    the directory. If not specified, *handle* defaults to the last directory handle
    resource returned by `opendir()`.
  id: totrans-2954
  prefs: []
  type: TYPE_NORMAL
  zh: 将 *handle* 文件指针设置到目录中文件列表的开头。若未指定，则 *handle* 默认为 `opendir()` 返回的最后一个目录句柄资源。
- en: rmdir
  id: totrans-2955
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: rmdir
- en: '`int rmdir(string` *path*`[, resource` *context*`])`'
  id: totrans-2956
  prefs: []
  type: TYPE_NORMAL
  zh: '`int rmdir(string` *path*`[, resource` *context*`])`'
- en: Removes the directory *path*, using the streams context *context* if provided.
    If the directory is not empty, or the PHP process does not have appropriate permissions,
    or if any other error occurs, `false` is returned. If the directory is successfully
    deleted, `true` is returned.
  id: totrans-2957
  prefs: []
  type: TYPE_NORMAL
  zh: 删除目录 *path*，若提供了流上下文 *context*，则使用该上下文。若目录非空、PHP 进程无适当权限或发生其他错误，则返回 `false`。若成功删除目录，则返回
    `true`。
- en: round
  id: totrans-2958
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: round
- en: '`float round(float` *number*`[, int` *precision*`[, int` *mode*`]])`'
  id: totrans-2959
  prefs: []
  type: TYPE_NORMAL
  zh: '`float round(float` *number*`[, int` *precision*`[, int` *mode*`]])`'
- en: 'Returns the integer value nearest to *number* at the *precision* number of
    decimal places. The default for precision is `0` (integer rounding). The *mode*
    parameter dictates the method of rounding used:'
  id: totrans-2960
  prefs: []
  type: TYPE_NORMAL
  zh: 返回 *number* 在 *precision* 指定的小数位数上最接近的整数值。精度的默认值为 `0`（整数四舍五入）。*mode* 参数决定了使用的取整方法：
- en: '| `PHP_ROUND_HALF_UP` (default) | Round up |'
  id: totrans-2961
  prefs: []
  type: TYPE_TB
  zh: '| `PHP_ROUND_HALF_UP`（默认） | 向上取整 |'
- en: '| `PHP_ROUND_HALF_DOWN` | Round down |'
  id: totrans-2962
  prefs: []
  type: TYPE_TB
  zh: '| `PHP_ROUND_HALF_DOWN` | 向下取整 |'
- en: '| `PHP_ROUND_HALF_EVEN` | Round up if the significant digits are even |'
  id: totrans-2963
  prefs: []
  type: TYPE_TB
  zh: '| `PHP_ROUND_HALF_EVEN` | 如果有效数字为偶数，则向上取整 |'
- en: '| `PHP_ROUND_HALF_ODD` | Round down if the significant digits are odd |'
  id: totrans-2964
  prefs: []
  type: TYPE_TB
  zh: '| `PHP_ROUND_HALF_ODD` | 如果有效数字为奇数，则向下取整 |'
- en: rsort
  id: totrans-2965
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: rsort
- en: '`void rsort(array` *array*`[, int` *flags*`])`'
  id: totrans-2966
  prefs: []
  type: TYPE_NORMAL
  zh: '`void rsort(array` *array*`[, int` *flags*`])`'
- en: Sorts an array in reverse order by value. The optional second parameter contains
    additional sorting flags. See [Chapter 5](ch05.xhtml#array) and `unserialize()`
    for more information on using this function.
  id: totrans-2967
  prefs: []
  type: TYPE_NORMAL
  zh: 使用值的逆序对数组进行排序。可选的第二个参数包含附加的排序标志。有关使用此函数的更多信息，请参阅[第 5 章](ch05.xhtml#array)和 `unserialize()`。
- en: rtrim
  id: totrans-2968
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: rtrim
- en: '`string rtrim(string` *string*`[, string` *characters*`])`'
  id: totrans-2969
  prefs: []
  type: TYPE_NORMAL
  zh: '`string rtrim(string` *string*`[, string` *characters*`])`'
- en: Returns *string* with all characters in *characters* stripped from the end.
    If *characters* is not specified, the characters stripped are `\n`, `\r`, `\t`,
    `\v`, `\0`, and spaces.
  id: totrans-2970
  prefs: []
  type: TYPE_NORMAL
  zh: 返回 *string* 中去除尾部的所有 *characters* 字符。若未指定 *characters*，则去除的字符包括 `\n`、`\r`、`\t`、`\v`、`\0`
    和空格。
- en: scandir
  id: totrans-2971
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: scandir
- en: '`array scandir(string` *path* `[, int` *sort_order* `[, resource` *context*`]])`'
  id: totrans-2972
  prefs: []
  type: TYPE_NORMAL
  zh: '`array scandir(string` *path* `[, int` *sort_order* `[, resource` *context*`]])`'
- en: 'Returns an array of filenames existing at *path*, in the streams context *context*
    if provided, or `false` if an error occurred. The filenames are sorted according
    to the *sort_order* parameter, which is one of the following types:'
  id: totrans-2973
  prefs: []
  type: TYPE_NORMAL
  zh: 返回 *path* 中存在的文件名数组，若提供了流上下文 *context*，则使用该上下文。若发生错误则返回 `false`。文件名根据 *sort_order*
    参数排序，其类型为以下之一：
- en: '| `SCANDIR_SORT_ASCENDING` (default) | Sort ascending |'
  id: totrans-2974
  prefs: []
  type: TYPE_TB
  zh: '| `SCANDIR_SORT_ASCENDING`（默认） | 升序排序 |'
- en: '| `SCANDIR_SORT_DESCENDING` | Sort descending |'
  id: totrans-2975
  prefs: []
  type: TYPE_TB
  zh: '| `SCANDIR_SORT_DESCENDING` | 降序排序 |'
- en: '| `SCANDIR_SORT_NONE` | Perform no sorting (the resulting order is undefined)
    |'
  id: totrans-2976
  prefs: []
  type: TYPE_TB
  zh: '| `SCANDIR_SORT_NONE` | 不排序（结果顺序不确定） |'
- en: serialize
  id: totrans-2977
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: serialize
- en: '`string serialize(mixed` *value*`)`'
  id: totrans-2978
  prefs: []
  type: TYPE_NORMAL
  zh: '`string serialize(mixed` *value*`)`'
- en: Returns a string containing a binary data representation of *value*. This string
    can be used to store the data in a database or file, for example, and later restored
    using `unserialize()`. Except for resources, any kind of value can be serialized.
  id: totrans-2979
  prefs: []
  type: TYPE_NORMAL
  zh: 返回包含*value*的二进制数据表示的字符串。例如，此字符串可用于将数据存储在数据库或文件中，并使用`unserialize()`稍后进行恢复。除了资源外，任何类型的值都可以被序列化。
- en: set_error_handler
  id: totrans-2980
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: set_error_handler
- en: '`string set_error_handler(string` *function*`)`'
  id: totrans-2981
  prefs: []
  type: TYPE_NORMAL
  zh: '`string set_error_handler(string` *function*`)`'
- en: Sets the named function as the current error handler, or unsets the current
    error handler if *function* is `NULL`. The error-handler function is called whenever
    an error occurs; the function can do whatever it wants, but typically will print
    an error message and clean up after a critical error happens.
  id: totrans-2982
  prefs: []
  type: TYPE_NORMAL
  zh: 设置命名的函数作为当前的错误处理程序，或者如果*function*为`NULL`则取消当前的错误处理程序。每当发生错误时，将调用错误处理程序函数；该函数可以执行任何操作，但通常会打印错误消息并在发生严重错误后进行清理。
- en: The user-defined function is called with two parameters, an error code and a
    string describing the error. Three additional parameters may also be supplied—the
    filename in which the error occurred, the line number at which the error occurred,
    and the context in which the error occurred (which is an array pointing to the
    active symbol table).
  id: totrans-2983
  prefs: []
  type: TYPE_NORMAL
  zh: 用户定义的函数将以两个参数调用，错误代码和描述错误的字符串。还可以提供三个额外的参数——发生错误的文件名、发生错误的行号以及发生错误的上下文（这是指向活动符号表的数组）。
- en: '`set_error_handler()` returns the name of the previously installed error-handler
    function, or `false` if an error occurred while setting the error handler (e.g.,
    when *function* doesn’t exist).'
  id: totrans-2984
  prefs: []
  type: TYPE_NORMAL
  zh: '`set_error_handler()` 返回先前安装的错误处理程序函数的名称，如果在设置错误处理程序时发生错误（例如*function*不存在），则返回`false`。'
- en: set_exception_handler
  id: totrans-2985
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: set_exception_handler
- en: '`callable set_exception_handler(callable` *function*`)`'
  id: totrans-2986
  prefs: []
  type: TYPE_NORMAL
  zh: '`callable set_exception_handler(callable` *function*`)`'
- en: Sets the named function as the current exception handler. The exception handler
    is called whenever an exception is thrown in a `try...catch` block, but is not
    caught; the function can do whatever it wants, but typically will print an error
    message and clean up after a critical error happens.
  id: totrans-2987
  prefs: []
  type: TYPE_NORMAL
  zh: 设置命名的函数作为当前的异常处理程序。在`try...catch`块中抛出异常但未被捕获时，将调用异常处理程序；该函数可以执行任何操作，但通常会打印错误消息并在发生严重错误后进行清理。
- en: The user-defined function is called with one parameter—the exception object
    that was thrown.
  id: totrans-2988
  prefs: []
  type: TYPE_NORMAL
  zh: 用户定义的函数将以一个参数调用——被抛出的异常对象。
- en: '`set_exception_handler()` returns the previously installed exception-handler
    function, an empty string if no previous handler was set, or `false` if an error
    occurred while setting the error handler (e.g., when *function* doesn’t exist).'
  id: totrans-2989
  prefs: []
  type: TYPE_NORMAL
  zh: '`set_exception_handler()` 返回先前安装的异常处理程序函数，如果未设置先前的处理程序则返回空字符串，如果在设置错误处理程序时发生错误（例如*function*不存在），则返回`false`。'
- en: set_include_path
  id: totrans-2990
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: set_include_path
- en: '`string set_include_path(string` *path*`)`'
  id: totrans-2991
  prefs: []
  type: TYPE_NORMAL
  zh: '`string set_include_path(string` *path*`)`'
- en: Sets the include path configuration option; it lasts until the end of the script’s
    execution, or until a call to `restore_include_path` in the script. Returns the
    value of the previous include path.
  id: totrans-2992
  prefs: []
  type: TYPE_NORMAL
  zh: 设置包含路径配置选项；它将持续到脚本执行结束，或者在脚本中调用`restore_include_path`。返回先前的包含路径值。
- en: set_time_limit
  id: totrans-2993
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: set_time_limit
- en: '`void set_time_limit(int` *timeout*`)`'
  id: totrans-2994
  prefs: []
  type: TYPE_NORMAL
  zh: '`void set_time_limit(int` *timeout*`)`'
- en: Sets the timeout for the current script to *timeout* seconds and restarts the
    timeout timer. By default, the timeout is set to 30 seconds or the value for `max_execution_time`
    set in the current configuration file. If a script does not finish executing within
    the time provided, a fatal error is generated and the script is killed. If *timeout*
    is `0`, the script will never time out.
  id: totrans-2995
  prefs: []
  type: TYPE_NORMAL
  zh: 设置当前脚本的超时时间为*timeout*秒，并重新启动超时计时器。默认情况下，超时时间设置为30秒或在当前配置文件中设置的`max_execution_time`的值。如果脚本在指定时间内未执行完毕，则会生成致命错误并终止脚本。如果*timeout*为`0`，则脚本将永不超时。
- en: setcookie
  id: totrans-2996
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: setcookie
- en: '`void setcookie(string` *name*`[, string` *value*`[, int` *expiration*`[, string`
    *path* `[, string` *domain*`[, bool` *is_secure*`]]]]])`'
  id: totrans-2997
  prefs: []
  type: TYPE_NORMAL
  zh: '`void setcookie(string` *name*`[, string` *value*`[, int` *expiration*`[, string`
    *path* `[, string` *domain*`[, bool` *is_secure*`]]]]])`'
- en: Generates a cookie and passes it along with the rest of the header information.
    Because cookies are set in the HTTP header, `setcookie()` must be called before
    any output is generated.
  id: totrans-2998
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个cookie并将其与其余的头信息一起传递。因为cookie是在HTTP头中设置的，所以必须在生成任何输出之前调用`setcookie()`。
- en: If only *name* is specified, the cookie with that name is deleted from the client.
    The *value* argument specifies a value for the cookie to take, *expiration* is
    a Unix timestamp value defining a time the cookie should expire, and the *path*
    and *domain* parameters define a domain for the cookie to be associated with.
    If *is_secure* is `true`, the cookie will be transmitted only over a secure HTTP
    connection.
  id: totrans-2999
  prefs: []
  type: TYPE_NORMAL
  zh: 如果仅指定*name*，则从客户端删除具有该名称的cookie。*value*参数指定cookie应采用的值，*expiration*是Unix时间戳值，定义cookie应过期的时间，*path*和*domain*参数定义cookie应与之关联的域。如果*is_secure*为`true`，则cookie仅通过安全的HTTP连接传输。
- en: setlocale
  id: totrans-3000
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: setlocale
- en: '`string setlocale(mixed` *category*`, string` *locale*`[, string` *locale*`,
    ...]) string setlocale(mixed` *category*`, array` *locale*`)`'
  id: totrans-3001
  prefs: []
  type: TYPE_NORMAL
  zh: '`string setlocale(mixed` *category*`, string` *locale*`[, string` *locale*`,
    ...]) string setlocale(mixed` *category*`, array` *locale*`)`'
- en: 'Sets the locale for *category* functions to *locale*. Returns the current locale
    after being set, or `false` if the locale cannot be set. Any number of options
    for *category* can be added (or `OR`ed) together. The following options are available:'
  id: totrans-3002
  prefs: []
  type: TYPE_NORMAL
  zh: 设置*category*函数的区域设置为*locale*。设置后返回当前区域设置，如果无法设置区域设置，则返回`false`。可以添加（或进行OR运算）任意数量的*category*选项。以下选项可用：
- en: '| `LC_ALL` (default) | All of the following categories |'
  id: totrans-3003
  prefs: []
  type: TYPE_TB
  zh: '| `LC_ALL`（默认） | 所有以下类别 |'
- en: '| `LC_COLLATE` | String comparisons |'
  id: totrans-3004
  prefs: []
  type: TYPE_TB
  zh: '| `LC_COLLATE` | 字符串比较 |'
- en: '| `LC_CTYPE` | Character classification and conversion |'
  id: totrans-3005
  prefs: []
  type: TYPE_TB
  zh: '| `LC_CTYPE` | 字符分类和转换 |'
- en: '| `LC_MONETARY` | Monetary functions |'
  id: totrans-3006
  prefs: []
  type: TYPE_TB
  zh: '| `LC_MONETARY` | 货币函数 |'
- en: '| `LC_NUMERIC` | Numeric functions |'
  id: totrans-3007
  prefs: []
  type: TYPE_TB
  zh: '| `LC_NUMERIC` | 数字函数 |'
- en: '| `LC_TIME` | Time and date formatting |'
  id: totrans-3008
  prefs: []
  type: TYPE_TB
  zh: '| `LC_TIME` | 时间和日期格式化 |'
- en: If *locale* is `0` or the empty string, the current locale is unaffected.
  id: totrans-3009
  prefs: []
  type: TYPE_NORMAL
  zh: 如果*locale*为`0`或空字符串，则当前区域设置不受影响。
- en: setrawcookie
  id: totrans-3010
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: setrawcookie
- en: '`void setrawcookie(string` *name*`[, string` *value*`[, int` *expiration*`[,
    string` *path* `[, string` *domain*`[, bool` *is_secure*`]]]]])`'
  id: totrans-3011
  prefs: []
  type: TYPE_NORMAL
  zh: '`void setrawcookie(string` *name*`[, string` *value*`[, int` *expiration*`[,
    string` *path* `[, string` *domain*`[, bool` *is_secure*`]]]]])`'
- en: Generates a cookie and passes it along with the rest of the header information.
    Because cookies are set in the HTTP header, `setcookie()` must be called before
    any output is generated.
  id: totrans-3012
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个cookie，并将其与其他标头信息一起传递。因为cookie是在HTTP标头中设置的，所以必须在生成任何输出之前调用`setcookie()`。
- en: If only *name* is specified, the cookie with that name is deleted from the client.
    The *value* argument specifies a value for the cookie to take—unlike `setcookie()`,
    the value specified here is not URL-encoded before being sent, *expiration* is
    a Unix timestamp value defining a time the cookie should expire, and the *path*
    and *domain* parameters define a domain for the cookie to be associated with.
    If *is_secure* is `true`, the cookie will be transmitted only over a secure HTTP
    connection.
  id: totrans-3013
  prefs: []
  type: TYPE_NORMAL
  zh: 如果仅指定*name*，则从客户端删除具有该名称的cookie。*value*参数指定cookie应采用的值——与`setcookie()`不同，此处指定的值在发送之前不会进行URL编码，*expiration*是Unix时间戳值，定义cookie应过期的时间，*path*和*domain*参数定义cookie应与之关联的域。如果*is_secure*为`true`，则cookie仅通过安全的HTTP连接传输。
- en: settype
  id: totrans-3014
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: settype
- en: '`bool settype(mixed` *value*`, string` *type*`)`'
  id: totrans-3015
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool settype(mixed` *value*`, string` *type*`)`'
- en: Converts *value* to the given *type*. Possible types are `"boolean"`, `"integer"`,
    `"float"`, `"string"`, `"array"`, and `"object"`. Returns `true` if the operation
    was successful and `false` if not. Using this function is the same as typecasting
    *value* to the appropriate type.
  id: totrans-3016
  prefs: []
  type: TYPE_NORMAL
  zh: 将*value*转换为给定的*type*。可能的类型包括`"boolean"`、`"integer"`、`"float"`、`"string"`、`"array"`和`"object"`。如果操作成功，则返回`true`；否则返回`false`。使用此函数与将*value*强制转换为适当类型相同。
- en: sha1
  id: totrans-3017
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: sha1
- en: '`string sha1(string` *string*`[, bool` *binary*`])`'
  id: totrans-3018
  prefs: []
  type: TYPE_NORMAL
  zh: '`string sha1(string` *string*`[, bool` *binary*`])`'
- en: Calculates the `sha1` encryption hash of *string* and returns it. If *binary*
    is set and is `true`, the raw binary is returned instead of a hex string.
  id: totrans-3019
  prefs: []
  type: TYPE_NORMAL
  zh: 计算*string*的`sha1`加密哈希并返回。如果设置了*binary*并且为`true`，则返回原始二进制数据而不是十六进制字符串。
- en: sha1_file
  id: totrans-3020
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: sha1_file
- en: '`string sha1_file(string` *path*`[, bool` *binary*`])`'
  id: totrans-3021
  prefs: []
  type: TYPE_NORMAL
  zh: '`string sha1_file(string` *path*`[, bool` *binary*`])`'
- en: Calculates and returns the `sha1` encryption hash for the file at *path*. A
    `sha1` hash is a 40-character hexadecimal value that can be used to checksum a
    file’s data. If *binary* is supplied and is `true`, the result is sent as a 20-bit
    binary value instead.
  id: totrans-3022
  prefs: []
  type: TYPE_NORMAL
  zh: 计算并返回文件在*path*处的`sha1`加密哈希。`sha1`哈希是一个40字符的十六进制值，可用于对文件数据进行校验和。如果提供了*binary*并且为`true`，则结果将作为20位二进制值发送。
- en: shell_exec
  id: totrans-3023
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: shell_exec
- en: '`string shell_exec(string` *command*`)`'
  id: totrans-3024
  prefs: []
  type: TYPE_NORMAL
  zh: '`string shell_exec(string` *command*`)`'
- en: Executes *command* via the shell and returns the output from the command’s result.
    This function is called when you use the backtick operator (`` ` ``).
  id: totrans-3025
  prefs: []
  type: TYPE_NORMAL
  zh: 通过shell执行*command*并返回命令结果的输出。当使用反引号运算符（`` ` ``）时调用此函数。
- en: shuffle
  id: totrans-3026
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: shuffle
- en: '`void shuffle(array` *array*`)`'
  id: totrans-3027
  prefs: []
  type: TYPE_NORMAL
  zh: '`void shuffle(array` *array*`)`'
- en: Rearranges the values in *array* into a random order. Keys for the values are
    lost.
  id: totrans-3028
  prefs: []
  type: TYPE_NORMAL
  zh: 将*array*中的值重新排列为随机顺序。值的键将丢失。
- en: similar_text
  id: totrans-3029
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: similar_text
- en: '`int similar_text(string` *one*`, string` *two*`[, float` *percent*`])`'
  id: totrans-3030
  prefs: []
  type: TYPE_NORMAL
  zh: '`int similar_text(string` *one*`, string` *two*`[, float` *percent*`])`'
- en: Calculates the similarity between the strings *one* and *two*. If passed by
    reference, *percent* gets the percent by which the two strings differ.
  id: totrans-3031
  prefs: []
  type: TYPE_NORMAL
  zh: 计算字符串*one*和*two*之间的相似性。如果通过引用传递，则*percent*获取两个字符串不同之处的百分比。
- en: sin
  id: totrans-3032
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: sin
- en: '`float sin(float` *value*`)`'
  id: totrans-3033
  prefs: []
  type: TYPE_NORMAL
  zh: '`float sin(float` *value*`)`'
- en: Returns the sine of *value* in radians.
  id: totrans-3034
  prefs: []
  type: TYPE_NORMAL
  zh: 返回以弧度表示的*value*的正弦值。
- en: sinh
  id: totrans-3035
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: sinh
- en: '`float sinh(float` *value*`)`'
  id: totrans-3036
  prefs: []
  type: TYPE_NORMAL
  zh: '`float sinh(float` *value*`)`'
- en: Returns the hyperbolic sine of *value* in radians.
  id: totrans-3037
  prefs: []
  type: TYPE_NORMAL
  zh: 返回以弧度表示的*value*的双曲正弦值。
- en: sleep
  id: totrans-3038
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: sleep
- en: '`int sleep(int` *time*`)`'
  id: totrans-3039
  prefs: []
  type: TYPE_NORMAL
  zh: '`int sleep(int` *time*`)`'
- en: Pauses execution of the current script for *time* seconds. Returns `0` if the
    operation was successful, or `false` otherwise.
  id: totrans-3040
  prefs: []
  type: TYPE_NORMAL
  zh: 暂停当前脚本的执行*time*秒。如果操作成功，则返回`0`，否则返回`false`。
- en: sort
  id: totrans-3041
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: sort
- en: '`bool sort(array` *array*`[, int` *flags*`])`'
  id: totrans-3042
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool sort(array` *array*`[, int` *flags*`])`'
- en: 'Sorts the values in the given *array* in ascending order. For more control
    over the behavior of the sort, provide the second parameter, which is one of the
    following values:'
  id: totrans-3043
  prefs: []
  type: TYPE_NORMAL
  zh: 将给定*array*中的值按升序排序。要更好地控制排序行为，请提供第二个参数，该参数是以下值之一：
- en: '| `SORT_REGULAR` (default) | Compare the items normally |'
  id: totrans-3044
  prefs: []
  type: TYPE_TB
  zh: '| `SORT_REGULAR`（默认）| 正常比较项目 |'
- en: '| `SORT_NUMERIC` | Compare the items numerically |'
  id: totrans-3045
  prefs: []
  type: TYPE_TB
  zh: '| `SORT_NUMERIC` | 按数字方式比较项目 |'
- en: '| `SORT_STRING` | Compare the items as strings |'
  id: totrans-3046
  prefs: []
  type: TYPE_TB
  zh: '| `SORT_STRING` | 按字符串方式比较项目 |'
- en: '| `SORT_LOCALE_STRING` | Compare the items as strings using the current locale
    sorting rules |'
  id: totrans-3047
  prefs: []
  type: TYPE_TB
  zh: '| `SORT_LOCALE_STRING` | 使用当前区域设置的排序规则按字符串方式比较项目 |'
- en: '| `SORT_NATURAL` | Compare the items as strings using “natural ordering” |'
  id: totrans-3048
  prefs: []
  type: TYPE_TB
  zh: '| `SORT_NATURAL` | 使用“自然排序”方式按字符串比较项目 |'
- en: '| `SORT_FLAG_CASE` | Combine with `SORT_STRING` or `SORT_NATURAL` using a bitwise
    `OR` operation to sort using case-insensitive comparison |'
  id: totrans-3049
  prefs: []
  type: TYPE_TB
  zh: '| `SORT_FLAG_CASE` | 使用按位`OR`操作符结合`SORT_STRING`或`SORT_NATURAL`以进行不区分大小写的比较
    |'
- en: Returns `true` if the operation was successful, and `false` otherwise. See [Chapter 5](ch05.xhtml#array)
    for more information on using this function.
  id: totrans-3050
  prefs: []
  type: TYPE_NORMAL
  zh: 如果操作成功，则返回`true`，否则返回`false`。有关使用此函数的更多信息，请参见[第5章](ch05.xhtml#array)。
- en: soundex
  id: totrans-3051
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: soundex
- en: '`string soundex(string` *string*`)`'
  id: totrans-3052
  prefs: []
  type: TYPE_NORMAL
  zh: '`string soundex(string` *string*`)`'
- en: Calculates and returns the soundex key of *string*. Words that are pronounced
    similarly (and begin with the same letter) have the same soundex key.
  id: totrans-3053
  prefs: []
  type: TYPE_NORMAL
  zh: 计算并返回*string*的soundex键。发音相似（并以相同字母开头）的单词具有相同的soundex键。
- en: sprintf
  id: totrans-3054
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: sprintf
- en: '`string sprintf(string` *format*`[, mixed` *value1*`[, ... mixed` *valueN*`]])`'
  id: totrans-3055
  prefs: []
  type: TYPE_NORMAL
  zh: '`string sprintf(string` *format*`[, mixed` *value1*`[, ... mixed` *valueN*`]])`'
- en: Returns a string created by filling *format* with the given arguments. See `printf()`
    for more information on using this function.
  id: totrans-3056
  prefs: []
  type: TYPE_NORMAL
  zh: 使用给定的参数填充*format*并返回字符串。有关使用此函数的更多信息，请参见`printf()`。
- en: sqrt
  id: totrans-3057
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: sqrt
- en: '`float sqrt(float` *number*`)`'
  id: totrans-3058
  prefs: []
  type: TYPE_NORMAL
  zh: '`float sqrt(float` *number*`)`'
- en: Returns the square root of *number*.
  id: totrans-3059
  prefs: []
  type: TYPE_NORMAL
  zh: 返回*number*的平方根。
- en: srand
  id: totrans-3060
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: srand
- en: '`void srand([int` *seed*`])`'
  id: totrans-3061
  prefs: []
  type: TYPE_NORMAL
  zh: '`void srand([int` *seed*`])`'
- en: Seeds the standard pseudorandom number generator with *seed*, or with a random
    seed if none is provided.
  id: totrans-3062
  prefs: []
  type: TYPE_NORMAL
  zh: 使用*seed*初始化标准伪随机数生成器，如果未提供*seed*，则使用随机种子。
- en: sscanf
  id: totrans-3063
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: sscanf
- en: '`mixed sscanf(string` *string*`, string` *format*`[, mixed` *variableN* `...])`'
  id: totrans-3064
  prefs: []
  type: TYPE_NORMAL
  zh: '`mixed sscanf(string` *string*`, string` *format*`[, mixed` *variableN* `...])`'
- en: Parses *string* for values of types given in *format*; the values found are
    either returned in an array or, if *variable1* through *variableN* (which must
    be variables passed by reference) are given, in those variables.
  id: totrans-3065
  prefs: []
  type: TYPE_NORMAL
  zh: 解析*string*中与*format*指定的类型匹配的值；找到的值将作为数组返回，或者如果提供了引用传递的*variable1*至*variableN*（必须是变量），则将返回这些变量中的值。
- en: 'The *format* string is the same as that used in `sprintf()`. For example:'
  id: totrans-3066
  prefs: []
  type: TYPE_NORMAL
  zh: '*format*字符串与`sprintf()`中使用的相同。例如：'
- en: '[PRE15]'
  id: totrans-3067
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: stat
  id: totrans-3068
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: stat
- en: '`array stat(string` *path*`)`'
  id: totrans-3069
  prefs: []
  type: TYPE_NORMAL
  zh: '`array stat(string` *path*`)`'
- en: Returns an associative array of information about the file *path*. If *path*
    is a symbolic link, information about the file *path* references is returned.
    See `fstat` for a list of the values returned and their meanings.
  id: totrans-3070
  prefs: []
  type: TYPE_NORMAL
  zh: 返回关于文件*path*的信息的关联数组。如果*path*是符号链接，则返回*path*引用的文件的信息。有关返回的值及其含义，请参见`fstat`。
- en: str_getcsv
  id: totrans-3071
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: str_getcsv
- en: '`array str_getcsv(string` *input*`[, string` *delimiter*`[, string` *enclosure*
    `[, string` *escape*`]]]])`'
  id: totrans-3072
  prefs: []
  type: TYPE_NORMAL
  zh: '`array str_getcsv(string` *input*`[, string` *delimiter*`[, string` *enclosure*
    `[, string` *escape*`]]]])`'
- en: Parses a string as a comma-separated values (CSV) list and returns it as an
    array of values. If supplied, *delimiter* is used to delimit the values for the
    line instead of commas. If supplied, *enclosure* is a single character that is
    used to enclose values (by default, the double-quote character, `"`). *escape*
    sets the escape character to use; the default is a backslash, `\`.
  id: totrans-3073
  prefs: []
  type: TYPE_NORMAL
  zh: 将字符串解析为逗号分隔值（CSV）列表，并将其作为值数组返回。如果提供了 *delimiter*，则用其来分隔行中的值，而不是逗号。如果提供了 *enclosure*，则它是用于括起值的单个字符（默认为双引号字符
    `"`）。*escape* 设置用于转义的转义字符；默认为反斜杠 `\`。
- en: str_ireplace
  id: totrans-3074
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: str_ireplace
- en: '`mixed str_ireplace(mixed` *search*`, mixed` *replace*`, mixed` *string*`[,
    int &`*count*`])`'
  id: totrans-3075
  prefs: []
  type: TYPE_NORMAL
  zh: '`mixed str_ireplace(mixed` *search*`, mixed` *replace*`, mixed` *string*`[,
    int &`*count*`])`'
- en: Performs a case-insensitive search for all occurrences of *search* in *string*
    and replaces them with *replace*. If all three parameters are strings, a string
    is returned. If *string* is an array, the replacement is performed for every element
    in the array and an array of results is returned. If *search* and *replace* are
    both arrays, elements in *search* are replaced with the elements in *replace*
    with the same numeric indices. Finally, if *search* is an array and *replace*
    is a string, any occurrence of any element in *search* is changed to *replace*.
    If supplied, *count* is filled with the number of instances replaced.
  id: totrans-3076
  prefs: []
  type: TYPE_NORMAL
  zh: 对 *string* 中所有出现的 *search* 进行不区分大小写的搜索，并用 *replace* 替换它们。如果三个参数都是字符串，则返回字符串。如果
    *string* 是数组，则对数组中的每个元素执行替换，并返回结果数组。如果 *search* 和 *replace* 都是数组，则将 *search* 中的元素用相同数值索引中的
    *replace* 元素替换。最后，如果 *search* 是数组且 *replace* 是字符串，则将 *search* 中的任何元素的任何出现更改为 *replace*。如果提供了
    *count*，则填充被替换的实例数。
- en: str_pad
  id: totrans-3077
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: str_pad
- en: '`string str_pad(string` *string*`, string` *length*`[, string` *pad*`[, int`
    *type*`]])`'
  id: totrans-3078
  prefs: []
  type: TYPE_NORMAL
  zh: '`string str_pad(string` *string*`, string` *length*`[, string` *pad*`[, int`
    *type*`]])`'
- en: 'Pads *string* using *pad* until it is at least *length* characters and returns
    the resulting string. By specifying *type*, you can control where the padding
    occurs. The following values for *type* are accepted:'
  id: totrans-3079
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 *pad* 填充 *string* 直到其至少有 *length* 个字符，并返回结果字符串。通过指定 *type*，您可以控制填充发生的位置。接受
    *type* 的以下值：
- en: '| `STR_PAD_RIGHT` (default) | Pad to the right of *string* |'
  id: totrans-3080
  prefs: []
  type: TYPE_TB
  zh: '| `STR_PAD_RIGHT`（默认） | 在 *string* 的右侧填充 |'
- en: '| `STR_PAD_LEFT` | Pad to the left of *string* |'
  id: totrans-3081
  prefs: []
  type: TYPE_TB
  zh: '| `STR_PAD_LEFT` | 在 *string* 的左侧填充 |'
- en: '| `STR_PAD_BOTH` | Pad on either side of *string* |'
  id: totrans-3082
  prefs: []
  type: TYPE_TB
  zh: '| `STR_PAD_BOTH` | 在 *string* 的两侧填充 |'
- en: str_repeat
  id: totrans-3083
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: str_repeat
- en: '`string str_repeat(string` *string*`, int` *count*`)`'
  id: totrans-3084
  prefs: []
  type: TYPE_NORMAL
  zh: '`string str_repeat(string` *string*`, int` *count*`)`'
- en: Returns a string consisting of *count* copies of *string* appended to each other.
    If *count* is not greater than zero, an empty string is returned.
  id: totrans-3085
  prefs: []
  type: TYPE_NORMAL
  zh: 返回由 *count* 个 *string* 的副本连接在一起的字符串。如果 *count* 不大于零，则返回空字符串。
- en: str_replace
  id: totrans-3086
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: str_replace
- en: '`mixed str_replace(mixed` *search*`, mixed` *replace*`, mixed` *string*`[,
    int &`*count*`])`'
  id: totrans-3087
  prefs: []
  type: TYPE_NORMAL
  zh: '`mixed str_replace(mixed` *search*`, mixed` *replace*`, mixed` *string*`[,
    int &`*count*`])`'
- en: Searches for all occurrences of *search* in *string* and replaces them with
    *replace*. If all three parameters are strings, a string is returned. If *string*
    is an array, the replacement is performed for every element in the array and an
    array of results is returned. If *search* and *replace* are both arrays, elements
    in *search* are replaced with the elements in *replace* with the same numeric
    indices. Finally, if *search* is an array and *replace* is a string, any occurrence
    of any element in *search* is changed to *replace*. If supplied, *count* is filled
    with the number of instances replaced.
  id: totrans-3088
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索 *string* 中所有出现的 *search* 并用 *replace* 替换它们。如果三个参数都是字符串，则返回字符串。如果 *string*
    是数组，则对数组中的每个元素执行替换，并返回结果数组。如果 *search* 和 *replace* 都是数组，则将 *search* 中的元素用相同数值索引中的
    *replace* 元素替换。最后，如果 *search* 是数组且 *replace* 是字符串，则将 *search* 中的任何元素的任何出现更改为 *replace*。如果提供了
    *count*，则填充被替换的实例数。
- en: str_rot13
  id: totrans-3089
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: str_rot13
- en: '`string str_rot13(string` *string*`)`'
  id: totrans-3090
  prefs: []
  type: TYPE_NORMAL
  zh: '`string str_rot13(string` *string*`)`'
- en: Converts *string* to its `rot13` version and returns the resulting string.
  id: totrans-3091
  prefs: []
  type: TYPE_NORMAL
  zh: 将 *string* 转换为其 `rot13` 版本并返回结果字符串。
- en: str_shuffle
  id: totrans-3092
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: str_shuffle
- en: '`string str_shuffle(string` *string*`)`'
  id: totrans-3093
  prefs: []
  type: TYPE_NORMAL
  zh: '`string str_shuffle(string` *string*`)`'
- en: Rearranges the characters in *string* into a random order and returns the resulting
    string.
  id: totrans-3094
  prefs: []
  type: TYPE_NORMAL
  zh: 将 *string* 中的字符重新排列为随机顺序，并返回结果字符串。
- en: str_split
  id: totrans-3095
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: str_split
- en: '`array str_split(string` *string*`[, int` *length*`])`'
  id: totrans-3096
  prefs: []
  type: TYPE_NORMAL
  zh: '`array str_split(string` *string*`[, int` *length*`])`'
- en: Splits *string* into an array of characters, each containing *length* characters;
    if *length* is not specified, it defaults to `1`.
  id: totrans-3097
  prefs: []
  type: TYPE_NORMAL
  zh: 将*string*拆分为包含*length*个字符的字符数组；如果未指定*length*，则默认为`1`。
- en: str_word_count
  id: totrans-3098
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: str_word_count
- en: '`mixed str_word_count(string` *string*`[, int` *format*`[, string` *characters*`]])`'
  id: totrans-3099
  prefs: []
  type: TYPE_NORMAL
  zh: '`mixed str_word_count(string` *string*`[, int` *format*`[, string` *characters*`]])`'
- en: 'Counts the number of words in *string* using locale-specific rules. The value
    of *format* dictates the returned value:'
  id: totrans-3100
  prefs: []
  type: TYPE_NORMAL
  zh: 使用特定于区域设置的规则计算*string*中单词的数量。*format*的值决定返回的值：
- en: '| `0` (default) | The number of words found in *string* |'
  id: totrans-3101
  prefs: []
  type: TYPE_TB
  zh: '| `0`（默认） | *string* 中找到的单词数 |'
- en: '| `1` | An array of all words found in *string* |'
  id: totrans-3102
  prefs: []
  type: TYPE_TB
  zh: '| `1` | *string* 中找到的所有单词的数组 |'
- en: '| `2` | An associative array, with keys being the positions and values being
    the words found at those positions in *string* |'
  id: totrans-3103
  prefs: []
  type: TYPE_TB
  zh: '| `2` | 一个关联数组，键是*string*中找到的位置，值是这些位置处的单词 |'
- en: If *characters* is specified, it provides additional characters that are considered
    to be inside words (that is, are not word boundaries).
  id: totrans-3104
  prefs: []
  type: TYPE_NORMAL
  zh: 如果指定了*characters*，则提供被视为单词内部（即非单词边界）的附加字符。
- en: strcasecmp
  id: totrans-3105
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: strcasecmp
- en: '`int strcasecmp(string` *one*`, string` *two*`)`'
  id: totrans-3106
  prefs: []
  type: TYPE_NORMAL
  zh: '`int strcasecmp(string` *one*`, string` *two*`)`'
- en: Compares two strings; returns a number less than zero if *one* is less than
    *two*, `0` if the two strings are equal, and a number greater than zero if *one*
    is greater than *two*. The comparison is case-insensitive—that is, “Alphabet”
    and “alphabet” are considered equal.
  id: totrans-3107
  prefs: []
  type: TYPE_NORMAL
  zh: 比较两个字符串；如果*one*小于*two*，返回小于零的数，如果两个字符串相等，返回`0`，如果*one*大于*two*，返回大于零的数。此比较不区分大小写，即“Alphabet”和“alphabet”被视为相等。
- en: strcmp
  id: totrans-3108
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: strcmp
- en: '`int strcmp(string` *one*`, string` *two*`)`'
  id: totrans-3109
  prefs: []
  type: TYPE_NORMAL
  zh: '`int strcmp(string` *one*`, string` *two*`)`'
- en: Compares two strings; returns a number less than zero if *one* is less than
    *two*, `0` if the two strings are equal, and a number greater than zero if *one*
    is greater than *two*. The comparison is case-sensitive—that is, “Alphabet” and
    “alphabet” are not considered equal.
  id: totrans-3110
  prefs: []
  type: TYPE_NORMAL
  zh: 比较两个字符串；如果*one*小于*two*，返回小于零的数，如果两个字符串相等，返回`0`，如果*one*大于*two*，返回大于零的数。此比较区分大小写，即“Alphabet”和“alphabet”被视为不相等。
- en: strcoll
  id: totrans-3111
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: strcoll
- en: '`int strcoll(string` *one*`, string` *two*`)`'
  id: totrans-3112
  prefs: []
  type: TYPE_NORMAL
  zh: '`int strcoll(string` *one*`, string` *two*`)`'
- en: Compares two strings using the rules of the current locale; returns a number
    less than zero if *one* is less than *two*, `0` if the two strings are equal,
    and a number greater than zero if *one* is greater than *two*. The comparison
    is case-sensitive—that is, “Alphabet” and “alphabet” are not considered equal.
  id: totrans-3113
  prefs: []
  type: TYPE_NORMAL
  zh: 使用当前区域设置的规则比较两个字符串；如果*one*小于*two*，返回小于零的数，如果两个字符串相等，返回`0`，如果*one*大于*two*，返回大于零的数。此比较区分大小写，即“Alphabet”和“alphabet”被视为不相等。
- en: strcspn
  id: totrans-3114
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: strcspn
- en: '`int strcspn(string` *string*`, string` *characters*`[, int` *offset*`[, int`
    *length*`]])`'
  id: totrans-3115
  prefs: []
  type: TYPE_NORMAL
  zh: '`int strcspn(string` *string*`, string` *characters*`[, int` *offset*`[, int`
    *length*`]])`'
- en: Returns the length of the subset of *string* starting at *offset*, examining
    a maximum of *length* characters, to the first instance of a character from *characters*.
  id: totrans-3116
  prefs: []
  type: TYPE_NORMAL
  zh: 返回从*offset*开始的*string*子集的长度，检查最多*length*个字符，直到首次出现*characters*中的字符。
- en: strftime
  id: totrans-3117
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: strftime
- en: '`string strftime(string` *format*`[, int` *timestamp*`])`'
  id: totrans-3118
  prefs: []
  type: TYPE_NORMAL
  zh: '`string strftime(string` *format*`[, int` *timestamp*`])`'
- en: 'Formats a time and date according to the *format* string provided in the first
    parameter and the current locale. If the second parameter is not specified, the
    current time and date is used. The following characters are recognized in the
    *format* string:'
  id: totrans-3119
  prefs: []
  type: TYPE_NORMAL
  zh: 根据第一个参数中提供的*format*字符串和当前区域设置格式化时间和日期。如果未指定第二个参数，则使用当前时间和日期。*format*字符串中识别以下字符：
- en: '| `%a` | Name of the day of the week as a three-letter abbreviation (e.g.,
    Mon) |'
  id: totrans-3120
  prefs: []
  type: TYPE_TB
  zh: '| `%a` | 星期几的三个字母缩写（例如，Mon） |'
- en: '| `%A` | Name of the day of the week (e.g., Monday) |'
  id: totrans-3121
  prefs: []
  type: TYPE_TB
  zh: '| `%A` | 星期几的名称（例如，Monday） |'
- en: '| `%b` | Name of the month as a three-letter abbreviation (e.g., Aug) |'
  id: totrans-3122
  prefs: []
  type: TYPE_TB
  zh: '| `%b` | 月份的三个字母缩写（例如，Aug） |'
- en: '| `%B` | Name of the month (e.g., August) |'
  id: totrans-3123
  prefs: []
  type: TYPE_TB
  zh: '| `%B` | 月份的名称（例如，August） |'
- en: '| `%c` | Date and time in the preferred format for the current locale |'
  id: totrans-3124
  prefs: []
  type: TYPE_TB
  zh: '| `%c` | 日期和时间的首选格式 |'
- en: '| `%C` | The last two digits of the century |'
  id: totrans-3125
  prefs: []
  type: TYPE_TB
  zh: '| `%C` | 世纪的最后两位数 |'
- en: '| `%d` | Day of the month as two digits, including a leading zero if necessary
    (e.g., 01 through 31) |'
  id: totrans-3126
  prefs: []
  type: TYPE_TB
  zh: '| `%d` | 日期的两位数表示，如果需要，包括前导零（例如，01到31） |'
- en: '| `%D` | Same as `%m/%d/%y` |'
  id: totrans-3127
  prefs: []
  type: TYPE_TB
  zh: '| `%D` | 与 `%m/%d/%y` 相同 |'
- en: '| `%e` | Day of the month as two digits, including a leading space if necessary
    (e.g., 1 through 31) |'
  id: totrans-3128
  prefs: []
  type: TYPE_TB
  zh: '| `%e` | 日期的两位数表示，如果需要，包括前导空格（例如，1到31） |'
- en: '| `%h` | Same as `%b` |'
  id: totrans-3129
  prefs: []
  type: TYPE_TB
  zh: '| `%h` | 与 `%b` 相同 |'
- en: '| `%H` | Hour in 24-hour format, including a leading zero if necessary (e.g.,
    00 through 23) |'
  id: totrans-3130
  prefs: []
  type: TYPE_TB
  zh: '| `%H` | 24小时制小时数，如有必要，包括前导零（例如，00 到 23） |'
- en: '| `%I` | Hour in 12-hour format (e.g., 1 through 12) |'
  id: totrans-3131
  prefs: []
  type: TYPE_TB
  zh: '| `%I` | 12小时制小时数（例如，1 到 12） |'
- en: '| `%j` | Day of the year, including leading zeros as necessary (e.g., 001 through
    366) |'
  id: totrans-3132
  prefs: []
  type: TYPE_TB
  zh: '| `%j` | 一年中的日期，需要时包括前导零（例如，001 到 366） |'
- en: '| `%m` | Month, including a leading zero if necessary (e.g., 01 through 12)
    |'
  id: totrans-3133
  prefs: []
  type: TYPE_TB
  zh: '| `%m` | 月份，需要时包括前导零（例如，01 到 12） |'
- en: '| `%M` | Minutes |'
  id: totrans-3134
  prefs: []
  type: TYPE_TB
  zh: '| `%M` | 分钟数 |'
- en: '| `%n` | The newline character (`\n`) |'
  id: totrans-3135
  prefs: []
  type: TYPE_TB
  zh: '| `%n` | 换行符（`\n`） |'
- en: '| `%p` | am or pm |'
  id: totrans-3136
  prefs: []
  type: TYPE_TB
  zh: '| `%p` | 上午或下午 |'
- en: '| `%r` | Same as `%I:%M:%S %p` |'
  id: totrans-3137
  prefs: []
  type: TYPE_TB
  zh: '| `%r` | 等同于`%I:%M:%S %p` |'
- en: '| `%R` | Same as `%H:%M:%S` |'
  id: totrans-3138
  prefs: []
  type: TYPE_TB
  zh: '| `%R` | 等同于`%H:%M:%S` |'
- en: '| `%S` | Seconds |'
  id: totrans-3139
  prefs: []
  type: TYPE_TB
  zh: '| `%S` | 秒数 |'
- en: '| `%t` | The tab character (`\t`) |'
  id: totrans-3140
  prefs: []
  type: TYPE_TB
  zh: '| `%t` | 制表符（`\t`） |'
- en: '| `%T` | Same as `%H:%M:%S` |'
  id: totrans-3141
  prefs: []
  type: TYPE_TB
  zh: '| `%T` | 等同于`%H:%M:%S` |'
- en: '| `%u` | Numeric day of the week, starting with 1 for Monday |'
  id: totrans-3142
  prefs: []
  type: TYPE_TB
  zh: '| `%u` | 一周中的数字表示，从星期一开始计数为1 |'
- en: '| `%U` | Numeric week of the year, starting with the first Sunday |'
  id: totrans-3143
  prefs: []
  type: TYPE_TB
  zh: '| `%U` | 一年中的数字表示周数，从第一个星期天开始计数 |'
- en: '| `%V` | ISO 8601:1998 numeric week of the year—Week 1 starts on the Monday
    of the first week that has at least four days |'
  id: totrans-3144
  prefs: []
  type: TYPE_TB
  zh: '| `%V` | ISO 8601:1998 格式的一年中的数字表示周数—第一个星期至少有四天的星期一开始计数 |'
- en: '| `%W` | Numeric week of the year, starting with the first Monday |'
  id: totrans-3145
  prefs: []
  type: TYPE_TB
  zh: '| `%W` | 一年中的数字表示周数，从第一个星期一开始计数 |'
- en: '| `%w` | Numeric day of the week, starting with 0 for Sunday |'
  id: totrans-3146
  prefs: []
  type: TYPE_TB
  zh: '| `%w` | 一周中的数字表示，从星期天开始计数为0 |'
- en: '| `%x` | The preferred date format for the current locale |'
  id: totrans-3147
  prefs: []
  type: TYPE_TB
  zh: '| `%x` | 当前区域设置下的首选日期格式 |'
- en: '| `%X` | The preferred time format for the current locale |'
  id: totrans-3148
  prefs: []
  type: TYPE_TB
  zh: '| `%X` | 当前区域设置下的首选时间格式 |'
- en: '| `%y` | Year with two digits (e.g., 98) |'
  id: totrans-3149
  prefs: []
  type: TYPE_TB
  zh: '| `%y` | 两位数表示的年份（例如，98） |'
- en: '| `%Y` | Year with four digits (e.g., 1998) |'
  id: totrans-3150
  prefs: []
  type: TYPE_TB
  zh: '| `%Y` | 四位数表示的年份（例如，1998） |'
- en: '| `%Z` | Time zone or name or abbreviation |'
  id: totrans-3151
  prefs: []
  type: TYPE_TB
  zh: '| `%Z` | 时区或名称或缩写 |'
- en: '| `%%` | The percent sign (`%`) |'
  id: totrans-3152
  prefs: []
  type: TYPE_TB
  zh: '| `%%` | 百分号（`%`） |'
- en: stripcslashes
  id: totrans-3153
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`stripcslashes`'
- en: '`string stripcslashes(string` *string*`, string` *characters*`)`'
  id: totrans-3154
  prefs: []
  type: TYPE_NORMAL
  zh: '`string stripcslashes(string` *string*`, string` *characters*`)`'
- en: Converts instances of *characters* after a backslash in *string* by removing
    the backslash before them. You can specify ranges of characters by separating
    them by two periods; for example, to unescape characters between `a` and `q`,
    use `"a..q"`. Multiple characters and ranges can be specified in *characters*.
    The `stripcslashes()` function is the inverse of `addcslashes()`.
  id: totrans-3155
  prefs: []
  type: TYPE_NORMAL
  zh: 通过删除*string*中反斜杠后的*characters*实例来转义字符。可以通过两个点分隔符指定字符范围；例如，要取消转义`a`到`q`之间的字符，请使用`"a..q"`。可以在*characters*中指定多个字符和范围。`stripcslashes()`函数是`addcslashes()`的反函数。
- en: stripslashes
  id: totrans-3156
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`stripslashes`'
- en: '`string stripslashes(string` *string*`)`'
  id: totrans-3157
  prefs: []
  type: TYPE_NORMAL
  zh: '`string stripslashes(string` *string*`)`'
- en: Converts instances of escape sequences that have special meaning in SQL queries
    in *string* by removing the backslash before them. Single quotes (`'`), double
    quotes (`"`), backslashes (`\`), and the NUL-byte (`"\0"`) are escaped. This function
    is the inverse of `addslashes()`.
  id: totrans-3158
  prefs: []
  type: TYPE_NORMAL
  zh: 通过删除*string*中SQL查询中具有特殊含义的转义序列的反斜杠来转义字符。单引号（`'`）、双引号（`"`）、反斜杠（`\`）和NUL字节（`"\0"`）被转义。该函数是`addslashes()`的反函数。
- en: strip_tags
  id: totrans-3159
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`strip_tags`'
- en: '`string strip_tags(string` *string*`[, string` *allowed*`])`'
  id: totrans-3160
  prefs: []
  type: TYPE_NORMAL
  zh: '`string strip_tags(string` *string*`[, string` *allowed*`])`'
- en: Removes PHP and HTML tags from *string* and returns the result. The *allowed*
    parameter can be specified to not remove certain tags. The string should be a
    comma-separated list of the tags to ignore; for example, `"<b>,<i>"` will leave
    bold and italic tags.
  id: totrans-3161
  prefs: []
  type: TYPE_NORMAL
  zh: 从*string*中移除PHP和HTML标签，并返回结果。*allowed*参数可指定要保留的特定标签。字符串应为逗号分隔的标签列表；例如，`"<b>,<i>"`将保留粗体和斜体标签。
- en: stripos
  id: totrans-3162
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`stripos`'
- en: '`int stripos(string` *string*`, string` *value*`[, int` *offset*`])`'
  id: totrans-3163
  prefs: []
  type: TYPE_NORMAL
  zh: '`int stripos(string` *string*`, string` *value*`[, int` *offset*`])`'
- en: Returns the position of the first occurrence of *value* in *string* using case-insensitive
    comparison. If specified, the function begins its search at position *offset*.
    Returns `false` if *value* is not found.
  id: totrans-3164
  prefs: []
  type: TYPE_NORMAL
  zh: 返回在*string*中第一次出现*value*的位置，使用不区分大小写的比较。如果指定了*offset*，则从该位置开始搜索。如果未找到*value*，则返回`false`。
- en: stristr
  id: totrans-3165
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`stristr`'
- en: '`string stristr(string` *string*`, string` *search*`[, int` *before*`])`'
  id: totrans-3166
  prefs: []
  type: TYPE_NORMAL
  zh: '`string stristr(string` *string*`, string` *search*`[, int` *before*`])`'
- en: Returns the portion of *string* from the first occurrence of *search* using
    case-insensitive comparison until the end of *string*, or from the first occurrence
    of *search* until the beginning of *string* if *before* is specified and `true`.
    If *search* is not found, the function returns `false`. If *search* contains more
    than one character, only the first is used.
  id: totrans-3167
  prefs: []
  type: TYPE_NORMAL
  zh: 返回从*string*中第一次出现的*search*（使用不区分大小写比较）到*string*的末尾的部分，或者从*string*中第一次出现的*search*（如果指定了*before*为`true`，则是从*string*的开头）到*string*的开头的部分。如果未找到*search*，则函数返回`false`。如果*search*包含多个字符，则仅使用第一个字符。
- en: strlen
  id: totrans-3168
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: strlen
- en: '`int strlen(string` *string*`)`'
  id: totrans-3169
  prefs: []
  type: TYPE_NORMAL
  zh: '`int strlen(string` *string*`)`'
- en: Returns the number of characters in *string*.
  id: totrans-3170
  prefs: []
  type: TYPE_NORMAL
  zh: 返回*string*中的字符数。
- en: strnatcasecmp
  id: totrans-3171
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: strnatcasecmp
- en: '`int strnatcasecmp(string` *one*`, string` *two*`)`'
  id: totrans-3172
  prefs: []
  type: TYPE_NORMAL
  zh: '`int strnatcasecmp(string` *one*`, string` *two*`)`'
- en: Compares two strings; returns a number less than zero if *one* is less than
    *two*, `0` if the two strings are equal, and a number greater than zero if *one*
    is greater than *two*. The comparison is case-insensitive—that is, “Alphabet”
    and “alphabet” are considered equal. The function uses a “natural order” algorithm—numbers
    in the strings are compared more naturally than computers normally do. For example,
    the values `"1"`, `"10"`, and `"2"` are sorted in that order by `strcmp()`, but
    `strnatcasecmp()` orders them `"1"`, `"2"`, and `"10"`. This function is a case-insensitive
    version of `strnatcmp()`.
  id: totrans-3173
  prefs: []
  type: TYPE_NORMAL
  zh: 比较两个字符串；如果*one*小于*two*，返回一个小于零的数字，如果两个字符串相等，则返回`0`，如果*one*大于*two*，则返回一个大于零的数字。比较时不区分大小写，即“Alphabet”和“alphabet”被视为相等。该函数使用“自然顺序”算法——字符串中的数字比计算机通常更自然地比较。例如，值为`"1"`，`"10"`和`"2"`按照`strcmp()`的顺序排序，但`strnatcasecmp()`按`"1"`，`"2"`和`"10"`的顺序排序。此函数是`strnatcmp()`的不区分大小写版本。
- en: strnatcmp
  id: totrans-3174
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: strnatcmp
- en: '`int strnatcmp(string` *one*`, string` *two*`)`'
  id: totrans-3175
  prefs: []
  type: TYPE_NORMAL
  zh: '`int strnatcmp(string` *one*`, string` *two*`)`'
- en: Compares two strings; returns a number less than zero if *one* is less than
    *two*, `0` if the two strings are equal, and a number greater than zero if *one*
    is greater than *two*. The comparison is case-sensitive—that is, “Alphabet” and
    “alphabet” are not considered equal. The `strnatcmp()` function uses a “natural
    order” algorithm—numbers in the strings are compared more naturally than computers
    normally do. For example, the values `"1"`, `"10"`, and `"2"` are sorted in that
    order by `strcmp()`, but `strnatcmp()` orders them `"1"`, `"2"`, and `"10"`.
  id: totrans-3176
  prefs: []
  type: TYPE_NORMAL
  zh: 比较两个字符串；如果*one*小于*two*，返回一个小于零的数字，如果两个字符串相等，则返回`0`，如果*one*大于*two*，则返回一个大于零的数字。比较时区分大小写，即“Alphabet”和“alphabet”不被视为相等。`strnatcmp()`函数使用“自然顺序”算法——字符串中的数字比计算机通常更自然地比较。例如，值为`"1"`，`"10"`和`"2"`按照`strcmp()`的顺序排序，但`strnatcmp()`按`"1"`，`"2"`和`"10"`的顺序排序。
- en: strncasecmp
  id: totrans-3177
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: strncasecmp
- en: '`int strncasecmp(string` *one*`, string` *two*`, int` *length*`)`'
  id: totrans-3178
  prefs: []
  type: TYPE_NORMAL
  zh: '`int strncasecmp(string` *one*`, string` *two*`, int` *length*`)`'
- en: Compares two strings; returns a number less than zero if *one* is less than
    *two*, `0` if the two strings are equal, and a number greater than zero if *one*
    is greater than *two*. The comparison is case-insensitive—that is, “Alphabet”
    and “alphabet” are considered equal. This function is a case-insensitive version
    of `strcmp()`. If either string is shorter than *length* characters, the length
    of that string determines how many characters are compared.
  id: totrans-3179
  prefs: []
  type: TYPE_NORMAL
  zh: 比较两个字符串；如果*one*小于*two*，返回一个小于零的数字，如果两个字符串相等，则返回`0`，如果*one*大于*two*，则返回一个大于零的数字。比较时不区分大小写，即“Alphabet”和“alphabet”被视为相等。这个函数是`strcmp()`的不区分大小写版本。如果任一字符串短于*length*个字符，则该字符串的长度决定要比较的字符数。
- en: strncmp
  id: totrans-3180
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: strncmp
- en: '`int strncmp(string` *one*`, string` *two*`[, int` *length*`])`'
  id: totrans-3181
  prefs: []
  type: TYPE_NORMAL
  zh: '`int strncmp(string` *one*`, string` *two*`[, int` *length*`])`'
- en: Compares two strings; returns a number less than zero if *one* is less than
    *two*, `0` if the two strings are equal, and a number greater than zero if *one*
    is greater than *two*. The comparison is case-sensitive—that is, “Alphabet” and
    “alphabet” are not considered equal. If specified, no more than *length* characters
    are compared. If either string is shorter than *length* characters, the length
    of that string determines how many characters are compared.
  id: totrans-3182
  prefs: []
  type: TYPE_NORMAL
  zh: 比较两个字符串；如果*one*小于*two*，返回一个小于零的数字，如果两个字符串相等，则返回`0`，如果*one*大于*two*，则返回一个大于零的数字。比较时区分大小写，即“Alphabet”和“alphabet”不被视为相等。如果指定了*length*，则最多比较*length*个字符。如果任一字符串短于*length*个字符，则该字符串的长度决定要比较的字符数。
- en: strpbrk
  id: totrans-3183
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: strpbrk
- en: '`string strpbrk(string` *string*`, string` *characters*`)`'
  id: totrans-3184
  prefs: []
  type: TYPE_NORMAL
  zh: '`string strpbrk(string` *string*`, string` *characters*`)`'
- en: Returns a string consisting of the substring of *string*, starting from the
    position of the first instance of a character from *characters* in *string* to
    the end of the string, or `false` if none of the characters in *characters* is
    found in *string*.
  id: totrans-3185
  prefs: []
  type: TYPE_NORMAL
  zh: 返回由*string*的子字符串组成的字符串，从*characters*中的字符在*string*中第一次出现的位置开始，直到字符串末尾，如果*string*中没有*characters*中的字符，则返回`false`。
- en: strpos
  id: totrans-3186
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: strpos
- en: '`int strpos(string` *string*`, string` *value*`[, int` *offset*`])`'
  id: totrans-3187
  prefs: []
  type: TYPE_NORMAL
  zh: '`int strpos(string` *string*`, string` *value*`[, int` *offset*`])`'
- en: Returns the position of the first occurrence of *value* in *string*. If specified,
    the function begins its search at position *offset*. Returns `false` if *value*
    is not found.
  id: totrans-3188
  prefs: []
  type: TYPE_NORMAL
  zh: 返回*string*中*value*第一次出现的位置。如果指定*offset*，则从该位置开始搜索。如果未找到*value*，则返回`false`。
- en: strptime
  id: totrans-3189
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: strptime
- en: '`array strptime(string` *date*`, string` *format*`)`'
  id: totrans-3190
  prefs: []
  type: TYPE_NORMAL
  zh: '`array strptime(string` *date*`, string` *format*`)`'
- en: 'Parses a time and date according to the *format* string and the current locale.
    The format uses the same format as `strftime()`. Returns an associative array
    with information about the parsed time containing the following elements:'
  id: totrans-3191
  prefs: []
  type: TYPE_NORMAL
  zh: 根据*format*字符串和当前区域设置解析时间和日期。格式使用与`strftime()`相同的格式。返回一个关联数组，包含有关解析时间的信息，包括以下元素：
- en: '| `tm_sec` | Seconds |'
  id: totrans-3192
  prefs: []
  type: TYPE_TB
  zh: '| `tm_sec` | 秒钟 |'
- en: '| `tm_min` | Minutes |'
  id: totrans-3193
  prefs: []
  type: TYPE_TB
  zh: '| `tm_min` | 分钟 |'
- en: '| `tm_hour` | Hours |'
  id: totrans-3194
  prefs: []
  type: TYPE_TB
  zh: '| `tm_hour` | 小时 |'
- en: '| `tm_mday` | Day of the month |'
  id: totrans-3195
  prefs: []
  type: TYPE_TB
  zh: '| `tm_mday` | 月份中的某一天 |'
- en: '| `tm_wday` | Numeric day of the week (Sunday is 0) |'
  id: totrans-3196
  prefs: []
  type: TYPE_TB
  zh: '| `tm_wday` | 数字表示的星期几（星期天为0） |'
- en: '| `tm_mon` | Month |'
  id: totrans-3197
  prefs: []
  type: TYPE_TB
  zh: '| `tm_mon` | 月份 |'
- en: '| `tm_year` | Year |'
  id: totrans-3198
  prefs: []
  type: TYPE_TB
  zh: '| `tm_year` | 年份 |'
- en: '| `tm_yday` | Day of the year |'
  id: totrans-3199
  prefs: []
  type: TYPE_TB
  zh: '| `tm_yday` | 年中的某一天 |'
- en: '| `unparsed` | The portion of *date* that was not parsed according to the given
    format |'
  id: totrans-3200
  prefs: []
  type: TYPE_TB
  zh: '| `unparsed` | 未按照给定格式解析的*date*部分 |'
- en: strrchr
  id: totrans-3201
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: strrchr
- en: '`string strrchr(string` *string*`, string` *character*`)`'
  id: totrans-3202
  prefs: []
  type: TYPE_NORMAL
  zh: '`string strrchr(string` *string*`, string` *character*`)`'
- en: Returns the portion of *string* from the last occurrence of *character* until
    the end of *string*. If *character* is not found, the function returns `false`.
    If *character* contains more than one character, only the first is used.
  id: totrans-3203
  prefs: []
  type: TYPE_NORMAL
  zh: 返回从*string*中*character*的最后一次出现直到字符串末尾的部分。如果未找到*character*，则函数返回`false`。如果*character*包含多个字符，则只使用第一个字符。
- en: strrev
  id: totrans-3204
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: strrev
- en: '`string strrev(string` *string*`)`'
  id: totrans-3205
  prefs: []
  type: TYPE_NORMAL
  zh: '`string strrev(string` *string*`)`'
- en: Returns a string containing the characters of *string* in reverse order.
  id: totrans-3206
  prefs: []
  type: TYPE_NORMAL
  zh: 返回*string*的字符顺序反转后的字符串。
- en: strripos
  id: totrans-3207
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: strripos
- en: '`int strripos(string` *string*`, string` *search*`[, int` *offset*`])`'
  id: totrans-3208
  prefs: []
  type: TYPE_NORMAL
  zh: '`int strripos(string` *string*`, string` *search*`[, int` *offset*`])`'
- en: Returns the position of the last occurrence of *search* in *string* using a
    case-insensitive search, or `false` if *search* is not found. If specified and
    positive, the search begins *offset* characters from the start of *string*. If
    specified and negative, the search begins *offset* characters from the end of
    *string*. This function is a case-insensitive version of `strrpos()`.
  id: totrans-3209
  prefs: []
  type: TYPE_NORMAL
  zh: 返回使用不区分大小写搜索在*string*中*search*的最后一次出现的位置，如果未找到*search*则返回`false`。如果指定且为正，则搜索从*string*开头的*offset*字符开始。如果指定且为负，则从*string*末尾的*offset*字符开始搜索。此函数是`strrpos()`的不区分大小写版本。
- en: strrpos
  id: totrans-3210
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: strrpos
- en: '`int strrpos(string` *string*`, string` *search*`[, int` *offset*`])`'
  id: totrans-3211
  prefs: []
  type: TYPE_NORMAL
  zh: '`int strrpos(string` *string*`, string` *search*`[, int` *offset*`])`'
- en: Returns the position of the last occurrence of *search* in *string*, or `false`
    if *search* is not found. If specified and positive, the search begins *offset*
    characters from the start of *string*. If specified and negative, the search begins
    *offset* characters from the end of *string*.
  id: totrans-3212
  prefs: []
  type: TYPE_NORMAL
  zh: 返回*string*中*search*最后一次出现的位置，如果未找到*search*则返回`false`。如果指定且为正，则搜索从*string*开头的*offset*字符开始。如果指定且为负，则从*string*末尾的*offset*字符开始搜索。
- en: strspn
  id: totrans-3213
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: strspn
- en: '`int strspn(string` *string*`, string` *characters*`[, int` *offset*`[, int`
    *length*`]])`'
  id: totrans-3214
  prefs: []
  type: TYPE_NORMAL
  zh: '`int strspn(string` *string*`, string` *characters*`[, int` *offset*`[, int`
    *length*`]])`'
- en: Returns the length of the substring in *string* that consists solely of characters
    in *characters*. If *offset* is positive, the search starts at that character;
    if it is negative, the substring starts at the character *offset* characters from
    the string’s end. If *length* is given and is positive, that many characters from
    the start of the substring are checked. If *length* is given and is negative,
    the check ends *length* characters from the end of *string*.
  id: totrans-3215
  prefs: []
  type: TYPE_NORMAL
  zh: 返回*string*中仅包含*characters*中字符的子字符串的长度。如果*offset*为正，则搜索从该字符开始；如果为负，则子字符串从字符串末尾的*offset*字符开始。如果指定*length*且为正，则从子字符串开头检查指定数量的字符。如果指定*length*且为负，则检查从子字符串末尾开始的*length*个字符。
- en: strstr
  id: totrans-3216
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: strstr
- en: '`string strstr(string` *string*`, string` *character*`[, bool` *before*`])`'
  id: totrans-3217
  prefs: []
  type: TYPE_NORMAL
  zh: '`string strstr(string` *string*`, string` *character*`[, bool` *before*`])`'
- en: Returns the portion of *string* from the first occurrence of *character* until
    the end of *string*, or from the first occurrence of *character* until the beginning
    of *string* if *before* is specified and `true`. If *character* is not found,
    the function returns `false`. If *character* contains more than one character,
    only the first is used.
  id: totrans-3218
  prefs: []
  type: TYPE_NORMAL
  zh: 返回从*string*中*character*的第一次出现直到*string*的末尾的部分，或者如果指定了*before*并且为`true`，则从*string*中*character*的第一次出现直到*string*的开头。如果未找到*character*，则函数返回`false`。如果*character*包含多个字符，则只使用第一个字符。
- en: strtok
  id: totrans-3219
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: strtok
- en: '`string strtok(string` *string*`, string` *token*`) string strtok(string` *token*`)`'
  id: totrans-3220
  prefs: []
  type: TYPE_NORMAL
  zh: '`string strtok(string` *string*`, string` *token*`) string strtok(string` *token*`)`'
- en: 'Breaks *string* into tokens separated by any of the characters in *token* and
    returns the next token found. The first time you call `strtok()` on a string,
    use the first function prototype; afterward, use the second, providing only the
    tokens. The function contains an internal pointer for each string it is called
    with. For example:'
  id: totrans-3221
  prefs: []
  type: TYPE_NORMAL
  zh: 将*string*按*token*中的任何字符分隔成标记，并返回找到的下一个标记。第一次在字符串上调用`strtok()`时，请使用第一个函数原型；之后，只需提供标记即可使用第二个原型。该函数为每个调用它的字符串保留内部指针。例如：
- en: '[PRE16]'
  id: totrans-3222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: strtolower
  id: totrans-3223
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: strtolower
- en: '`string strtolower(string` *string*`)`'
  id: totrans-3224
  prefs: []
  type: TYPE_NORMAL
  zh: '`string strtolower(string` *string*`)`'
- en: Returns *string* with all alphabetic characters converted to lowercase. The
    table used for converting characters is locale-specific.
  id: totrans-3225
  prefs: []
  type: TYPE_NORMAL
  zh: 返回*string*，其中所有字母字符均转换为小写。用于转换字符的表是特定于区域设置的。
- en: strtotime
  id: totrans-3226
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: strtotime
- en: '`int strtotime(string` *time*`[, int` *timestamp*`])`'
  id: totrans-3227
  prefs: []
  type: TYPE_NORMAL
  zh: '`int strtotime(string` *time*`[, int` *timestamp*`])`'
- en: Converts an English description of a time and date into a Unix timestamp value.
    Optionally, a *timestamp* can be given that the function uses as the “now” value;
    if this value is omitted, the current date and time is used. Returns `false` if
    the value could not be converted into a valid timestamp.
  id: totrans-3228
  prefs: []
  type: TYPE_NORMAL
  zh: 将时间和日期的英文描述转换为Unix时间戳值。可选地，可以给定一个*timestamp*作为函数使用的“现在”值；如果省略此值，则使用当前日期和时间。如果无法将值转换为有效时间戳，则返回`false`。
- en: 'The descriptive string can be in a number of formats. For example, all of the
    following will work:'
  id: totrans-3229
  prefs: []
  type: TYPE_NORMAL
  zh: 描述字符串可以采用多种格式。例如，以下所有格式都可以使用：
- en: '[PRE17]'
  id: totrans-3230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: strtoupper
  id: totrans-3231
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: strtoupper
- en: '`string strtoupper(string` *string*`)`'
  id: totrans-3232
  prefs: []
  type: TYPE_NORMAL
  zh: '`string strtoupper(string` *string*`)`'
- en: Returns *string* with all alphabetic characters converted to uppercase. The
    table used for converting characters is locale-specific.
  id: totrans-3233
  prefs: []
  type: TYPE_NORMAL
  zh: 返回*string*，其中所有字母字符均转换为大写。用于转换字符的表是特定于区域设置的。
- en: strtr
  id: totrans-3234
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: strtr
- en: '`string strtr(string` *string*`, string` *from*`, string` *to*`) string strtr(string`
    *string*`, array` *replacements*`)`'
  id: totrans-3235
  prefs: []
  type: TYPE_NORMAL
  zh: '`string strtr(string` *string*`, string` *from*`, string` *to*`) string strtr(string`
    *string*`, array` *replacements*`)`'
- en: When given three arguments, returns a string created by translating in *string*
    every occurrence of a character in *from* to the character in *to* with the same
    position. When given two arguments, returns a string created by translating occurrences
    of the keys in *replacements* in *string* with the corresponding values in *replacements*.
  id: totrans-3236
  prefs: []
  type: TYPE_NORMAL
  zh: 当给定三个参数时，返回一个字符串，该字符串通过将*string*中*from*中每个字符的每次出现转换为*to*中相应位置的字符而创建。当给定两个参数时，返回一个字符串，该字符串通过使用*replacements*中的键在*string*中替换键的每个出现来创建。与*replacements*中的相应值。
- en: strval
  id: totrans-3237
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: strval
- en: '`string strval(mixed` *value*`)`'
  id: totrans-3238
  prefs: []
  type: TYPE_NORMAL
  zh: '`string strval(mixed` *value*`)`'
- en: Returns the string equivalent for *value*. If value is an object and that object
    implements the `__toString()` method, it returns the value of that method. Otherwise,
    if *value* is an object that doesn’t implement `__toString()` or is an array,
    the function returns an empty string.
  id: totrans-3239
  prefs: []
  type: TYPE_NORMAL
  zh: 返回*value*的字符串等效值。如果*value*是一个对象并且该对象实现了`__toString()`方法，则返回该方法的值。否则，如果*value*是一个没有实现`__toString()`方法的对象或者是一个数组，则函数返回空字符串。
- en: substr
  id: totrans-3240
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: substr
- en: '`string substr(string` *string*`, int` *offset*`[, int` *length*`])`'
  id: totrans-3241
  prefs: []
  type: TYPE_NORMAL
  zh: '`string substr(string` *string*`, int` *offset*`[, int` *length*`])`'
- en: Returns the substring of *string*. If *offset* is positive, the substring starts
    at that character; if it is negative, the substring starts at the character *offset*
    characters from the string’s end. If *length* is given and is positive, that many
    characters from the start of the substring are returned. If *length* is given
    and is negative, the substring ends *length* characters from the end of *string*.
    If *length* is not given, the substring contains all characters to the end of
    *string*.
  id: totrans-3242
  prefs: []
  type: TYPE_NORMAL
  zh: 返回*string*的子字符串。如果*offset*为正数，则子字符串从该字符开始；如果为负数，则子字符串从字符串末尾的*offset*字符开始。如果给定*length*且为正数，则从子字符串的开头返回那么多字符。如果给定*length*且为负数，则子字符串在*string*末尾的*length*字符处结束。如果未给出*length*，则子字符串包含*string*的所有字符直到末尾。
- en: substr_compare
  id: totrans-3243
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: substr_compare
- en: '`int substr_compare(string` *first*`, string` *second*`, string` *offset*`[,
    int` *length*`[, bool` *case_insensitivity*`]])`'
  id: totrans-3244
  prefs: []
  type: TYPE_NORMAL
  zh: '`int substr_compare(string` *first*`, string` *second*`, string` *offset*`[,
    int` *length*`[, bool` *case_insensitivity*`]])`'
- en: Compares *first*, starting at the position *offset*, to *second*. If *length*
    is specified, a maximum of that many characters are compared. Finally, if *case_insensitivity*
    is specified and `true`, the comparison is case-insensitive. Returns a number
    less than zero if the substring of *first* is less than *second*, `0` if they
    are equal, and a number greater than zero if the substring of *first* is greater
    than *second*.
  id: totrans-3245
  prefs: []
  type: TYPE_NORMAL
  zh: 比较*first*从*offset*位置开始的子字符串与*second*。如果指定了*length*，则最多比较那么多个字符。最后，如果指定了*case_insensitivity*且为`true`，则比较是不区分大小写的。如果*first*的子字符串小于*second*，则返回小于零的数，如果它们相等，则返回`0`，如果*first*的子字符串大于*second*，则返回大于零的数。
- en: substr_count
  id: totrans-3246
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: substr_count
- en: '`int substr_count(string` *string*`, string` *search*`[, int` *offset*`[, int`
    *length*`]])`'
  id: totrans-3247
  prefs: []
  type: TYPE_NORMAL
  zh: '`int substr_count(string` *string*`, string` *search*`[, int` *offset*`[, int`
    *length*`]])`'
- en: Returns the number of times *search* appears in *string*. If *offset* is provided,
    the search begins at that character offset for at most *length* characters, or
    until the end of the string if *length* is not provided.
  id: totrans-3248
  prefs: []
  type: TYPE_NORMAL
  zh: 返回*string*中出现*search*的次数。如果提供了*offset*，则搜索从该字符偏移开始，最多搜索*length*个字符，或者如果未提供*length*，则搜索到字符串末尾为止。
- en: substr_replace
  id: totrans-3249
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: substr_replace
- en: '`string substr_replace(mixed` *string*`, mixed` *replace*`, mixed` *offset*`[,
    mixed` *length*`])`'
  id: totrans-3250
  prefs: []
  type: TYPE_NORMAL
  zh: '`string substr_replace(mixed` *string*`, mixed` *replace*`, mixed` *offset*`[,
    mixed` *length*`])`'
- en: Replaces a substring in *string* with *replace*. The substring replaced is selected
    using the same rules as those of `substr()`. If string is an array, replacements
    take place on each string within the array. In this case, *replace*, *offset*,
    and *length* can either be scalar values, which are used for all strings in *string*,
    or arrays of values to be used for each corresponding value in *string*.
  id: totrans-3251
  prefs: []
  type: TYPE_NORMAL
  zh: 用*replace*替换*string*中的子字符串。选择要替换的子字符串的规则与`substr()`相同。如果*string*是一个数组，则在数组中的每个字符串上进行替换。在这种情况下，*replace*、*offset*和*length*可以是标量值，这些值用于*string*中的所有字符串，或者是值数组，用于每个*string*中相应的值。
- en: symlink
  id: totrans-3252
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: symlink
- en: '`bool symlink(string` *path*`, string` *new*`)`'
  id: totrans-3253
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool symlink(string` *path*`, string` *new*`)`'
- en: Creates a symbolic link to *path* at the path *new*. Returns `true` if the link
    was successfully created and `false` if not.
  id: totrans-3254
  prefs: []
  type: TYPE_NORMAL
  zh: 在路径*new*处创建对*path*的符号链接。如果成功创建链接则返回`true`，否则返回`false`。
- en: syslog
  id: totrans-3255
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: syslog
- en: '`bool syslog(int` *priority*`, string` *message*`)`'
  id: totrans-3256
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool syslog(int` *priority*`, string` *message*`)`'
- en: 'Sends an error message to the system logging facility. On Unix systems, this
    is `syslog(3)`; on Windows NT, the messages are logged in the NT Event Log. The
    message is logged with the given *priority*, which is one of the following (listed
    in decreasing order of priority):'
  id: totrans-3257
  prefs: []
  type: TYPE_NORMAL
  zh: 将错误消息发送到系统日志设施。在Unix系统上，这是`syslog(3)`；在Windows NT上，消息记录在NT事件日志中。使用给定的*priority*记录消息，该*priority*是以下之一（按优先级降序排列）：
- en: '| `LOG_EMERG` | Error has caused the system to be unstable |'
  id: totrans-3258
  prefs: []
  type: TYPE_TB
  zh: '| `LOG_EMERG` | 错误导致系统不稳定 |'
- en: '| `LOG_ALERT` | Error notes a situation that requires immediate action |'
  id: totrans-3259
  prefs: []
  type: TYPE_TB
  zh: '| `LOG_ALERT` | 错误指出需要立即采取行动的情况 |'
- en: '| `LOG_CRIT` | Error is a critical condition |'
  id: totrans-3260
  prefs: []
  type: TYPE_TB
  zh: '| `LOG_CRIT` | 错误是临界条件 |'
- en: '| `LOG_ERR` | Error is a general error condition |'
  id: totrans-3261
  prefs: []
  type: TYPE_TB
  zh: '| `LOG_ERR` | 错误是一般错误条件 |'
- en: '| `LOG_WARNING` | Error message is a warning |'
  id: totrans-3262
  prefs: []
  type: TYPE_TB
  zh: '| `LOG_WARNING` | 错误消息是警告 |'
- en: '| `LOG_NOTICE` | Error message is a normal, but significant, condition |'
  id: totrans-3263
  prefs: []
  type: TYPE_TB
  zh: '| `LOG_NOTICE` | 错误消息是正常但重要的情况 |'
- en: '| `LOG_INFO` | Error is an informational message that requires no action |'
  id: totrans-3264
  prefs: []
  type: TYPE_TB
  zh: '| `LOG_INFO` | 错误是一个不需要采取行动的信息性消息 |'
- en: '| `LOG_DEBUG` | Error is for debugging only |'
  id: totrans-3265
  prefs: []
  type: TYPE_TB
  zh: '| `LOG_DEBUG` | 错误仅用于调试 |'
- en: If *message* contains the characters `%m`, they are replaced with the current
    error message, if any is set. Returns `true` if the logging succeeded and `false`
    if a failure occurred.
  id: totrans-3266
  prefs: []
  type: TYPE_NORMAL
  zh: 如果*message*包含字符`%m`，则用当前设置的任何错误消息替换它。如果日志记录成功，则返回`true`，如果失败则返回`false`。
- en: system
  id: totrans-3267
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: system
- en: '`string system(string` *command*`[, int &`*return*`])`'
  id: totrans-3268
  prefs: []
  type: TYPE_NORMAL
  zh: '`string system(string` *command*`[, int &`*return*`])`'
- en: Executes *command* via the shell and returns the last line of output from the
    command’s result. If *return* is specified, it is set to the return status of
    the command.
  id: totrans-3269
  prefs: []
  type: TYPE_NORMAL
  zh: 通过shell执行*command*并返回命令结果的最后一行输出。如果指定了*return*，则将其设置为命令的返回状态。
- en: sys_getloadavg
  id: totrans-3270
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: sys_getloadavg
- en: '`array sys_getloadavg()`'
  id: totrans-3271
  prefs: []
  type: TYPE_NORMAL
  zh: '`array sys_getloadavg()`'
- en: Returns an array containing the load average of the machine running the current
    script, sampled over the last 1, 5, and 15 minutes.
  id: totrans-3272
  prefs: []
  type: TYPE_NORMAL
  zh: 返回包含运行当前脚本的机器上最后1分钟、5分钟和15分钟内采样的平均负载的数组。
- en: sys_get_temp_dir
  id: totrans-3273
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: sys_get_temp_dir
- en: '`string sys_get_temp_dir()`'
  id: totrans-3274
  prefs: []
  type: TYPE_NORMAL
  zh: '`string sys_get_temp_dir()`'
- en: Returns the path of the directory where temporary files, such as those created
    by `tmpfile()` and `tempname()`, are created.
  id: totrans-3275
  prefs: []
  type: TYPE_NORMAL
  zh: 返回临时文件所在的目录路径，例如由`tmpfile()`和`tempname()`创建的文件。
- en: tan
  id: totrans-3276
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: tan
- en: '`float tan(float` *value*`)`'
  id: totrans-3277
  prefs: []
  type: TYPE_NORMAL
  zh: '`float tan(float` *value*`)`'
- en: Returns the tangent of *value* in radians.
  id: totrans-3278
  prefs: []
  type: TYPE_NORMAL
  zh: 返回*value*的弧度的正切值。
- en: tanh
  id: totrans-3279
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: tanh
- en: '`float tanh(float` *value*`)`'
  id: totrans-3280
  prefs: []
  type: TYPE_NORMAL
  zh: '`float tanh(float` *value*`)`'
- en: Returns the hyperbolic tangent of *value* in radians.
  id: totrans-3281
  prefs: []
  type: TYPE_NORMAL
  zh: 返回*value*的弧度的双曲正切值。
- en: tempnam
  id: totrans-3282
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: tempnam
- en: '`string tempnam(string` *path*`, string` *prefix*`)`'
  id: totrans-3283
  prefs: []
  type: TYPE_NORMAL
  zh: '`string tempnam(string` *path*`, string` *prefix*`)`'
- en: Generates and returns a unique filename in the directory *path*. If *path* does
    not exist, the resulting temporary file may be located in the system’s temporary
    directory. The filename is prefixed with *prefix*. Returns `false` if the operation
    could not be performed.
  id: totrans-3284
  prefs: []
  type: TYPE_NORMAL
  zh: 在目录*path*中生成并返回唯一文件名。如果*path*不存在，则生成的临时文件可能位于系统的临时目录中。文件名以*prefix*为前缀。如果操作无法执行，则返回`false`。
- en: time
  id: totrans-3285
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: time
- en: '`int time()`'
  id: totrans-3286
  prefs: []
  type: TYPE_NORMAL
  zh: '`int time()`'
- en: Returns the number of seconds since the Unix epoch (January 1, 1970, 00:00:00
    GMT).
  id: totrans-3287
  prefs: []
  type: TYPE_NORMAL
  zh: 返回自Unix纪元（1970年1月1日00:00:00 GMT）以来的秒数。
- en: time_nanosleep
  id: totrans-3288
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: time_nanosleep
- en: '`bool time_nanosleep(int` *seconds*`, int` *nanoseconds*`)`'
  id: totrans-3289
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool time_nanosleep(int` *seconds*`, int` *nanoseconds*`)`'
- en: 'Pauses execution of the current script for *seconds* seconds and *nanoseconds*
    nanoseconds. Returns `true` on success and `false` on a failure; if the delay
    was interrupted by a signal, an associative array containing the following values
    is returned instead:'
  id: totrans-3290
  prefs: []
  type: TYPE_NORMAL
  zh: 暂停当前脚本的执行*seconds*秒和*nanoseconds*纳秒。成功返回`true`，失败返回`false`；如果延迟被信号中断，则返回一个包含以下值的关联数组。
- en: '| `seconds` | Number of seconds remaining |'
  id: totrans-3291
  prefs: []
  type: TYPE_TB
  zh: '| `seconds` | 剩余的秒数 |'
- en: '| `nanoseconds` | Number of nanoseconds remaining |'
  id: totrans-3292
  prefs: []
  type: TYPE_TB
  zh: '| `nanoseconds` | 剩余的纳秒数 |'
- en: time_sleep_until
  id: totrans-3293
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: time_sleep_until
- en: '`bool time_sleep_until(float` *timestamp*`)`'
  id: totrans-3294
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool time_sleep_until(float` *timestamp*`)`'
- en: Pauses execution of the current script until the time *timestamp* passes. Returns
    `true` on success and `false` on a failure.
  id: totrans-3295
  prefs: []
  type: TYPE_NORMAL
  zh: 暂停当前脚本的执行，直到时间*timestamp*过去。成功返回`true`，失败返回`false`。
- en: timezone_name_from_abbr
  id: totrans-3296
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: timezone_name_from_abbr
- en: '`string timezone_name_from_abbr(string` *name*`[, int` *gmtOffset*`[, int`
    *dst*`]])`'
  id: totrans-3297
  prefs: []
  type: TYPE_NORMAL
  zh: '`string timezone_name_from_abbr(string` *name*`[, int` *gmtOffset*`[, int`
    *dst*`]])`'
- en: Returns the name of a time zone given in *name*, or `false` if no appropriate
    time zone could be found. If given, *gmtOffset* is an integer offset from GMT
    used as a hint to find the appropriate time zone. If given, *dst* indicates whether
    the time zone has Daylight Saving Time or not as a hint to find the appropriate
    time zone.
  id: totrans-3298
  prefs: []
  type: TYPE_NORMAL
  zh: 返回给定*name*的时区名称，如果找不到合适的时区，则返回`false`。如果给定*gmtOffset*，则它是从GMT的整数偏移量，用作查找合适时区的提示。如果给定*dst*，则指示时区是否具有夏令时作为查找合适时区的提示。
- en: timezone_version_get
  id: totrans-3299
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: timezone_version_get
- en: '`string timezone_version_get()`'
  id: totrans-3300
  prefs: []
  type: TYPE_NORMAL
  zh: '`string timezone_version_get()`'
- en: Returns the version of the current time zone database.
  id: totrans-3301
  prefs: []
  type: TYPE_NORMAL
  zh: 返回当前时区数据库的版本。
- en: tmpfile
  id: totrans-3302
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: tmpfile
- en: '`int tmpfile()`'
  id: totrans-3303
  prefs: []
  type: TYPE_NORMAL
  zh: '`int tmpfile()`'
- en: Creates a temporary file with a unique name, opens it with read-write privileges,
    and returns a resource to the file, or `false` if an error occurred. The file
    is automatically deleted when closed with `fclose()` or at the end of the current
    script.
  id: totrans-3304
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个具有唯一名称的临时文件，以读写权限打开它，并返回文件的资源，如果发生错误则返回`false`。关闭`fclose()`或当前脚本结束时自动删除文件。
- en: token_get_all
  id: totrans-3305
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: token_get_all
- en: '`array token_get_all(string` *source*`)`'
  id: totrans-3306
  prefs: []
  type: TYPE_NORMAL
  zh: '`array token_get_all(string` *source*`)`'
- en: Parses the PHP code *source* into PHP language tokens and returns them as an
    array. Each element in the array contains a single character token or a three-element
    array containing, in order, the token index, the source string representing the
    token, and the line number the *source* appeared in source.
  id: totrans-3307
  prefs: []
  type: TYPE_NORMAL
  zh: 将PHP代码*source*解析为PHP语言标记，并将它们作为数组返回。数组中的每个元素包含一个单字符标记或一个包含以下顺序的三元素数组：标记索引、表示标记的源字符串和*source*中出现的行号。
- en: token_name
  id: totrans-3308
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: token_name
- en: '`string token_name(int` *token*`)`'
  id: totrans-3309
  prefs: []
  type: TYPE_NORMAL
  zh: '`string token_name(int` *token*`)`'
- en: Returns the symbolic name of the PHP language token identified by *token*.
  id: totrans-3310
  prefs: []
  type: TYPE_NORMAL
  zh: 返回由*token*标识的PHP语言标记的符号名称。
- en: touch
  id: totrans-3311
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: touch
- en: '`bool touch(string` *path*`[, int` *touch_time*`[, int` *access_time*`]])`'
  id: totrans-3312
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool touch(string` *path*`[, int` *touch_time*`[, int` *access_time*`]])`'
- en: Sets the modification date of *path* to *touch_time* (a Unix timestamp value)
    and the access time of *path* to *access_time*. If not specified, *touch_time*
    defaults to the current time, while *access_time* defaults to *touch_time* (or
    the current time if that value is also not supplied). If the file does not exist,
    it is created. Returns `true` if the function completed without error and `false`
    if an error occurred.
  id: totrans-3313
  prefs: []
  type: TYPE_NORMAL
  zh: 将*path*的修改日期设置为*touch_time*（Unix时间戳值），将*path*的访问时间设置为*access_time*。如果未指定，*touch_time*默认为当前时间，而*access_time*默认为*touch_time*（如果也未提供该值，则为当前时间）。如果文件不存在，则创建该文件。如果函数完成时没有错误，则返回`true`；如果发生错误，则返回`false`。
- en: trait_exists
  id: totrans-3314
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: trait_exists
- en: '`bool trait_exists(string` *name*`[, bool` *autoload*`])`'
  id: totrans-3315
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool trait_exists(string` *name*`[, bool` *autoload*`])`'
- en: Returns `true` if a trait with the same name as the string has been defined;
    if not, it returns `false`. The comparison for trait names is case-insensitive.
    If `autoload` is set and is `true`, the autoloader attempts to load the trait
    before checking its existence.
  id: totrans-3316
  prefs: []
  type: TYPE_NORMAL
  zh: 如果定义了与字符串同名的特性，则返回`true`；否则返回`false`。对特性名称的比较不区分大小写。如果设置了`autoload`并且为`true`，则在检查特性存在之前，自动加载器会尝试加载该特性。
- en: trigger_error
  id: totrans-3317
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: trigger_error
- en: '`void trigger_error(string` *error*`[, int` *type*`])`'
  id: totrans-3318
  prefs: []
  type: TYPE_NORMAL
  zh: '`void trigger_error(string` *error*`[, int` *type*`])`'
- en: 'Triggers an error condition; if the type is not given, it defaults to `E_USER_NOTICE`.
    The following types are valid:'
  id: totrans-3319
  prefs: []
  type: TYPE_NORMAL
  zh: 触发错误条件；如果未给出类型，则默认为`E_USER_NOTICE`。以下类型是有效的：
- en: '| `E_USER_ERROR` | User-generated error |'
  id: totrans-3320
  prefs: []
  type: TYPE_TB
  zh: '| `E_USER_ERROR` | 用户生成的错误 |'
- en: '| `E_USER_WARNING` | User-generated warning |'
  id: totrans-3321
  prefs: []
  type: TYPE_TB
  zh: '| `E_USER_WARNING` | 用户生成的警告 |'
- en: '| `E_USER_NOTICE` (default) | User-generated notice |'
  id: totrans-3322
  prefs: []
  type: TYPE_TB
  zh: '| `E_USER_NOTICE`（默认） | 用户生成的通知 |'
- en: '| `E_USER_DEPRECATED` | User-generated deprecated call warning |'
  id: totrans-3323
  prefs: []
  type: TYPE_TB
  zh: '| `E_USER_DEPRECATED` | 用户生成的弃用调用警告 |'
- en: If longer than 1,024 characters, *error* is truncated to 1,024 characters.
  id: totrans-3324
  prefs: []
  type: TYPE_NORMAL
  zh: 如果长于1,024个字符，则将*error*截断为1,024个字符。
- en: trim
  id: totrans-3325
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: trim
- en: '`string trim(string` *string*`[, string` *characters*`])`'
  id: totrans-3326
  prefs: []
  type: TYPE_NORMAL
  zh: '`string trim(string` *string*`[, string` *characters*`])`'
- en: Returns *string* with every whitespace character in *characters* stripped from
    the beginning and end of the string. You can specify a range of characters to
    strip using `..` within the string. For example, `"a..z"` would strip each lowercase
    alphabetical character. If *characters* is not supplied, `\n`, `\r`, `\t`, `\x0B`,
    `\0`, and spaces are stripped.
  id: totrans-3327
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的*string*，从*characters*的开头和结尾剥离每个空白字符。您可以使用字符串中的`..`指定要剥离的字符范围。例如，`"a..z"`将剥离每个小写字母字符。如果未提供*characters*，则剥离`\n`、`\r`、`\t`、`\x0B`、`\0`和空格。
- en: uasort
  id: totrans-3328
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: uasort
- en: '`bool uasort(array` *array*`, callable` *function*`)`'
  id: totrans-3329
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool uasort(array` *array*`, callable` *function*`)`'
- en: Sorts an array using a user-defined function, maintaining the keys for the values.
    See [Chapter 5](ch05.xhtml#array) and `usort()` for more information on using
    this function. Returns `true` if the array was successfully sorted, and `false`
    otherwise.
  id: totrans-3330
  prefs: []
  type: TYPE_NORMAL
  zh: 使用用户定义的函数对数组进行排序，保持值的键。有关如何使用此函数的更多信息，请参见[第5章](ch05.xhtml#array)和`usort()`。如果成功排序数组，则返回`true`，否则返回`false`。
- en: ucfirst
  id: totrans-3331
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: ucfirst
- en: '`string ucfirst(string` *string*`)`'
  id: totrans-3332
  prefs: []
  type: TYPE_NORMAL
  zh: '`string ucfirst(string` *string*`)`'
- en: Returns *string* with the first character, if alphabetic, converted to uppercase.
    The table used for converting characters is locale-specific.
  id: totrans-3333
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的*string*，如果是字母的话，将第一个字符转换为大写。用于转换字符的表是特定于语言环境的。
- en: ucwords
  id: totrans-3334
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: ucwords
- en: '`string ucwords(string` *string*`)`'
  id: totrans-3335
  prefs: []
  type: TYPE_NORMAL
  zh: '`string ucwords(string` *string*`)`'
- en: Returns *string* with the first character of each word, if alphabetic, converted
    to uppercase. The table used for converting characters is locale-specific.
  id: totrans-3336
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的*string*，如果是字母的话，将每个单词的第一个字符转换为大写。用于转换字符的表是特定于语言环境的。
- en: uksort
  id: totrans-3337
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: uksort
- en: '`bool uksort(array` *array*`, callable` *function*`)`'
  id: totrans-3338
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool uksort(array` *array*`, callable` *function*`)`'
- en: Sorts an array by keys using a user-defined function, maintaining the keys for
    the values. See [Chapter 5](ch05.xhtml#array) and `usort()` for more information
    on using this function. Returns `true` if the array was successfully sorted, and
    `false` otherwise.
  id: totrans-3339
  prefs: []
  type: TYPE_NORMAL
  zh: 使用用户定义的函数按键对数组进行排序，保持值的键。有关使用此函数的更多信息，请参见[第5章](ch05.xhtml#array)和`usort()`。如果成功对数组进行了排序，则返回`true`，否则返回`false`。
- en: umask
  id: totrans-3340
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: umask
- en: '`int umask([int` *mask*`])`'
  id: totrans-3341
  prefs: []
  type: TYPE_NORMAL
  zh: '`int umask([int` *mask*`])`'
- en: Sets PHP’s default permissions to the value *mask* `& 0777` and returns the
    previous mask if successful, or `false` if an error occurred. The previous default
    permissions are restored at the end of the current script. If *mask* is not supplied,
    the current permissions are returned.
  id: totrans-3342
  prefs: []
  type: TYPE_NORMAL
  zh: 将PHP的默认权限设置为*mask* `& 0777`，并返回前一个掩码（如果成功），或者如果发生错误则返回`false`。在当前脚本结束时将恢复先前的默认权限。如果未提供*mask*，则返回当前权限。
- en: When running on a multithreaded web server (e.g., Apache), use `chmod()` after
    creating a file to change its permissions, rather than this function.
  id: totrans-3343
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行于多线程Web服务器（例如Apache）时，在创建文件后使用`chmod()`来更改其权限，而不是使用此函数。
- en: uniqid
  id: totrans-3344
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: uniqid
- en: '`string uniqid([string` *prefix*`[, bool` *more_entropy*`]])`'
  id: totrans-3345
  prefs: []
  type: TYPE_NORMAL
  zh: '`string uniqid([string` *prefix*`[, bool` *more_entropy*`]])`'
- en: Returns a unique identifier, prefixed with *prefix*, based on the current time
    in microseconds. If *more_entropy* is specified and is `true`, additional random
    characters are added to the end of the string. The resulting string is either
    13 characters (if *more_entropy* is unspecified or `false`) or 23 characters (if
    *more_entropy* is `true`) long.
  id: totrans-3346
  prefs: []
  type: TYPE_NORMAL
  zh: 根据当前微秒级时间生成一个唯一标识符，以*prefix*为前缀。如果指定了*more_entropy*且为`true`，则在字符串末尾添加额外的随机字符。生成的字符串长度为13个字符（如果未指定*more_entropy*或为`false`）或23个字符（如果*more_entropy*为`true`）。
- en: unlink
  id: totrans-3347
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: unlink
- en: '`int unlink(string` *path*`[, resource` *context*`])`'
  id: totrans-3348
  prefs: []
  type: TYPE_NORMAL
  zh: '`int unlink(string` *path*`[, resource` *context*`])`'
- en: Deletes the file *path*, using the streams context *context* if provided. Returns
    `true` if the operation was successful and `false` if not.
  id: totrans-3349
  prefs: []
  type: TYPE_NORMAL
  zh: 使用流上下文*context*（如果提供）删除文件*path*。如果操作成功返回`true`，否则返回`false`。
- en: unpack
  id: totrans-3350
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: unpack
- en: '`array unpack(string` *format*`, string` *data*`)`'
  id: totrans-3351
  prefs: []
  type: TYPE_NORMAL
  zh: '`array unpack(string` *format*`, string` *data*`)`'
- en: Returns an array of values retrieved from the binary string *data*, which was
    previously packed using the `pack()` function and the format *format*. See `pack()`
    for a listing of the format codes to use within *format*.
  id: totrans-3352
  prefs: []
  type: TYPE_NORMAL
  zh: 返回从二进制字符串*data*中检索的值数组，该字符串之前使用`pack()`函数和*format*格式打包。参见`pack()`以获取在*format*中使用的格式代码列表。
- en: unregister_tick_function
  id: totrans-3353
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: unregister_tick_function
- en: '`void unregister_tick_function(string` *name*`)`'
  id: totrans-3354
  prefs: []
  type: TYPE_NORMAL
  zh: '`void unregister_tick_function(string` *name*`)`'
- en: Removes the function *name*, previously set using `register_tick_function()`,
    as a tick function. It will no longer be called during each tick.
  id: totrans-3355
  prefs: []
  type: TYPE_NORMAL
  zh: 移除之前使用`register_tick_function()`设置的函数*name*作为一个tick函数。在每次tick期间将不再调用它。
- en: unserialize
  id: totrans-3356
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: unserialize
- en: '`mixed unserialize(string` *data*`)`'
  id: totrans-3357
  prefs: []
  type: TYPE_NORMAL
  zh: '`mixed unserialize(string` *data*`)`'
- en: Returns the value stored in *data*, which must be a value previously serialized
    using `serialize()`. If the value is an object and that object has a `__wakeup()`
    method, that method is called on the object immediately after reconstructing the
    object.
  id: totrans-3358
  prefs: []
  type: TYPE_NORMAL
  zh: 返回存储在*data*中的值，*data*必须是之前使用`serialize()`序列化的值。如果值是一个对象且该对象有一个`__wakeup()`方法，则在重建对象后立即调用该方法。
- en: unset
  id: totrans-3359
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: unset
- en: '`void unset(mixed` *var*`[, mixed` *var2*`[, ... mixed` *varN*`]])`'
  id: totrans-3360
  prefs: []
  type: TYPE_NORMAL
  zh: '`void unset(mixed` *var*`[, mixed` *var2*`[, ... mixed` *varN*`]])`'
- en: Destroys the given variables. A global variable called within function scope
    only `unset`s the local copy of that variable; to destroy a global variable, you
    must call `unset` on the value in the `$GLOBALS` array instead. A variable in
    function scope passed by reference destroys only the local copy of that variable.
  id: totrans-3361
  prefs: []
  type: TYPE_NORMAL
  zh: 销毁给定的变量。在函数作用域内调用的全局变量仅`unset`该变量的本地副本；要销毁全局变量，必须在`$GLOBALS`数组中的值上调用`unset`。传递的引用方式在函数作用域内仅销毁该变量的本地副本。
- en: urldecode
  id: totrans-3362
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: urldecode
- en: '`string urldecode(string` *url*`)`'
  id: totrans-3363
  prefs: []
  type: TYPE_NORMAL
  zh: '`string urldecode(string` *url*`)`'
- en: Returns a string created from decoding the URI-encoded *url*. Sequences of characters
    beginning with a `%` followed by a hexadecimal number are replaced with the literal
    the sequence represents. In addition, plus signs (`+`) are replaced with spaces.
    See also `rawurlencode()`, which is identical except for its handling of spaces.
  id: totrans-3364
  prefs: []
  type: TYPE_NORMAL
  zh: 返回通过解码URI编码的*url*生成的字符串。以`%`开头并后跟十六进制数的字符序列将被替换为其表示的字面值。此外，加号（`+`）将被替换为空格。参见`rawurlencode()`，其处理空格的方式除外。
- en: urlencode
  id: totrans-3365
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: urlencode
- en: '`string urlencode(string` *url*`)`'
  id: totrans-3366
  prefs: []
  type: TYPE_NORMAL
  zh: '`string urlencode(string` *url*`)`'
- en: Returns a string created by URI encoding *url*. All nonalphanumeric characters
    except dash (`–`), underscore (`_`), and period (`.`) characters in *url* are
    replaced by a sequence of characters beginning with a `%` followed by a hexadecimal
    number; for example, slashes (`/`) are replaced with `%2F`. In addition, any spaces
    in *url* are replaced by plus signs (`+`). See also `rawurlencode()`, which is
    identical except for its handling of spaces.
  id: totrans-3367
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个通过对 *url* 进行 URI 编码创建的字符串。除了破折号 (`–`)、下划线 (`_`) 和句点 (`.`) 字符外，*url* 中的所有非字母数字字符都将被以
    `%` 开头的十六进制数替换；例如，斜杠 (`/`) 将被替换为 `%2F`。此外，*url* 中的任何空格都将被加号 (`+`) 替换。另请参阅 `rawurlencode()`，其除了处理空格外与本函数完全相同。
- en: usleep
  id: totrans-3368
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: usleep
- en: '`void usleep(int` *time*`)`'
  id: totrans-3369
  prefs: []
  type: TYPE_NORMAL
  zh: '`void usleep(int` *time*`)`'
- en: Pauses execution of the current script for *time* microseconds.
  id: totrans-3370
  prefs: []
  type: TYPE_NORMAL
  zh: 暂停当前脚本的执行 *time* 微秒。
- en: usort
  id: totrans-3371
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: usort
- en: '`bool usort(array` *array*`, callable` *function*`)`'
  id: totrans-3372
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool usort(array` *array*`, callable` *function*`)`'
- en: Sorts an array using a user-defined function. The supplied function is called
    with two parameters. It should return an integer less than zero if the first argument
    is less than the second, `0` if the first and second arguments are equal, and
    an integer greater than zero if the first argument is greater than the second.
    The sort order of two elements that compare equal is undefined. See [Chapter 5](ch05.xhtml#array)
    for more information on using this function.
  id: totrans-3373
  prefs: []
  type: TYPE_NORMAL
  zh: 使用用户定义的函数对数组进行排序。提供的函数将使用两个参数调用。如果第一个参数小于第二个参数，则应返回小于零的整数，如果两个参数相等，则返回 `0`，如果第一个参数大于第二个参数，则返回大于零的整数。比较相等的两个元素的排序顺序是未定义的。有关如何使用此函数的更多信息，请参见
    [第五章](ch05.xhtml#array)。
- en: Returns `true` if the function was successful in sorting the array, and `false`
    otherwise.
  id: totrans-3374
  prefs: []
  type: TYPE_NORMAL
  zh: 如果函数成功对数组进行排序，则返回 `true`，否则返回 `false`。
- en: var_dump
  id: totrans-3375
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: var_dump
- en: '`void var_dump(mixed` *name*`[, mixed` *name2*`[, ... mixed` *nameN*`]])`'
  id: totrans-3376
  prefs: []
  type: TYPE_NORMAL
  zh: '`void var_dump(mixed` *name*`[, mixed` *name2*`[, ... mixed` *nameN*`]])`'
- en: Outputs information about *name*, *name2*, and so on. Information output includes
    the variable’s type, value, and, if an object, all public, private, and protected
    properties of the object. Arrays’ and objects’ contents are output in a recursive
    fashion.
  id: totrans-3377
  prefs: []
  type: TYPE_NORMAL
  zh: 输出关于 *name*、*name2* 等的信息。信息输出包括变量的类型、值以及如果是对象，则包括对象的所有公共、私有和受保护属性。数组和对象的内容将以递归方式输出。
- en: var_export
  id: totrans-3378
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: var_export
- en: '`mixed var_export(mixed` *expression*`[, bool` *variable_representation*`])`'
  id: totrans-3379
  prefs: []
  type: TYPE_NORMAL
  zh: '`mixed var_export(mixed` *expression*`[, bool` *variable_representation*`])`'
- en: Returns the PHP code representation of *expression*. If *variable_representation*
    is set and is `true`, *expression*’s actual value is returned.
  id: totrans-3380
  prefs: []
  type: TYPE_NORMAL
  zh: 返回 *expression* 的 PHP 代码表示。如果设置了 *variable_representation* 并且为 `true`，则返回 *expression*
    的实际值。
- en: version_compare
  id: totrans-3381
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: version_compare
- en: '`mixed version_compare(string` *one*`, string` *two*`[, string` *operator*`])`'
  id: totrans-3382
  prefs: []
  type: TYPE_NORMAL
  zh: '`mixed version_compare(string` *one*`, string` *two*`[, string` *operator*`])`'
- en: Compares two version strings and returns `−1` if *one* is less than *two*, `0`
    if they are equal, and `1` if *one* is greater than *two*. The version strings
    are split into each numeric or string part, then compared as *string_value* `<
    "dev" < "alpha"` or `"a" < "beta"` or `"b" < "rc" <` *numeric_value* `< "pl"`
    or `"p"`.
  id: totrans-3383
  prefs: []
  type: TYPE_NORMAL
  zh: 比较两个版本字符串，并返回 `-1` 如果 *one* 小于 *two*，`0` 如果它们相等，以及 `1` 如果 *one* 大于 *two*。版本字符串被分割成每个数字或字符串部分，然后作为
    *string_value* `< "dev"`、`< "alpha"` 或 `"a" < "beta"`、`"b" < "rc"` `<` *numeric_value*
    `< "pl"` 或 `"p"` 进行比较。
- en: If *operator* is specified, the operator is used to make a comparison between
    the version strings, and the value of the comparison using that operator is returned.
    The possible operators are `<` or `lt`; `<=` or `le`; `>` or `gt`; `>=` or `ge`;
    `==`, `=`, or `eq`; and `!=`, `<>`, and `ne`.
  id: totrans-3384
  prefs: []
  type: TYPE_NORMAL
  zh: 如果指定了 *operator*，则使用该运算符对版本字符串进行比较，并返回使用该运算符进行比较的值。可能的运算符包括 `<` 或 `lt`、`<=`
    或 `le`、`>` 或 `gt`、`>=` 或 `ge`、`==`、`=`` 或 `eq`，以及 `!=`、`<>` 或 `ne`。
- en: vfprintf
  id: totrans-3385
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: vfprintf
- en: '`int vfprintf(resource` *stream*`, string` *format*`, array` *values*`)`'
  id: totrans-3386
  prefs: []
  type: TYPE_NORMAL
  zh: '`int vfprintf(resource` *stream*`, string` *format*`, array` *values*`)`'
- en: Writes a string created by filling *format* with the arguments given in the
    array *values* to the stream *stream* and returns the length of the string sent.
    See `printf()` for more information on using this function.
  id: totrans-3387
  prefs: []
  type: TYPE_NORMAL
  zh: 将由数组 *values* 中的参数填充 *format* 后的字符串写入流 *stream*，并返回发送的字符串长度。有关如何使用此函数的更多信息，请参见
    `printf()`。
- en: vprintf
  id: totrans-3388
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: vprintf
- en: '`void vprintf(string` *format*`, array` *values*`)`'
  id: totrans-3389
  prefs: []
  type: TYPE_NORMAL
  zh: '`void vprintf(string` *format*`, array` *values*`)`'
- en: Prints a string created by filling *format* with the arguments given in the
    array *values*. See `printf()` for more information on using this function.
  id: totrans-3390
  prefs: []
  type: TYPE_NORMAL
  zh: 使用数组 *values* 中的参数填充 *format* 后，打印字符串。有关如何使用此函数的更多信息，请参见 `printf()`。
- en: vsprintf
  id: totrans-3391
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: vsprintf
- en: '`string vsprintf(string` *format*`, array` *values*`)`'
  id: totrans-3392
  prefs: []
  type: TYPE_NORMAL
  zh: '`string vsprintf(string` *format*`, array` *values*`)`'
- en: Creates and returns a string created by filling *format* with the arguments
    given in the array *values*. See `printf()` for more information on using this
    function.
  id: totrans-3393
  prefs: []
  type: TYPE_NORMAL
  zh: 通过用数组 *values* 中给定的参数填充 *format* 来创建并返回一个字符串。有关使用此函数的更多信息，请参见 `printf()`。
- en: wordwrap
  id: totrans-3394
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: wordwrap
- en: '`string wordwrap(string` *string*`[, int` *length*`[, string` *postfix*`[,
    bool` *force*`]]])`'
  id: totrans-3395
  prefs: []
  type: TYPE_NORMAL
  zh: '`string wordwrap(string` *string*`[, int` *length*`[, string` *postfix*`[,
    bool` *force*`]]])`'
- en: Inserts *postfix* into *string* every *length* characters and at the end of
    the string and returns the resulting string. While inserting breaks, the function
    attempts to not break in the middle of a word. If not specified, *postfix* defaults
    to `\n` and *size* defaults to `75`. If *force* is given and is `true`, the string
    is always wrapped to the given length (this makes the function behave the same
    as `chunk_split()`).
  id: totrans-3396
  prefs: []
  type: TYPE_NORMAL
  zh: 在每 *length* 个字符以及字符串末尾将 *postfix* 插入到 *string* 中，并返回生成的字符串。在插入换行时，函数尝试避免在单词中间断开。如果未指定，*postfix*
    默认为 `\n`，*length* 默认为 `75`。如果给定 *force* 且为 `true`，则始终将字符串包装到给定长度（这使函数行为与 `chunk_split()`
    相同）。
- en: zend_thread_id
  id: totrans-3397
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: zend_thread_id
- en: '`int zend_thread_id()`'
  id: totrans-3398
  prefs: []
  type: TYPE_NORMAL
  zh: '`int zend_thread_id()`'
- en: Returns a unique identifier for the thread of the currently running PHP process.
  id: totrans-3399
  prefs: []
  type: TYPE_NORMAL
  zh: 返回当前运行的 PHP 进程线程的唯一标识符。
- en: zend_version
  id: totrans-3400
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: zend_version
- en: '`string zend_version()`'
  id: totrans-3401
  prefs: []
  type: TYPE_NORMAL
  zh: '`string zend_version()`'
- en: Returns the version of the Zend engine in the currently running PHP process.
  id: totrans-3402
  prefs: []
  type: TYPE_NORMAL
  zh: 返回当前运行的 PHP 进程中 Zend 引擎的版本。
