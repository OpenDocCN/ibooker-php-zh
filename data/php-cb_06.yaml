- en: Chapter 6\. Dates and Times
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章 日期与时间
- en: Manipulating dates and times is one of the most complicated tasks you can do
    in any language, let alone in PHP. This is simply because time is relative—*now*
    will differ from one user to the next and potentially trigger different behavior
    in your application.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 操纵日期和时间是任何语言中最复杂的任务之一，更不用说在PHP中了。这只是因为时间是相对的——*现在*对于每个用户都可能不同，并且可能会触发应用程序中不同的行为。
- en: Object Orientation
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对象导向
- en: PHP developers will work primarily with `DateTime` objects in code. These objects
    work by wrapping a particular instance in time and provide a wide variety of functionality.
    You can take the differences between two `DateTime` objects, convert between arbitrary
    time zones, or add/subtract windows of time from an otherwise static object.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: PHP开发人员主要通过`DateTime`对象来处理代码。这些对象通过包装特定时间实例提供广泛的功能。您可以计算两个`DateTime`对象之间的差异，转换任意时区，或者从静态对象中添加/减去时间窗口。
- en: Additionally, PHP supports a `DateTimeImmutable` object which is functionally
    identical to `DateTime` but cannot be modified directly. Most methods on a `DateTime`
    object will both return the same object and mutate its internal state. The same
    methods on `DateTimeImmutable` leave the internal state in place but return *new
    instances* representing the result of the change.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，PHP还支持`DateTimeImmutable`对象，它在功能上与`DateTime`相同，但不能直接修改。`DateTime`对象上的大多数方法既返回同一对象又改变其内部状态。`DateTimeImmutable`上的相同方法保持内部状态不变，但返回表示更改结果的*新实例*。
- en: Note
  id: totrans-5
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Both date/time classes extend an abstract `DateTimeInterface` base class, making
    the two classes nearly interchangeable within PHP’s date and time functionality.
    Everywhere you see `DateTime` in this chapter you could use a `DateTimeImmutable`
    instance instead and achieve similar if not identical functionality.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 两个日期/时间类都扩展自抽象的`DateTimeInterface`基类，使得这两个类在PHP的日期和时间功能中几乎可以互换使用。在本章中，无论何处看到`DateTime`，您都可以改用`DateTimeImmutable`实例，并实现类似甚至相同的功能。
- en: Time Zones
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 时区
- en: One of the most challenging problems any developer will face is working with
    time zones, particularly when daylight saving time is involved. On the one hand,
    it’s easy to simplify and assume every timestamp within an application is referencing
    the same time zone. This is rarely true.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 任何开发人员面临的最大挑战之一是处理时区，特别是涉及夏令时时。一方面，简化并假设应用程序中的每个时间戳引用相同的时区是很容易的。但这种情况很少发生。
- en: Luckily, PHP makes handling time zones remarkably easy. Every `DateTime` has
    a time zone embedded automatically, usually based on the default defined within
    the system on which PHP is running. You can also explicitly set a time zone whenever
    you create a `DateTime` making the region and time you’re referencing entirely
    unambiguous. Converting between time zones is also simple and powerful and covered
    at length in [Recipe 6.9](#calculating_across_timezones).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，PHP使得处理时区变得非常容易。每个`DateTime`对象自动嵌入一个时区，通常基于PHP运行系统中定义的默认值。您还可以在创建`DateTime`时显式设置时区，从而使您引用的区域和时间变得完全明确。在[第6.9节](#calculating_across_timezones)中也详细介绍了时区之间的转换，简单而强大。
- en: Unix Timestamps
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Unix时间戳
- en: Many computer systems use Unix timestamps internally to represent dates and
    times. These timestamps represent the number of seconds that have occurred between
    the Unix Epoch (January 1, 1970 at 00:00:00 GMT) and a given time. They are memory-efficient
    and frequently used by databases and programmatic APIs. However, counting the
    number of seconds since a fixed date/time isn’t exactly user-friendly, so you
    need a reliable way to convert between Unix timestamps and human-readable date/time
    representations within your applications.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 许多计算机系统在内部使用Unix时间戳来表示日期和时间。这些时间戳表示从Unix纪元（1970年1月1日00:00:00 GMT）到给定时间经过的秒数。它们在内存效率上很高，并经常被数据库和编程接口使用。然而，计算自固定日期/时间以来的秒数并不完全用户友好，因此您需要一种可靠的方法在应用程序中在Unix时间戳和人类可读日期/时间表示之间进行转换。
- en: PHP’s native formatting capabilities make this straightforward. Additional functions,
    like [`time()`](https://oreil.ly/RBqxh), produce Unix timestamps directly as well.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: PHP的原生格式化功能使得这一切变得简单直接。类似[`time()`](https://oreil.ly/RBqxh)这样的附加函数直接生成Unix时间戳。
- en: The following recipes cover these topics at length, in addition to several other
    common date/time-related tasks.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的示例详细介绍了这些主题，以及其他几个常见的日期/时间相关任务。
- en: 6.1 Finding the Current Date and Time
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6.1 查找当前日期和时间
- en: Problem
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to know the current date and time.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 您想要知道当前日期和时间。
- en: Solution
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'To print the current date and time following a particular format, use `date()`.
    For example:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 要按特定格式打印当前日期和时间，请使用`date()`。例如：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The output of `date()` depends on the system it’s being run on and the current
    actual time. Using `r` as a format string, this function would return something
    like the following:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`date()`的输出取决于其运行所在系统和当前实际时间。使用`r`作为格式字符串，该函数会返回类似以下的内容：'
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Similarly, a newly instantiated `DateTime` object will also represent the current
    date and time. The `::format()` method on this object exhibits the same behavior
    as `date()`, meaning the following two statements are functionally identical:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，新实例化的`DateTime`对象也将表示当前日期和时间。该对象上的`::format()`方法展现出与`date()`相同的行为，这意味着以下两个语句在功能上是相同的：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Discussion
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: PHP’s `date()` function, as well as a `DateTime` object instantiated with no
    parameters, will automatically inherit the current date and time of the system
    on which they’re run. The additional `r` passed into both is a format character
    that defines how to convert the given date/time information into a string—in this
    case, specifically as a date formatted according to [RFC 2822](https://oreil.ly/WrB1I).
    You can learn more about date formatting in [Recipe 6.2](#formatting_dates_and_times).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: PHP的`date()`函数以及不带参数实例化的`DateTime`对象将自动继承其运行系统的当前日期和时间。在这两者中额外传入的`r`是一个格式字符，定义了如何将给定的日期/时间信息转换为字符串——在本例中，特别是按照[RFC
    2822](https://oreil.ly/WrB1I)格式化的日期。您可以在[Recipe 6.2](#formatting_dates_and_times)中了解更多关于日期格式化的信息。
- en: A powerful alternative is to leverage PHP’s `getdate()` function to retrieve
    an associative array of all of the parts of the current system date and time.
    This array will contain the keys and values in [Table 6-1](#key_elements_getdate).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 利用PHP的`getdate()`函数，您可以获取当前系统日期和时间的所有部分的关联数组，这个数组将包含在[表 6-1](#key_elements_getdate)中的键和值。
- en: Table 6-1\. Key elements returned by `getdate()`
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 表 6-1\. `getdate()`返回的关键元素
- en: '| Key | Description of value | Example |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| 键 | 值的描述 | 示例 |'
- en: '| --- | --- | --- |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `seconds` | Seconds | `0` to `59` |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| `seconds` | 秒数 | `0` 到 `59` |'
- en: '| `minutes` | Minutes | `0` to `59` |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| `minutes` | 分钟 | `0` 到 `59` |'
- en: '| `hours` | Hours | `0` to `23` |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| `hours` | 小时 | `0` 到 `23` |'
- en: '| `mday` | Day of the month | `1` through `31` |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| `mday` | 月中的天数 | `1` 到 `31` |'
- en: '| `wday` | Day of the week | `0` (Sunday) through `6` (Saturday) |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| `wday` | 周几 | `0`（星期日）到 `6`（星期六） |'
- en: '| `mon` | Month | `1` through `12` |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| `mon` | 月份 | `1` 到 `12` |'
- en: '| `year` | Full, four-digit year | `2023` |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| `year` | 完整的四位数年份 | `2023` |'
- en: '| `yday` | Day of the year | `0` through 365 |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| `yday` | 年中的天数 | `0` 到 `365` |'
- en: '| `weekday` | Day of the week | `Sunday` through `Saturday` |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| `weekday` | 星期几 | `Sunday` 到 `Saturday` |'
- en: '| `month` | Month of the year | `January` through `December` |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| `month` | 年中的月份 | `January` 到 `December` |'
- en: '| `0` | Unix timestamp | `0` to `2147483647` |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| `0` | Unix时间戳 | `0` 到 `2147483647` |'
- en: In some applications, you might only need the day of the week rather than a
    fully operational `DateTime` object. Consider [Example 6-1](#getdate_vs_datetime),
    which illustrates how you might achieve this with either `DateTime` or `getdate()`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些应用中，您可能只需要星期几而不是完整操作的`DateTime`对象。考虑[示例 6-1](#getdate_vs_datetime)，它展示了如何使用`DateTime`或`getdate()`来实现这一目标。
- en: Example 6-1\. Comparing `DateTime` with `getdate()`
  id: totrans-42
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 6-1\. 比较`DateTime`与`getdate()`
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: These two lines of code are functionally equivalent. For a simple task such
    as “print today’s date,” either would be adequate for the job. The `DateTime`
    object provides functionality for converting time zones or forecasting future
    dates (both of which are covered further in other recipes). The associative array
    returned by `getdate()` lacks this functionality but makes up for that shortcoming
    through its simple, easy-to-recognize array keys.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这两行代码在功能上是等效的。对于像“打印今天的日期”这样的简单任务，任何一种都足够完成工作。`DateTime`对象提供了转换时区或预测未来日期的功能（这些都在其他配方中进一步介绍）。而`getdate()`返回的关联数组则缺乏这种功能，但通过其简单易识别的数组键来弥补这一缺点。
- en: See Also
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: PHP documentation on [date and time functions](https://oreil.ly/rJ9fn), the
    [`DateTime` class](https://oreil.ly/t28Zh), and the [`getdate()` function](https://oreil.ly/Kv7l8).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: PHP文档关于[date和时间函数](https://oreil.ly/rJ9fn)，[`DateTime`类](https://oreil.ly/t28Zh)，以及[`getdate()`函数](https://oreil.ly/Kv7l8)。
- en: 6.2 Formatting Dates and Times
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6.2 日期和时间的格式化
- en: Problem
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to print a date to a string in a particular format.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 您想要将日期打印为特定格式的字符串。
- en: Solution
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use the `::format()` method on a given `DateTime` object to specify the format
    of the returned string, as shown in [Example 6-2](#date_time_format_examples).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 使用给定的`DateTime`对象的`::format()`方法来指定返回字符串的格式，如[示例 6-2](#date_time_format_examples)所示。
- en: Example 6-2\. Date and time format examples
  id: totrans-52
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 6-2\. 日期和时间格式示例
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[![1](assets/1.png)](#co_dates_and_times_CO1-1)'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_dates_and_times_CO1-1)'
- en: '`Tuesday, August 1, 2017`'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`Tuesday, August 1, 2017`'
- en: '[![2](assets/2.png)](#co_dates_and_times_CO1-2)'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_dates_and_times_CO1-2)'
- en: '`8/1/17`'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`8/1/17`'
- en: '[![3](assets/3.png)](#co_dates_and_times_CO1-3)'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_dates_and_times_CO1-3)'
- en: '`Tue, 01 Aug 2017 00:00:00 +0000`'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`Tue, 01 Aug 2017 00:00:00 +0000`'
- en: Discussion
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: Both the `date()` function and the `DateTime` object’s `::format()` method accept
    a variety of input strings that ultimately define the final structure of the string
    produced by PHP. Each format string is composed of individual characters that
    represent specific parts of a date or time value, as you can see in [Table 6-2](#datetime_format_characters).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`date()`函数和`DateTime`对象的`::format()`方法都接受多种输入字符串，最终定义了PHP生成的字符串的结构。每个格式字符串由表示日期或时间值特定部分的单个字符组成，正如你可以在[表 6-2](#datetime_format_characters)中看到的那样。'
- en: Table 6-2\. PHP format characters
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 表格 6-2\. PHP格式字符
- en: '| Character | Description | Example values |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| 字符 | 描述 | 示例值 |'
- en: '| --- | --- | --- |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| **Day** |  |  |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| **日期** |  |  |'
- en: '| `d` | Day of the month, two digits with leading 0 | `01` to `31` |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| `d` | 月份中的日期，带有前导零 | `01`到`31` |'
- en: '| `D` | A textual representation of a day, three letters | `Mon` through `Sun`
    |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| `D` | 一周中某天的文本表示，三个字母 | `Mon`到`Sun` |'
- en: '| `j` | Day of the month without leading 0 | `1` to `31` |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| `j` | 月份中的日期，不带前导零 | `1`到`31` |'
- en: '| `l` | The name of the day of the week | `Sunday` through `Saturday` |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| `l` | 一周中某天的名称 | `Sunday`到`Saturday` |'
- en: '| `N` | ISO 8601 numeric representation of the day of the week | `1` (for Monday)
    through `7` (for Sunday) |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| `N` | ISO 8601表示的星期几 | `1`（代表星期一）到`7`（代表星期日） |'
- en: '| `S` | English ordinal suffix for the day of the month, two characters | `st`,
    `nd`, `rd`, or `th`. Works well with `j` |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| `S` | 日期的英文序数后缀，两个字符 | `st`, `nd`, `rd`, 或 `th`。与`j`结合使用 |'
- en: '| `w` | Numeric representation of the day of the week | `0` (for Sunday) through
    `6` (for Saturday) |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| `w` | 一周中的日期表示，数字形式 | `0`（代表星期日）到`6`（代表星期六） |'
- en: '| `z` | The day of the year (starting from 0) | `0` through `365` |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| `z` | 一年中的第几天（从0开始） | `0`到`365` |'
- en: '| **Month** |  |  |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| **月份** |  |  |'
- en: '| `F` | The full name of the month | `January` through `December` |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| `F` | 月份的完整名称 | `January`到`December` |'
- en: '| `m` | Numeric representation of a month, with leading 0 | `01` through `12`
    |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| `m` | 月份的数字表示，带有前导零 | `01`到`12` |'
- en: '| `M` | A textual representation of a month, three letters | `Jan` through
    `Dec` |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| `M` | 月份的文本表示，三个字母 | `Jan`到`Dec` |'
- en: '| `n` | Numeric representation of a month, without leading 0 | `1` through
    `12` |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| `n` | 月份的数字表示，不带前导零 | `1`到`12` |'
- en: '| `t` | Number of days in the given month | `28` through `31` |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| `t` | 给定月份的天数 | `28`到`31` |'
- en: '| **Year** |  |  |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| **年份** |  |  |'
- en: '| `L` | Whether it’s a leap year | `1` if it is a leap year, `0` otherwise.
    |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| `L` | 是否为闰年 | 如果是闰年则为`1`，否则为`0`。 |'
- en: '| `o` | ISO 8601 week-numbering year. This has the same value as `Y`, except
    that if the ISO week belongs to the previous or next year, that year is used instead
    | `1999` or `2003` |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| `o` | ISO 8601周年份。其值与`Y`相同，但如果ISO周属于前一年或后一年，则使用该年份 | `1999`或`2003` |'
- en: '| `Y` | A full numeric representation of a year, four digits | `1999` or `2003`
    |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| `Y` | 年份的完整数字表示，四位数 | `1999`或`2003` |'
- en: '| `y` | A two-digit representation of a year | `99` or `03` |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| `y` | 年份的两位数表示 | `99`或`03` |'
- en: '| **Time** |  |  |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| **时间** |  |  |'
- en: '| `a` | Lowercase ante meridiem or post meridiem | `am` or `pm` |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| `a` | 小写的上午或下午 | `am`或`pm` |'
- en: '| `A` | Uppercase ante meridiem or post meridiem | `AM` or `PM` |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| `A` | 大写的上午或下午 | `AM`或`PM` |'
- en: '| `g` | 12-hour format of an hour without leading 0 | `1` through `12` |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| `g` | 带有前导零的12小时制小时数 | `1`到`12` |'
- en: '| `G` | 24-hour format of an hour without leading 0 | `0` through `23` |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| `G` | 24小时制小时数，不带前导零 | `0`到`23` |'
- en: '| `h` | 12-hour format of an hour with leading 0 | `01` through `12` |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| `h` | 带有前导零的12小时制小时数 | `01`到`12` |'
- en: '| `H` | 24-hour format of an hour with leading 0 | `00` through `23` |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| `H` | 带有前导零的24小时制小时数 | `00`到`23` |'
- en: '| `i` | Minutes with leading 0 | `00` to `59` |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| `i` | 带有前导零的分钟 | `00`到`59` |'
- en: '| `s` | Seconds with leading 0 | `00` through `59` |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| `s` | 带有前导零的秒数 | `00`到`59` |'
- en: '| `u` | Microseconds | `654321` |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| `u` | 微秒 | `654321` |'
- en: '| `v` | Milliseconds | `654` |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| `v` | 毫秒 | `654` |'
- en: '| **Time zone** |  |  |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| **时区** |  |  |'
- en: '| `e` | Time zone identifier | `UTC`, `GMT`, `Atlantic/Azores` |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| `e` | 时区标识符 | `UTC`、`GMT`、`Atlantic/Azores` |'
- en: '| `I` | Whether the date is in daylight saving time | `1` if daylight saving
    time, `0` otherwise. |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| `I` | 日期是否处于夏令时 | 夏令时为 `1`，否则为 `0`。 |'
- en: '| `O` | Difference from Greenwich time (GMT) without colon between hours and
    minutes | `+0200` |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| `O` | 与格林尼治时间（GMT）的差异，小时和分钟之间不用冒号分隔 | `+0200` |'
- en: '| `P` | Difference from Greenwich time (GMT) with colon between hours and minutes
    | `+02:00` |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| `P` | 与格林尼治时间（GMT）的差异，小时和分钟之间用冒号分隔 | `+02:00` |'
- en: '| `p` | The same as P, but returns Z instead of +00:00 | `+02:00` |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| `p` | 与 P 相同，但返回 Z 而不是 +00:00 | `+02:00` |'
- en: '| `T` | Time zone abbreviation, if known; otherwise the GMT offset. | `EST`,
    `MDT`, `+05` |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| `T` | 如果已知则为时区缩写；否则为 GMT 偏移量。 | `EST`、`MDT`、`+05` |'
- en: '| `Z` | Time zone offset in seconds | `-43200` through `50400` |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| `Z` | 时间偏移秒数 | `-43200` 到 `50400` |'
- en: '| **Other** |  |  |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| **其他** |  |  |'
- en: '| `U` | Unix timestamp | `0` through `2147483647` |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| `U` | Unix 时间戳 | `0` 到 `2147483647` |'
- en: Combining these characters into a format string determines exactly how PHP will
    convert a given date/time construct into a string.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 将这些字符组合成格式字符串确定了 PHP 如何将给定的日期/时间构造转换为字符串。
- en: Similarly, PHP defines several predefined constants representing well-known
    and widely used formats. [Table 6-3](#datetime_format_constants) shows some of
    the most useful.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，PHP 定义了几个预定义常量，表示众所周知且广泛使用的格式。 [表 6-3](#datetime_format_constants) 显示了一些最有用的常量。
- en: Table 6-3\. Predefined date constants
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 表 6-3\. 预定义日期常量
- en: '| Constant | Class constant | Format characters | Example |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| 常量 | 类常量 | 格式字符 | 示例 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `DATE_ATOM` | `DateTime::ATOM` | `Y-m-d\TH:i:sP` | `2023-08-01T13:22:14-08:00`
    |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| `DATE_ATOM` | `DateTime::ATOM` | `Y-m-d\TH:i:sP` | `2023-08-01T13:22:14-08:00`
    |'
- en: '| `DATE_COOKIE` | `DateTime::COOKIE` | `l, d-M-Y H:i:s T` | `Tuesday, 01-Aug-2023
    13:22:14 GMT-0800` |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| `DATE_COOKIE` | `DateTime::COOKIE` | `l, d-M-Y H:i:s T` | `Tuesday, 01-Aug-2023
    13:22:14 GMT-0800` |'
- en: '| ``DATE_ISO8601`footnote:[Unfortunately, `DATE_ISO8601`` isn’t compatible
    with the ISO 8601 standard. If you need that level of compatibility, use `DATE_ATOM`
    instead.] | `DateTime::ISO8601` | `Y-m-d\TH:i:sO` | `2013-08-01T21:21:14\+0000`
    |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| ``DATE_ISO8601`footnote:[不幸的是，`DATE_ISO8601` 不兼容 ISO 8601 标准。如果需要该级别的兼容性，请改用
    `DATE_ATOM`。] | `DateTime::ISO8601` | `Y-m-d\TH:i:sO` | `2013-08-01T21:21:14\+0000`
    |'
- en: '| `DATE_RSS` | `DateTime::RSS` | `D, d M Y H:i:s O` | `Tue, 01 Aug 2023 13:22:14
    -0800` |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| `DATE_RSS` | `DateTime::RSS` | `D, d M Y H:i:s O` | `Tue, 01 Aug 2023 13:22:14
    -0800` |'
- en: See Also
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: Full documentation on [format characters](https://oreil.ly/oQpYP) and [predefined
    `DateTime` constants](https://oreil.ly/XJiZy).
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 [格式字符](https://oreil.ly/oQpYP) 和 [预定义 `DateTime` 常量](https://oreil.ly/XJiZy)
    的完整文档。
- en: 6.3 Converting Dates and Times to Unix Timestamps
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6.3 转换日期和时间为 Unix 时间戳
- en: Problem
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to convert a particular date or time to a Unix timestamp and convert
    a given Unix timestamp into a local date or time.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 您想要将特定日期或时间转换为 Unix 时间戳，并将给定的 Unix 时间戳转换为本地日期或时间。
- en: Solution
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'To convert a given date/time into a timestamp, use the `U` format character
    (see [Table 6-2](#datetime_format_characters)) with `DateTime::format()` as follows:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 要将给定的日期/时间转换为时间戳，请使用 `U` 格式字符（参见 [表 6-2](#datetime_format_characters)），使用 `DateTime::format()`
    如下所示：
- en: '[PRE5]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'To convert a given timestamp into a `DateTime` object, also use the `U` format
    character but instead with `DateTime::createFromFormat()` as follows:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 要将给定的时间戳转换为 `DateTime` 对象，同样使用 `U` 格式字符，但是要用 `DateTime::createFromFormat()`
    如下所示：
- en: '[PRE6]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Discussion
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: The `::createFromFormat()` method is a static inverse of `DateTime`’s `::format()`
    method. Both functions use identical format strings to specify the format being
    used^([1](ch06.html#idm45875164755616)) but represent opposite transformations
    between a formatted string and the underlying state of a `DateTime` object. The
    Solution example explicitly leverages the `U` format character to tell PHP that
    the input data is a Unix timestamp.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '`::createFromFormat()` 方法是 `DateTime` 的 `::format()` 方法的静态逆过程。这两个函数使用相同的格式字符串来指定使用的格式^([1](ch06.html#idm45875164755616))，但表示格式化字符串和
    `DateTime` 对象的基础状态之间的相反转换。解决方案示例明确利用 `U` 格式字符告知 PHP 输入数据为 Unix 时间戳。'
- en: 'If the input string doesn’t actually match your format, PHP will return a literal
    `false` as in the following example:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 如果输入字符串实际上与您的格式不匹配，PHP 将返回一个字面上的 `false`，如以下示例所示：
- en: '[PRE7]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: When parsing user input, it is a good idea to explicitly check the return of
    `::createFromFormat()` to ensure that the date input was valid. For more on validating
    dates, see [Recipe 6.7](#validating_a_date).
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在解析用户输入时，明智的做法是显式检查`::createFromFormat()`的返回值，以确保日期输入是有效的。有关日期验证的更多信息，请参见[食谱
    6.7](#validating_a_date)。
- en: Rather than work with a full `DateTime` object, you can work with *parts* of
    a date/time directly. PHP’s [`mktime()` function](https://oreil.ly/YFKz0) will
    always return a Unix timestamp, and the only required parameter is the hour.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 与其使用完整的`DateTime`对象，不如直接操作日期/时间的*部分*。PHP的[`mktime()`函数](https://oreil.ly/YFKz0)始终返回Unix时间戳，唯一必需的参数是小时。
- en: For example, assume you want the Unix timestamp representing July 4, 2023 at
    noon in GMT (no time zone offset). You could do this in two ways, as demonstrated
    in [Example 6-3](#mktime_example).
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设您希望表示2023年7月4日中午在GMT时区（无时区偏移）的Unix时间戳。您可以通过两种方式实现，如[示例 6-3](#mktime_example)中所示。
- en: Example 6-3\. Creating a timestamp directly
  id: totrans-132
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 6-3\. 直接创建时间戳
- en: '[PRE8]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[![1](assets/1.png)](#co_dates_and_times_CO2-1)'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_dates_and_times_CO2-1)'
- en: This output will be exactly `1688472000`.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 此输出将完全是`1688472000`。
- en: '[![2](assets/2.png)](#co_dates_and_times_CO2-2)'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_dates_and_times_CO2-2)'
- en: This output will be *close* to `1688472000` but will vary in the last three
    digits.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 此输出将*接近*于`1688472000`，但在最后三位数上会有所变化。
- en: While this simpler example appears elegant and avoids instantiating an object
    only to turn it back into a number, it has an important problem. Failing to specify
    a parameter (in this case, minutes or seconds) will cause `mktime()` to use the
    current system values for those parameters by default. If you were to run this
    example code at 3:05 in the afternoon, the output might be `1688472300`.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这个简单的例子看起来优雅，避免了只为了再转换为数字而实例化对象的问题，但它有一个重要问题。未指定参数（在本例中为分钟或秒）将导致`mktime()`默认使用当前系统值作为这些参数。如果在下午3点05分运行此示例代码，则输出可能是`1688472300`。
- en: This Unix timestamp translates to 12:05:00 rather than 12:00:00 when converted
    back to a `DateTime`, representing a (potentially negligible) difference from
    what the application expects.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 此Unix时间戳在转换回`DateTime`时转换为12:05:00，而不是应用程序期望的12:00:00（可能是可忽略的差异）。
- en: It’s important to remember that, if you choose to leverage the functional interface
    of `mktime()`, you either provide a value for *every* component of the date/time
    or you build your application in such a way that slight deviations are expected
    and handled.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要记住，如果选择利用`mktime()`的函数接口，要么为日期/时间的*每个*组件提供值，要么构建应用程序，以便预期和处理轻微偏差。
- en: See Also
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: Documentation on [`DateTime::createFromFormat()`](https://oreil.ly/otv8q).
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 文档中的[`DateTime::createFromFormat()`](https://oreil.ly/otv8q)。
- en: 6.4 Converting from Unix Timestamps to Date and Time Parts
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6.4 从Unix时间戳转换为日期和时间部分
- en: Problem
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to extract a particular date or time part (day or hour) from a Unix
    timestamp.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望从Unix时间戳中提取特定的日期或时间部分（天或小时）。
- en: Solution
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'Pass the Unix timestamp as a parameter to `getdate()` and reference the required
    keys in the resulting associative array. For example:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 将Unix时间戳作为参数传递给`getdate()`，并引用生成的关联数组中的所需键。例如：
- en: '[PRE9]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Discussion
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: The only parameter you can provide to `getdate()` is a Unix timestamp. If this
    parameter is omitted, PHP will leverage the current system date and time. When
    you provide a timestamp, PHP parses that timestamp internally and allows for the
    extraction of all expected date and time elements.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以向`getdate()`提供的唯一参数是Unix时间戳。如果省略此参数，PHP将利用当前系统日期和时间。当提供时间戳时，PHP在内部解析该时间戳，并允许提取所有预期的日期和时间元素。
- en: 'Alternatively, you can pass a timestamp into the constructor for a `DateTime`
    instance in two ways to build a full object from it:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以通过两种方式将时间戳传递到`DateTime`实例的构造函数中以构建一个完整的对象：
- en: Prefixing the timestamp with an `@` character tells PHP to interpret the entry
    as a Unix timestamp—for example, `new DateTime('@1688472300')`.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在时间戳前加上`@`字符告诉PHP将输入解释为Unix时间戳，例如，`new DateTime('@1688472300')`。
- en: You can use the `U` format character when importing a timestamp into a `DateTime`
    object—for example, `DateTime::createFromFormat('U', '1688472300')`.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当导入时间戳到`DateTime`对象时，可以使用`U`格式字符，例如，`DateTime::createFromFormat('U', '1688472300')`。
- en: In any case, once your timestamp is properly parsed and loaded into a `DateTime`
    object, you can use its `::format()` method to extract any component you desire.
    [Example 6-4](#datetime_conversion_revisited) is an alternative implementation
    of the Solution example that leverages `DateTime` rather than `getdate()`.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，一旦您的时间戳被正确解析并加载到 `DateTime` 对象中，您可以使用其 `::format()` 方法提取任何所需的组件。[示例 6-4](#datetime_conversion_revisited)
    是一个使用 `DateTime` 而不是 `getdate()` 的解决方案示例的替代实现。
- en: Example 6-4\. Extracting date and time parts from Unix timestamps
  id: totrans-155
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 6-4\. 从 Unix 时间戳中提取日期和时间部分
- en: '[PRE10]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Either of the approaches in [Example 6-4](#datetime_conversion_revisited) is
    a valid replacement of `getdate()` that also provides the benefit of giving you
    a fully functional `DateTime` instance. You could print the date (or time) in
    any format, manipulate the underlying value directly, or even convert between
    time zones if necessary. Each of these potential further uses for `DateTime` is
    covered in further recipes.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 6-4](#datetime_conversion_revisited) 中的任一方法都可以有效替代 `getdate()`，同时还提供了一个完全可用的
    `DateTime` 实例。您可以以任何格式打印日期（或时间），直接操作底层值，或者根据需要在时区之间进行转换。`DateTime` 的这些潜在进一步用途在后续的配方中都有涵盖。'
- en: See Also
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '[Recipe 6.1](#current_date_and_time) for further discussion of `getdate()`.
    Read ahead in [Recipe 6.8](#add_or_subtract_a_date) to learn how to manipulate
    `DateTime` objects and in [Recipe 6.9](#calculating_across_timezones) to see how
    time zones can be managed directly.'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '[食谱 6.1](#current_date_and_time) 进一步讨论 `getdate()`。请继续阅读 [食谱 6.8](#add_or_subtract_a_date)
    以了解如何操作 `DateTime` 对象，以及 [食谱 6.9](#calculating_across_timezones) 中如何直接管理时区。'
- en: 6.5 Computing the Difference Between Two Dates
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6.5 计算两个日期之间的差异
- en: Problem
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to find out how much time has passed between two dates or times.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 您想知道两个日期或时间之间经过了多少时间。
- en: Solution
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'Encapsulate each date/time in a `DateTime` object. Leverage the `::diff()`
    method on one to calculate the relative difference between it and the other `DateTime`.
    The result will be a `DateInterval` object as follows:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 将每个日期/时间封装在 `DateTime` 对象中。利用其中一个对象上的 `::diff()` 方法计算它与另一个 `DateTime` 之间的相对差异。结果将是一个
    `DateInterval` 对象，如下所示：
- en: '[PRE11]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Discussion
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: The `::diff()` method of the `DateTime` object effectively subtracts one date/time
    (the argument passed into the method) from another (the one represented by the
    object itself). The result is a representation of the relative duration of time
    between the two objects.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '`DateTime` 对象的 `::diff()` 方法有效地从另一个日期/时间（作为方法参数传递的日期/时间）中减去另一个日期/时间（对象本身表示的日期/时间）。其结果是两个对象之间时间相对持续的表示。'
- en: Warning
  id: totrans-168
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: The `::diff()` method ignores daylight saving time. To properly account for
    the potential one-hour difference intrinsic to that system, converting both date/time
    objects into UTC first is a good idea.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '`::diff()` 方法忽略夏令时。为了正确考虑到该系统固有的潜在一小时差异，首先将两个日期/时间对象转换为 UTC 是一个好主意。'
- en: It is also important to note that, while it might appear similar in the Solution
    example, the `::format()` method of the `DateInterval` object takes a whole different
    set of format characters than those used by `DateTime`. Every format character
    must be prefixed by a literal `%` character, but the format string itself can
    include nonformatting characters (like *years* and *months* in the Solution example).
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 还需要注意的是，尽管解决方案示例中看起来可能类似，但 `DateInterval` 对象的 `::format()` 方法使用的格式字符完全不同于 `DateTime`
    使用的格式字符。每个格式字符都必须以字面 `%` 字符为前缀，但格式字符串本身可以包含非格式化字符（例如解决方案示例中的 *年* 和 *月*）。
- en: Available format characters are enumerated in [Table 6-4](#dateinterval_format_characters).
    In every case except for the format characters of `a` and `r`, using the lowercase
    for a format character will return a numeric value without any leading 0\. The
    enumerated uppercase format characters return at least two digits with a leading
    0\. Remember, every format character must be prefixed with a literal `%`.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 可用的格式字符在 [表 6-4](#dateinterval_format_characters) 中列出。除了 `a` 和 `r` 格式字符外，使用小写格式字符将返回一个数字值，没有前导
    0。列出的大写格式字符将返回至少两位数，带有前导 0。记住，每个格式字符前面必须加上字面量 `%`。
- en: Table 6-4\. `DateInterval` format characters
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 表 6-4\. `DateInterval` 格式字符
- en: '| Character | Description | Example |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| 字符 | 描述 | 示例 |'
- en: '| --- | --- | --- |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `%` | Literal `%` | `%` |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| `%` | 字面 `%` | `%` |'
- en: '| `Y` | Years | `03` |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| `Y` | 年 | `03` |'
- en: '| `M` | Months | `02` |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| `M` | 月 | `02` |'
- en: '| `D` | Days | `09` |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| `D` | 天 | `09` |'
- en: '| `H` | Hours | `08` |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| `H` | 小时 | `08` |'
- en: '| `I` | Minutes | `01` |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| `I` | 分钟 | `01` |'
- en: '| `S` | Seconds | `04` |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| `S` | 秒 | `04` |'
- en: '| `F` | Microseconds | `007705` |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| `F` | 微秒 | `007705` |'
- en: '| `R` | Sign “-” when negative, “+” when positive | `-` or `+` |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| `R` | 在负数时显示“-”，在正数时显示“+” | `-` 或 `+` |'
- en: '| `r` | Sign “-” when negative, empty when positive | `-` |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '| `r` | 在负数时显示“-”，在正数时为空 | `-` |'
- en: '| `a` | Total number of days | `548` |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '| `a` | 总天数 | `548` |'
- en: See Also
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: Full documentation on the [`DateInterval` class](https://oreil.ly/r0FBV).
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 完整文档请参见[`DateInterval` 类](https://oreil.ly/r0FBV)。
- en: 6.6 Parsing Dates and Times from Arbitrary Strings
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6.6 从任意字符串解析日期和时间
- en: Problem
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You need to convert an arbitrary, user-defined string into a valid `DateTime`
    object for further use or manipulation.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要将任意用户定义的字符串转换为有效的 `DateTime` 对象，以便进一步使用或操作。
- en: Solution
  id: totrans-191
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'Use PHP’s powerful `strtotime()` function to convert the text entry into a
    Unix timestamp, and then pass that into the constructor of a new `DateTime` object.
    For example:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 PHP 强大的 `strtotime()` 函数将文本输入转换为 Unix 时间戳，然后传递给新 `DateTime` 对象的构造函数。例如：
- en: '[PRE12]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Discussion
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: The power of `strtotime()` comes from the underlying [date and time import formats](https://oreil.ly/2f4o_)
    supported by the language. These include the kinds of formats you might expect
    computers to use (like YYYY-MM-DD for a year, month, and day). But it extends
    to *relative* specifiers and complex, compound formats as well.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '`strtotime()` 的强大之处来自语言支持的底层[日期和时间导入格式](https://oreil.ly/2f4o_)。这些包括你可能期望计算机使用的格式（如
    YYYY-MM-DD 表示年、月、日）。但它还扩展到*相对*指定器和复杂的复合格式。'
- en: Note
  id: totrans-196
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注释
- en: The convention of prefixing a Unix timestamp with a literal `@` character when
    passing it into a `DateTime` constructor itself comes from the compound date/time
    formats supported by PHP.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 将 Unix 时间戳作为前缀的文本直接传递给 `DateTime` 构造函数的约定，来源于 PHP 支持的复合日期/时间格式。
- en: 'The relative formats are the most powerful, supporting human-readable strings
    like these:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 相对格式是最强大的，支持像这样的人类可读字符串：
- en: '`yesterday`'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`yesterday`'
- en: '`first day of`'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`first day of`'
- en: '`now`'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`now`'
- en: '`ago`'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ago`'
- en: Armed with these formats, you can parse almost any string imaginable with PHP.
    However, there are some limits. In the Solution example, I used `now + 2 days`
    to specify “2 days from now.” [Example 6-5](#strtotime_parse_error) demonstrates
    that the latter results in a parser error in PHP, even though it reads well in
    English.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 掌握这些格式后，你几乎可以用 PHP 解析任何想象得到的字符串。然而，也有一些限制。在解决方案示例中，我使用了 `now + 2 days` 来指定“从现在开始的
    2 天后”。[示例 6-5](#strtotime_parse_error) 显示，尽管在英语中读起来很好，但在 PHP 中却会导致解析错误。
- en: Example 6-5\. Limitations in `strtotime()` parsing
  id: totrans-204
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 6-5\. `strtotime()` 解析的限制
- en: '[PRE13]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: It should always be noted that, no matter how clever you can make a computer,
    you are always limited by the quality of input provided by end users. There is
    no way you can foresee every possible way of specifying a date or time; `strtotime()`
    gets close, but you’ll need to handle input errors as well.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 应该始终注意，无论你如何使计算机聪明，你始终受到最终用户提供的输入质量的限制。没有办法预见每种指定日期或时间的可能方式；`strtotime()` 接近，但你也需要处理输入错误。
- en: Another potential way to parse user-provided dates is PHP’s `date_parse()` function.
    Unlike `strtotime()`, this function expects a reasonably well-formatted input
    string. It also doesn’t handle relative time quite the same way. [Example 6-6](#date_parse_with_relatives)
    illustrates several strings that can be parsed by `date_parse()`.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个解析用户提供的日期的潜在方式是 PHP 的 `date_parse()` 函数。与 `strtotime()` 不同，此函数期望一个合理格式化的输入字符串。它也不能完全像相对时间一样处理。[示例 6-6](#date_parse_with_relatives)
    说明了几个可以由 `date_parse()` 解析的字符串。
- en: Example 6-6\. `date_parse()` examples
  id: totrans-208
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 6-6\. `date_parse()` 示例
- en: '[PRE14]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[![1](assets/1.png)](#co_dates_and_times_CO3-1)'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_dates_and_times_CO3-1)'
- en: Parses January 4, 2022
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 解析 2022 年 1 月 4 日
- en: '[![2](assets/2.png)](#co_dates_and_times_CO3-2)'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_dates_and_times_CO3-2)'
- en: Parses February 14, but with a `null` year
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 解析 2 月 14 日，但年份为 `null`
- en: '[![3](assets/3.png)](#co_dates_and_times_CO3-3)'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_dates_and_times_CO3-3)'
- en: Parses both the date and the time, but with no time zone
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 解析日期和时间，但没有时区
- en: '[![4](assets/4.png)](#co_dates_and_times_CO3-4)'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_dates_and_times_CO3-4)'
- en: Parses the date and stores an additional relative field
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 解析日期并存储额外的相对字段
- en: 'Rather than return a timestamp, `date_parse()` will extract the relevant date/time
    parts from the input string and store them in an associative array with keys for
    the following:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '`date_parse()` 不会返回时间戳，而是从输入字符串中提取相关的日期/时间部分，并将它们存储在带有以下键的关联数组中：'
- en: '`year`'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`year`'
- en: '`month`'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`month`'
- en: '`day`'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`day`'
- en: '`hour`'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hour`'
- en: '`minute`'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`minute`'
- en: '`second`'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`second`'
- en: '`fraction`'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fraction`'
- en: In addition, passing a time-relative specification in the string (like the `+
    12 years` in [Example 6-6](#date_parse_with_relatives)) will add a `relative`
    key to the array with information about the relative offset.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，将字符串中的时间相对规范（例如[Example 6-6](#date_parse_with_relatives)中的`+ 12 years`）将在数组中添加一个`relative`键，其中包含有关相对偏移的信息。
- en: All of this is useful in determining whether a user-provided date is useful
    as an actual date. The `date_parse()` function will also return warnings and errors
    if it encounters any parsing issues, making it even easier to check whether a
    date is valid. For more on checking date validity, read [Recipe 6.7](#validating_a_date).
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些都有助于确定用户提供的日期是否作为实际日期有用。如果`date_parse()`函数遇到任何解析问题，它还将返回警告和错误，这样更容易检查日期是否有效。要了解更多关于检查日期有效性的信息，请阅读[Recipe
    6.7](#validating_a_date)。
- en: 'Revisiting [Example 6-5](#strtotime_parse_error) and leveraging `date_parse()`
    shows a little more about why PHP has trouble parsing `2 days from now` as a relative
    date. Consider the following example:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 重新访问[Example 6-5](#strtotime_parse_error)并利用`date_parse()`显示了为什么PHP在解析`2 days
    from now`作为相对日期时遇到困难的更多信息。考虑以下例子：
- en: '[PRE15]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The preceding code will print `The time zone could not be found in the database`,
    which suggests PHP is *trying* to parse the date but is failing to identify what
    `from` really means in the statement `from now`. In fact, inspecting the `$date`
    array itself will show it returns a `relative` key. This relative offset properly
    represents the specified two days, meaning `date_parse()` (and even `strtotime()`)
    was able to read the relative date offset (`2 days`) but choked on the last part.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码将打印`The time zone could not be found in the database`，这表明PHP正在*尝试*解析日期，但无法确定语句`from
    now`中的`from`实际上意味着什么。事实上，检查`$date`数组本身将显示它返回了一个`relative`键。这个相对偏移正确表示了指定的两天，这意味着`date_parse()`（甚至`strtotime()`）能够读取相对日期偏移（`2
    days`），但在最后一部分上却无法处理。
- en: This additional error provides further context for debugging and could, perhaps,
    inform some kind of error message that the application should provide to the end
    user. In any case, it’s more helpful than the mere `false` return of `strtotime()`
    on its own.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 这个额外的错误提供了进一步的调试上下文，可能会为应用程序提供给最终用户的某种错误消息提供信息。无论如何，这比`strtotime()`单独返回的简单`false`更有帮助。
- en: See Also
  id: totrans-232
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: Documentation on [`date_parse()`](https://oreil.ly/2CECz) and [`strtotime()`](https://oreil.ly/S7qkH).
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '[`date_parse()`](https://oreil.ly/2CECz)和[`strtotime()`](https://oreil.ly/S7qkH)的文档。'
- en: 6.7 Validating a Date
  id: totrans-234
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6.7 验证日期
- en: Problem
  id: totrans-235
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to ensure that a date is valid. For example, you want to ensure that
    a user-defined birthdate is a real date on the calendar and not something like
    November 31, 2022.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 你想确保一个日期是有效的。例如，你想确保用户定义的生日是日历上的真实日期，而不是像2022年11月31日这样的日期。
- en: Solution
  id: totrans-237
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'Use PHP’s `checkdate()` function as follows:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 使用PHP的`checkdate()`函数如下：
- en: '[PRE16]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Discussion
  id: totrans-240
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: The `date_parse()` function was already covered in [Recipe 6.6](#parsing_arbitrary_dates),
    but using it with `checkdate()` is new. This second function attempts to validate
    that the date is valid according to the calendar.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '`date_parse()`函数已经在[Recipe 6.6](#parsing_arbitrary_dates)中讨论过，但与`checkdate()`一起使用是新的。这第二个函数尝试验证日期是否根据日历有效。'
- en: It checks that the month (first parameter) is between 1 and 12, that the year
    (third parameter) is between 1 and 32,767 (the maximum value of a 2-byte integer
    in PHP), and that the number of days is valid for that given month and year.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 它检查月份（第一个参数）是否在1到12之间，年份（第三个参数）是否在1到32,767之间（PHP中2字节整数的最大值），以及该给定月份和年份的天数是否有效。
- en: The `checkdate()` function properly handles months with 28, 30, or 31 days.
    [Example 6-7](#leapyear_validation) shows it also accounts for leap year, validating
    that February 29 exists in the appropriate years.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '`checkdate()`函数正确处理具有28、30或31天的月份。[Example 6-7](#leapyear_validation)显示它还考虑了闰年，验证了二月29日是否存在于适当的年份中。'
- en: Example 6-7\. Validating leap year
  id: totrans-244
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 6-7\. 验证闰年
- en: '[PRE17]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: See Also
  id: totrans-246
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: PHP documentation on [`checkdate()`](https://oreil.ly/T2io8).
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: PHP文档关于[`checkdate()`](https://oreil.ly/T2io8)。
- en: 6.8 Adding to or Subtracting from a Date
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6.8 添加或减去日期
- en: Problem
  id: totrans-249
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to apply a specific offset (either additive or subtractive) against
    a fixed date. For example, you want to calculate a future date by adding days
    to today’s date.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 你想对一个固定日期应用特定的偏移量（无论是加法还是减法）。例如，你想通过将天数添加到今天的日期来计算未来的日期。
- en: Solution
  id: totrans-251
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use the `::add()` or `::sub()` methods of a given `DateTime` object to add or
    subtract a `DateInterval`, respectively, as shown in [Example 6-8](#example_datetime_addition).
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 使用给定`DateTime`对象的`::add()`或`::sub()`方法分别添加或减去`DateInterval`，如[示例 6-8](#example_datetime_addition)所示。
- en: Example 6-8\. Simple `DateTime` addition
  id: totrans-253
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 6-8\. 简单的`DateTime`添加
- en: '[PRE18]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Discussion
  id: totrans-255
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: Both the `::add()` and `::sub()` methods on a `DateTime` object modify the object
    itself by either adding or subtracting the given interval. Intervals are specified
    using a period designation that identifies the amount of time that interval represents.
    [Table 6-5](#table_dateinterval_durations) illustrates the format characters used
    to denote an interval.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 在`DateTime`对象上，`::add()`和`::sub()`方法会分别通过添加或减去给定的间隔来修改对象本身。间隔使用的周期标识指定了该间隔表示的时间量。[表 6-5](#table_dateinterval_durations)展示了用于表示间隔的格式字符。
- en: Table 6-5\. Period designations used by `DateInterval`
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 表 6-5\. `DateInterval`使用的周期标识
- en: '| Character | Description |'
  id: totrans-258
  prefs: []
  type: TYPE_TB
  zh: '| 字符 | 描述 |'
- en: '| --- | --- |'
  id: totrans-259
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| **Period designators** |  |'
  id: totrans-260
  prefs: []
  type: TYPE_TB
  zh: '| **周期标识符** |  |'
- en: '| `Y` | Years |'
  id: totrans-261
  prefs: []
  type: TYPE_TB
  zh: '| `Y` | 年 |'
- en: '| `M` | Months |'
  id: totrans-262
  prefs: []
  type: TYPE_TB
  zh: '| `M` | 月 |'
- en: '| `D` | Days |'
  id: totrans-263
  prefs: []
  type: TYPE_TB
  zh: '| `D` | 天 |'
- en: '| `W` | Weeks |'
  id: totrans-264
  prefs: []
  type: TYPE_TB
  zh: '| `W` | 周 |'
- en: '| **Time designators** |  |'
  id: totrans-265
  prefs: []
  type: TYPE_TB
  zh: '| **时间标识符** |  |'
- en: '| `H` | Hours |'
  id: totrans-266
  prefs: []
  type: TYPE_TB
  zh: '| `H` | 小时 |'
- en: '| `M` | Minutes |'
  id: totrans-267
  prefs: []
  type: TYPE_TB
  zh: '| `M` | 分钟 |'
- en: '| `S` | Seconds |'
  id: totrans-268
  prefs: []
  type: TYPE_TB
  zh: '| `S` | 秒 |'
- en: Every formatted date interval period starts with the letter `P`. This is followed
    by the number of years/months/days/weeks in that period. Any time elements in
    a duration are prefixed with the letter `T`.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 每个格式化的日期间隔周期都以字母`P`开头。接着是该周期中的年/月/日/周数。持续时间中的任何时间元素都以字母`T`作为前缀。
- en: Warning
  id: totrans-270
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: The period designations for months and minutes are both the letter `M`. This
    can lead to confusion when trying to identify 15 *minutes* versus 15 *months*
    in a time designation. If you intend to use minutes, ensure that your duration
    has properly used the `T` prefix to avoid a frustrating error in your application.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 月份和分钟的周期标识都是字母`M`。在时间标识中，这可能导致在识别15分钟与15个月时产生混淆。如果你打算使用分钟，请确保你的持续时间已正确使用了`T`前缀，以避免在应用程序中出现令人沮丧的错误。
- en: For example, a period of 3 weeks and 2 days would be represented as `P3W2D`.
    A period of 4 months, 2 hours, and 10 seconds would be represented as `P4MT2H10S`.
    Similarly, a period of 1 month, 2 hours, and 30 minutes would be represented as
    `P1MT2H30M`.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，3周零2天的期间将表示为`P3W2D`。4个月、2小时和10秒的期间将表示为`P4MT2H10S`。同样，1个月、2小时和30分钟的期间将表示为`P1MT2H30M`。
- en: Mutability
  id: totrans-273
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 可变性
- en: Note that, in [Example 6-8](#example_datetime_addition), the original `DateTime`
    object is itself modified when you call `::add()`. In a simple example, this is
    fine. If you’re attempting to calculate *multiple* dates offset from the same
    starting date, the mutability of the `DateTime` object causes problems.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在[示例 6-8](#example_datetime_addition)中，调用`::add()`时会修改原始的`DateTime`对象本身。在简单的示例中，这是可以接受的。如果你尝试从相同的起始日期计算*多个*日期偏移量，则`DateTime`对象的可变性会导致问题。
- en: Instead, you can leverage the nearly identical `DateTimeImmutable` object. This
    class implements the same interface as `DateTime`, but the `::add()` and `::sub()`
    methods will instead return *new instances* of the class rather than mutating
    the internal state of the object itself.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 取而代之，你可以利用几乎相同的`DateTimeImmutable`对象。该类实现了与`DateTime`相同的接口，但是`::add()`和`::sub()`方法会返回该类的*新实例*，而不是改变对象本身的内部状态。
- en: Consider the comparison between both object types in [Example 6-9](#comparing_datetime_object_types).
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 在[示例 6-9](#comparing_datetime_object_types)中考虑两种对象类型的比较。
- en: Example 6-9\. Comparing `DateTime` and `DateTimeImmutable`
  id: totrans-277
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 6-9\. 比较`DateTime`和`DateTimeImmutable`
- en: '[PRE19]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[![1](assets/1.png)](#co_dates_and_times_CO4-1)'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_dates_and_times_CO4-1)'
- en: Since `$date` is a mutable object, invoking its `::add()` method will modify
    the object directly.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`$date`是一个可变对象，调用其`::add()`方法将直接修改对象。
- en: '[![2](assets/2.png)](#co_dates_and_times_CO4-2)'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_dates_and_times_CO4-2)'
- en: As `$christmas` is immutable, invoking `::add()` will return a new object that
    must be stored in a variable.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`$christmas`是不可变的，调用`::add()`将返回一个新对象，必须将其存储在变量中。
- en: '[![3](assets/3.png)](#co_dates_and_times_CO4-3)'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_dates_and_times_CO4-3)'
- en: Printing data from the resulting object from adding time to a `DateTime​Immu⁠ta⁠ble`
    will present the correct data, as the *new* object was created with the right
    date and time.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 将时间添加到`DateTimeImmutable`后，打印结果对象的数据将呈现正确的数据，因为这个*新*对象是用正确的日期和时间创建的。
- en: '[![4](assets/4.png)](#co_dates_and_times_CO4-4)'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_dates_and_times_CO4-4)'
- en: Even after invoking `:add()`, a `DateTimeImmutable` object will always contain
    the same data as it is, in fact, immutable.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 即使调用`:add()`后，`DateTimeImmutable`对象始终包含相同的数据，因为它实际上是不可变的。
- en: The advantage of immutable objects is that you can treat them as constant and
    rest assured that no one is going to rewrite the calendar when you’re not looking.
    The only disadvantage is with memory utilization. Since `DateTime` modifies a
    single object, memory doesn’t necessarily increase as you keep making changes.
    Every time you “modify” a `DateTimeImmutable` object, however, PHP creates a new
    object and consumes additional memory.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 不可变对象的优点在于您可以将它们视为常量，并放心地知道没有人在您不注意时会重写日历。唯一的缺点是内存利用率。由于`DateTime`修改单个对象，随着您不断进行更改，内存不一定会增加。然而，每次“修改”`DateTimeImmutable`对象时，PHP都会创建一个新对象并消耗额外的内存。
- en: In a typical web application, the memory overhead here will be negligible. There
    is no reason *not* to use a `DateTimeImmutable` object.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 在典型的Web应用程序中，这里的内存开销几乎可以忽略不计。没有理由*不*使用`DateTimeImmutable`对象。
- en: Simpler modification
  id: totrans-289
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更简单的修改
- en: In a similar track, both `DateTime` and `DateTimeImmutable` implement a `::modify()`
    method that works with human-readable strings rather than interval objects. This
    allows you to find relative dates like “last Friday” or “next week” from a given
    object.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 在类似的路径中，`DateTime`和`DateTimeImmutable`都实现了一个`::modify()`方法，该方法使用人类可读的字符串而不是间隔对象。这允许您从给定对象中查找相对日期，如“上个星期五”或“下周”。
- en: A good example is Thanksgiving which, in the US, falls on the fourth Thursday
    in November. You can easily calculate the exact date in a given year with the
    function defined in [Example 6-10](#datetime_find_thanksgiving).
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 一个很好的例子是美国的感恩节，它在每年11月的第四个星期四。您可以使用[示例 6-10](#datetime_find_thanksgiving)中定义的函数轻松计算给定年份中的确切日期。
- en: Example 6-10\. Finding Thanksgiving with `DateTime`
  id: totrans-292
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 6-10\. 使用`DateTime`找到感恩节
- en: '[PRE20]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The same functionality can be implemented using immutable date objects, as shown
    in [Example 6-11](#datetimeimmutable_find_thanksgiving).
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用不可变日期对象实现相同的功能，如[示例 6-11](#datetimeimmutable_find_thanksgiving)所示。
- en: Example 6-11\. Finding Thanksgiving with `DateTimeImmutable`
  id: totrans-295
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 6-11\. 使用`DateTimeImmutable`找到感恩节
- en: '[PRE21]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: See Also
  id: totrans-297
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: Documentation on [`DateInterval`](https://oreil.ly/KvluE).
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DateInterval`](https://oreil.ly/KvluE)上的文档。'
- en: 6.9 Calculating Times Across Time Zones
  id: totrans-299
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6.9 在时区之间计算时间
- en: Problem
  id: totrans-300
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to determine a specific time across more than one time zone.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 您想要跨多个时区确定特定时间。
- en: Solution
  id: totrans-302
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'Use the `::setTimezone()` method of the `DateTime` class to change a time zone
    as follows:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`DateTime`类的`::setTimezone()`方法来更改时区如下：
- en: '[PRE22]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Discussion
  id: totrans-305
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: Time zones are among the most frustrating things application developers need
    to worry about. Thankfully, PHP allows for converting from one time zone to another
    relatively easily. The `::setTimezone()` method used in the Solution example illustrates
    how an arbitrary `DateTime` can be converted from one time zone to another merely
    by specifying the desired time zone.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 时区是应用程序开发者最令人沮丧的事情之一。幸运的是，PHP允许相对轻松地从一个时区转换到另一个时区。解决方案示例中使用的`::setTimezone()`方法说明了如何仅通过指定所需的时区将任意`DateTime`转换为另一个时区。
- en: Note
  id: totrans-307
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Keep in mind that both `DateTime` and `DateTimeImmutable` implement a `::setTimezone()`
    method. The difference between their implementations is that `DateTime` will modify
    the state of the underlying object, while `DateTimeImmutable` will always return
    a *new* object instead.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`DateTime`和`DateTimeImmutable`都实现了`::setTimezone()`方法。它们之间的区别在于，`DateTime`会修改底层对象的状态，而`DateTimeImmutable`始终会返回一个*新*对象。
- en: It is important to know which time zones are available for use in code. The
    list is too long to enumerate, but developers can leverage `DateTimeZone::listIdentifiers()`
    to list all available named time zones. If your application only cares about a
    specific region, you can further pare down the list by using one of the predefined
    group constants that ship with the class.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 了解代码中可用的时区非常重要。列出所有可用的命名时区过长，但开发人员可以利用`DateTimeZone::listIdentifiers()`列出所有可用的命名时区。如果您的应用程序只关心特定地区，您可以进一步使用该类提供的预定义组常量来简化列表。
- en: 'For example, `DateTimeZone::listIdentifiers(DateTimeZone::AMERICA)` returns
    an array that lists all time zones available across the Americas. On a particular
    test system, this array has a list of 145 time zones, each pointing to a major
    local city to help identify the time zone they represent. You can generate a list
    of possible time zone identifiers for each of the following regional constants:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，`DateTimeZone::listIdentifiers(DateTimeZone::AMERICA)` 返回一个数组，列出了所有在美洲可用的时区。在特定的测试系统上，这个数组列出了
    145 个时区，每个时区指向一个主要的本地城市，以帮助识别它们代表的时区。您可以为以下每个地区常量生成可能的时区标识符列表：
- en: '`DateTimeZone::AFRICA`'
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DateTimeZone::AFRICA`'
- en: '`DateTimeZone::AMERICA`'
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DateTimeZone::AMERICA`'
- en: '`DateTimeZone::ANTARCTICA`'
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DateTimeZone::ANTARCTICA`'
- en: '`DateTimeZone::ARCTIC`'
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DateTimeZone::ARCTIC`'
- en: '`DateTimeZone::ASIA`'
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DateTimeZone::ASIA`'
- en: '`DateTimeZone::ATLANTIC`'
  id: totrans-316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DateTimeZone::ATLANTIC`'
- en: '`DateTimeZone::AUSTRALIA`'
  id: totrans-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DateTimeZone::AUSTRALIA`'
- en: '`DateTimeZone::EUROPE`'
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DateTimeZone::EUROPE`'
- en: '`DateTimeZone::INDIAN`'
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DateTimeZone::INDIAN`'
- en: '`DateTimeZone::PACIFIC`'
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DateTimeZone::PACIFIC`'
- en: '`DateTimeZone::UTC`'
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DateTimeZone::UTC`'
- en: '`DateTimeZone::ALL`'
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DateTimeZone::ALL`'
- en: Similarly, you can use bitwise operators to construct unions from these constants
    to retrieve lists of all time zones across two or more regions. For example, `DateTimeZone::ANTARCTICA
    | DateTimeZone::ARCTIC` would represent all time zones near either the South or
    North Pole.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，您可以使用位运算符从这些常量中构建联合，以检索跨两个或更多地区的所有时区列表。例如，`DateTimeZone::ANTARCTICA | DateTimeZone::ARCTIC`
    将表示靠近南极或北极的所有时区。
- en: The base `DateTime` class empowers you to instantiate an object with a specific
    time zone as opposed to accepting the system defaults. Merely pass a `DateTimeZone`
    instance as an optional second parameter to the constructor, and the new object
    will be set to the correct time zone automatically.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 基础的 `DateTime` 类使您能够实例化一个具有特定时区的对象，而不是接受系统默认设置。只需将一个 `DateTimeZone` 实例作为可选的第二个参数传递给构造函数，新对象将自动设置为正确的时区。
- en: 'For example, the datetime `2022-12-15T17:35:53`, formatted according to [ISO
    8601](https://oreil.ly/rip_R), represents 5:35 p.m. on December 15, 2022, but
    does not reflect a specific time zone. When instantiating a `DateTime` object,
    you can easily specify this is a time in Tokyo, Japan, as follows:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，按照 [ISO 8601](https://oreil.ly/rip_R) 格式化的日期时间 `2022-12-15T17:35:53` 表示 2022
    年 12 月 15 日下午 5:35，但不反映具体的时区。在实例化 `DateTime` 对象时，您可以轻松指定这是日本东京的时间，如下所示：
- en: '[PRE23]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: If time zone information is missing in the datetime string being parsed, providing
    that time zone makes things explicit. Had you *not* added a time zone identifier
    in the preceding example, PHP would have assumed the system’s configured time
    zone instead.^([2](ch06.html#idm45875163212384))
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要解析的日期时间字符串中缺少时区信息，则提供该时区会使事情更加明确。如果在前面的示例中*未*添加时区标识符，PHP 将假定系统配置的时区。
- en: If time zone information *is* present in the datetime string, PHP will ignore
    any explicit time zone specified in the second parameter and parse the string
    as provided.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 如果日期时间字符串中存在时区信息，PHP 将忽略第二参数中指定的显式时区，并按照提供的字符串解析。
- en: See Also
  id: totrans-329
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: Documentation on the [`::setTimezone()` method](https://oreil.ly/dk2gQ) and
    the [`DateTimeZone` class](https://oreil.ly/MkdHB).
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 [`::setTimezone()` 方法](https://oreil.ly/dk2gQ) 和 [`DateTimeZone` 类](https://oreil.ly/MkdHB)
    的文档。
- en: ^([1](ch06.html#idm45875164755616-marker)) Format strings and available format
    characters are covered in [Recipe 6.2](#formatting_dates_and_times).
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch06.html#idm45875164755616-marker)) 格式字符串和可用的格式字符在 [Recipe 6.2](#formatting_dates_and_times)
    中有介绍。
- en: ^([2](ch06.html#idm45875163212384-marker)) You can check the current time zone
    setting for your system with `date_default_timezone_get()`.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch06.html#idm45875163212384-marker)) 您可以使用 `date_default_timezone_get()`
    检查系统当前的时区设置。
