- en: Chapter 10\. What’s New in PHP 8 and MySQL 8
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章。PHP 8 和 MySQL 8 的新特性
- en: By the end of the second decade of the 21st century, both PHP and MySQL had
    matured into their eighth versions and can now be considered highly mature products
    by software technology standards.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到21世纪第二个十年结束时，PHP 和 MySQL 都已经成熟到了它们的第八个版本，并且按照软件技术标准可以被认为是高度成熟的产品。
- en: According to the [w3techs.com](https://tinyurl.com/w3tpl) website, by early
    2021 PHP was used in one way or another by over 79% of all websites, a massive
    70% ahead of its nearest rival, ASP.NET. [explore-group.com](https://tinyurl.com/egctmpd)
    reported that in 2019 MySQL remained the most popular database in use on the web,
    installed on 52% of websites. Although MySQL’s market share had slipped a little
    in recent years, it still remained a good 16% ahead of its nearest competitor,
    PostgreSQL, which is used on 36% of websites. It appears this will continue to
    be the case in the foreseeable future, especially as the almost identical MariaDB
    also lays claim to a percentage of the market.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 根据[w3techs.com](https://tinyurl.com/w3tpl)网站的说法，到2021年初，PHP在各种网站中以某种方式被使用，超过了79%，远远超过最接近的竞争对手ASP.NET的70%。[explore-group.com](https://tinyurl.com/egctmpd)
    报告称，2019年MySQL仍然是网页上使用最广泛的数据库，安装在52%的网站上。尽管MySQL的市场份额在近年来有所下降，但它仍然比最接近的竞争对手PostgreSQL多16%，后者在36%的网站上使用。似乎这种情况在可预见的未来将继续存在，特别是由于几乎相同的MariaDB也在市场中占有一定比例。
- en: With the latest version 8 releases of these two technologies, along with JavaScript,
    these mainstays of modern web development appear set to remain important to web
    development for many years to come. So let’s take a look at what’s new in the
    latest versions of PHP and MySQL.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 随着这两种技术的最新8版本，以及JavaScript，这些现代Web开发的支柱看起来将在未来多年内继续保持重要性。因此，让我们来看看最新版本的PHP和MySQL中有什么新功能。
- en: About This Chapter
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于本章
- en: The latest releases of both of these technologies occurred as this edition of
    the book was being prepared, so this short chapter is more of a summary or update.
    It not only includes information useful to the beginning to intermediate PHP and
    MySQL developer, but it also takes the opportunity to detail some of the more
    advanced improvements that have been made to the two technologies.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本书版本准备时，这两种技术的最新版本已经发布，因此本章更多地是一个总结或更新。它不仅包含对初学者和中级PHP和MySQL开发人员有用的信息，还利用机会详细介绍了这两种技术中所做的一些更高级的改进。
- en: If any of the following is a topic you have not yet covered in this book or
    elsewhere, don’t worry; you don’t (yet) need it in your development toolkit. But
    with those you have seen before, you’ll understand what’s been added or changed
    and have a hint of how to make use of it.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如果以下任何内容是您在本书或其他地方尚未涉及的话题，请不要担心；您还不需要（甚至不需要）在您的开发工具包中使用它。但对于那些您以前见过的，您将理解新增或更改的内容，并有一些如何利用它的提示。
- en: Future editions of this book will incorporate those parts most useful to a new
    developer within the main body of the tutorials.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的未来版本将在教程的主体中包含对新开发者最有用的部分。
- en: PHP 8
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PHP 8
- en: 'Version 8 of PHP marks a major update and a huge milestone, bringing a number
    of new features to the following: type, system, syntax error handling, strings,
    object-oriented programming, and more.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: PHP 8 的第8版标志着一个重大更新和一个重要的里程碑，为以下内容带来了许多新功能：类型，系统，语法错误处理，字符串，面向对象编程等等。
- en: The new features make PHP more powerful and easy to use than ever while minimizing
    changes that could break or modify existing installations.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 新功能使得 PHP 比以往更加强大和易于使用，同时最大限度地减少可能会破坏或修改现有安装的更改。
- en: For example, Named Parameters, Just In Time (JIT) compilation, Attributes, and
    Constructor Properties bring major improvements and syntax changes, improved error
    handling, and changes and improvements in operators to help reduce the chances
    of overlooked bugs.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，命名参数，即时（JIT）编译，属性和构造函数属性带来了重大的改进和语法变化，改进的错误处理，以及操作符的变化和改进，以帮助减少忽视错误的机会。
- en: PHP8 and the AMPPS Stack
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PHP8 和 AMPPS 堆栈
- en: At the time of writing, the AMPPS stack, which you were recommended to install
    in [Chapter 2](ch02.xhtml#setting_up_a_development_server), comes with MySQL 8.0.18,
    but its version of PHP is still 7.3.11\. During the course of publication of this
    book, it is anticipated that version 8 of PHP will be included in the AMPPS stack,
    and I recommend you let AMPPS handle its installation for you, especially if you
    are a beginner. But if it is not yet available in AMPPS, and you wish to start
    using PHP 8 immediately, you can always download the newer version directly from
    the [php.net](http://php.net) website, following the instructions provided there
    to install and use it.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，建议您在[第二章](ch02.xhtml#setting_up_a_development_server)中安装的AMPPS堆栈版本包含MySQL
    8.0.18，但其PHP版本仍为7.3.11。在本书出版过程中，预计AMPPS堆栈将包含PHP 8的版本，并建议您让AMPPS为您处理安装，特别是如果您是初学者。但如果AMPPS尚未提供PHP
    8，而您希望立即开始使用PHP 8，您可以直接从[php.net](http://php.net)网站下载更新版本，并按照提供的说明安装和使用它。
- en: Named Parameters
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 命名参数
- en: 'In addition to traditional positional parameters, in which the order in which
    arguments are passed must always be the same, PHP 8 allows named parameters in
    function calls, like this:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 除了传统的位置参数外，在函数调用中还可以使用命名参数，就像这样：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This makes the function (or method) parameter names a part of the public API
    and allows you to pass input data into a function, based on their argument names,
    instead of the argument order, substantially increasing code clarity. Therefore,
    because the parameters are passed by name, their order is no longer of importance,
    which should lead to fewer difficult-to-find bugs. Incidentally, `str_contains`
    (explained later) is also new to PHP 8.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得函数（或方法）参数名成为公共API的一部分，并允许您根据它们的参数名而不是参数顺序将输入数据传递到函数中，大大提高了代码清晰度。因此，由于参数是按名称传递的，它们的顺序不再重要，这应该会减少难以找到的错误。顺便说一句，`str_contains`（稍后解释）也是PHP
    8的新功能。
- en: Attributes
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 属性
- en: In PHP 8, attributes (such as properties and variables) map to PHP class names,
    allowing the inclusion of metadata in classes, methods, and variables. Previously
    you would have had to use DocBloc comments to infer them.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在PHP 8中，属性（如属性和变量）映射到PHP类名，允许在类、方法和变量中包含元数据。以前，您必须使用DocBloc注释来推断它们。
- en: Attributes are a way to give one system or program details of another system,
    such as a plug-in or an event system, and are simple classes annotated with the
    `#[Attribute]`  attribute, which can be attached to classes, properties, methods,
    functions, class constants, or function/method parameters.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 属性是一种将一个系统或程序的细节提供给另一个系统（如插件或事件系统）的方法，是简单的带有`#[Attribute]`注释的类，可以附加到类、属性、方法、函数、类常量或函数/方法参数上。
- en: At runtime attributes do nothing and have no impact on the code. However, they
    are available to the reflection API, which allows other code to examine the attribute
    and take additional actions.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行时，属性不起任何作用，对代码没有影响。但是，它们可以通过反射API使用，允许其他代码检查属性并采取额外的操作。
- en: You can find a good explanation of attributes (which are somewhat out of the
    scope of this book) in the [PHP.net overview](https://tinyurl.com/php8attr).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[PHP.net概述](https://tinyurl.com/php8attr)中找到有关属性（有些超出本书范围）的很好解释。
- en: As long as they are on a single line, attributes are interpreted as comments
    in older PHP versions and therefore are safely ignored.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 只要它们在一行上，属性在较旧的PHP版本中被解释为注释，因此安全地被忽略。
- en: Constructor Properties
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构造函数属性
- en: 'With PHP 8 you can now declare class properties right from the class constructor,
    saving a great deal of boilerplate coding. Take this code, for example:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 使用PHP 8，您现在可以直接从类构造函数中声明类属性，从而节省大量重复代码。例如，看看这段代码：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'With constructor properties you can now reduce all of that to the following:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 使用构造函数属性，您现在可以将所有这些减少到以下内容：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This is a backward-incompatible feature, so only use it where you know for sure
    that PHP 8 is installed.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个不兼容的特性，所以只有在确保已安装PHP 8的情况下才使用它。
- en: Just-In-Time Compilation
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 即时编译
- en: When enabled, Just In Time (JIT) compiles and caches native instructions (as
    opposed to what’s known as the OPcache, which saves file parsing time) to provide
    a performance boost to CPU-heavy applications.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 启用时，即时（JIT）编译并缓存本机指令（而不是所谓的OPcache，它保存文件解析时间），以提供性能提升给CPU密集型应用程序。
- en: 'You can enable JIT in the *php.ini* file like this:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '您可以像这样在*php.ini*文件中启用JIT： '
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Bear in mind that JIT is relatively new to PHP and that it currently makes debugging
    and profiling harder with the added layer. Also, there were issues with JIT right
    up to the day before initial release, so be wary that there may remain some undiscovered
    bugs in the system for a short period until they are ironed out. Therefore, JIT
    compilation is disabled by default, and you should probably keep it disabled while
    debugging, just in case.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，JIT对PHP来说是相对较新的，它目前使得调试和性能分析更加困难。此外，在初始发布前的一天，JIT还存在问题，因此要注意可能在系统中存在一些未发现的bug，在此期间最好禁用JIT编译，并且在调试时应该保持禁用。
- en: Union Types
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 联合类型
- en: 'In PHP 8, type declarations can be extended with Union Types to declare more
    than one type (which also supports `false` as a special type for Boolean `false`)
    like this:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在PHP 8中，类型声明可以扩展为联合类型，以声明多个类型（也支持`false`作为布尔值`false`的特殊类型），例如：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Null-safe Operator
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 空安全操作符
- en: 'In the following, the `?->` null-safe operator will short-circuit the remainder
    of the section if it encounters a `null` value and will return a `null` immediately
    without causing an error:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下内容中，`?->` 空安全操作符会在遇到`null`值时立即返回`null`，而不会导致错误，并且会短路后续的代码块：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Previously you would have needed to use several sequential calls to `isset()`
    for each section, testing them each in turn for having a `null` value.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，你可能需要对每个部分使用多个连续的`isset()`调用进行测试，以检查它们是否为`null`值。
- en: match Expressions
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: match表达式
- en: 'A `match` expression is like a `switch` block, but it provides type-safe comparisons, supports
    a return value, does not require a `break` statement to break out, and also supports
    multiple matching values. So this rather cumbersome `switch` block:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`match`表达式类似于`switch`语句块，但提供了类型安全的比较，支持返回值，不需要`break`语句跳出，同时支持多个匹配值。因此，这个相对繁琐的`switch`块：'
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'can be replaced with the following much simpler `match` expression:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 可以用以下简单得多的`match`表达式来替代：
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Regarding type-safe comparisons, a `switch` statement will get quite confused
    by the following code, because it will evaluate `'0e0'` as being an exponential
    value for zero and will echo `'null'`, when it ought to echo `'a'`. However, `match`
    will not have this issue.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 关于类型安全比较，`switch`语句对以下代码会感到困惑，因为它将`'0e0'`视为零的指数值，并输出`'null'`，而实际上应该输出`'a'`。然而，`match`不会出现这个问题。
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: New Functions
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 新函数
- en: PHP 8 provides a number of new functions that offer greater functionality and
    improvements to the language, covering areas such as string handling, debugging,
    and error handling.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: PHP 8提供了许多新函数，提供了更多功能和语言改进，涵盖字符串处理、调试和错误处理等领域。
- en: str_contains
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: str_contains
- en: The `str` function will return whether or not a string is contained within another
    string. It is a better function than `strpos`, because `strpos` returns the position
    of a string within another, or the value `false` if it’s not found. But there’s
    a potential problem because if the string is found at position zero and the value
    0 is returned, this evaluates to `false` unless the strict comparison operator
    (`===`) is used instead of `==`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`str`函数将返回一个字符串是否包含在另一个字符串中。它比`strpos`函数更好，因为`strpos`返回一个字符串在另一个字符串中的位置，如果未找到则返回`false`。但是存在一个潜在的问题，如果字符串在位置零被找到并且返回值为0，则使用`==`进行比较时会被解释为`false`，除非使用严格比较运算符（`===`）。'
- en: 'Therefore, using `strpos`, you need to write less-than-clear code such as this:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，使用`strpos`时，你需要编写以下不太清晰的代码：
- en: '[PRE9]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'whereas code using `str_contains`, such as the following, is far clearer to
    understand when quickly scanning (and writing) code and is less likely to lead
    to obscure bugs:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 而使用`str_contains`的代码如下所示，在快速扫描（和编写）代码时更加清晰，不太可能导致隐蔽的bug：
- en: '[PRE10]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The `str_contains` function is case-sensitive, so if you need to perform a
    case-*in*sensitive check you should run both `$needle` and `$haystack` through
    a function to remove case first, such as `strtolower`, like this:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`str_contains`函数是区分大小写的，所以如果需要进行不区分大小写的检查，应该先将`$needle`和`$haystack`都通过函数转换为小写，例如`strtolower`，像这样：'
- en: '[PRE11]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Should you wish to use `str_contains` and also ensure your code is backward
    compatible with older versions of PHP, you can employ the use of a polyfill (code
    that provides a feature your code expects to be natively available) to create
    your own version of the `str_contains` function (should it not already exist).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望使用`str_contains`并确保您的代码与旧版本的PHP兼容，您可以使用兼容性解决方案（提供您的代码期望的功能的代码），创建自己的`str_contains`函数版本（如果尚不存在）。
- en: Help with Polyfills
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 帮助使用兼容性解决方案
- en: Rather than coming up with your own polyfills, which could inadvertently introduce
    errors into your code, or be noncompatible with other people’s polyfills, you
    can use the ready-made Symfony polyfill package for PHP 8 available for free on [GitHub](https://github.com/symfony/polyfill-php80).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是编写自己的兼容性解决方案，可能会无意中引入错误或与其他人的兼容性解决方案不兼容，您可以使用在[GitHub](https://github.com/symfony/polyfill-php80)上免费提供的PHP
    8 Symfony兼容性解决方案包。
- en: 'In the following polyfill function for PHP 7+, the check for `$needle` being
    the empty string is there because PHP 8 considers the empty string to exist at
    every position within every string (even including within the empty string), so
    this behavior must be matched by the replacement function:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下PHP 7+的兼容性解决方案函数中，对于`$needle`为空字符串的检查是必需的，因为PHP 8认为空字符串存在于每个字符串的每个位置（甚至包括在空字符串中），因此此行为必须与替换函数匹配：
- en: '[PRE12]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: str_starts_with
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: str_starts_with
- en: 'The `str_starts_with` function provides a clearer means of checking whether
    one string starts with another. Previously you would probably use the `strpos`
    function and check whether it returns the value zero, but since we have already
    seen that 0 and `false` can become confused in certain situations, `str_starts_with`
    reduces this possibility substantially. You use it like this:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`str_starts_with`函数提供了一种更清晰的方法来检查一个字符串是否以另一个字符串开头。以前，您可能会使用`strpos`函数并检查它是否返回零值，但是由于我们已经看到在某些情况下0和`false`可能会混淆，`str_starts_with`显著减少了这种可能性。您可以像这样使用它：'
- en: '[PRE13]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Just as with `str_contains`, the test is made in a case-sensitive manner, so
    use a function such as `strtolower` on both strings to perform an insensitive
    test. A PHP 7+ polyfill for this function could be the following:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 就像`str_contains`一样，测试是区分大小写的，因此在两个字符串上使用类似`strtolower`的函数执行不区分大小写的测试。PHP 7+的此函数的兼容性解决方案可能如下所示：
- en: '[PRE14]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Since PHP 8 considers the empty string to exist at every position in a string,
    this polyfill always returns `true` if `$needle` is the empty string.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 由于PHP 8认为空字符串存在于字符串的每个位置，因此如果`$needle`为空字符串，此兼容性解决方案始终返回`true`。
- en: str_ends_with
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: str_ends_with
- en: 'This function provides a clearer and simpler means of checking whether one
    string ends with another. Previously you would probably use the `substr` function,
    passing it the negative length of `$needle`, but `str_ends_with` makes this task
    far simpler. You use it like this:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数提供了一种更清晰和更简单的方法来检查一个字符串是否以另一个字符串结尾。以前，您可能会使用`substr`函数，并传递`$needle`的负长度，但是`str_ends_with`使得这个任务变得简单得多。您可以像这样使用它：
- en: '[PRE15]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Just as with the other new string functions, the test is made in a case-sensitive
    manner, so use a function such as `strtolower` on both strings to perform an insensitive
    test. A PHP 7+ polyfill for this function could be the following:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 就像其他新字符串函数一样，测试是区分大小写的，因此在两个字符串上使用类似`strtolower`的函数执行不区分大小写的测试。PHP 7+的此函数的兼容性解决方案可能如下所示：
- en: '[PRE16]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: If the second argument passed to `substr` is negative (as in this case), then
    the string is matched working backward that number of characters from its end.
    Once again this polyfill always returns `true` if `$needle` is the null string.
    Also, note the use of the `===` strict comparison operator to ensure an exact
    comparison is made between the two strings.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果传递给`substr`的第二个参数为负数（如本例），则从其末尾向后工作匹配该数字的字符数。同样，如果`$needle`是空字符串，则此兼容性解决方案始终返回`true`。还要注意使用`===`严格比较运算符确保在两个字符串之间进行精确比较。
- en: fdiv
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: fdiv
- en: The new `fdiv` function is similar to the existing `fmod` (which returns a floating-point
    remainder  after a division) and `intdiv` (which returns the integer quotient
    of a division) functions, but it allows for division by 0 without issuing a division-by-zero
    error, but returning one of  `INF`, `-INF`, or `NAN`, depending on the case.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 新的`fdiv`函数类似于现有的`fmod`（在除法后返回浮点余数）和`intdiv`（返回除法的整数商）函数，但允许除以0而不发出除以零错误，而是返回其中之一的值：`INF`，`-INF`或`NAN`，具体取决于情况。
- en: For example, `intdiv(1, 0)` will issue a division-by-zero error, as will `1
    % 0`, or simply `1 / 0`. But you can safely use `fdiv(1, 0)`, and the result will
    be a float with the value `INF`, while `fdiv(-1, 0)` returns `-INF`.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，`intdiv(1, 0)` 将会发出除零错误，`1 % 0` 或者简单地 `1 / 0` 也一样。但是你可以安全地使用 `fdiv(1, 0)`，结果将是一个带有值
    `INF` 的浮点数，而 `fdiv(-1, 0)` 返回 `-INF`。
- en: 'Here’s a PHP 7+ polyfill that you can use to make your code backward compatible:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个 PHP 7+ 的兼容解决方案，您可以使用它使您的代码向后兼容：
- en: '[PRE17]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: get_resource_id
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: get_resource_id
- en: PHP 8 adds the new `get_resource_id` function that is similar to an `(int) $resource` cast
    to make it easier to retrieve a resource ID, but the return type is checked to
    be a resource, and the return value is an integer, and therefore they are type
    safe.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: PHP 8 添加了新的 `get_resource_id` 函数，类似于将 `(int) $resource` 转换以更轻松地获取资源 ID，但是返回类型被检查为资源，返回值为整数，因此它们是类型安全的。
- en: get_debug_type
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: get_debug_type
- en: The `get_debug_type` function provides more consistent values than the existing
    `gettype` function and is best used to get detailed information on an unexpected
    variable in exception messages or logs, because it is more verbose and provides
    additional information. For more information, please refer to the [Wiki](https://wiki.php.net/rfc/get_debug_type).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`get_debug_type` 函数提供的值比现有的 `gettype` 函数更一致，并且最适合用于在异常消息或日志中获取意外变量的详细信息，因为它更冗长并提供额外信息。有关更多信息，请参阅[Wiki](https://wiki.php.net/rfc/get_debug_type)。'
- en: preg_last_error_msg
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: preg_last_error_msg
- en: PHP’s `preg_` functions do not throw exceptions, so if there is an error, you
    must retrieve any message using `preg_last_error` to get the error code. But if
    you want a friendly error message instead of just an unexplained code, in PHP
    8 you can now call `preg_last_error_msg`. If there was no error, then “No error”
    is returned.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: PHP 的 `preg_` 函数不会抛出异常，因此如果有错误，你必须使用 `preg_last_error` 来获取错误代码。但是如果你想要一个友好的错误消息而不仅仅是一个未解释的代码，在
    PHP 8 中现在可以调用 `preg_last_error_msg`。如果没有错误，则返回“没有错误”。
- en: As this book is aimed at the beginner to intermediate level, I have only really
    scratched the surface of all the great new features in PHP 8, giving you a taste
    of the main ones that you can start using right away. However, if you are keen
    to learn absolutely everything about this milestone update, you can get full details
    at the [official web page](https://www.php.net/releases/8.0).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 由于本书面向初学者到中级水平，我只是真正触及了 PHP 8 中所有伟大新功能的皮毛，让您品尝可以立即开始使用的主要功能。然而，如果您渴望学习关于这个里程碑更新的所有内容，您可以在[官方网页](https://www.php.net/releases/8.0)上获取完整详情。
- en: MySQL 8
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MySQL 8
- en: MySQL 8 was first released in 2018 before the previous edition of this book
    was able to cover the features included in the update. So now, with its most recent
    update (to 8.0.22) in late 2020, it’s a good opportunity to catch up with all
    that MySQL 8 has to offer over earlier releases, such as better Unicode support,
    better JSON and document handling, geographic support, and window functions.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 8 首次发布于 2018 年，在本书之前的版本中无法覆盖更新中包含的功能。因此，现在，随着最新更新（至 8.0.22）在 2020 年底的发布，是一个很好的机会，了解
    MySQL 8 相比早期版本提供的所有功能，如更好的 Unicode 支持、更好的 JSON 和文档处理、地理支持以及窗口函数。
- en: In this summary, you’ll get an overview of eight of the areas that have been
    improved, upgraded, or added to in the latest version 8 release.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在此摘要中，您将获得最新版本 8 中已经改进、升级或添加的八个领域的概述。
- en: Note
  id: totrans-91
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: MySQL 8 is the successor to version 5.7 because version 6 was never really taken
    up by the development community, and when Sun Microsystems purchased MySQL, development
    of version 6 was halted. More importantly, until version 8 the biggest change
    was from 5.6 to 5.7 so, according to Sun, “Due to the many new and important features
    we were introducing in this MySQL version, we decided to start a fresh new series.
    As the series numbers 6 and 7 had actually been used before by MySQL, we went
    to 8.0.”
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 8 是版本 5.7 的继任者，因为版本 6 从未真正被开发社区接受，而当 Sun Microsystems 收购 MySQL 时，版本 6
    的开发被中止。更重要的是，在版本 8 之前，最大的变化是从 5.6 到 5.7，因此根据 Sun 的说法，“由于我们在这个 MySQL 版本中引入了许多新的重要功能，我们决定启动一个全新的系列。由于
    MySQL 之前实际上已经使用了系列号 6 和 7，所以我们选择了 8.0。”
- en: Updates to SQL
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SQL 更新
- en: MySQL 8 now has window functions (also known as *analytic functions*). They
    are similar to grouped aggregate functions, which collapse calculations on sets
    of rows into a single row. However, a window or analytic function performs the
    aggregation for each row in the result set and is nonaggregate. As they are not
    central to your use of MySQL and should be considered advanced extensions, I do
    not cover them in this book.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 8现在引入了窗口函数（也称为*分析函数*）。它们类似于分组聚合函数，将行集的计算折叠为单行。然而，窗口或分析函数对结果集中的每一行执行聚合操作，是非聚合的。因为它们不是MySQL使用的核心部分，并且应被视为高级扩展，所以本书不涵盖它们。
- en: The new functions are `RANK`, `DENSE_RANK`, `PERCENT_RANK`, `CUME_DIST`, `NTILE`,
    `ROW_NUMBER`, `FIRST_VALUE`, `LAST_VALUE`, `NTH_VALUE`, `LEAD`, and `LAG`, and
    if you need to know more about them, they are fully documented on the MySQL [official
    website](https://tinyurl.com/mysql8winfuncs).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 新函数包括`RANK`、`DENSE_RANK`、`PERCENT_RANK`、`CUME_DIST`、`NTILE`、`ROW_NUMBER`、`FIRST_VALUE`、`LAST_VALUE`、`NTH_VALUE`，如果需要了解更多信息，可以在MySQL的[官方网站](https://tinyurl.com/mysql8winfuncs)上找到完整文档。
- en: MySQL 8 also brings recursive Common Table Expressions, enhanced alternatives
    of `NOWAIT` and `SKIP LOCKED` in the SQL locking clause, Descendent Indexes, a
    `GROUPING` function, and Optimizer Hints.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 8还引入了递归通用表达式（CTE）、增强的SQL锁定子句中的`NOWAIT`和`SKIP LOCKED`的替代方法、降序索引、`GROUPING`函数和优化器提示。
- en: All these and more can be viewed on the [MySQL website](https://tinyurl.com/mysql8statements).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些以及更多内容可以在[MySQL网站](https://tinyurl.com/mysql8statements)上查看。
- en: JSON (JavaScript Object Notation)
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JSON（JavaScript对象表示法）
- en: There are a number of new functions for handling JSON, while sorting and grouping
    of JSON values has been improved. As well as adding extended syntax for ranges
    in path expressions and improved sorting, there are new table, aggregation, merge,
    and other functions.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 有多个新函数用于处理JSON，同时JSON值的排序和分组已得到改进。此外，路径表达式中的范围扩展语法和排序改进，还有新的表、聚合、合并和其他函数。
- en: Given these improvements to MySQL and the use of JSON, it could be argued that
    MySQL can now be used instead of NoSQL databases.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于MySQL的这些改进和JSON的使用，可以认为MySQL现在可以用来替代NoSQL数据库。
- en: The use of JSON in MySQL is beyond the scope of this book, but if it is an area
    of interest to you, you can refer to [the official documentation on all the new
    features](https://tinyurl.com/mysql8json).
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 使用JSON在MySQL中的使用超出了本书的范围，但如果这是你感兴趣的领域，你可以参考[所有新特性的官方文档](https://tinyurl.com/mysql8json)。
- en: Geography Support
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 地理信息支持
- en: MySQL 8 also brings GIS, or Geography Support, including metadata support for
    SRS (Spatial Reference System), SRS data types, indexes, and functions. This means
    that MySQL can now (for example) calculate the distance between two points on
    the Earth’s surface using their latitude and longitude coordinates in any of the
    supported spatial reference systems.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 8还引入了GIS（地理信息系统）支持，包括对SRS（空间参考系统）的元数据支持、SRS数据类型、索引和函数。这意味着MySQL现在可以（例如）使用任何支持的空间参考系统中的纬度和经度坐标计算地球表面上两点之间的距离。
- en: For further details on how to access MySQL GIS, you can refer to [the official
    website](https://tinyurl.com/mysql8gis).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 若要详细了解如何访问MySQL GIS，可以参考[官方网站](https://tinyurl.com/mysql8gis)。
- en: Reliability
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可靠性
- en: MySQL is already extremely reliable, but it has been even further improved with
    version 8 by storing its metadata in the InnoDB transactional storage engine,
    such that *Users*,* Privileges*, and *Dictionary* tables now reside in `InnoDB`.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL已经非常可靠，但在版本8中进一步改进，通过将其元数据存储在InnoDB事务存储引擎中，使得*用户*、*权限*和*字典*表现在都位于`InnoDB`中。
- en: In MySQL 8 there is now only a single data dictionary, whereas in version 5.7
    and earlier there were two data dictionaries (one for the server and one for the
    `InnoDB` layer), which could get out of sync.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在MySQL 8中，现在只有一个数据字典，而在5.7版本及更早版本中有两个数据字典（一个用于服务器，一个用于`InnoDB`层），这可能导致不同步问题。
- en: From version 8 the user is guaranteed that any DDL statement (such as `CREATE
    TABLE`) will either be executed fully or not at all, preventing Primary and Replica
    servers from possibly getting out of sync.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本8开始，用户可以确保任何DDL语句（如`CREATE TABLE`）要么完全执行，要么完全不执行，以防止主副本服务器可能出现不同步的情况。
- en: Speed and Performance
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 速度和性能
- en: In MySQL, the Information Schema has been sped up by up to 100 times by storing
    the tables as simple views on data dictionary tables in `InnoDB`. Additionally,
    over 100 indexes on Performance Schema tables have been added to further speed
    up performance, which is also much improved with faster reads and writes, I/O
    bound workloads, and high-contention workloads, plus you can now map user threads
    to CPUs to further optimize performance.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在MySQL中，通过在`InnoDB`中将表存储为简单视图的数据字典表上，信息模式的速度提高了多达100倍。此外，对性能模式表添加了超过100个索引，进一步提高了性能，读写速度更快，适用于I/O密集型工作负载和高竞争工作负载，此外，现在可以将用户线程映射到CPU以进一步优化性能。
- en: MySQL 8 scales better on heavy write workloads by a factor of up to four times
    compared with version 5.7 and offers even more significant increases for read/write
    workloads.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 8在处理大量写入工作负载时，与版本5.7相比，性能提升了多达四倍，并对读写工作负载提供了更显著的增长。
- en: With MySQL you can use every storage device at its highest ability and performance
    is increased on high-contention workloads (where transactions are queuing up to
    be granted a lock).
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 使用MySQL，您可以充分利用每个存储设备的能力，提高在高竞争工作负载下的性能（事务排队等待锁的情况）。
- en: In all, the developers of MySQL 8 say that it is up to twice as fast, and you
    can read their reasoning and tips on how you can achieve this performance increase
    in your apps at [the official website](https://tinyurl.com/mysql8performance).
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，MySQL 8的开发人员称其速度提高了最多两倍，您可以在[官方网站](https://tinyurl.com/mysql8performance)了解他们的理由和如何在应用程序中实现这一性能增加的技巧。
- en: Management
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管理
- en: With MySQL 8 you can now toggle an index between visible and invisible. An invisible
    index is not considered by the optimizer when a query plan is created, but the
    index is still maintained in the background, so it is easy to make it visible
    again, allowing you to decide whether an index is droppable.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 使用MySQL 8，您现在可以在可见和不可见之间切换索引。不可见索引在创建查询计划时不被优化器考虑，但仍在后台维护，因此很容易使其再次可见，让您决定是否可以删除索引。
- en: Also, users now have full control over Undo tablespaces, and you can now persist
    global, dynamic server variables that would be lost upon server restart. Plus
    there’s now an SQL `RESTART` command to allow remote management of a MySQL server
    over an SQL connection, and there’s a new `RENAME COLUMN` command provided as
    an improvement over the previous `ALTER TABLE...CHANGE` syntax.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，现在用户完全控制Undo表空间，并且现在可以持久保存在服务器重启时会丢失的全局动态服务器变量。另外还有一个SQL `RESTART`命令，允许通过SQL连接远程管理MySQL服务器，并提供了一个改进的`RENAME
    COLUMN`命令，以取代先前的`ALTER TABLE...CHANGE`语法。
- en: For further details, please refer to [the official website](https://tinyurl.com/mysql8serveradmin).
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 更多详细信息，请参阅[官方网站](https://tinyurl.com/mysql8serveradmin)。
- en: Security
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安全
- en: Security was definitely not left on the table when version 8 was planned, as
    there are many new improvements.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 安全性在计划第8版时绝对没有被忽视，因为有许多新的改进。
- en: To start with, the default authentication plug-in has changed from `mysql_native_password`
    to `caching_sha2_password`, and OpenSSL has been selected as the default TLS/SSL
    library in both the Enterprise and now the Community editions and is dynamically
    linked.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，从`mysql_native_password`更改为`caching_sha2_password`作为默认认证插件，并且在企业版和现在的社区版中选择了OpenSSL作为默认的TLS/SSL库，并且是动态链接的。
- en: With MySQL 8, the Undo and Redo logs are now encrypted, and SQL roles have been
    implemented such that you can grant roles to users and privileges to roles. You
    can also use mandatory roles when new users are created. There is now a password
    rotation policy configurable as global or user level with a securely stored password
    history.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 使用MySQL 8，现在Undo和Redo日志已加密，实现了SQL角色，您可以向用户授予角色和角色的权限。在创建新用户时还可以使用强制角色。现在有一个安全存储的密码历史的全局或用户级密码轮换策略。
- en: In the authentication process, a delay has been added in MySQL 8 based on consecutive
    unsuccessful login attempts to slow down brute force attempts at attack. Triggering
    of and the maximum length of delay is configurable.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在认证过程中，根据连续失败的登录尝试，MySQL 8增加了延迟，以减缓暴力攻击尝试。延迟触发和最大延迟长度是可配置的。
- en: For more information on MySQL and security, please visit [the official website](https://tinyurl.com/mysql8security).
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 有关MySQL和安全性的更多信息，请访问[官方网站](https://tinyurl.com/mysql8security)。
- en: Questions
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What does PHP 8 now allow you to do when declaring class properties?
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当声明类属性时，PHP 8现在允许您做什么？
- en: What is the null-safe operator, and what is it for?
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是空安全操作符，它有什么作用？
- en: How would you use a `match` expression in PHP 8, and why can it be better than
    the alternative?
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何在 PHP 8 中使用`match`表达式，并且它为什么比替代方法更好？
- en: What easy-to-use new function can you now use in PHP 8 to determine if one string
    exists within another?
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: PHP 8 中现在可以使用什么简单易用的新函数来确定一个字符串是否存在于另一个字符串中？
- en: In PHP 8, what is the best new way to make a floating-point division calculation
    without causing a division-by-zero error?
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 PHP 8 中，如何进行浮点数除法计算，而不会导致除以零错误？
- en: What is a polyfill?
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是 polyfill？
- en: What is a simple new way in PHP 8 to see in plain English the most recent error
    generated by a call to one of the `preg_` functions?
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: PHP 8 中，查看由`preg_`函数调用生成的最新错误的简单新方法是什么？
- en: By default, what does MySQL 8 now use as its transactional storage engine?
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: MySQL 8 默认使用什么作为其事务性存储引擎？
- en: In MySQL 8, what can you use instead of an `ALTER TABLE...CHANGE TABLE` command
    to change the name of a column?
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 MySQL 8 中，你可以使用什么命令来代替`ALTER TABLE...CHANGE TABLE`来修改列名？
- en: What is the default authentication plug-in in MySQL 8?
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: MySQL 8 中默认的认证插件是什么？
- en: See [“Chapter 10 Answers”](app01_split_009.xhtml#chapter_10_answers) in the
    [Appendix A](app01_split_000.xhtml#solutions_to_the_chapter_questions) for the
    answers to these questions.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [“第10章答案”](app01_split_009.xhtml#chapter_10_answers)，在 [附录 A](app01_split_000.xhtml#solutions_to_the_chapter_questions)
    中找到这些问题的答案。
