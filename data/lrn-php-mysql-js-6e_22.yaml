- en: Chapter 19\. Introduction to CSS
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第19章\. CSS简介
- en: Using Cascading Style Sheets (CSS), you can apply styles to your web pages to
    make them look exactly how you want. This works because CSS is connected to the
    Document Object Model (DOM), which I explained in [Chapter 14](ch14.xhtml#exploring_javascript).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 使用层叠样式表（CSS），你可以对网页应用样式，使其看起来完全符合你的期望。这是因为CSS与文档对象模型（DOM）相关联，我在[第14章](ch14.xhtml#exploring_javascript)中有所解释。
- en: With CSS and its integration with the DOM, you can quickly and easily restyle
    any element. For example, if you don’t like the default look of the `<h1>`, `<h2>`,
    and other heading tags, you can assign new styles to override the default settings
    for the font family and size used, or whether bold or italics should be set, and
    many more properties too.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 借助CSS及其与DOM的集成，你可以快速轻松地重新设计任何元素。例如，如果你不喜欢`<h1>`、`<h2>`和其他标题标签的默认外观，可以分配新的样式以覆盖用于设置字体系列和大小，以及是否应设置粗体或斜体等许多其他属性的默认设置。
- en: 'One way you can add styling to a web page is by inserting the required statements
    into the head of the page, between the `<head>` and `</head>` tags. So, to change
    the style of the `<h1>` tag, you might use the following code (I’ll explain the
    syntax later):'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过在页面头部的`<head>`和`</head>`标签之间插入所需的语句来为网页添加样式。所以，要更改`<h1>`标签的样式，你可以使用以下代码（稍后我将解释语法）：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Within an HTML page, this might look like [Example 19-1](#simple_html_page)
    (see [Figure 19-1](#styling_a_tagcomma_with_the_original_sty)), which, like all
    the examples in this chapter, uses the standard HTML5 `DOCTYPE` declaration.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在HTML页面中，这可能看起来像[示例19-1](#simple_html_page)（见[图19-1](#styling_a_tagcomma_with_the_original_sty)），与本章中的所有示例一样，使用标准的HTML5`DOCTYPE`声明。
- en: Example 19-1\. A simple HTML page
  id: totrans-6
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 19-1\. 一个简单的HTML页面
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![Styling a tag, with the original style shown in the inset](Images/pmj6_1901.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![在插图中显示原始样式的标签样式](Images/pmj6_1901.png)'
- en: Figure 19-1\. Styling a tag, with the original style shown in the inset
  id: totrans-9
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图19-1\. 在插图中显示原始样式的标签样式
- en: Importing a Stylesheet
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导入样式表
- en: When you wish to style a whole site, rather than a single page, a better way
    to manage stylesheets is to move them completely out of your web pages into separate
    files and then import the ones you need. This lets you apply different stylesheets
    for different layouts (such as web and print), without changing the HTML.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 当你希望为整个站点设置样式，而不仅仅是单个页面时，更好的管理样式表的方法是将它们完全移出网页并放入单独的文件中，然后导入你需要的样式表。这样可以让你为不同的布局（如网页和打印）应用不同的样式表，而不必更改HTML。
- en: 'There are a couple of different ways you can achieve this. The first is to
    use the CSS `@import` directive, like this:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种不同的方法可以实现这一点。首先是使用CSS的`@import`指令，就像这样：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This statement tells the browser to fetch a stylesheet with the name *styles.css*.
    The `@import` command is quite flexible because you can put it in a stylesheet,
    so stylesheets can pull in other stylesheets, and so on. Just make sure that there
    are no `<style>` or `</style>` tags in any of your external stylesheets, or they
    will not work.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这个语句告诉浏览器获取一个名为*styles.css*的样式表。`@import`命令非常灵活，因为你可以将它放在一个样式表中，所以样式表可以引入其他样式表，依此类推。只要确保你的任何外部样式表中没有`<style>`或`</style>`标签，否则它们将不起作用。
- en: Importing CSS from Within HTML
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从HTML中导入CSS
- en: 'You can also include a stylesheet with the HTML `<link>` tag, like this:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用HTML的`<link>`标签包含样式表，就像这样：
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This has the exact same effect as the `@import` directive, except that `<link>`
    is an HTML-only tag and is not a valid style directive, so it cannot be used from
    within one stylesheet to pull in another, and it also cannot be placed within
    a pair of `<style>...</style>` tags.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这与`@import`指令具有完全相同的效果，唯一的区别是`<link>`是一个仅限于HTML的标签，不是有效的样式指令，因此无法从一个样式表中使用它来引入另一个样式表，也无法放置在一对`<style>...</style>`标签内。
- en: Just as you can use multiple `@import` directives within your CSS to include
    multiple external stylesheets, you can also use as many `<link>` elements as you
    like in your HTML.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 就像你可以在CSS中使用多个`@import`指令来包含多个外部样式表一样，你也可以在HTML中使用尽可能多的`<link>`元素。
- en: Embedded Style Settings
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 嵌入式样式设置
- en: 'There’s also nothing stopping you from individually setting or overriding certain
    styles for the current page on a case-by-case basis by inserting style declarations
    directly within HTML, like this (which results in italic, blue text within the
    tags):'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你也可以在当前页面的HTML中直接插入样式声明来逐个设置或覆盖某些样式，例如这样（结果是标签内部的斜体蓝色文本）：
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: But this should be reserved only for the most exceptional circumstances, as
    it breaks the separation of content and presentation and consequently is a nightmare
    to maintain.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 但这应该仅在非常特殊的情况下使用，因为它打破了内容和表现的分离，因此维护起来非常麻烦。
- en: Using IDs
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用ID
- en: 'A better solution for setting the style of an element is to assign an ID to
    it in the HTML, like this:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在HTML中，更好的方法是为元素分配一个ID，就像这样：
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This states that the contents of the `<div>` with the ID `welcome` should have
    applied to them the style defined in the `welcome` style setting. The matching
    CSS statement for this might look like the following:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这表示具有ID为`welcome`的`<div>`元素的内容应用在定义为`welcome`样式设置中的样式上。这个匹配的CSS语句可能如下所示：
- en: '[PRE6]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note
  id: totrans-29
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Note the use of the `#` symbol, which specifies that only the ID with the name
    `welcome` should be styled with this statement.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 注意使用`#`符号，指定只有名为`welcome`的ID的元素才会应用此样式。
- en: Using Classes
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用类
- en: 'The value of an `id` element must be unique within the web page, because that’s
    what lets it serve as an identifier. If you would like to apply the same style
    to many elements, you do not have to give each one a different ID because you
    can specify a class to manage them all, like this:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`id`元素的值在网页中必须是唯一的，因为这是它作为标识符的依据。如果你想将相同的样式应用于多个元素，你不必为每个元素分配不同的ID，因为你可以指定一个类来管理它们，就像这样：'
- en: '[PRE7]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This states that the contents of this element (and any others that use the
    class) should have applied to them the style defined in the `welcome` class. Once
    a class is applied, you can use the following rule, either in the page header
    or within an external stylesheet, for setting the styles for the class:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这表示这个元素的内容（以及使用该类的任何其他元素）应用了在`welcome`类中定义的样式。一旦应用了类，你可以使用以下规则，无论是在页面头部还是在外部样式表中，来设置类的样式：
- en: '[PRE8]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Instead of the `#` symbol, which is reserved for IDs, class statements are prefaced
    with a `.` (period).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是`#`符号，该符号保留用于ID，类的语句则以`.`（句点）开头。
- en: Using Semicolons
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用分号
- en: In CSS, semicolons are used to separate multiple CSS statements on the same
    line. But if there is only one statement in a rule (or in an inline style setting
    within an HTML tag), you can omit the semicolon, as you can for the final statement
    in a group.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在CSS中，分号用于分隔同一行上的多个CSS语句。但是，如果规则中只有一个语句（或者在HTML标签内的内联样式设置中），则可以省略分号，就像在一组中的最后一个语句那样。
- en: However, to avoid hard-to-find CSS errors, you may prefer to always use a semicolon
    after every CSS setting. You can then copy and paste them, and otherwise modify
    properties, without worrying about removing semicolons where they aren’t strictly
    necessary or having to add them where they are required.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，为了避免难以发现的CSS错误，你可能更喜欢在每个CSS设置后始终使用分号。这样，你可以复制和粘贴它们，并且可以修改属性，而不必担心在不必要的地方删除分号或者在必要的地方添加分号。
- en: CSS Rules
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSS规则
- en: 'Each statement in a CSS rule starts with a *selector*, which is the item to
    which the rule will be applied. For example, in this assignment, `h1` is the selector
    being given a font size 240% larger than the default:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: CSS规则中的每个语句都以*选择器*开始，这是将应用规则的项目。例如，在这个赋值中，`h1`是被赋予比默认字体大小大240%的选择器：
- en: '[PRE9]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '`font-size` is a *property*. Providing a value of `240%` to the `font-size`
    property of the selector ensures that the contents of all `<h1>...</h1>` pairs
    of tags will be displayed at a font size that is 240% of the default size. All
    changes in rules must be within the `{` and `}` symbols that follow the selector.
    In `font-size:240%;`, the part before the `:` (colon) is the property, while the
    remainder is the value applied to it.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`font-size`是一个*属性*。为选择器的`font-size`属性提供`240%`的值确保了所有`<h1>...</h1>`标签对的内容将以比默认大小大240%的字体大小显示。所有规则中的更改都必须在跟随选择器的`{`和`}`符号内进行。在`font-size:240%;`中，冒号`:`前面的部分是属性，而其余部分是应用于它的值。'
- en: Last comes a `;` (semicolon) to end the statement. In this instance, because
    `font-size` is the last property in the rule, the semicolon is not required (but
    it would be if another assignment were to follow).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，使用一个`;`（分号）来结束语句。在这种情况下，因为`font-size`是规则中的最后一个属性，所以分号是不必要的（但是如果后面还有其他赋值，则是必需的）。
- en: Multiple Assignments
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多重赋值
- en: 'You can create multiple style declarations in a couple of different ways. First,
    you can concatenate them on the same line, like this:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过几种不同的方式创建多个样式声明。首先，可以将它们连接在同一行上，就像这样：
- en: '[PRE10]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This adds a second assignment that changes the color of all `<h1>` headings
    to blue. You can also place the assignments one per line, like the following:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这添加了第二个分配，将所有`<h1>`标题的颜色更改为蓝色。您还可以像下面这样每行放置一个分配：
- en: '[PRE11]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Or you can space out the assignments a little more, so that they line up below
    each other in a column at the colons, like this, which is probably the preferred
    method nowadays:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 或者您可以稍微分开分配，使它们在冒号下面彼此对齐成列，像这样，这可能是现在首选的方法：
- en: '[PRE12]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This way, you can easily see where each new set of rules begins, because the
    selector is always in the first column, and the assignments that follow are neatly
    lined up with all property values starting at the same horizontal offset. In the
    preceding examples, the final semicolon is unnecessary, but should you ever want
    to concatenate any such groups of statements into a single line, it is very quick
    to do with all the semicolons already in place.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，您可以轻松地看到每个新规则集从哪里开始，因为选择器总是位于第一列，后面跟随的分配都整齐地对齐，所有属性值从相同的水平偏移开始。在上述示例中，最后的分号是不必要的，但是如果您想把这些语句组合成一行，只需将所有分号放在正确的位置即可。
- en: 'You can specify the same selector as many times as you want, and CSS combines
    all the properties. So, the previous example could also be specified as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以指定相同的选择器任意次数，CSS将合并所有属性。因此，前面的示例也可以指定如下：
- en: '[PRE13]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Note
  id: totrans-55
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: There is no right or wrong way to lay out your CSS, but I recommend that you
    at least try to keep each block of CSS consistent with itself in terms of visual
    layout so that other people can take it in at a glance.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在布局CSS时没有一种正确或错误的方式，但我建议您至少尝试使每个CSS块在视觉布局上保持一致，以便其他人能够一目了然。
- en: What if you specified the same property to the same selector twice?
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您指定了相同的选择器和属性两次会怎么样？
- en: '[PRE14]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The last value specified—in this case, blue—would apply. In a single file, repeating
    the same property for the same selector would be pointless, but such repetition
    happens frequently in real-life web pages when multiple stylesheets are applied.
    It’s one of the valuable features of CSS, and where the term *cascading* comes
    from.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 指定相同选择器的相同属性，最后指定的值将生效——在这种情况下是蓝色。在单个文件中，对同一选择器重复相同属性是没有意义的，但在现实的网页中，当应用多个样式表时经常发生这种重复。这是CSS的一个宝贵特性，也是“层叠”一词的来源之一。
- en: Using Comments
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用注释
- en: 'It is a good idea to comment your CSS rules, even if you describe only the
    main groups of statements rather than all or most of them. Do this by placing
    a comment within a pair of `/*...*/` tags, like this:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 对您的CSS规则进行注释是一个好主意，即使只描述主要的语句组，而不是所有或大多数语句。可以通过在`/*...*/`标签对之间放置注释来实现，如下所示：
- en: '[PRE15]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'You can extend a comment over many lines, like this:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以扩展注释到多行，如下所示：
- en: '[PRE16]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Note
  id: totrans-65
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: When using multiline comments, note that you cannot nest single-line (or any
    other) comments within them. Doing so can lead to unpredictable errors.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 使用多行注释时，请注意不能在其中嵌套单行（或其他任何）注释。这样做可能会导致不可预测的错误。
- en: Style Types
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 样式类型
- en: There are a number of different style types, ranging from the default styles
    set up by your browser (and any user styles you may have applied in your browser
    to override its defaults), through inline or embedded styles, to external stylesheets.
    The styles defined in each type have a hierarchy of precedence, from low to high.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 样式类型有多种，从浏览器设置的默认样式（以及您可能在浏览器中应用的用户样式，用于覆盖其默认样式），到内联或嵌入式样式，再到外部样式表。每种类型定义的样式具有从低到高的优先级层次。
- en: We’ll talk more about the *Cascading* part of Cascading Style Sheets, which
    is explained in [“The CSS Cascade”](#css_cascade). But before we go into the details,
    it helps to first have a brief introduction.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将更详细地讨论层叠样式表中的“层叠”部分，详细解释见[“CSS层叠”](#css_cascade)。但在深入细节之前，先简要介绍一下会有所帮助。
- en: Default Styles
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 默认样式
- en: The lowest level of style precedence is the default styling applied by a web
    browser. These styles are created as a fallback for when a web page doesn’t have
    any styles, and they are intended to be a generic set of styles that will display
    reasonably well in most instances.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 网页浏览器应用的样式优先级最低。这些样式是作为备用样式创建的，用于在网页没有任何样式时使用，旨在提供一组通用的样式，以在大多数情况下显示得相当不错。
- en: Pre-CSS, these were the only styles applied to a document, and only a handful
    of them could be changed by a web page (such as font face, color, and a few element
    sizing arguments).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在 CSS 出现之前，这些是文档中唯一的样式，并且只有少数样式可以由网页更改（如字体、颜色和一些元素大小的参数）。
- en: User Styles
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户样式
- en: User styles have the next highest precedence. They are supported by most modern
    browsers but are implemented differently by each, so the easiest way for you to
    create your own preferred browsing styles these days is to use a plug-in such
    as [Stylish](http://userstyles.org).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 用户样式具有下一个最高的优先级。它们被大多数现代浏览器支持，但每个浏览器的实现方式都有所不同，因此如今为你创建自己喜欢的浏览样式最简单的方式是使用诸如
    [Stylish](http://userstyles.org) 的插件。
- en: If you would like to create your own default styles for browsing, Stylish is
    an easy way to proceed. Just search “stylish extension” to install it in your
    browser, as shown in [Figure 19-2](#stylish-is-one-way-you).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想为浏览创建自己的默认样式，Stylish 是一个方便的工具。只需搜索“stylish 扩展”来在你的浏览器中安装它，如 [图 19-2](#stylish-is-one-way-you)
    所示。
- en: '![](Images/pmj6_1902.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/pmj6_1902.png)'
- en: Figure 19-2\. Stylish is one way you can style the web to your liking
  id: totrans-77
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 19-2\. Stylish 是一种你可以根据自己的喜好为网页添加样式的方式
- en: If a user style is assigned that has already been defined as a browser default,
    it will override the browser’s default setting. Any styles not defined in a user
    stylesheet will retain their default values as set up in the browser.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果已分配了用户样式，并且已定义为浏览器默认值，则它将覆盖浏览器的默认设置。任何未在用户样式表中定义的样式将保留它们在浏览器中设置的默认值。
- en: External Stylesheets
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 外部样式表
- en: The next type of styles are those assigned in an external stylesheet. These
    settings will override any assigned either by the user or by the browser. External
    stylesheets are the recommended way to create your styles because you can produce
    different stylesheets for different purposes, such as styling for general web
    use, for viewing on a mobile browser with a smaller screen, for printing purposes,
    and so on. Just apply the one needed for each type of media when you create the
    web page.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 下一种类型的样式是外部样式表中定义的。这些设置会覆盖用户或浏览器分配的任何样式。外部样式表是创建你的样式的推荐方式，因为你可以为不同的用途创建不同的样式表，比如通用的网页使用、在较小屏幕上的移动浏览器查看、打印等等。当你创建网页时，只需为每种媒体应用需要的样式表即可。
- en: Internal Styles
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内部样式
- en: Then there are internal styles, which you create within `<style>...</style>`
    tags, and which take precedence over all the preceding style types. At this point,
    though, you are beginning to break the separation between styling and content,
    as any external stylesheets loaded in at the same time will have a lower precedence.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是内部样式，你可以在 `<style>...</style>` 标签内创建，并且优先于之前所有的样式类型。不过，这时候你开始打破样式与内容之间的分离，因为同时加载的任何外部样式表的优先级会更低。
- en: Inline Styles
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内联样式
- en: 'Finally, inline styles are where you assign a property directly to an element.
    They have the highest precedence of any style type and are used like this:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，内联样式是直接将属性分配给元素的方式。它们拥有任何样式类型中的最高优先级，并且像这样使用：
- en: '[PRE17]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In this example, the link specified will be displayed in green, regardless of
    any default or other color settings applied by any other type of stylesheet, whether
    directly to this link or generically for all links.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，指定的链接将显示为绿色，而不管任何默认或其他样式表应用的颜色设置，无论是直接应用于此链接还是通用应用于所有链接。
- en: Note
  id: totrans-87
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: When you use this type of styling, you are breaking the separation between layout
    and content; therefore, it is recommended that you do so only when you have a
    very good reason.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用这种类型的样式时，你正在打破布局与内容之间的分离；因此，建议仅在有很好的理由时这样做。
- en: CSS Selectors
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSS 选择器
- en: The means by which you access one or more elements is called *selection*, and
    the part of a CSS rule that does this is known as a *selector*. As you might expect,
    there are many varieties of selector.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 访问一个或多个元素的方法称为*选择*，执行此操作的 CSS 规则的一部分称为*选择器*。正如你所预期的那样，选择器有多种变体。
- en: The Type Selector
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类型选择器
- en: 'The type selector works on types of HTML elements such as `<p>` or `<i>`. For
    example, the following rule will ensure that all text within `<p>...</p>` tags
    is fully right-justified:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 类型选择器用于 HTML 元素类型，如 `<p>` 或 `<i>`。例如，以下规则将确保所有 `<p>...</p>` 标签内的文本完全右对齐：
- en: '[PRE18]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The Descendant Selector
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 后代选择器
- en: 'Descendant selectors let you apply styles to elements that are contained within
    other elements. For example, the following rule sets all text within `<b>...</b>`
    tags to red, but only if those tags occur within `<p>...</p>` tags (like this:
    `<p><b>Hello</b> there</p>`):'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 后代选择器允许你将样式应用到包含在其他元素内的元素上。例如，以下规则将所有`<p>...</p>`标签中的`<b>...</b>`标签内的文本设为红色，但前提是这些标签出现在`<p>...</p>`标签内（像这样：`<p><b>Hello</b>
    there</p>`）：
- en: '[PRE19]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Descendant selectors can continue nesting indefinitely, so the following is
    a perfectly valid rule to make the text blue within bold text, inside a list element
    of an unordered list:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 后代选择器可以无限嵌套，所以下面的规则也是有效的，它将无序列表中列表元素内的粗体文本设为蓝色：
- en: '[PRE20]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'As a practical example, suppose you want to use a different numbering system
    for an ordered list that is nested within another ordered list. You can achieve
    this in the following way, which will replace the default numeric numbering (starting
    from `1`) with lowercase letters (starting from `a`):'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个实际的例子，假设你想要在嵌套在另一个有序列表中的有序列表中使用不同的编号系统。你可以通过以下方式实现，它将用小写字母（从`a`开始）替换默认的数字编号（从`1`开始）：
- en: '[PRE21]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The result of loading this HTML into a web browser is as follows, in which
    you can see that the second list of elements displays differently:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 将这段HTML加载到网络浏览器中的结果如下，你可以看到第二个元素列表显示不同：
- en: '[PRE22]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The Child Selector
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 子选择器
- en: 'The child selector is similar to the descendant selector but is more restrictive
    about when the style will be applied, by selecting only those elements that are
    direct children of another element. For example, the following code uses a descendant
    selector that will change any bold text within a paragraph to red, even if the
    bold text is itself within a section of italic text (like this `<p><i><b>Hello</b>
    there</i></p>`):'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 子选择器类似于后代选择器，但在应用样式时更为严格，仅选择直接是另一个元素的子元素的那些元素。例如，以下代码使用后代选择器，将段落内的任何粗体文本都改为红色，即使粗体文本本身位于斜体文本部分中（像这样`<p><i><b>Hello</b>
    there</i></p>`）：
- en: '[PRE23]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'In this instance, the word `Hello` displays in red. However, when this more
    general type of behavior is not required, a child selector can be used to narrow
    the scope of the selector. For example, the following rule inserts a greater-than
    sign (`>`) to create a child selector, which sets bold text to red only if the
    element is a direct child of a paragraph and is not itself contained within another
    element:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，单词`Hello`显示为红色。然而，当不需要这种更一般的行为时，可以使用子选择器来缩小选择器的范围。例如，以下规则插入了一个大于号（`>`）以创建子选择器，仅当元素是段落的直接子元素且不位于另一个元素内时，将粗体文本设为红色：
- en: '[PRE24]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Now `Hello` will not change color because `<b>` is not a direct child of `<p>`.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在`Hello`不会改变颜色，因为`<b>`不是`<p>`的直接子元素。
- en: 'For a practical example, suppose you wish to make bold only those `<li>` elements
    that are direct children of `<ol>` elements. You can achieve this as follows,
    where the `<li>` elements that are direct children of `<ul>` elements are not
    made bold:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 举个实际的例子，假设你希望仅将直接位于`<ol>`元素下的`<li>`元素加粗。你可以按照以下方法实现，其中直接位于`<ul>`元素下的`<li>`元素不会加粗：
- en: '[PRE25]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The result of loading this HTML into a browser will be as follows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 将这段HTML加载到浏览器中的结果将如下所示：
- en: '[PRE26]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The ID Selector
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ID选择器
- en: 'If you give an element an ID name (like this: `<div id=''mydiv''>`), you can
    directly access it from CSS in the following way, which changes all text in the
    element to italic:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如果给一个元素赋予ID名称（像这样`<div id='mydiv'>`），你可以通过以下方式直接从CSS中访问它，将元素内所有文本改为斜体：
- en: '[PRE27]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Each ID can be used only once within a document, so only the first occurrence
    found will receive the new property value assigned by a CSS rule. But in CSS you
    can directly reference any IDs that have the same name, as long as they occur
    within different element types, like this:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 每个ID在文档中只能使用一次，因此只会将第一个找到的出现位置按照CSS规则的新属性值进行更改。但在CSS中，可以直接引用具有相同名称的任何ID，只要它们出现在不同的元素类型中，像这样：
- en: '[PRE28]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Because IDs normally apply only to unique elements, the following rule will
    apply an underline to only the first occurrence of `myid`:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 因为ID通常仅适用于唯一的元素，所以下面的规则将仅为第一个出现的`myid`应用下划线：
- en: '[PRE29]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'However, you can ensure that CSS applies the rule to both occurrences like
    this:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，你可以确保CSS将规则应用于两者的方法如下：
- en: '[PRE30]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Or more succinctly, like this (see [“Selecting by Group”](#selecting_by_group)):'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 或者更简洁地写成这样（参见[“通过组选择”](#selecting_by_group)）：
- en: '[PRE31]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Note
  id: totrans-124
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: I don’t recommend using this form of selection because it raises barriers to
    the use of JavaScript. Any JavaScript that also must access these elements cannot
    easily do so because the commonly used `getElementById` function will return only
    the first occurrence. To reference any other instances, a program would have to
    search through the whole list of elements in the document—a trickier task to undertake.
    So, it’s generally better to always use unique ID names.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我不建议使用这种选择形式，因为它增加了对JavaScript使用的障碍。任何还必须访问这些元素的JavaScript也不能轻松地这样做，因为常用的`getElementById`函数将只返回第一个出现的元素。要引用任何其他实例，程序必须搜索文档中所有元素的整个列表——这是一个更棘手的任务。因此，通常最好始终使用唯一的ID名称。
- en: The Class Selector
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类选择器
- en: 'When you want to share the same styling among a number of elements in a page,
    you can assign them all the same class name (like this: `<span class=''myclass''>`).
    Then create a single rule to modify all those elements at once, as in the following
    rule, which creates a 10-pixel left margin offset for all elements using the class:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 当您希望在页面中的多个元素之间共享相同的样式时，可以为它们分配相同的类名（如此：`<span class='myclass'>`）。然后创建一个单一规则一次性修改所有这些元素，如以下规则，为使用该类的所有元素创建一个10像素的左边距偏移量：
- en: '[PRE32]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'In modern browsers, you can have HTML elements use more than one class by separating
    the class names with spaces, like this: `<span class=''class1 class2 class3''>`.'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代浏览器中，您可以让HTML元素使用多个类，类名之间用空格分隔，例如：`<span class='class1 class2 class3'>`。
- en: 'You can narrow the scope of action of a class by specifying the types of elements
    to which it should apply. For example, the following rule applies the setting
    only to paragraphs that use the class `main`:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过指定应用该类的元素类型来缩小类的作用范围。例如，以下规则仅适用于使用类`main`的段落：
- en: '[PRE33]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'In this example, only paragraphs using the class `main` (like this: `<p class="main">`)
    will receive the new property value. Any other element types that may try to use
    the class (such as `<div class="main">`) will not be affected by this rule.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，只有使用类`main`（如此：`<p class="main">`）的段落会接收新的属性值。任何其他尝试使用该类的元素类型（例如`<div
    class="main">`）都不会受到这个规则的影响。
- en: The Attribute Selector
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 属性选择器
- en: 'Many HTML tags support attributes, and using this type of selector can save
    you from having to use IDs and classes to refer to them. For example, you can
    directly reference attributes in the following manner, which sets all elements
    with the attribute `type="submit"` to a width of 100 pixels:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 许多HTML标签支持属性，使用这种类型的选择器可以避免使用ID和类来引用它们。例如，您可以直接以以下方式引用属性，这样可以将所有具有`type="submit"`属性的元素设置为100像素的宽度：
- en: '[PRE34]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'If you wish to narrow down the scope of the selector to, for example, only
    `<form>` input elements with that attribute type, you could use the following
    rule instead:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望将选择器的范围缩小到仅限于带有该属性类型的`<form>`输入元素，则可以改用以下规则：
- en: '[PRE35]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Note
  id: totrans-138
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Attribute selectors also work on IDs and classes, so, for example, `[class~="classname"]`
    works exactly like the class selector `.classname` (except that the latter has
    a higher precedence). Likewise, `[id="idname"]` is equivalent to using the ID
    selector `#idname`. The class and ID selectors prefaced by `#` and `.` can therefore
    be viewed as shorthand for attribute selectors but with a higher precedence. The
    `~=` operator matches an attribute even if it is one of a space-separated group
    of attributes.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 属性选择器也适用于ID和类，因此，例如，`[class~="classname"]`的工作方式与类选择器`.classname`完全相同（只是前者具有更高的优先级）。同样，`[id="idname"]`等同于使用ID选择器`#idname`。因此，带有`#`和`.`前缀的类和ID选择器可以视为带有更高优先级的属性选择器的速记。`~=`运算符匹配属性，即使它是一组以空格分隔的属性之一。
- en: The Universal Selector
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通用选择器
- en: 'The `*` wildcard or universal selector matches any element, so the following
    rule will make a complete mess of a document by giving a green border to all of
    its elements:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 通配符`*`或通用选择器匹配任何元素，因此以下规则将通过给所有元素添加绿色边框来彻底弄乱文档：
- en: '[PRE36]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'It’s therefore unlikely that you will use the `*` on its own, but as part of
    a compound rule it can be very powerful. For example, the following rule will
    apply the same styling as the preceding one but only to all paragraphs that are
    subelements of the element with the ID `boxout`, and only as long as they are
    not direct children:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，很少会单独使用`*`，但作为复合规则的一部分，它可以非常强大。例如，以下规则将适用与前述规则相同的样式，但仅适用于作为具有ID `boxout`的元素的子元素的所有段落，并且只要它们不是直接子元素：
- en: '[PRE37]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Let’s look at what’s going on here. The first selector following `#boxout`
    is an `*` symbol, so it refers to any element within the `boxout` object. The
    following `p` selector then narrows down the selection focus by changing the selector
    to apply only to paragraphs (as defined by the `p`) that are subelements of elements
    returned by the `*` selector. Therefore, this CSS rule performs the following
    actions (in which I use the terms *object* and *element* interchangeably):'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这里发生了什么。在`#boxout`后面的第一个选择器是一个`*`符号，因此它指的是`boxout`对象中的任何元素。然后，以下`p`选择器通过将选择器更改为仅适用于由`*`选择器返回的元素的段落（由`p`定义）来缩小选择焦点。因此，此CSS规则执行以下操作（其中我可以互换使用术语*对象*和*元素*）：
- en: Find the object with the ID of `boxout`.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到具有ID `boxout` 的对象。
- en: Find all subelements of the object returned in step 1.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到第1步返回的对象的所有子元素。
- en: Find all `p` subelements of the objects returned in step 2, and, since this
    is the final selector in the group, also find all `p` sub- and sub-subelements
    (and so on) of the objects returned in step 2.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第2步返回的对象中找到所有 `p` 子元素，并且由于这是组中的最终选择器，还要找到第2步返回的对象的所有 `p` 子及子子元素（等等）。
- en: Apply the styles within the `{` and `}` characters to the objects returned in
    step 3.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `{` 和 `}` 字符之间的样式应用于第3步返回的对象。
- en: The net result of this is that the green border is applied only to paragraphs
    that are grandchildren (or great-grandchildren and so on) of the main element.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做的结果是，绿色边框仅应用于主元素的子子代（或曾孙代等等）中的段落。
- en: Selecting by Group
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过组选择
- en: 'Using CSS, you can apply a rule to more than one element, class, or any other
    type of selector at the same time by separating the selectors with commas. So,
    for example, the following rule will place a dotted orange line underneath all
    paragraphs, the element with the ID of `idname`, and all elements that use the
    class `classname`:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 使用CSS，您可以通过逗号分隔选择器一次性将规则应用于多个元素、类或任何其他类型的选择器。例如，以下规则将在所有段落、具有ID `idname` 的元素以及使用类
    `classname` 的所有元素下方放置一个虚线橙色线条：
- en: '[PRE38]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[Figure 19-3](#some_html_and_the_css_rules_used_by_it) shows various selectors
    in use, with the rules applied to them alongside.'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '[图19-3](#some_html_and_the_css_rules_used_by_it)显示了使用的各种选择器及其附带的规则。'
- en: '![Some HTML and the CSS rules used by it](Images/pmj6_1903.png)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![一些HTML及其使用的CSS规则](Images/pmj6_1903.png)'
- en: Figure 19-3\. Some HTML and the CSS rules used by it
  id: totrans-156
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图19-3. 一些HTML及其使用的CSS规则
- en: The CSS Cascade
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSS层叠
- en: As already briefly discussed, one of the most fundamental things about CSS properties
    is that they cascade—hence the name Cascading Style Sheets. But what does this
    mean?
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，CSS 属性中最基本的之一就是它们会层叠 — 因此称为层叠样式表。但这意味着什么呢？
- en: Cascading is a method used to resolve potential conflicts between the various
    types of stylesheet a browser supports, and apply them in order of precedence
    by who created them, the method used to create the style, and the types of properties
    selected.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 层叠是一种用于解决浏览器支持的各种样式表之间潜在冲突并按照创建者、创建样式的方法和所选属性类型优先顺序应用它们的方法。
- en: Stylesheet Creators
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 样式表创建者
- en: 'There are three main types of stylesheet supported by all modern browsers.
    In order of precedence from high to low, they are as follows:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 所有现代浏览器都支持三种主要类型的样式表。按优先级从高到低的顺序，它们如下：
- en: Those created by a document’s author
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由文档作者创建的样式
- en: Those created by the user
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由用户创建的样式
- en: Those created by the browser
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由浏览器创建的样式
- en: These three sets of stylesheets are processed in reverse order. First, the defaults
    in the web browser are applied to the document. Without these defaults, web pages
    that don’t use stylesheets would look terrible. They include the font face, size,
    and color; element spacing; table borders and spacing; and all the other reasonable
    standards a user would expect.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 这三组样式表按相反顺序处理。首先，将默认值应用于文档中的网络浏览器。如果没有这些默认值，不使用样式表的网页将看起来很糟糕。它们包括字体、大小和颜色；元素间距；表边框和间距；以及用户期望的所有其他合理标准。
- en: Next, if the user has created any styles to use instead of the standard ones,
    these are applied, replacing any of the browser’s default styles that may conflict.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，如果用户已创建任何用于替代标准样式的样式，则会应用这些样式，取代可能冲突的浏览器默认样式。
- en: Last, any styles created by the current document’s author are applied, replacing
    any that have been created either as browser defaults or by the user.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将应用由当前文档作者创建的任何样式，以替换已由浏览器默认或用户创建的样式。
- en: Stylesheet Methods
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 样式表方法
- en: 'Stylesheets can be created via three different methods. In order of precedence
    from high to low, they are as follows:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 样式表可以通过三种不同方法创建。从高到低的优先顺序如下：
- en: As inline styles
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为内联样式
- en: In an embedded stylesheet
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在嵌入式样式表中
- en: In an external stylesheet
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在外部样式表中
- en: Again, these methods of stylesheet creation are applied in reverse order of
    precedence. Therefore, all external stylesheets are processed first, and their
    styles are applied to the document.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，样式表创建的这些方法按照优先顺序的相反顺序应用。因此，首先处理所有外部样式表，并将其样式应用于文档。
- en: Next, any embedded styles (within `<style>...</style>` tags) are processed,
    and any that conflict with external rules are given precedence and will override
    them.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，处理任何嵌入样式（在 `<style>...</style>` 标签内），并优先处理与外部规则冲突的样式，并将其覆盖。
- en: Last, any styles applied directly to an element as an inline style (such as
    `<div style="...">...</div>`) are given the highest precedence and override all
    previously assigned properties.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将直接应用于元素的任何样式（例如 `<div style="...">...</div>`）作为内联样式具有最高优先级，并覆盖所有先前分配的属性。
- en: Stylesheet Selectors
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 样式表选择器
- en: 'There are three different ways of selecting elements to be styled. Going from
    highest to lowest order of precedence, they are as follows:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 有三种不同的选择元素进行样式设置的方法。按照优先顺序从高到低，它们如下：
- en: Referencing by individual ID or attribute selector
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按单个 ID 或属性选择器引用
- en: Referencing in groups by class
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按类分组引用
- en: Referencing by element tags (such as `<p>` or `<b>`)
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按元素标签引用（例如 `<p>` 或 `<b>`）
- en: Selectors are processed according to the number and types of elements affected
    by a rule, which is a little different from the previous two methods for resolving
    conflicts. This is because rules do not have to apply only to one type of selector
    at a time and may reference many different selectors.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 根据规则影响的元素数量和类型处理选择器，这与解决冲突的前两种方法略有不同。这是因为规则不必同时仅适用于一种选择器类型，并且可能引用多种不同的选择器。
- en: Therefore, we need a method to determine the precedence of rules that can contain
    any combination of selectors. CSS does this by calculating the specificity of
    each rule by ordering them from the widest to narrowest scope of action.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们需要一种方法来确定可以包含任意选择器组合的规则的优先顺序。CSS 通过计算每个规则的特异性来实现这一点，按照其作用范围的从宽到窄的顺序对其进行排序。
- en: Calculating specificity
  id: totrans-183
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 计算特异性
- en: We calculate the specificity of a rule by creating three-part numbers based
    on the selector types in the preceding numbered list. These compound numbers start
    off looking like `[0,0,0]`. When processing a rule, each selector that references
    an ID increments the first number by 1 so that the compound number would become
    `[1,0,0]`.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过基于前述编号列表中的选择器类型创建三部分数字来计算规则的特异性。这些复合数字起始形式为`[0,0,0]`。在处理规则时，每个引用 ID 的选择器会使第一个数字增加
    1，因此复合数字会变为`[1,0,0]`。
- en: 'Let’s look at the following rule, which has seven references. Three of them
    are to the IDs `#heading`, `#main`, and `#menu`, so the compound number becomes
    `[3,0,0]`:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下以下规则，它引用了七个选择器。其中三个是对 ID `#heading`、`#main` 和 `#menu` 的引用，因此复合数字变为`[3,0,0]`：
- en: '[PRE39]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Then the number of classes in the selector is placed in the second part of the
    compound number. In this example, there are two of them (`.text` and `.quote`),
    so the compound number becomes `[3,2,0]`.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，选择器中类的数量放置在复合数字的第二部分。在此示例中，有两个类 (`.text` 和 `.quote`)，因此复合数字变为`[3,2,0]`。
- en: Finally, all selectors that reference element tags are counted, and this number
    is placed in the last part of the compound number. In the example, there are two
    (`p` and `span`), so the final compound number becomes `[3,2,2]`.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，统计所有引用元素标签的选择器，并将此数字放置在复合数字的最后部分。在此示例中，有两个选择器 (`p` 和 `span`)，因此最终复合数字为`[3,2,2]`。
- en: This is all that is needed to compare this rule’s specificity with that of another.
    In cases such as this one where there are nine or fewer of each type in a compound
    number, you can convert it directly to a decimal number, which in this case is
    322\. Rules with a lower number than this will have lower precedence, and those
    with a higher number will have greater precedence. Where two rules share the same
    value, the most recently applied one wins.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 这是比较此规则特异性与其他规则所需的全部内容。在像这种情况下，复合数字中每种类型都不超过九个，可以直接转换为十进制数，本例中为 322。低于此数的规则优先级较低，高于此数的规则优先级更高。如果两个规则具有相同的值，则最近应用的规则胜出。
- en: 'For example, suppose we also have the following rule:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设我们还有以下规则：
- en: '[PRE40]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Here, although seven elements are also referenced, there are now only two ID
    references but three class references, which results in the compound number `[2,3,2]`.
    Since 322 is greater than 232, the former example has precedence over the latter.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，尽管还引用了七个元素，但现在只有两个ID引用，但三个类引用，这导致了复合数字`[2,3,2]`。由于322大于232，前者的例子优先于后者。
- en: Using a different number base
  id: totrans-193
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用不同的数字基数
- en: Where there are more than nine of a type in a compound number, you have to work
    in a higher number base. For example, you can’t convert the compound number `[11,7,19]`
    to decimal by simply concatenating the three parts. Instead, you must convert
    the number to a higher base, such as base 20 (or higher if there are more than
    19 of any type).
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个复合数字中有超过九个以上的类型时，你必须使用更高的数字基数。例如，你无法简单地将复合数字`[11,7,19]`连接起来转换为十进制。相反，你必须将数字转换为更高的基数，如20进制（或更高，如果任何类型超过19个）。
- en: 'To do this, multiply the three parts out and add the results like this, starting
    with the rightmost number and working left:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，请像这样将三个部分相乘并添加结果，从最右边的数字开始，从右向左工作：
- en: '[PRE41]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: On the left, replace the values of `20` with the base you are using, as needed.
    Once all of the compound numbers of a set of rules are converted from this base
    to decimal, it is easy to determine the specificity, and therefore the precedence,
    of each.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在左边，将`20`的值替换为你使用的基数。一旦一组规则的复合数字从此基数转换为十进制，就很容易确定每个数字的特异性和因此的优先级。
- en: Thankfully, the CSS processor handles all of this for you, but knowing how it
    works helps you to properly construct rules and understand what precedence they
    will have.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，CSS处理器会为你处理所有这些问题，但了解它的工作原理有助于你正确构建规则并理解它们将具有的优先级。
- en: Note
  id: totrans-199
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: 'If all this precedence calculation sounds rather complicated, you’ll be pleased
    to know that in most cases you can usually get by with this simple rule of thumb:
    in general, the fewer elements there are to be modified, and the more specific
    they are, the greater the precedence that is given to a rule.'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 如果所有这些优先级计算听起来相当复杂，你会高兴地知道，在大多数情况下，你通常可以通过这个简单的经验法则来解决：一般来说，要修改的元素越少，它们越具体，规则的优先级就越高。
- en: Some rules are more equal than others
  id: totrans-201
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 有些规则比其他规则更平等
- en: 'Where two or more style rules are exactly equivalent, only the most recently
    processed rule will take precedence. However, you can force a rule to a higher
    precedence than other equivalent rules by using the `!important` declaration,
    like this:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 当两个或多个样式规则完全等效时，只有最近处理的规则会优先生效。然而，通过使用`!important`声明，你可以强制某个规则比其他等效规则具有更高的优先级，例如：
- en: '[PRE42]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'When you do this, all previous equivalent settings are overridden (even ones
    using `!important`), and any equivalent rules that are processed later will be
    ignored. So, for example, the second of the two following rules would normally
    take precedence, but because of the use of `!important` in the prior assignment,
    the second one is ignored:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 当你这样做时，所有先前的等效设置都将被覆盖（甚至使用`!important`的设置），并且稍后处理的任何等效规则都将被忽略。因此，例如，以下两个规则中的第二个通常会优先生效，但由于在先前分配中使用了`!important`，第二个规则被忽略了：
- en: '[PRE43]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Note
  id: totrans-206
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: User stylesheets can be created for specifying default browser styles, and they
    may use the `!important` declaration, in which case the user’s style setting will
    take precedence over the same properties specified in the current web page. You
    should also note that non-`!important` user style settings will be overwritten
    by any `!important` styles in web pages.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 用户样式表可以用于指定默认浏览器样式，并且它们可能使用`!important`声明，此时用户的样式设置将优先于当前网页中指定的相同属性。还需要注意，非`!important`的用户样式设置将被网页中任何`!important`样式所覆盖。
- en: The Difference Between div and span Elements
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`<div>`和`<span>`元素之间的区别'
- en: 'Both `<div>` and `<span>` elements are types of container, but with some different
    qualities. By default, a `<div>` element has infinite width (at least to the browser
    edge), which you can see by applying a border to one, like this:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '`<div>`和`<span>`元素都是容器类型，但具有一些不同的特性。默认情况下，`<div>`元素具有无限的宽度（至少到浏览器边缘），你可以通过为其中一个应用边框来查看，例如：'
- en: '[PRE44]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'A `<span>` element, however, is only as wide as the text it contains. Therefore,
    the following line of HTML creates a border only around the word `Hello`, which
    does not extend to the right-hand edge of the browser:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，`<span>` 元素的宽度仅限于其包含的文本。因此，以下 HTML 行仅在单词 `Hello` 周围创建边框，不会延伸到浏览器的右侧边缘：
- en: '[PRE45]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Also, `<span>` elements follow text or other objects as they wrap or flow around
    them and can therefore have complicated borders. For example, in [Example 19-2](#div_and_span_example),
    I used CSS to make the background of all `<div>` elements yellow, to make all
    `<span>` elements cyan, and to add a border to both, before then creating a few
    example `<span>` and `<div>` sections.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，`<span>` 元素随文本或其他对象的换行或流动而跟随，并且因此可以具有复杂的边框。例如，在 [示例 19-2](#div_and_span_example)
    中，我使用 CSS 将所有 `<div>` 元素的背景设为黄色，将所有 `<span>` 元素设为青色，并为两者添加了边框，然后创建了几个示例 `<span>`
    和 `<div>` 部分。
- en: Example 19-2\. `<div>` and `<span>` example
  id: totrans-214
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 19-2\. `<div>` 和 `<span>` 示例
- en: '[PRE46]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[Figure 19-4](#variety_of_elements_of_differing_width) shows what this example
    looks like in a web browser. Although it appears only in shades of gray in the
    printed book, the figure clearly shows how `<div>` elements extend to the right-hand
    edge of the browser window and force the following content to appear at the start
    of the first available position below them.'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 19-4](#variety_of_elements_of_differing_width) 显示了此示例在 Web 浏览器中的样子。尽管在打印的书中只显示为灰色，但该图清楚地展示了
    `<div>` 元素如何延伸到浏览器窗口的右侧边缘，并强制下面的内容出现在第一个可用位置的起始处。'
- en: '![A variety of elements of differing width](Images/pmj6_1904.png)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![不同宽度的各种元素](Images/pmj6_1904.png)'
- en: Figure 19-4\. A variety of elements of differing width
  id: totrans-218
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 19-4\. 不同宽度元素的各种类型
- en: The figure also shows how `<span>` elements keep to themselves and take up only
    the space required to hold their content, without forcing subsequent content to
    appear below them.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 图中还显示了 `<span>` 元素如何保持独立，并且仅占用足够容纳其内容的空间，而不会强制下面的内容出现在它们下面。
- en: Additionally, in the bottom two examples in the figure, you can see that when
    `<div>` elements wrap at the screen’s edge, they retain a rectangular shape, whereas
    `<span>` elements simply follow the flow of the text (or other content) they contain.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在图中的最后两个示例中，您可以看到当 `<div>` 元素在屏幕边缘换行时，它们保持矩形形状，而 `<span>` 元素只是随着包含的文本（或其他内容）流动（或换行）。
- en: Note
  id: totrans-221
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Since `<div>` elements can only be rectangular, they are better suited for containing
    objects such as images, boxouts, quotations, and so on, whereas `<span>` tags
    are best used for holding text or other attributes that are placed one after another
    inline, and which should flow from left to right (or right to left in some languages).
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 `<div>` 元素只能是矩形的，它们更适合用于包含像图片、盒子、引用等对象，而 `<span>` 标签最适合用于容纳文本或其他按行内顺序排列的属性，其应从左到右（或某些语言中从右到左）流动。
- en: Measurements
  id: totrans-223
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测量
- en: 'CSS supports an impressive range of units of measurement, enabling you to tailor
    your web pages precisely to specific values or by relative dimensions. The ones
    I generally use (and believe you will also find the most useful) are pixels, points,
    ems, and percent, but here’s the complete list:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: CSS 支持多种测量单位，可以精确地调整网页到特定的数值或相对尺寸。我通常使用的有像素、点、ems 和百分比，但这里是完整列表：
- en: <dfn class="keep-together">Pixels</dfn>
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: <dfn class="keep-together">像素</dfn>
- en: 'The size of a pixel varies according to the dimensions and pixel depth of the
    user’s screen. One pixel equals the width/height of a single dot on the screen,
    and so this measurement is best suited to screens rather than print. For example:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 像素的大小根据用户屏幕的尺寸和像素深度而变化。一个像素等于屏幕上单个点的宽度/高度，因此该测量单位最适合屏幕而不是印刷。例如：
- en: '[PRE47]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: <dfn class="keep-together">Points</dfn>
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: <dfn class="keep-together">点</dfn>
- en: 'A point is equivalent in size to 1/72 of an inch. The measurement comes from
    a print design background and is best suited for that medium but is also commonly
    used for on-screen display. For example:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 一点相当于一英寸的 1/72 大小。该测量单位来自于印刷设计背景，最适合于该媒介，但也常用于屏幕显示。例如：
- en: '[PRE48]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: <dfn class="keep-together">Inches</dfn>
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: <dfn class="keep-together">英寸</dfn>
- en: 'An inch is the equivalent of 72 points and is also a measurement type best
    suited for print. For example:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 一英寸等于 72 点，是最适合印刷的测量单位。例如：
- en: '[PRE49]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: <dfn class="keep-together">Centimeters</dfn>
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: <dfn class="keep-together">厘米</dfn>
- en: 'Centimeters are another unit of measurement best suited for print. One centimeter
    is a little over 28 points. For example:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 厘米是另一种最适合印刷的度量单位。一厘米略大于 28 点。例如：
- en: '[PRE50]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: <dfn class="keep-together">Millimeters</dfn>
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: <dfn class="keep-together">毫米</dfn>
- en: 'A millimeter is 1/10 of a centimeter (or almost 3 points). Millimeters are
    another measure best suited to print. For example:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 毫米是厘米的十分之一（或接近 3 点）。毫米是另一种最适合印刷的度量单位。例如：
- en: '[PRE51]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: <dfn class="keep-together">Picas</dfn>
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: <dfn class="keep-together">Picas</dfn>
- en: 'A pica is another print typographic measurement, which is equivalent to 12
    points. For example:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 点（Pica）是另一种印刷排版测量单位，相当于 12 点。例如：
- en: '[PRE52]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: <dfn class="keep-together">Ems</dfn>
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: <dfn class="keep-together">Ems</dfn>
- en: 'An em is equal to the current font size and is therefore one of the more useful
    measurements for CSS since it is used to describe relative dimensions. For example:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 em 等于当前字体大小，因此在 CSS 中它是描述相对尺寸的更有用的测量单位之一。例如：
- en: '[PRE53]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: <dfn class="keep-together">Exs</dfn>
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: <dfn class="keep-together">Exs</dfn>
- en: 'An ex is also related to the current font size; it is equivalent to the height
    of a lowercase letter *x*. This is a less popular unit of measurement that is
    most often used as a good approximation for helping to set the width of a box
    that will contain some text. For example:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: Ex 是与当前字体大小相关的，它相当于小写字母 *x* 的高度。这是一种较少使用的度量单位，最常用作帮助设置将包含一些文本的框的宽度的良好近似值。例如：
- en: '[PRE54]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: <dfn class="keep-together">Percent</dfn>
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: <dfn class="keep-together">百分比</dfn>
- en: 'This unit is related to the em in that it is exactly 100 times greater (when
    used on a font). Whereas 1 em equals the current font size, the same size is 100
    in percent. When not relating to a font, this unit is relative to the size of
    the container of the property being accessed. For example:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 这个单位与 em 相关，因为它在字体上的倍数是 100（当用于字体时）。而 1 em 等于当前字体大小，相同大小的百分比是 100。当不涉及字体时，此单位相对于正在访问的属性的容器的大小。例如：
- en: '[PRE55]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[Figure 19-5](#different_measurements_that_display_almo) shows each of these
    measurement types in turn being used to display text in almost identical sizes.'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 19-5](#different_measurements_that_display_almo) 显示依次使用这些测量类型来显示几乎相同大小的文本。'
- en: '![Different measurements that display almost the same](Images/pmj6_1905.png)'
  id: totrans-253
  prefs: []
  type: TYPE_IMG
  zh: '![几乎相同大小的不同测量](Images/pmj6_1905.png)'
- en: Figure 19-5\. Different measurements that display almost the same
  id: totrans-254
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 19-5\. 几乎相同大小的不同测量
- en: Fonts and Typography
  id: totrans-255
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字体和排版
- en: 'You can change four main font properties using CSS: `font-family`, `font-style`,
    `font-size`, and `font-weight`. Between them, you can fine-tune the way text displays
    in your web pages and/or when printed.'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 CSS 更改四个主要的字体属性：`font-family`、`font-style`、`font-size` 和 `font-weight`。通过它们，你可以微调网页和/或打印时文本的显示方式。
- en: font-family
  id: totrans-257
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字体系列
- en: 'The `font-family` property assigns the font to use. Here you can list a variety
    of fonts in order of preference from left to right so that styling can fall back
    gracefully when the user doesn’t have the preferred font installed. For example,
    to set the default font for paragraphs, you might use a CSS rule such as this:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '`font-family` 属性指定要使用的字体。你可以按照优先级从左到右列出各种字体，这样当用户没有安装首选字体时，样式可以优雅地回退。例如，要设置段落的默认字体，你可以使用类似这样的
    CSS 规则：'
- en: '[PRE56]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Where a font name is made up of two or more words, you must enclose the name
    in quotation marks, like this:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个字体名称由两个或更多单词组成，你必须用引号将名称括起来，像这样：
- en: '[PRE57]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Note
  id: totrans-262
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注
- en: Because they should be available in virtually all web browsers and operating
    systems, the safest font families to use on a web page are Arial, Helvetica, Times
    New Roman, Times, Courier New, and Courier. The Verdana, Georgia, Comic Sans MS,
    Trebuchet MS, Arial Black, and Impact fonts are safe for Mac and PC use but may
    not be installed on other operating systems such as Linux. Other common but less
    safe fonts are Palatino, Garamond, Bookman, and Avant Garde. If you use one of
    the less safe fonts, make sure you offer fallbacks of one or more safer fonts
    in your CSS so that your web pages will degrade gracefully on browsers without
    your preferred fonts.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 因为它们几乎可以在所有的网页浏览器和操作系统中使用，所以在网页上使用的最安全的字体系列包括 Arial、Helvetica、Times New Roman、Times、Courier
    New 和 Courier。Verdana、Georgia、Comic Sans MS、Trebuchet MS、Arial Black 和 Impact
    字体适用于 Mac 和 PC，但可能未安装在其他操作系统（如 Linux）上。其他常见但较不安全的字体包括 Palatino、Garamond、Bookman
    和 Avant Garde。如果你使用了其中一种较不安全的字体，请确保在你的 CSS 中提供一个或多个更安全的字体作为备用，以便在没有你首选字体的浏览器上，你的网页能够优雅地降级显示。
- en: '[Figure 19-6](#selecting_font_families) shows these two sets of CSS rules being
    applied.'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 19-6](#selecting_font_families) 显示这两组 CSS 规则的应用。'
- en: '![Selecting font families](Images/pmj6_1906.png)'
  id: totrans-265
  prefs: []
  type: TYPE_IMG
  zh: '![选择字体系列](Images/pmj6_1906.png)'
- en: Figure 19-6\. Selecting font families
  id: totrans-266
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 19-6\. 选择字体系列
- en: font-style
  id: totrans-267
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字形
- en: 'With the `font-style` property, you can choose to display a font normally,
    in italics, or obliquely. The following rules create three classes (`normal`,
    `italic`, and `oblique`) that can be applied to elements to create these effects:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`font-style`属性，您可以选择以普通、斜体或倾斜方式显示字体。以下规则创建了三个类（`normal`、`italic`和`oblique`），可以应用于元素以创建这些效果：
- en: '[PRE58]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: font-size
  id: totrans-270
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字号
- en: 'As described in the earlier section on measurements, there are a large number
    of ways you can change a font’s size. But these all boil down to two main types:
    fixed and relative. A fixed setting looks like the following rule, which sets
    the default paragraph font size to 14 points:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 正如在测量部分中所述，你可以以多种方式更改字体的大小。但这些归结为两种主要类型：固定大小和相对大小。固定设置如下规则，将默认段落字体大小设置为14点：
- en: '[PRE59]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Alternatively, you may wish to work with the current default font size, using
    it to style various types of text, such as headings. In the following rules, relative
    sizes of some headers are defined, with the `<h4>` tag starting off 20% bigger
    than the default and with each greater size another 40% larger than the previous
    one:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可能希望使用当前默认的字体大小来为各种类型的文本设置样式，比如标题。在以下规则中，定义了一些标题的相对大小，例如，`<h4>`标签比默认大小大20%，每个更大的尺寸比上一个大40%：
- en: '[PRE60]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[Figure 19-7](#setting_four_heading_sizes_and_the_defau) shows a selection
    of font sizes in use.'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 19-7](#setting_four_heading_sizes_and_the_defau)展示了正在使用的一些字体大小的选择。'
- en: '![Setting four heading sizes and the default paragraph size](Images/pmj6_1907.png)'
  id: totrans-276
  prefs: []
  type: TYPE_IMG
  zh: '![设置四个标题大小和默认段落大小](Images/pmj6_1907.png)'
- en: Figure 19-7\. Setting four heading sizes and the default paragraph size
  id: totrans-277
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 19-7\. 设置四个标题大小和默认段落大小
- en: font-weight
  id: totrans-278
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字重
- en: 'Using the `font-weight` property, you can choose how boldly to display a font.
    It supports a number of values, but the main ones you will use are likely to be
    `normal` and `bold`, like this:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`font-weight`属性，您可以选择以何种粗细显示字体。它支持许多值，但您可能主要使用的是`normal`和`bold`，如下所示：
- en: '[PRE61]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Managing Text Styles
  id: totrans-281
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理文本样式
- en: Regardless of the font in use, you can further modify the way text displays
    by altering its decoration, spacing, and alignment. There is a crossover between
    the text and font properties, though, in that effects such as italics or bold
    text are achieved via the `font-style` and `font-weight` properties, while others
    such as underlining require the `text-decoration` property.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 无论使用哪种字体，你都可以通过修改其装饰、间距和对齐方式进一步修改文本的显示方式。文本和字体属性之间存在交叉，比如斜体或粗体文字通过`font-style`和`font-weight`属性实现，而下划线等则需要`text-decoration`属性。
- en: Decoration
  id: totrans-283
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 装饰
- en: 'With the `text-decoration` property, you can apply effects to text such as
    `underline`, `line-through`, `overline`, and `blink`. The following rule creates
    a new class called `over` that applies overlines to text (the weight of over,
    under, and through lines will match that of the font):'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`text-decoration`属性，您可以对文本应用效果，如`underline`、`line-through`、`overline`和`blink`。以下规则创建了一个名为`over`的新类，将横线应用于文本（横线、下划线和删除线的粗细将与字体相匹配）：
- en: '[PRE62]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: In [Figure 19-8](#examples_of_the_styles_and_decoration_ru) you can see a selection
    of font styles, weights, and decorations.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 在[图 19-8](#examples_of_the_styles_and_decoration_ru)中，你可以看到一些字体样式、粗细和装饰的选择。
- en: '![Examples of the styles and decoration rules available](Images/pmj6_1908.png)'
  id: totrans-287
  prefs: []
  type: TYPE_IMG
  zh: '![可用样式和装饰规则的示例](Images/pmj6_1908.png)'
- en: Figure 19-8\. Examples of the styles and decoration rules available
  id: totrans-288
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 19-8\. 可用样式和装饰规则的示例
- en: Spacing
  id: totrans-289
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 间距
- en: 'A number of different properties allow you to modify line, word, and letter
    spacing. For example, the following rules change the line spacing for paragraphs
    by modifying the `line-height` property to be 25% greater, set the `word-spacing`
    property to 30 pixels, and set `letter-spacing` to 3 pixels:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 许多不同的属性允许你修改行、词和字母的间距。例如，以下规则通过修改`line-height`属性使段落行距增加25%，将`word-spacing`属性设置为30像素，并将`letter-spacing`设置为3像素：
- en: '[PRE63]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: You can equally choose to use a percentage value with `word-spacing` or `letter-spacing`
    to decrease or increase the default amount of space applied to a font by using
    values less than or greater than 100%, which will work with proportional and non-proportional
    fonts.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以选择使用百分比值和`word-spacing`或`letter-spacing`来减少或增加字体应用的默认空间量，使用小于或大于100%的值，这对比例和非比例字体都适用。
- en: Alignment
  id: totrans-293
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对齐
- en: 'There are four types of text alignment available in CSS: `left`, `right`, `center`,
    and `justify`. In the following rule, the default paragraph text is set to full
    justification:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 在CSS中有四种文本对齐方式：`left`、`right`、`center`和`justify`。在下面的规则中，默认段落文本设置为完全对齐：
- en: '[PRE64]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Transformation
  id: totrans-296
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 转换
- en: 'There are four properties available for transforming your text: `none`, `capitalize`,
    `uppercase`, and `lowercase`. The following rule creates a class called `upper`
    that will ensure that all text is displayed in uppercase when it is used:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 有四种属性可用于转换文本：`none`、`capitalize`、`uppercase`和`lowercase`。以下规则创建一个名为`upper`的类，当使用时将确保所有文本以大写显示：
- en: '[PRE65]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Indenting
  id: totrans-299
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缩进
- en: 'Using the `text-indent` property, you can indent the first line of a block
    of text by a specified amount. The following rule indents the first line of every
    paragraph by 20 pixels, although a different unit of measurement or a percent
    increase could also be applied:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`text-indent`属性，您可以按指定量缩进文本块的第一行。下面的规则将每个段落的第一行缩进20像素，尽管也可以应用不同的测量单位或百分比增加：
- en: '[PRE66]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'In [Figure 19-9](#indentingcomma_uppercasecomma_and_spacin) the following rules
    have been applied to a section of text:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 在[图19-9](#indentingcomma_uppercasecomma_and_spacin)中，以下规则已应用于文本部分：
- en: '[PRE67]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '![Indenting, uppercase, and spacing rules being applied](Images/pmj6_1909.png)'
  id: totrans-304
  prefs: []
  type: TYPE_IMG
  zh: '![应用了缩进、大写和间距规则](Images/pmj6_1909.png)'
- en: Figure 19-9\. Indenting, uppercase, and spacing rules being applied
  id: totrans-305
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图19-9\. 应用了缩进、大写和间距规则
- en: CSS Colors
  id: totrans-306
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSS 颜色
- en: You can apply colors to the foreground and background of text and objects by
    using the `color` and `background-color` properties (or by supplying a single
    argument to the `background` property). The colors specified can be one of the
    named colors (such as `red` or `blue`), colors created from hexadecimal RGB triplets
    (such as `#ff0000` or `#0000ff`), or colors created using the `rgb` CSS function.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过使用`color`和`background-color`属性（或通过向`background`属性提供单个参数）将颜色应用于文本和对象的前景和背景。指定的颜色可以是命名颜色之一（如`red`或`blue`）、由十六进制RGB三元组创建的颜色（如`#ff0000`或`#0000ff`）或使用`rgb`CSS函数创建的颜色。
- en: 'The standard 16 color names as defined by the [W3C standards organization](http://www.w3.org)
    are `aqua`, `black`, `blue`, `fuchsia`, `gray`, `green`, `lime`, `maroon`, `navy`,
    `olive`, `purple`, `red`, `silver`, `teal`, `white`, and `yellow`. The following
    rule uses one of these names to set the background color for an object with the
    ID of `object`:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 根据[W3C标准组织](http://www.w3.org)定义的标准16种颜色名称分别为`aqua`、`black`、`blue`、`fuchsia`、`gray`、`green`、`lime`、`maroon`、`navy`、`olive`、`purple`、`red`、`silver`、`teal`、`white`和`yellow`。下面的规则使用其中一种名称设置具有ID`object`的对象的背景颜色：
- en: '[PRE68]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'In this rule, the foreground color of text in all `<div>` elements is set to
    yellow (because on a computer display, hexadecimal levels of `ff` red, plus `ff`
    green, plus `00` blue create the color yellow):'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 在此规则中，所有`<div>`元素中文本的前景色设置为黄色（因为在计算机显示器上，十六进制级别`ff`红色，加上`ff`绿色，再加上`00`蓝色创建黄色）：
- en: '[PRE69]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Or, if you don’t wish to work in hexadecimal, you can specify your color triplets
    by using the `rgb` function, as in the following rule, which changes the background
    color of the current document to aqua:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果您不想使用十六进制，可以使用`rgb`函数指定颜色三元组，如下规则，将当前文档的背景颜色更改为水绿色：
- en: '[PRE70]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: Note
  id: totrans-314
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: 'If you prefer not to work in ranges of 256 levels per color, you can use percentages
    in the `rgb` function instead, with values from `0` to `100` ranging from the
    lowest (`0`) amount of a primary color through to the highest (`100`), like this:
    `rgb(58%, 95%, 74%)`. You can also use floating-point values for even finer color
    control, like this: `rgb(23.4%, 67.6%, 15.5%)`.'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不喜欢使用每种颜色256级范围，也可以在`rgb`函数中使用百分比，范围从`0`到`100`，从最低（`0`）到最高（`100`）的主色彩量。例如：`rgb(58%,
    95%, 74%)`。您还可以使用浮点值进行更精细的颜色控制，如：`rgb(23.4%, 67.6%, 15.5%)`。
- en: Short Color Strings
  id: totrans-316
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 短颜色字符串
- en: There is also a short form of the hex digit string in which only the first of
    each 2-byte pair is used for each color. For example, instead of assigning the
    color `#fe4692`, you use `#f49`, omitting the second hex digit from each pair,
    which equates to a color value of `#ff4499`.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一种十六进制数字串的简写形式，每个颜色只使用每个2字节对中的第一个。例如，不使用颜色`#fe4692`，而使用`#f49`，省略每对中的第二个十六进制数字，相当于颜色值为`#ff4499`。
- en: This results in almost the same color and is useful when exact colors are not
    required. The difference between a 6-digit and 3-digit string is that the former
    supports 16 million different colors, while the latter supports 4,000.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 这几乎产生相同的颜色，在不需要精确颜色时非常有用。6位数和3位数字符串的区别在于前者支持1600万种不同的颜色，而后者仅支持4000种。
- en: Wherever you intend to use a color such as `#883366`, this is the direct equivalent
    of `#836` (since the repeated digits are implied by the shorter version), and
    you can use either string to create the exact same color.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 无论何时需要使用`#883366`这样的颜色，这直接等同于`#836`（因为较短版本的重复数字被隐含），你可以使用任意一种字符串来创建完全相同的颜色。
- en: Gradients
  id: totrans-320
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 渐变
- en: In place of using a solid background color, you can choose to apply a gradient,
    which will then automatically flow from a given initial color to a final color
    of your choice. It is best used in conjunction with a simple color rule so that
    browsers that don’t support gradients will at least display a solid color.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 可选择应用渐变来替代实心背景颜色，从给定的初始颜色自动流向你选择的最终颜色。最好与简单的颜色规则结合使用，这样不支持渐变的浏览器至少会显示实心颜色。
- en: '[Example 19-3](#creating_a_linear_gradient) uses a rule to display an orange
    gradient (or simply plain orange on nonsupporting browsers), as shown in the middle
    section of [Figure 19-10](#solid_background_colorcomma_a_linear_g).'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 19-3](#creating_a_linear_gradient) 使用规则显示橙色渐变（或在不支持的浏览器上显示纯橙色），如[图 19-10](#solid_background_colorcomma_a_linear_g)的中间部分所示。'
- en: Example 19-3\. Creating a linear gradient
  id: totrans-323
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 19-3\. 创建线性渐变
- en: '[PRE71]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '![A solid background color, a linear gradient, and a radial gradient](Images/pmj6_1910.png)'
  id: totrans-325
  prefs: []
  type: TYPE_IMG
  zh: '![A solid background color, a linear gradient, and a radial gradient](Images/pmj6_1910.png)'
- en: Figure 19-10\. A solid background color, a linear gradient, and a radial gradient
  id: totrans-326
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 19-10\. 一个实心背景颜色、线性渐变和径向渐变
- en: To create a gradient, choose where it will begin out of `top`, `bottom`, `left`,
    `right`, and `center` (or any combination, such as `top left` or `center right`),
    enter the start and end colors you require, and then apply either the `linear-gradient`
    or `radial-gradient` rule, making sure you also supply rules for all browsers
    you are targeting.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建渐变，选择从`top`、`bottom`、`left`、`right`和`center`（或任意组合，如`top left`或`center right`）开始的位置，输入所需的起始和结束颜色，然后应用`linear-gradient`或`radial-gradient`规则，确保为所有目标浏览器提供规则。
- en: You can also use more than just a start and end color by supplying what are
    termed *stop* colors in between as additional arguments. For example, if five
    arguments are supplied, each argument will control the color change over a fifth
    of the area, determined by its location in the argument list.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以通过提供被称为*停止*颜色的中间参数来使用不仅仅是起始和结束颜色。例如，如果提供了五个参数，则每个参数将控制区域的五分之一颜色变化，由其在参数列表中的位置确定。
- en: In addition to gradients you can also apply transparency to CSS objects, as
    detailed in [Chapter 20](ch20.xhtml#advanced_css_with_css3).
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 除了渐变，你还可以将透明度应用到CSS对象中，详细说明在[第 20 章](ch20.xhtml#advanced_css_with_css3)。
- en: Positioning Elements
  id: totrans-330
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定位元素
- en: Elements within a web page fall where they are placed in the document, but you
    can move them about by changing an element’s `position` property from the default
    of `static` to one of `absolute`, `relative`, `sticky`, or `fixed`.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 网页内的元素按其在文档中的放置位置排列，但你可以通过将元素的`position`属性从默认的`static`更改为`absolute`、`relative`、`sticky`或`fixed`之一来移动它们。
- en: Absolute Positioning
  id: totrans-332
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 绝对定位
- en: An element with absolute positioning is removed from the document, and any other
    elements that are capable will flow into its released space. You can then position
    the object anywhere you like within the document by using the `top`, `right`,
    `bottom`, and `left` properties.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 绝对定位元素从文档中移除后，其它可用的元素将流入其释放出的空间。然后，你可以使用`top`、`right`、`bottom`和`left`属性在文档中任意位置放置对象。
- en: 'So, for example, to move an object with the ID of `object` to the absolute
    location of 100 pixels down from the document start and 200 pixels in from the
    left, you would apply the following rules to it (you can also use any of the other
    units of measurement supported by CSS):'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要将ID为`object`的对象移动到文档开始位置下方100像素并距左边200像素的绝对位置，你可以向其应用以下规则（还可以使用CSS支持的任何其他测量单位）：
- en: '[PRE72]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'The object will rest either on top of or behind other elements that it overlaps,
    depending on the value assigned to the `z-index` property (which works only on
    positioned elements). The default `z-index` value of an element is `auto`, where
    the browser will work it out for you. Alternatively, you can give the property
    an integer value (which may be negative), like this:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 该对象将位于其重叠的其他元素的顶部或后面，具体取决于分配给 `z-index` 属性的值（仅适用于定位元素）。元素的默认 `z-index` 值为 `auto`，浏览器会自动为您解决。或者，您可以给属性一个整数值（可能是负数），如下所示：
- en: '[PRE73]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: Objects then appear in order from the lowest to highest `z-index` level, with
    higher values displaying on top of lower ones. The default `z-index` value for
    the `html` element is `0`; all other defaults are `auto`.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，对象按照从最低到最高 `z-index` 级别的顺序显示，具有较高值的显示在较低值之上。`html` 元素的默认 `z-index` 值为 `0`；所有其他默认值为
    `auto`。
- en: Relative Positioning
  id: totrans-339
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相对定位
- en: 'Likewise, you can move the object relative to the location it would occupy
    in the normal document flow. So, for example, to move `object` 10 pixels down
    and 10 pixels to the right of its normal location, you would use the following
    rules:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，您可以将对象相对于其在正常文档流中将占据的位置移动。因此，例如，要将 `object` 向下移动 10 像素并向右移动 10 像素以超出其正常位置，您将使用以下规则：
- en: '[PRE74]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: Fixed Positioning
  id: totrans-342
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 固定定位
- en: 'The final `position` property setting lets you move an object to an absolute
    location, but only within the current browser viewport. Then, when the document
    is scrolled, the object remains exactly where it has been placed, with the main
    document scrolling beneath it—a great way to create dock bars and other similar
    devices. To fix the object to the top-left corner of the browser window, use the
    following rules:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 最终的 `position` 属性设置允许您将对象移动到绝对位置，但仅限于当前浏览器视口。然后，当文档滚动时，对象仍然保持在其放置的确切位置，主文档在其下滚动
    - 这是创建码头栏和其他类似设备的绝佳方式。要将对象固定到浏览器窗口的左上角，请使用以下规则：
- en: '[PRE75]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[Example 19-4](#applying_different_positioning_values) demonstrates applying
    different positioning values to objects on a page.'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: '[例子 19-4](#applying_different_positioning_values) 展示了在页面上应用不同定位值到对象的方法。'
- en: Example 19-4\. Applying different positioning values
  id: totrans-346
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 例子 19-4\. 应用不同的定位值
- en: '[PRE76]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: In [Figure 19-11](#using_different_positioning_values), [Example 19-4](#applying_different_positioning_values)
    has been loaded into a browser, and the browser window has been reduced in width
    and height so that you must scroll down to see all of the web page.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [图 19-11](#using_different_positioning_values) 中，[例子 19-4](#applying_different_positioning_values)
    已加载到浏览器中，并且浏览器窗口已减小到宽度和高度，因此您必须向下滚动才能查看整个网页。
- en: '![Using different positioning values](Images/pmj6_1911.png)'
  id: totrans-349
  prefs: []
  type: TYPE_IMG
  zh: '![使用不同的定位值](Images/pmj6_1911.png)'
- en: Figure 19-11\. Using different positioning values
  id: totrans-350
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 19-11\. 使用不同的定位值
- en: When this is done, it is immediately obvious that the element with fixed positioning
    (`object3`) remains in place even through scrolling. You can also see that the
    container element (with the name `container`) has absolute positioning and is
    located exactly at 50 pixels down, with 0 pixels horizontal offset, so that `object1`
    (which has absolute positioning within `container`) appears at that location.
    Meanwhile, `object2` has relative positioning and so is offset from the left margin
    of `container` by 110 pixels, to line up alongside `object1` .
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 当这样做时，可以立即看出具有固定定位的元素（`object3`）即使通过滚动也保持在原位。您还可以看到容器元素（名为 `container`）具有绝对定位，并且正好位于向下
    50 像素，水平偏移为 0 像素，以便 `object1`（在 `container` 内具有绝对定位）出现在该位置。与此同时，`object2` 具有相对定位，因此与
    `container` 的左边距相差 110 像素，与 `object1` 对齐。
- en: In the figure, `object3`, even though it appears within the `container` element
    in the HTML, has fixed positioning and therefore is actually totally independent
    from the other objects and not constricted to stay within the bounds of `container`.
    It is set to initially line up alongside `object1` and `object2` but has stayed
    put while the others have been scrolled up the page and now appears offset below
    them.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 在该图中，`object3`，即使出现在 HTML 的 `container` 元素中，也具有固定定位，因此实际上与其他对象完全独立，不受 `container`
    边界的限制。它最初设置为与 `object1` 和 `object2` 对齐，但与其他对象一起滚动到页面上方时保持不变，现在看起来偏离了它们下方的偏移位置。
- en: Pseudoclasses
  id: totrans-353
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 伪类
- en: A number of selectors and classes are used only within a stylesheet and do not
    have any matching tags or attributes within HTML. Their task is to classify elements
    using characteristics other than their name, attributes, or content—that is, characteristics
    that cannot be deduced from the document tree. These include pseudoclasses such
    as `link` and `visited`. There are also pseudoelements that make a selection,
    which may consist of partial elements such as `first-line` or `first-letter`.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 一些选择器和类仅在样式表中使用，并且在HTML中没有任何匹配的标签或属性。它们的任务是使用除了名称、属性或内容之外的特征对元素进行分类，即无法从文档树中推断出的特征。这些包括伪类，如`link`和`visited`。还有伪元素用于进行选择，这些选择可能包括部分元素，例如`first-line`或`first-letter`。
- en: 'Pseudoclasses and pseudoelements are separated by a `:` (colon) character.
    For example, to create a class called `bigfirst` for emphasizing the first letter
    of an element, you would use a rule such as the following:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 伪类和伪元素由`:`（冒号）字符分隔。例如，要创建一个名为`bigfirst`的类以强调元素的第一个字母，您可以使用如下规则：
- en: '[PRE77]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'When the `bigfirst` class is applied to an element, the first letter will be
    displayed much enlarged, with the remaining text shown at normal size, neatly
    flowing around it (due to the `float` property) as if the first letter were an
    image or other object. Pseudoclasses include `hover`, `link`, `active`, and `visited`,
    all of which are mostly useful for applying to anchor elements—as in the following
    rules, which set the default color of all links to blue, and that of links that
    have already been visited to light blue:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 当`bigfirst`类应用于元素时，第一个字母将显示为大号，其余文本以正常大小显示，并整齐地围绕它流动（由于`float`属性），就像第一个字母是图像或其他对象一样。伪类包括`hover`、`link`、`active`和`visited`，它们大多用于应用于锚元素，如以下规则，将所有链接的默认颜色设置为蓝色，已访问的链接颜色设置为浅蓝色：
- en: '[PRE78]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'The following rules are interesting in that they use the `hover` pseudoclass
    so that they are applied only when the mouse pointer is positioned over the element.
    In this example, they change the link to white text on a red background, providing
    a dynamic effect you would normally expect only from using JavaScript code:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 以下规则非常有趣，因为它们使用了`hover`伪类，因此只有当鼠标指针悬停在元素上时才应用。在这个例子中，它们将链接更改为白色文本和红色背景，提供了一种通常只能通过使用JavaScript代码实现的动态效果：
- en: '[PRE79]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: Here I have used the `background` property with a single argument, instead of
    the longer `background-color` property.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我使用了`background`属性和单个参数，而不是较长的`background-color`属性。
- en: 'The `active` pseudoclass is also dynamic in that it effects a change to a link
    during the time between the mouse button being clicked and released, as with this
    rule, which changes the link color to dark blue:'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: '`active`伪类也是动态的，它在鼠标按钮按下和释放之间的时间内对链接进行更改，例如下面的规则，将链接颜色更改为深蓝色：'
- en: '[PRE80]'
  id: totrans-363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'Another interesting dynamic pseudoclass is `focus`, which is applied only when
    an element is given focus by the user selecting it with the keyboard or mouse.
    The following rule uses the universal selector to always place a mid-gray, dotted,
    2-pixel border around the currently focused object:'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有趣的动态伪类是`focus`，它只有在用户通过键盘或鼠标选择元素时才应用。以下规则使用通用选择器，始终在当前聚焦对象周围放置一条中灰色的虚线2像素边框：
- en: '[PRE81]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: Note
  id: totrans-366
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: This discussion applies to traditional web development, not development for
    mobile/touch devices. We’ll focus more on that topic in [Chapter 23](ch23.xhtml#introduction_to_jquery_mobile),
    where we look at jQuery Mobile.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 这个讨论适用于传统的网页开发，不适用于移动/触摸设备的开发。我们将在[第23章](ch23.xhtml#introduction_to_jquery_mobile)中更专注于这个话题，讨论jQuery
    Mobile。
- en: '[Example 19-5](#link_and_focus_pseudo-classes) displays two links and an input
    field, as shown in [Figure 19-12](#pseudo-classes_applied_to_a_selection_of).
    The first link shows up as gray since it has already been visited in this browser,
    but the second link has not and displays in blue. The Tab key has been pressed,
    and the focus of input is now the input field, so its background has changed to
    yellow. When either link is clicked, it will display in purple, and when hovered
    over, it will appear red.'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例19-5](#link_and_focus_pseudo-classes)显示了两个链接和一个输入字段，如[图19-12](#pseudo-classes_applied_to_a_selection_of)所示。第一个链接因在此浏览器中已访问过而显示为灰色，但第二个链接尚未访问，并显示为蓝色。已按下Tab键，并且输入的焦点现在是输入字段，因此其背景已更改为黄色。单击任一链接时，它将显示为紫色，并在悬停时显示为红色。'
- en: Example 19-5\. Link and focus pseudoclasses
  id: totrans-369
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例19-5\. 链接和焦点伪类
- en: '[PRE82]'
  id: totrans-370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '![Pseudo-classes applied to a selection of elements](Images/pmj6_1912.png)'
  id: totrans-371
  prefs: []
  type: TYPE_IMG
  zh: '![应用于一组元素的伪类](Images/pmj6_1912.png)'
- en: Figure 19-12\. Pseudoclasses applied to a selection of elements
  id: totrans-372
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图19-12\. 应用于一组元素的伪类
- en: Other pseudoclasses are also available; for more information, see the [HTML
    Dog “Pseudo Classes” tutorial](https://tinyurl.com/htmldipc).
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他伪类可用；有关更多信息，请参阅[HTML Dog“伪类”教程](https://tinyurl.com/htmldipc)。
- en: Shorthand Rules
  id: totrans-374
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 速记规则
- en: 'To save space, groups of related CSS properties can be concatenated into a
    single shorthand assignment. For example, I have already used the shorthand for
    creating a border a few times, as in the `focus` rule in the previous section:'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 为节省空间，相关CSS属性组可以合并为单个速记分配。例如，我已经多次使用了创建边框的速记，例如前一节中的`focus`规则中使用的速记：
- en: '[PRE83]'
  id: totrans-376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'This is actually a shorthand concatenation of the following ruleset:'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 这实际上是以下规则集的速记连接：
- en: '[PRE84]'
  id: totrans-378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'When using a shorthand rule, you need only apply the properties up to the point
    where you wish to change values. So, you could use the following to set only a
    border’s width and style, choosing not to set its color:'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 使用速记规则时，只需应用到您希望更改值的点即可。因此，您可以使用以下内容仅设置边框的宽度和样式，选择不设置其颜色：
- en: '[PRE85]'
  id: totrans-380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: Note
  id: totrans-381
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: The order in which the properties are placed in a shorthand rule can be important,
    and misplacing them is a common way to get unexpected results. Since there are
    far too many to detail in this chapter, if you wish to use shorthand CSS, you
    will need to look up the default properties and their order of application using
    a CSS manual or search engine.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 属性在速记规则中的放置顺序可能很重要，误放可能会导致意外结果。由于本章节无法详细说明所有属性，如果您希望使用速记CSS，请查阅CSS手册或搜索引擎获取默认属性及其应用顺序的信息。
- en: The Box Model and Layout
  id: totrans-383
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 框模型和布局
- en: 'The CSS properties affecting the layout of a page are based around the *box
    model*, a nested set of properties surrounding an element. Virtually all elements
    have (or can have) these properties, including the document body, whose margin
    you can (for example) remove with the following rule:'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 影响页面布局的CSS属性围绕*框模型*展开，这是围绕元素的一组嵌套属性。几乎所有元素都具有（或可以具有）这些属性，包括文档主体，您可以（例如）通过以下规则删除其边距：
- en: '[PRE86]'
  id: totrans-385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: The box model of an object starts at the outside, with the object’s margin.
    Inside this is the border, then there is padding between the border and the inner
    contents, and finally you have the object’s contents.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 对象的框模型从外部开始，从对象的边距开始。边框位于其内部，边框和内部内容之间有填充，最后是对象的内容。
- en: Once you have the hang of the box model, you will be well on your way to creating
    professionally laid-out pages, since these properties alone will make up much
    of your page styling.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦掌握了框模型，您将能够专业地布局页面，因为这些属性本身将构成页面样式的大部分。
- en: Setting Margins
  id: totrans-388
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置边距
- en: The margin is the outermost level of the box model. It separates elements from
    each other, and its use is quite smart. For example, assume you give a number
    of elements a default margin of 10 pixels around each. This is the amount of space
    you would like to appear between two elements positioned one below the other—but
    if they each have a margin of 10 pixels, won’t the result be a gap of 20 pixels?
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 边距是框模型的最外层。它将元素彼此分开，使用起来非常聪明。例如，假设您给多个元素设置了默认边距为每个元素周围的10像素。这是您希望在下面放置两个元素之间出现的空间量，但如果它们每个都有10像素的边距，那么结果不是20像素的间隙吗？
- en: 'In fact, CSS overcomes this potential issue: when two elements with margins
    defined are positioned directly one after the other, only the larger of the two
    margins is used to separate them. If both margins are the same width, just one
    of the widths is used. This way, you are much more likely to get the result you
    want. But you should note that the margins of absolutely positioned or inline
    elements do not collapse in this way.'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，CSS克服了这个潜在问题：当具有定义边距的两个元素直接相邻时，仅使用两个边距中较大的一个来分隔它们。如果两个边距的宽度相同，则只使用其中一个宽度。这样，您更有可能得到想要的结果。但是请注意，绝对定位或内联元素的边距不会以这种方式折叠。
- en: 'The margins of an element can be changed en masse with the `margin` property,
    or individually with `margin-left`, `margin-top`, `margin-right`, and `margin-bottom`.
    When setting the `margin` property, you can supply one, two, three, or four arguments,
    which have the effects commented in the following rules:'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 元素的外边距可以通过`margin`属性一次性更改，或者通过`margin-left`、`margin-top`、`margin-right`和`margin-bottom`单独设置。设置`margin`属性时，可以提供一个、两个、三个或四个参数，其效果如下规则所述：
- en: '[PRE87]'
  id: totrans-392
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: In [Example 19-6](#how_margins_are_applied), a `margin` property rule (highlighted
    in bold) is applied to a square element that has been placed inside a `table`
    element. [Figure 19-13](#outer_table_expands_according_to_the) shows this example
    loaded into a browser. The table has been given no dimensions, so it will simply
    wrap as closely around the inner `<div>` element as it can. As a consequence,
    there is a margin of 10 pixels above it, 20 pixels to its right, 30 pixels below
    it, and 40 pixels to its left.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 在[示例 19-6](#how_margins_are_applied)中，一个应用于放置在`table`元素内的正方形元素的`margin`属性规则（加粗显示）被应用。[图 19-13](#outer_table_expands_according_to_the)展示了这个示例加载到浏览器中的情况。表格没有给定尺寸，所以它将尽可能紧密地围绕内部`<div>`元素包裹。因此，它上方有10像素的外边距，右侧有20像素的外边距，下方有30像素的外边距，左侧有40像素的外边距。
- en: Example 19-6\. How margins are applied
  id: totrans-394
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 19-6\. 外边距如何应用
- en: '[PRE88]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '![The outer table expands according to the margin widths](Images/pmj6_1913.png)'
  id: totrans-396
  prefs: []
  type: TYPE_IMG
  zh: '![外部表格根据边距宽度扩展](Images/pmj6_1913.png)'
- en: Figure 19-13\. The outer table expands according to the margin widths
  id: totrans-397
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 19-13\. 外部表格根据边距宽度扩展
- en: Applying Borders
  id: totrans-398
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用边框
- en: The border level of the box model is similar to the margin, except that there
    is no collapsing. It is the next level as we move into the box model. The main
    properties used to modify borders are `border`, `border-left`, `border-top`, `border-right`,
    and `border-bottom`, and each of these can have other subproperties added as suffixes,
    such as `-color`, `-style`, and `-width`.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 盒子模型的边框级别类似于外边距，不同之处在于没有折叠效果。随着我们进入盒子模型，它是下一个级别。用于修改边框的主要属性包括`border`、`border-left`、`border-top`、`border-right`和`border-bottom`，每个属性还可以添加其他后缀子属性，如`-color`、`-style`和`-width`。
- en: 'The four ways of accessing individual property settings used for the `margin`
    property also apply with the `border-width` property, so all of the following
    are valid rules:'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 用于`margin`属性的四种访问单个属性设置的方法也适用于`border-width`属性，因此以下所有规则均有效：
- en: '[PRE89]'
  id: totrans-401
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '[Figure 19-14](#applying_long-_and_shorthand_border_rule) shows each of these
    rules applied in turn to a group of square elements. In the first one, you can
    clearly see that all borders have a width of 1 pixel. The second element, however,
    has a top and bottom border width of 1 pixel, while its side borders are each
    5 pixels wide. The third element has a 1-pixel-wide top border, while its sides
    are 5 pixels wide, and its bottom is 10 pixels wide. The fourth element has a
    1-pixel top border width, a 5-pixel right border width, a 10-pixel bottom border
    width, and a 15-pixel left border width.'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 19-14](#applying_long-_and_shorthand_border_rule)展示了依次应用这些规则到一组正方形元素的情况。在第一个元素中，可以清楚地看到所有边框都有1像素的宽度。然而，第二个元素的顶部和底部边框宽度为1像素，而其侧边边框各为5像素。第三个元素的顶部边框宽度为1像素，其侧边为5像素宽，底部为10像素宽。第四个元素的顶部边框宽度为1像素，右侧边框宽度为5像素，底部边框宽度为10像素，左侧边框宽度为15像素。'
- en: '![Applying long- and shorthand border rule values](Images/pmj6_1914.png)'
  id: totrans-403
  prefs: []
  type: TYPE_IMG
  zh: '![应用长格式和简写边框规则值](Images/pmj6_1914.png)'
- en: Figure 19-14\. Applying long- and shorthand border rule values
  id: totrans-404
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 19-14\. 应用长格式和简写边框规则值
- en: The final element, under the previous ones, doesn’t use the shorthand rules;
    instead, it sets each of the border widths separately. As you can see, it takes
    a lot more typing to achieve the same result.
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 在前述元素下的最后一个元素不使用简写规则，而是分别设置每个边框宽度。正如你所见，要达到相同的效果需要输入更多内容。
- en: Adjusting Padding
  id: totrans-406
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调整填充
- en: The deepest of the box model levels (other than the contents of an element)
    is the padding, which is applied inside any borders and/or margins. The main properties
    used to modify padding are `padding`, `padding-left`, `padding-top`, `padding-right`,
    and `padding-bottom`.
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 盒子模型的最深层（除了元素内容之外）是内边距，它应用在任何边框和/或外边距的内部。用于修改内边距的主要属性包括`padding`、`padding-left`、`padding-top`、`padding-right`和`padding-bottom`。
- en: 'The four ways of accessing individual property settings used for the `margin`
    and `border` properties also apply with the `padding` property, so all the following
    are valid rules:'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 用于`margin`和`border`属性的四种访问单个属性设置的方法也适用于`padding`属性，因此以下所有规则均有效：
- en: '[PRE90]'
  id: totrans-409
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '[Figure 19-15](#applying_different_padding_values_to_an) shows the padding
    rule (shown in bold in [Example 19-7](#applying_padding)) applied to some text
    within a table cell (as defined by the rule `display:table-cell;`, which makes
    the encapsulating `<div>` element display like a table cell), which has been given
    no dimensions, so it will simply wrap as closely around the text as it can. As
    a consequence, there is padding of 10 pixels above the inner element, 20 pixels
    to its right, 30 pixels below it, and 40 pixels to its left.'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: '[图19-15](#applying_different_padding_values_to_an) 显示了对某个表格单元格内的一些文本应用了填充规则（在
    [示例19-7](#applying_padding) 中以粗体显示），该单元格由规则 `display:table-cell;` 定义，使包围的 `<div>`
    元素显示为表格单元格，未给定尺寸，因此它将尽可能紧密地环绕文本。因此，内部元素上方有10像素的填充，右侧有20像素，下方有30像素，左侧有40像素。'
- en: Example 19-7\. Applying padding
  id: totrans-411
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 19-7\. 应用填充
- en: '[PRE91]'
  id: totrans-412
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '![Applying different padding values to an object](Images/pmj6_1915.png)'
  id: totrans-413
  prefs: []
  type: TYPE_IMG
  zh: '![对对象应用不同的填充值](Images/pmj6_1915.png)'
- en: Figure 19-15\. Applying different padding values to an object
  id: totrans-414
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图19-15\. 对对象应用不同的填充值
- en: Object Contents
  id: totrans-415
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对象内容
- en: Finally, deep within the box model levels, at its center, lies an element that
    can be styled in all the ways discussed in this chapter. As you now know, this
    element can (and usually will) contain further subelements, which in turn may
    contain sub-subelements, and so on, each with its own styling and box model settings.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在盒模型的深层级中心，存在一个可以在本章讨论的所有方式中进行样式设置的元素。如您所知，这个元素可以（通常会）包含进一步的子元素，反过来可能包含子-子元素，依此类推，每个都有自己的样式和盒模型设置。
- en: Questions
  id: totrans-417
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Which directive do you use to import one stylesheet into another (or the `<style>`
    section of some HTML)?
  id: totrans-418
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用于将一个样式表导入另一个样式表（或某些 HTML 的 `<style>` 部分）的指令是哪个？
- en: What HTML tag can you use to import a stylesheet into a document?
  id: totrans-419
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以使用什么 HTML 标签来将样式表导入文档中？
- en: Which HTML tag attribute is used to directly embed a style into an element?
  id: totrans-420
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个 HTML 标签属性用于直接将样式嵌入元素？
- en: What is the difference between a CSS ID and a CSS class?
  id: totrans-421
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CSS ID 和 CSS 类之间有什么区别？
- en: Which characters are used to prefix (a) IDs and (b) class names in a CSS rule?
  id: totrans-422
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CSS 规则中用于前缀 (a) ID 和 (b) 类名的字符是哪些？
- en: In CSS rules, what is the purpose of the semicolon?
  id: totrans-423
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 CSS 规则中，分号的作用是什么？
- en: How can you add a comment to a stylesheet?
  id: totrans-424
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何向样式表添加注释？
- en: Which character is used by CSS to represent any element?
  id: totrans-425
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CSS 中用于表示任何元素的字符是哪个？
- en: How can you select a group of different elements and/or element types in CSS?
  id: totrans-426
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何在 CSS 中选择一组不同的元素和/或元素类型？
- en: Given a pair of CSS rules with equal precedence, how can you make one have greater
    precedence than the other?
  id: totrans-427
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给定具有相等优先级的一对 CSS 规则，如何使其中一个比另一个具有更高的优先级？
- en: See [“Chapter 19 Answers”](app01_split_018.xhtml#chapter_19_answers) in the
    [Appendix A](app01_split_000.xhtml#solutions_to_the_chapter_questions) for the
    answers to these questions.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [“第19章答案”](app01_split_018.xhtml#chapter_19_answers)，以获取这些问题的答案。
