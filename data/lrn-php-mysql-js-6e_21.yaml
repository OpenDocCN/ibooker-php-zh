- en: Chapter 18\. Using Asynchronous Communication
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 18 章\. 使用异步通信
- en: The term *Ajax* was first coined in 2005\. It stands for *Asynchronous JavaScript
    and XML*, which, in simple terms, means using a set of methods built into JavaScript
    to transfer data between the browser and a server in the background. This term
    has now been mostly abandoned in favor of simply talking about asynchronous communication.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '*Ajax* 这个术语首次在 2005 年被创造出来。它代表 *Asynchronous JavaScript and XML*，简而言之，就是使用内置在
    JavaScript 中的一组方法在浏览器和服务器之间后台传输数据。这个术语现在大多已被放弃，转而简单地讨论异步通信。'
- en: An excellent example of this technology is Google Maps (see [Figure 18-1](#google_maps_is_an_excellent_example_of_a)),
    in which new sections of a map are downloaded from the server when needed, without
    requiring a page refresh.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这项技术的一个绝佳例子是谷歌地图（见 [图 18-1](#google_maps_is_an_excellent_example_of_a)），在需要时从服务器下载地图的新部分，而无需刷新页面。
- en: Using asynchronous communication not only substantially reduces the amount of
    data that must be sent back and forth but also makes web pages seamlessly dynamic—allowing
    them to behave more like self-contained applications. The results are a much improved
    user interface and better responsiveness.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 使用异步通信不仅大幅减少了需要来回发送的数据量，而且使网页能够无缝动态地运行，使其更像是独立的应用程序。结果是大大改进的用户界面和更好的响应能力。
- en: '![Google Maps is an excellent example of Ajax](Images/pmj6_1801.png)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![谷歌地图是 Ajax 的一个绝佳例子](Images/pmj6_1801.png)'
- en: Figure 18-1\. Google Maps is an excellent example of asynchronous communication
  id: totrans-5
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 18-1\. 谷歌地图是异步通信的一个优秀例子
- en: What Is Asynchronous Communication?
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是异步通信？
- en: Asynchronous communication as used today had its beginning with the release
    of Internet Explorer 5 in 1999, which introduced a new ActiveX object, `XMLHttpRequest`.
    ActiveX is Microsoft’s technology for signing plug-ins that install additional
    software on your computer. Other browser developers later followed suit, but rather
    than using ActiveX, they all implemented the feature as a native part of the JavaScript
    interpreter.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 当今使用的异步通信始于 1999 年发布的 Internet Explorer 5，引入了一个新的 ActiveX 对象，`XMLHttpRequest`。ActiveX
    是微软的技术，用于签名插件，安装额外的软件到您的计算机上。其他浏览器开发者随后效仿，但是他们都将这个功能作为 JavaScript 解释器的本地部分实现，而不是使用
    ActiveX。
- en: However, even before then, an early form of the technology had already surfaced
    that used hidden frames on a page that interacted with the server in the background.
    Chat rooms were early adopters, using it to poll for and display new message posts
    without requiring page reloads.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，早在此之前，一种早期形式的技术已经出现，它在页面上使用隐藏框架与服务器在后台交互。聊天室是早期的采用者，使用它来轮询并显示新的消息帖子，而不需要页面重新加载。
- en: So, let’s see how to implement asynchronous communication by using JavaScript.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，让我们看看如何通过 JavaScript 实现异步通信。
- en: Using XMLHttpRequest
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 XMLHttpRequest
- en: In the past, making Ajax calls was a real pain in the neck because there were
    so many different implementations across various browsers, and especially between
    different versions of Microsoft’s Internet Explorer. Luckily things are vastly
    improved these days, and there’s just the simple `XMLHttpRequest` object to work
    with in one unified manner.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去，由于各种浏览器之间的不同实现，特别是在不同版本的 Microsoft Internet Explorer 之间，制作 Ajax 调用是一件真正的痛苦。幸运的是，如今情况大为改善，只需简单的
    `XMLHttpRequest` 对象即可统一处理。
- en: 'So, for example, to make a GET request, you use code such as this:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要进行 GET 请求，您可以使用以下代码：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Or, for a POST request, just replace the `GET` with `POST`; it’s that simple.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，对于 POST 请求，只需将 `GET` 替换为 `POST`；就是这么简单。
- en: Your First Asynchronous Program
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 您的第一个异步程序
- en: Type and save the code in [Example 18-1](#urlpostdothtml) as *urlpost.html*,
    but don’t load it into your browser yet.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 输入并保存代码到 [示例 18-1](#urlpostdothtml) 中，文件名为 *urlpost.html*，但不要立即加载到浏览器中。
- en: Example 18-1\. urlpost.html
  id: totrans-17
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 18-1\. urlpost.html
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Let’s go through this document and look at what it does, starting with the first
    eight lines, which simply set up an HTML document and display a heading. The next
    line creates a `<div>` with the ID `info`, containing the text `This sentence
    will be replaced` by default. Later on, the text returned from the call will be
    inserted here.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐步浏览这份文档，看看它做了什么，从第一行开始，简单地设置了一个 HTML 文档并显示了一个标题。接下来的一行创建了一个带有 ID `info`
    的 `<div>`，其中包含文本 `This sentence will be replaced`。稍后，调用返回的文本将被插入到这里。
- en: After this, a new `XMLHttpRequest` object is created called `XHR`. Using this,
    the resource to load is opened by calling `XHR.open`. In this case, to avoid cross-origin
    Ajax issues in modern  browsers, the localhost IP address of `http://127.0.0.1`
    is chosen, followed by the chapter folder `18` and then the PHP program `urlpost.php`,
    which we’ll get to shortly.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建一个名为 `XHR` 的新 `XMLHttpRequest` 对象。使用它，通过调用 `XHR.open` 打开要加载的资源。在本例中，为了避免现代浏览器中的跨域
    Ajax 问题，选择了 `http://127.0.0.1` 的本地主机 IP 地址，然后是章节文件夹 `18`，接着是 PHP 程序 `urlpost.php`，我们马上就会介绍到。
- en: Note
  id: totrans-21
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: If you set up a development server using AMPPS (or a similar WAMP, LAMP, or
    MAMP) in [Chapter 2](ch02.xhtml#setting_up_a_development_server), downloaded the
    example files from[GitHub](https://github.com/RobinNixon/lpmj6) and saved them
    in the document root of the web server (as described in that chapter), the Chapter
    18 folder will be in the right place for this code to work correctly. If any part
    of your setup is different, or you run this code on a development server using
    a domain of your choice, you will have to change those values in this code accordingly.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用 AMPPS（或类似的 WAMP、LAMP 或 MAMP）设置开发服务器在[第 2 章](ch02.xhtml#setting_up_a_development_server)中下载示例文件从[GitHub](https://github.com/RobinNixon/lpmj6)并将它们保存在
    web 服务器的文档根目录中（如该章节中所述），则第 18 章文件夹将在正确的位置使此代码能够正常工作。如果您的设置有任何不同部分，或者在使用您选择的域名的开发服务器上运行此代码，则必须相应地更改此代码中的这些值。
- en: After specifying the resource to load, `XHR.setRequestHeader` is called, passing
    the required headers to be sent to the resource server, and the value to be posted
    is sent in a call to `XHR.send`. In this case it’s the main page at *news.com*.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 指定要加载的资源后，调用 `XHR.setRequestHeader`，传递要发送到资源服务器的必需头部，并在调用 `XHR.send` 中发送要发布的值。在这种情况下，是主页面在
    *news.com*。
- en: The readyState property
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`readyState` 属性'
- en: Now we get to the nitty-gritty of an asynchronous call, which all hangs on the
    `readyState` property. This allows the browser to keep accepting user input and
    changing the screen, while our program sets the `onreadystatechange` property
    to call a function of our choice each time `readyState` changes. In this case,
    a nameless (or anonymous) inline function has been used, as opposed to a separate,
    named function. This type of function is known as a *callback* function, as it
    is called back each time `readyState` changes.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们进入异步调用的核心，所有这些都依赖于 `readyState` 属性。这使得浏览器可以继续接受用户输入和更改屏幕，而我们的程序设置 `onreadystatechange`
    属性，每次 `readyState` 改变时调用我们选择的函数。在本例中，使用了一个无名（或匿名）内联函数，而不是一个单独命名的函数。这种类型的函数被称为*回调*函数，因为每次
    `readyState` 改变时都会调用它。
- en: 'The syntax to set up the callback function using an inline, anonymous function
    is as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 使用内联匿名函数设置回调函数的语法如下：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If you wish to use a separate, named function, the syntax is slightly different:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望使用单独命名的函数，语法略有不同：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As it happens, `readyState` can have five values, but only one concerns us,
    the value `4`, which represents a completed call. Therefore, each time the new
    function gets called, it returns without doing anything until `readyState` has
    a value of `4`. When our function detects that value, it next inspects the `status`
    of the call to ensure it has a value of `200`, which means that the call succeeded.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，`readyState` 可以有五个值，但我们只关心一个，即值为 `4`，表示调用已完成。因此，每次调用新函数时，它会在 `readyState`
    的值为 `4` 之前不做任何操作。当我们的函数检测到该值时，接下来会检查调用的 `status`，确保其值为 `200`，这表示调用成功。
- en: Note
  id: totrans-31
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: You will notice that all of these object properties are referenced using `this.readyState`,
    `this.status`, and so on, rather than the object’s current name, `XHR`, as in
    `XHR.readyState` or `XHR.status`. This is so that you can easily copy and paste
    the code, and it will work with any object name, because the `this` keyword always
    refers to the current object.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到，所有这些对象属性都是使用 `this.readyState`、`this.status` 等引用的，而不是对象的当前名称 `XHR`，如 `XHR.readyState`
    或 `XHR.status`。这是为了您可以轻松复制粘贴代码，并且它能在任何对象名称上工作，因为 `this` 关键字始终引用当前对象。
- en: 'So, having ascertained that the `readyState` is `4` and the `status` is `200`,
    we take the value in `responseText` and place it into the inner HTML of the `<div>` that
    we assigned the `id` of `info` to:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，确认 `readyState` 为 `4` 和 `status` 为 `200` 后，我们将 `responseText` 中的值放入 `<div>`
    的内部 HTML 中，该 `<div>` 的 `id` 为 `info`：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In this line, the element `info` is referenced via the `getElementById` method,
    and then its `innerHTML` property is assigned the value that was returned by the
    call. The effect is that this element of the web page changes, while everything
    else remains the same.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一行中，通过`getElementById`方法引用了`info`元素，然后将其`innerHTML`属性赋值为调用返回的值。效果是网页的这个元素发生了变化，而其他一切保持不变。
- en: The server half of the asynchronous process
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 异步过程的服务器端
- en: Now we get to the PHP half of the equation, which you can see in [Example 18-2](#urlpostdotphp).
    Type this code and save it as *urlpost.php*.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来看看等式的PHP部分，你可以在[例子18-2](#urlpostdotphp)中看到它。输入这段代码并将其保存为*urlpost.php*。
- en: Example 18-2\. urlpost.php
  id: totrans-38
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 例子18-2\. urlpost.php
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As you can see, this is short and sweet and also makes use of the ever-important
    `SanitizeString` function, as should be done with all posted data. In this instance,
    unsanitized data could result in the user inserting JavaScript and gaining an
    advantage over your code.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，这很简短且简洁，并且还使用了非常重要的`SanitizeString`函数，应该对所有发布的数据进行这样的操作。在这种情况下，未经过清理的数据可能会导致用户插入JavaScript并对你的代码获得优势。
- en: This program uses the `file_get_contents` PHP function to load in the web page
    at the URL supplied to it in the variable `$_POST['url']`. The `file_get_contents`
    function is versatile in that it loads in the entire contents of a file or web
    page from either a local or a remote server; it even takes into account moved
    pages and other redirects.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这个程序使用`file_get_contents` PHP函数加载了通过变量`$_POST['url']`提供的URL的网页内容。`file_get_contents`函数非常灵活，可以从本地或远程服务器加载文件或网页的整个内容；它甚至考虑了移动页面和其他重定向。
- en: Once you have typed the program, you are ready to call up *urlpost.html* in
    your web browser, and after a few seconds you should see the contents of the *news.com*
    front page loaded into the `<div>` that we created for that purpose.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当你输入完程序后，可以在浏览器中调用*urlpost.html*，几秒钟后，你应该会看到*news.com*首页的内容加载到我们为此目的创建的`<div>`中。
- en: Note
  id: totrans-43
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Cross-origin security makes using Ajax a little harder than it used to be because
    you must be precise and clear about loading files. In the case of this example
    on a development server on localhost, you will need to refer to the file using
    its IP address. So, for example, if you saved the example files in the document
    root of an AMPPS server as set out in [Chapter 2](ch02.xhtml#setting_up_a_development_server),
    then the files will all be in the subfolder called *18*.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 跨域安全性使得使用Ajax比以前更加困难，因为你必须对加载文件的方式非常准确和清晰。例如，在本地开发服务器localhost上的这个例子中，你需要使用其IP地址来引用文件。因此，例如，如果你将示例文件保存在AMPPS服务器的文档根目录中，如[第2章](ch02.xhtml#setting_up_a_development_server)中所述，则所有文件将位于名为*18*的子文件夹中。
- en: 'To test the program, enter the following into your browser:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试程序，请在浏览器中输入以下内容：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: It won’t be as fast as directly loading the web page, because it is transferred
    twice—once to the server and again from the server to your browser—but the result
    should look like [Figure 18-2](#the-newscom-front-page).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 它不会像直接加载网页那样快，因为它转移两次——一次到服务器，再从服务器到你的浏览器——但结果应该看起来像[图18-2](#the-newscom-front-page)。
- en: '![](Images/pmj6_1802.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/pmj6_1802.png)'
- en: Figure 18-2\. The news.com front page
  id: totrans-49
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图18-2\. news.com的首页
- en: Not only have we succeeded in making an asynchronous call and having a response
    returned to JavaScript, but we’ve also harnessed the power of PHP to merge in
    a totally unrelated web object. Incidentally, if we had tried to find a way to
    asynchronously fetch this web page directly (without recourse to the PHP server-side
    module), we wouldn’t have succeeded, because there are other security blocks preventing
    cross-domain asynchronous communication. So, this example also illustrates a handy
    solution to a practical problem.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不仅成功地进行了异步调用，并在JavaScript中返回了响应，而且还利用了PHP的能力来合并一个完全不相关的网络对象。顺便说一句，如果我们试图找到一种不借助PHP服务器端模块直接异步获取这个网页的方法，我们是不会成功的，因为有其他安全阻止跨域异步通信。因此，这个例子还展示了一个实际问题的方便解决方案。
- en: Using GET Instead of POST
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用GET而不是POST
- en: 'As when you submit any data from a form, you have the option of submitting
    your data in the form of GET requests, and you will save a few lines of code if
    you do so. However, there is a downside: some browsers may cache GET requests,
    whereas POST requests will never be cached. You don’t want to cache a request,
    because the browser will just redisplay what it got the last time instead of going
    to the server for fresh input. The solution to this is to use a workaround that
    adds a random parameter to each request, ensuring that each URL requested is unique.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 就像当你从表单提交任何数据时，你可以选择以GET请求的形式提交你的数据，如果这样做，你将节省几行代码。然而，有一个缺点：一些浏览器可能会缓存GET请求，而POST请求永远不会被缓存。你不希望缓存请求，因为浏览器会直接重新显示上次获取的内容，而不是从服务器获取新的输入。解决此问题的方法是使用一个方法来添加一个随机参数到每个请求中，确保每个请求的URL都是唯一的。
- en: '[Example 18-3](#urlgetdothtml) shows how you would achieve the same result
    as with [Example 18-1](#urlpostdothtml) but using a GET request instead of a POST.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 18-3](#urlgetdothtml)展示了如何通过GET请求实现与[示例 18-1](#urlpostdothtml)相同的结果。'
- en: Example 18-3\. urlget.html
  id: totrans-54
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 18-3\. urlget.html
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The differences to note between the two documents are highlighted in bold and
    described as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意两个文档之间的差异已用粗体突出，并描述如下：
- en: It is not necessary to send headers for a GET request.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于GET请求，不需要发送头部信息。
- en: We call the `open` method using a GET request, supplying a URL with a string
    comprising a `?` symbol followed by the parameter/value pair `url=news.com`.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用GET请求调用`open`方法，提供一个字符串构成的URL，该字符串由`?`符号后跟参数/值对`url=news.com`组成。
- en: We provide a second parameter/value pair using an `&` symbol and then set the
    value of the parameter `nocache` to a random value between 0 and 1 million. This
    is done to ensure that each URL requested is different and therefore that no requests
    will be cached.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用`&`符号提供第二个参数/值对，然后将参数`nocache`的值设置为0到100万之间的随机值。这样做是为了确保每个请求的URL都是不同的，因此不会被缓存。
- en: The call to `send` now has no arguments because nothing is being passed via
    a `POST` request that would require it.
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调用`send`现在没有参数，因为没有通过`POST`请求传递任何内容需要它。
- en: To accompany this new document, the PHP program must be modified to respond
    to a GET request, as in [Example 18-4](#urlgetdotphp), *urlget.php*.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 为了配合这个新文档，PHP程序必须修改以响应GET请求，就像[示例 18-4](#urlgetdotphp)中的*urlget.php*一样。
- en: Example 18-4\. urlget.php
  id: totrans-62
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 18-4\. urlget.php
- en: '[PRE8]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The only difference between this and [Example 18-2](#urlpostdotphp) is that
    the references to `$_POST` have been replaced with `$_GET`. The end result of
    calling up *urlget.html* in your browser is identical to loading *urlpost.html*.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这与[示例 18-2](#urlpostdotphp)唯一的不同之处在于，将对`$_POST`的引用替换为`$_GET`。在浏览器中加载*urlget.html*的最终结果与加载*urlpost.html*完全相同。
- en: 'To test this revised version of the program, enter the following into your
    browser and you should see the same result as before, just loaded in via a GET
    rather than a POST request:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试程序的这个修订版本，请在浏览器中输入以下内容，你应该看到与之前完全相同的结果，只是通过GET而不是POST请求加载：
- en: '[PRE9]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Sending XML Requests
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发送XML请求
- en: Although the objects we’ve been creating are called `XMLHttpRequest` objects,
    so far we have made absolutely no use of XML. As you have seen, we have been able
    to asynchronously request an entire HTML document, but we could equally have asked
    for a text page, a string or number, or even spreadsheet data.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们创建的对象称为`XMLHttpRequest`对象，但我们迄今为止并未使用XML。正如你所见，我们已经能够异步请求整个HTML文档，但我们同样可以请求文本页面、字符串或数字，甚至是电子表格数据。
- en: So, let’s modify the previous example document and PHP program to fetch some
    XML data. To do this, first take a look at the PHP program, *xmlget.php*, shown
    in [Example 18-5](#xmlgetdotphp).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们修改前面的示例文档和PHP程序，以获取一些XML数据。为此，请先查看PHP程序*xmlget.php*，如[示例 18-5](#xmlgetdotphp)所示。
- en: Example 18-5\. xmlget.php
  id: totrans-70
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 18-5\. xmlget.php
- en: '[PRE10]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This program has been very slightly modified (shown in bold highlighting) to
    output the correct XML header before returning a fetched document. No checking
    is done here, as it is assumed that the calling code will request an actual XML
    document.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这个程序已经略微修改（以粗体突出显示），在返回获取的文档之前输出正确的XML头。这里没有进行任何检查，因为假定调用代码将请求一个实际的XML文档。
- en: Now on to the HTML document, *xmlget.html*, shown in [Example 18-6](#xmlgetdothtml).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在转到HTML文档*xmlget.html*，如[示例 18-6](#xmlgetdothtml)所示。
- en: Example 18-6\. xmlget.html
  id: totrans-74
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 18-6\. xmlget.html
- en: '[PRE11]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Again, the differences have been highlighted in bold. As you can see, this code
    is substantially similar to the previous versions, except that the URL now being
    requested, *rss.news.yahoo.com/rss/topstories*, contains an XML document, the
    *Yahoo! News Top Stories* feed.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，差异已经用粗体标出。正如你所见，这段代码与以前的版本基本相似，唯一的不同是现在请求的 URL，*rss.news.yahoo.com/rss/topstories*，包含一个
    XML 文档，*Yahoo! News Top Stories* 订阅。
- en: The other big change is the use of the `responseXML` property, which replaces
    the `responseText` property. Whenever a server returns XML data, `responseXML`
    will contain the XML returned.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个重要变化是使用 `responseXML` 属性替代了 `responseText` 属性。每当服务器返回 XML 数据时，`responseXML`
    将包含返回的 XML。
- en: 'However, `responseXML` doesn’t simply contain a string of XML text: it is actually
    a complete XML document object that we can examine and parse using DOM tree methods
    and properties. This means it is accessible, for example, by the JavaScript `getElementsByTagName`
    method.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，`responseXML`并非简单地包含一个 XML 文本字符串：实际上它是一个完整的 XML 文档对象，我们可以使用 DOM 树的方法和属性来检查和解析它。这意味着它是可访问的，例如，可以通过
    JavaScript 的 `getElementsByTagName` 方法访问它。
- en: About XML
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关于 XML
- en: 'An XML document will generally take the form of the RSS feed shown in [Example 18-7](#xmlexample187).
    However, the beauty of XML is that we can store this type of structure internally
    in a DOM tree (see [Figure 18-3](#dom_tree_of_example_17-8)) to make it quickly
    searchable:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 XML 文档通常采用如 [Example 18-7](#xmlexample187) 中所示的 RSS 订阅的形式。然而，XML 的美妙之处在于我们可以将这种类型的结构存储在
    DOM 树中（参见 [Figure 18-3](#dom_tree_of_example_17-8)）中，以便快速搜索：
- en: '[PRE12]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '![The DOM tree of Example 17-8](Images/pmj6_1803.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![Example 17-8 的 DOM 树](Images/pmj6_1803.png)'
- en: Figure 18-3\. The DOM tree of [Example 18-7](#xmlexample187)
  id: totrans-83
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 18-3\. [Example 18-7](#xmlexample187) 的 DOM 树
- en: 'Then, using the `getElementsByTagName` method, we can quickly extract the values
    associated with various tags without a lot of string searching. This is exactly
    what we do in [Example 18-6](#xmlgetdothtml), where the following command is issued:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，使用 `getElementsByTagName` 方法，我们可以快速提取与各种标签相关联的值，而无需进行大量的字符串搜索。这正是我们在 [Example 18-6](#xmlgetdothtml)
    中所做的，其中发出了以下命令：
- en: '[PRE13]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This single command has the effect of placing all the values of the `<title>`
    elements into the array `titles`. From there, it is a simple matter to extract
    them with the following expression (where `j` has been assigned to an integer
    that represents the title to access):'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这个单一命令的效果是将所有 `<title>` 元素的值放入数组 `titles` 中。然后，可以通过以下表达式轻松提取它们（其中 `j` 已经被赋值为表示要访问的标题的整数）：
- en: '[PRE14]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: All the titles are then appended to the string variable `out`, and once they’ve
    all been processed, the result is inserted into the empty `<div>` at the document
    start.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 所有标题然后都附加到字符串变量 `out` 中，一旦它们全部被处理，结果将被插入到文档开头的空 `<div>` 中。
- en: To recap, each entity such as `title` is a node, and so, for example, the title
    text is considered a node inside the title. But even after you get the child node,
    you have to ask for it as text, which is the purpose of `.nodeValue`. Also, as
    with all form data, remember that you can use either the POST or the GET method
    when requesting XML data; your choice will make little difference to the result.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，每个实体如 `title` 都是一个节点，因此例如标题文本被视为标题内的一个节点。但即使获取了子节点，你还必须要求它作为文本，这就是 `.nodeValue`
    的目的。此外，与所有表单数据一样，请记住，在请求 XML 数据时可以使用 POST 或 GET 方法；选择不会对结果造成太大差异。
- en: 'To test this XML program, enter the following into your browser, and you should
    see something like [Figure 18-4](#asynchronously-fetching-a-yahoo):'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试这个 XML 程序，输入以下内容到你的浏览器中，你应该看到类似 [Figure 18-4](#asynchronously-fetching-a-yahoo)
    的东西：
- en: '[PRE15]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '![](Images/pmj6_1804.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/pmj6_1804.png)'
- en: Figure 18-4\. Asynchronously fetching a Yahoo! XML news feed
  id: totrans-93
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 18-4\. 异步获取 Yahoo! XML 新闻订阅
- en: Why use XML?
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为什么使用 XML？
- en: You may ask why you would use XML other than for fetching XML documents such
    as RSS feeds. Well, the simple answer is that you don’t have to, but if you wish
    to pass structured data back to your applications, it could be a real pain to
    send a simple, unorganized jumble of text that would need complicated processing
    in JavaScript.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会问为什么要使用 XML，除了获取如 RSS 订阅之类的 XML 文档。嗯，简单的答案是你不必使用，但如果你希望将结构化数据传递回应用程序，传递一个简单的、无组织的文本混乱可能需要在
    JavaScript 中进行复杂的处理。
- en: Instead, you can create an XML document and pass that back to the calling function,
    which will automatically place it into a DOM tree, as easily accessible as the
    HTML DOM object with which you are now familiar.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，您可以创建一个 XML 文档，并将其传递回调用函数，该函数将自动将其放入 DOM 树中，就像您现在熟悉的 HTML DOM 对象一样轻松访问。
- en: These days programmers are more likely to use [JavaScript Object Notation (JSON)
    as their preferred data-interchange format](http://json.org), as it’s a simple
    subset of JavaScript.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，程序员更倾向于使用 [JavaScript 对象表示法（JSON）作为其首选的数据交换格式](http://json.org)，因为它是 JavaScript
    的一个简单子集。
- en: Using Frameworks for Asynchronous Communication
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用框架进行异步通信
- en: Now that you know how to code your own asynchronous routines, you might like
    to investigate some of the free frameworks that are available to make it even
    easier, and which offer many more advanced features. In particular, I would suggest
    you check out either [jQuery](http://jquery.com), which is very popular, or [React](http://reactjs.org),
    probably the fastest-growing framework. In the following chapter, though, we’ll
    look at how to apply styling to your websites with CSS.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您知道如何编写自己的异步程序，您可能想调查一些免费框架，这些框架可以使其更加轻松，并提供许多更高级的功能。特别是，我建议您查看非常流行的 [jQuery](http://jquery.com)
    或者可能是增长最快的框架 [React](http://reactjs.org)。不过，在接下来的章节中，我们将讨论如何使用 CSS 为您的网站应用样式。
- en: Questions
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Which object must be created in order to conduct asynchronous communication
    between a web server and JavaScript client?
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Web 服务器和 JavaScript 客户端之间进行异步通信时必须创建哪个对象？
- en: How can you tell when an asynchronous call has completed?
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何判断异步调用何时完成？
- en: How do you know whether an asynchronous call completed successfully?
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何知道异步调用是否成功完成？
- en: What `XMLHttpRequest` object property returns an asynchronous call’s text response?
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个 `XMLHttpRequest` 对象属性返回异步调用的文本响应？
- en: What `XMLHttpRequest` object property returns an asynchronous call’s XML response?
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个 `XMLHttpRequest` 对象属性返回异步调用的 XML 响应？
- en: How can you specify a callback function to handle asynchronous responses?
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何指定回调函数以处理异步响应？
- en: What `XMLHttpRequest` method is used to initiate an asynchronous request?
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个 `XMLHttpRequest` 方法用于启动异步请求？
- en: What are the main differences between an asynchronous GET and POST request?
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 异步 GET 和 POST 请求的主要区别是什么？
- en: See [“Chapter 18 Answers”](app01_split_017.xhtml#chapter_18_answers) in the
    [Appendix A](app01_split_000.xhtml#solutions_to_the_chapter_questions) for the
    answers to these questions.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅 [“第18章答案”](app01_split_017.xhtml#chapter_18_answers)，以获取这些问题的答案。
