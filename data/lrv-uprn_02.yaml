- en: Chapter 2\. Setting Up a Laravel Development Environment
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章 设置Laravel开发环境
- en: Part of PHP’s success has been because it’s hard to find a web server that *can’t*
    serve PHP. However, modern PHP tools have stricter requirements than those of
    the past. The best way to develop for Laravel is to ensure a consistent local
    and remote server environment for your code, and, thankfully, the Laravel ecosystem
    has a few tools for this.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: PHP之所以成功的一部分原因是几乎找不到不能运行PHP的网络服务器。然而，现代PHP工具对于过去的要求更为严格。为了更好地为Laravel开发，最好保持代码在本地和远程服务器环境的一致性，幸运的是，Laravel生态系统为此提供了一些工具。
- en: System Requirements
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 系统要求
- en: Everything we’ll cover in this chapter is possible with Windows machines, but
    you’ll need dozens of pages of custom instructions and caveats. I’ll leave those
    instructions and caveats to actual Windows users, so the examples here and in
    the rest of the book will focus on Unix/Linux/macOS developers.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中涵盖的所有内容在Windows机器上都是可能的，但你需要几十页的定制说明和注意事项。我将这些说明和注意事项留给真正的Windows用户，因此本书的例子将专注于Unix/Linux/macOS开发者。
- en: 'Whether you choose to serve your website by installing PHP and other tools
    on your local machine, serve your development environment from a virtual machine
    via Vagrant or Docker, or rely on a tool like MAMP/WAMP/XAMPP, your development
    environment will need to have all of the following installed in order to serve
    Laravel sites:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你选择通过在本地机器上安装PHP和其他工具来为你的网站提供服务，还是通过Vagrant或Docker在虚拟机中提供开发环境，或者依赖像MAMP/WAMP/XAMPP这样的工具，你的开发环境都需要安装以下所有内容才能为Laravel站点提供服务：
- en: PHP >= 8.1
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PHP >= 8.1
- en: OpenSSL PHP extension
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenSSL PHP 扩展
- en: PDO PHP extension
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PDO PHP 扩展
- en: Mbstring PHP extension
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mbstring PHP 扩展
- en: Tokenizer PHP extension
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Tokenizer PHP 扩展
- en: XML PHP extension
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: XML PHP 扩展
- en: Ctype PHP extension
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ctype PHP 扩展
- en: JSON PHP extension
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JSON PHP 扩展
- en: BCMath PHP extension
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: BCMath PHP 扩展
- en: Composer
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Composer
- en: Whatever machine you’re developing on will need to have [Composer](https://getcomposer.org)
    installed globally. *Composer* is a tool that’s at the foundation of most modern
    PHP development. It’s a dependency manager for PHP, much like NPM (Node Package
    Manager) for Node or RubyGems for Ruby. But like NPM, Composer is also the foundation
    of much of our testing, local script loading, installation scripts, and much more.
    You’ll need Composer to install Laravel, update Laravel, and bring in external
    dependencies.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你用什么机器开发，都需要全局安装[Composer](https://getcomposer.org)。*Composer*是现代大多数PHP开发的基础工具。它是PHP的依赖管理器，类似于Node的NPM（Node
    Package Manager）或Ruby的RubyGems。但与NPM一样，Composer也是我们测试、本地脚本加载、安装脚本等许多基础工具的基础。安装Laravel、更新Laravel和引入外部依赖都需要Composer。
- en: Local Development Environments
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本地开发环境
- en: For many projects, hosting your development environment using a simpler toolset
    will be enough. If you already have MAMP or WAMP or XAMPP installed on your system,
    that will likely be fine to run Laravel.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 对于许多项目，使用更简单的工具集来托管你的开发环境可能已经足够了。如果你的系统上已经安装了MAMP或WAMP或XAMPP，那很可能能够运行Laravel。
- en: You can also just run Laravel with PHP’s built-in web server. Run `php -S localhost:8000
    -t public` from your Laravel site’s root folder, and PHP’s built-in web server
    will serve your site at *http://localhost:8000/*.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以通过PHP的内置Web服务器来运行Laravel。在你的Laravel站点根目录下运行 `php -S localhost:8000 -t public`，PHP的内置Web服务器将在*http://localhost:8000/*上为你提供站点服务。
- en: However, if you want a little more power in your development environment (different
    local domains for each project, management of dependencies like MySQL, etc.),
    you’ll want to reach for a more powerful tool than just PHP’s built-in server.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果你希望在你的开发环境中拥有更多的功能（每个项目的不同本地域名、像MySQL这样的依赖管理等），你将需要一个比PHP内置服务器更强大的工具。
- en: 'Laravel offers five tools for local development: `Artisan serve`, Sail, Valet,
    Herd, and Homestead. We’ll cover each briefly. If you’re unsure of which to use,
    I’m personally a fan of Valet for Mac users and Sail for everyone else.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel 提供了五种本地开发工具：`Artisan serve`、Sail、Valet、Herd 和 Homestead。我们会简要介绍每一种。如果你不确定该使用哪一种，我个人推荐Mac用户使用Valet，其他人使用Sail。
- en: Artisan Serve
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Artisan Serve
- en: If you run `php artisan serve` after setting up your Laravel application, it’ll
    serve it at [*http://localhost:8000*](http://localhost:8000), just like we set
    it up earlier using PHP’s built-in web server. You’re not getting anything else
    for free here, so its only meaningful benefit is that it’s easier to remember.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在设置 Laravel 应用程序后运行 `php artisan serve`，它将在 [*http://localhost:8000*](http://localhost:8000)
    上提供服务，就像我们之前使用 PHP 的内置 Web 服务器设置的那样。在这里你并没有得到其他免费的东西，因此它唯一有意义的好处是更容易记住。
- en: Laravel Sail
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Laravel Sail
- en: Sail is the simplest way to get started with local Laravel development in a
    way that’s the same regardless of your operating system. It comes with a PHP web
    server, databases, and a host of other niceties that make it very easy to run
    a single Laravel installation that’s consistent for every developer on your project
    regardless of the project’s dependencies or your developers’ work environments.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Sail 是开始本地 Laravel 开发的最简单方法，无论你使用的是什么操作系统，它都是相同的。它带有一个 PHP Web 服务器、数据库以及许多其他方便的功能，使得运行单个
    Laravel 安装变得非常容易，这对于项目中的每个开发人员都是一致的，不论项目的依赖项或开发人员的工作环境如何。
- en: Why don’t I use Sail? It uses Docker to accomplish the above, and Docker on
    macOS is just slow enough that I prefer Valet. But if you’re new to Laravel, especially
    if you don’t use a Mac, Sail is intentionally created as the simplest way to get
    started building your Laravel apps.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么我不使用 Sail？它使用 Docker 来完成上述任务，而 macOS 上的 Docker 速度刚好足够慢，我更喜欢 Valet。但如果你是 Laravel
    的新手，特别是如果你不使用 Mac，Sail 就是最简单的开始构建 Laravel 应用程序的方式。
- en: Laravel Valet
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Laravel Valet
- en: If you’re a macOS user (there are also unofficial forks for Windows and Linux),
    Laravel Valet makes it easy to serve every one of your local Laravel apps (and
    most other static and PHP-based apps) on different local domains.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是 macOS 用户（也有非官方的 Windows 和 Linux 版本），Laravel Valet 可以轻松地为你的每一个本地 Laravel
    应用程序（以及大多数其他静态和基于 PHP 的应用程序）提供服务在不同的本地域名上。
- en: You’ll need to install a few tools using Homebrew, which the documentation will
    walk you through, but there are very few steps from initial installation to serving
    your apps.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要使用 Homebrew 安装一些工具，文档将引导你完成这些步骤，但从初始安装到提供服务你的应用程序，步骤非常少。
- en: Install Valet—see the [Valet docs](https://laravel.com/docs/valet) for the latest
    installation instructions—and point it at one or more directories where your sites
    will live. I ran `valet park` from my *~/Sites* directory, which is where I put
    all of my under-development apps. Now, you can just add *.test* to the end of
    the directory name and visit it in your browser.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 Valet——请查阅 [Valet 文档](https://laravel.com/docs/valet) 获取最新的安装说明——并将其指向一个或多个存放站点的目录。我从我的
    *~/Sites* 目录运行了 `valet park`，这是我放置所有正在开发中的应用程序的地方。现在，你只需在目录名后加上 *.test*，就可以在浏览器中访问它了。
- en: Valet makes it easy to serve Laravel apps; we can use `valet park` to serve
    all subfolders in a given folder as *{foldername}.test*, `valet link` to serve
    just a single folder, `valet open` to open a browser to show the Valet-served
    domain for a folder, `valet secure` to serve the Valet site with HTTPS, and `valet
    share` to open an ngrok or Expose tunnel so you can share your site with others.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Valet 可以轻松为 Laravel 应用提供服务；我们可以使用 `valet park` 将给定文件夹中的所有子文件夹作为 *{foldername}.test*
    提供服务，使用 `valet link` 只服务一个单独的文件夹，使用 `valet open` 打开浏览器显示 Valet 服务的域名，使用 `valet
    secure` 以 HTTPS 方式提供 Valet 网站，使用 `valet share` 打开一个 ngrok 或 Expose 隧道，这样你可以与他人共享你的站点。
- en: Laravel Herd
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Laravel Herd
- en: Herd is a native macOS app that bundles Valet and all its dependencies as a
    single installer. While Herd is not quite as customizable as Valet CLI is, it
    removes the need to work with Homebrew, Docker, or any other dependency managers,
    and it allows you to interact with Valet’s core features through a nice graphical
    interface.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Herd 是一个原生的 macOS 应用程序，它将 Valet 及其所有依赖项捆绑在一个单独的安装程序中。虽然 Herd 不像 Valet CLI 那样可定制，但它省去了使用
    Homebrew、Docker 或任何其他依赖管理器的必要，并且允许你通过一个漂亮的图形界面与 Valet 的核心功能进行交互。
- en: Laravel Homestead
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Laravel Homestead
- en: Homestead is another tool you might want to use to set up your local development
    environment. It’s a configuration tool that sits on top of Vagrant (which is a
    tool for managing virtual machines) and provides a preconfigured virtual machine
    image that is perfectly set up for Laravel development *and* mirrors the most
    common production environment that many Laravel sites run on.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Homestead 是另一个你可能想用来设置本地开发环境的工具。它是一个配置工具，基于 Vagrant（一个管理虚拟机的工具），提供了一个预配置的虚拟机镜像，完美地设置了
    Laravel 开发环境，并且反映了许多 Laravel 网站运行的最常见生产环境。
- en: The [Homestead docs](https://laravel.com/docs/homestead) are robust and kept
    constantly up to date, so I’ll just refer you to them if you want to learn how
    it works and how to get it set up.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '[Homestead 文档](https://laravel.com/docs/homestead)非常全面，并且始终保持更新，所以如果你想了解它的工作原理和设置方法，我建议你直接查阅这些文档。'
- en: Creating a New Laravel Project
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个新的 Laravel 项目
- en: There are two ways to create a new Laravel project, both of which are run from
    the command line. The first option is to globally install the Laravel installer
    tool (using Composer); the second is to use Composer’s `create-project` feature.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 创建新的 Laravel 项目有两种方式，都可以通过命令行运行。第一种是全局安装 Laravel 安装工具（使用 Composer）；第二种是使用 Composer
    的`create-project`功能。
- en: You can learn about both options in greater detail on the [Installation documentation
    page](https://laravel.com/docs/installation), but I’d recommend the Laravel installer
    tool.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[安装文档页面](https://laravel.com/docs/installation)上详细了解这两种选项，但我建议使用 Laravel
    安装工具。
- en: Installing Laravel with the Laravel Installer Tool
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Laravel 安装工具安装 Laravel
- en: 'If you have Composer installed globally, installing the Laravel installer tool
    is as simple as running the following command:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经全局安装了 Composer，安装 Laravel 安装工具就像运行以下命令一样简单：
- en: '[PRE0]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Once you have the Laravel installer tool installed, spinning up a new Laravel
    project is simple. Just run this command from your command line:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装了 Laravel 安装工具，启动一个新的 Laravel 项目就很简单。只需从命令行运行此命令：
- en: '[PRE1]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This will create a new subdirectory of your current directory named *{projectName}*
    and install a bare Laravel project in it.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在当前目录下创建一个名为*{projectName}*的新子目录，并在其中安装一个裸的 Laravel 项目。
- en: Installing Laravel with Composer’s create-project Feature
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Composer 的 create-project 功能安装 Laravel
- en: 'Composer also offers a feature called `create-project` for creating new projects
    with a particular skeleton. To use this tool to create a new Laravel project,
    issue the following command:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Composer 还提供了一个称为`create-project`的功能，用于使用特定骨架创建新项目。要使用此工具创建新的 Laravel 项目，请发出以下命令：
- en: '[PRE2]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Just like the installer tool, this will create a subdirectory of your current
    directory named *{projectName}* that contains a skeleton Laravel install, ready
    for you to develop.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 就像安装工具一样，这将在当前目录下创建一个名为*{projectName}*的子目录，其中包含一个 Laravel 安装的骨架，准备好供您开发。
- en: Installing Laravel with Sail
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Sail 安装 Laravel
- en: 'If you plan to work with Laravel Sail, you can install a Laravel app and begin
    its Sail installation process at the same time. Ensure you have Docker installed
    on your computer, and then issue the following command, replacing `*example-app*`
    with the name of your app:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你计划使用 Laravel Sail 工作，可以同时安装 Laravel 应用程序并开始其 Sail 安装过程。确保你的计算机上已安装了 Docker，然后使用以下命令，将`*example-app*`替换为你的应用程序名称：
- en: '[PRE3]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This will install Laravel into the `*example-app*` folder underneath your current
    folder and then begin the Sail installation process.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把 Laravel 安装到当前文件夹下的`*example-app*`文件夹中，然后开始 Sail 安装过程。
- en: 'Once that installation process is complete, change to your new directory and
    spin up Sail:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 安装过程完成后，切换到新目录并启动 Sail：
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note
  id: totrans-55
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: The first time you run `sail up`, it’ll take quite a bit longer than other installation
    processes, as it needs to build up the initial Docker image.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次运行`sail up`时，它会比其他安装过程花费更长时间，因为它需要构建初始 Docker 镜像。
- en: Laravel’s Directory Structure
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Laravel 的目录结构
- en: 'When you open up a directory that contains a skeleton Laravel application,
    you’ll see the following files and directories:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 当你打开一个包含骨架 Laravel 应用程序的目录时，你会看到以下文件和目录：
- en: '[PRE5]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Let’s walk through them one by one to get familiar.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们一一详细介绍它们，以便熟悉。
- en: The Folders
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文件夹
- en: 'The root directory contains the following folders by default:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 根目录默认包含以下文件夹：
- en: app
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: app
- en: Where the bulk of your actual application will go. Models, controllers, commands,
    and your PHP domain code all go in here.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 实际应用程序的大部分内容将存放在这里。模型、控制器、命令和 PHP 领域代码都在这里。
- en: bootstrap
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: bootstrap
- en: Contains the files that the Laravel framework uses to boot every time it runs.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 包含 Laravel 框架每次运行时使用的文件。
- en: config
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: config
- en: Where all the configuration files live.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 所有配置文件所在位置。
- en: database
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: database
- en: Where database migrations, seeds, and factories live.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库迁移、种子和工厂所在位置。
- en: public
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: The directory the server points to when it’s serving the website. This contains
    *index.php*, which is the front controller that kicks off the bootstrapping process
    and routes all requests appropriately. It’s also where any public-facing files
    like images, stylesheets, scripts, or downloads go.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 当服务器为网站提供服务时指向的目录。这包含 *index.php*，它是启动引导过程并适当路由所有请求的前端控制器。也是任何公开文件（如图像、样式表、脚本或下载文件）的位置。
- en: resources
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 资源
- en: Where files that are needed for other scripts live. Views, and (optionally)
    source CSS and source JavaScript files live here.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 其他脚本所需文件的位置。视图，以及（可选）源CSS和源JavaScript文件存放在这里。
- en: routes
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 路由
- en: Where all of the route definitions live, both for HTTP routes and “console routes,”
    or Artisan commands.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 所有路由定义的位置，包括HTTP路由和“控制台路由”或Artisan命令。
- en: storage
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: storage
- en: Where caches, logs, and compiled system files live.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存、日志和编译的系统文件存放位置。
- en: tests
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 测试
- en: Where unit and integration tests live.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试和集成测试的位置。
- en: vendor
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: vendor
- en: Where Composer installs its dependencies. It’s Git-ignored (marked to be excluded
    from your version control system) because Composer is expected to run as a part
    of your deploy me process on any remote servers.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Composer安装其依赖项的位置。它被Git忽略（标记为从版本控制系统中排除），因为Composer预期在任何远程服务器上作为部署过程的一部分运行。
- en: The Loose Files
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 松散的文件
- en: 'The root directory also contains the following files:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 根目录还包含以下文件：
- en: .editorconfig
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: .editorconfig
- en: Gives your IDE/text editor instructions about Laravel’s coding standards (e.g.,
    the size of indents, the charset, and whether to trim trailing whitespace).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 给你的IDE/文本编辑器关于Laravel编码标准的指令（例如缩进大小、字符集以及是否修剪尾随空白）。
- en: .env and .env.example
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: .env 和 .env.example
- en: Dictate the environment variables (variables that are expected to be different
    in each environment and are therefore not committed to version control). *.env.example*
    is a template that each environment should duplicate to create its own *.env*
    file, which is Git-ignored.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 指定环境变量（在每个环境中预期不同的变量，因此不提交到版本控制）。*.env.example* 是一个模板，每个环境都应复制它以创建自己的*.env*文件，该文件被Git忽略。
- en: .gitignore and .gitattributes
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: .gitignore 和 .gitattributes
- en: Git configuration files.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Git配置文件。
- en: artisan
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: artisan
- en: Allows you to run Artisan commands (see [Chapter 8](ch08.html#artisan_and_tinker))
    from the command line.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 允许您从命令行运行Artisan命令（参见[第8章](ch08.html#artisan_and_tinker)）。
- en: composer.json and composer.lock
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: composer.json 和 composer.lock
- en: Configuration files for Composer; *composer.json* is user-editable and *composer.lock*
    is not. These files share some basic information about the project and also define
    its PHP dependencies.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Composer的配置文件；*composer.json* 可由用户编辑，*composer.lock* 则不可。这些文件共享一些关于项目的基本信息，并定义其PHP依赖项。
- en: package.json
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: package.json
- en: Like *composer.json*, but for frontend assets and dependencies of the build
    system; it instructs NPM about which JavaScript-based dependencies to pull in.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于 *composer.json*，但用于前端资产和构建系统的依赖项；它指示NPM拉取哪些基于JavaScript的依赖项。
- en: phpunit.xml
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: phpunit.xml
- en: A configuration file for PHPUnit, the tool Laravel uses for testing out of the
    box.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: PHPUnit的配置文件，Laravel默认使用该工具进行测试。
- en: readme.md
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: readme.md
- en: A Markdown file giving a basic introduction to Laravel. You won’t see this file
    if you use the Laravel installer.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 一份关于Laravel的基本介绍的Markdown文件。如果使用Laravel安装程序，您将看不到此文件。
- en: vite.config.js
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: vite.config.js
- en: The (optional) configuration file for Vite. This file instructs your build system
    about how to compile and process your frontend assets.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: （可选的）Vite的配置文件。此文件指示您的构建系统如何编译和处理前端资产。
- en: Configuration
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置
- en: The core settings of your Laravel application—​database connection settings,
    queue and mail settings, etc.—live in files in the *config* folder. Each of these
    files returns a PHP array, and each value in the array is accessible by a config
    key that is comprised of the filename and all descendant keys, separated by dots
    (`.`).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 您的Laravel应用程序的核心设置——数据库连接设置、队列和邮件设置等——存储在 *config* 文件夹中的文件中。这些文件中的每一个都返回一个PHP数组，并且数组中的每个值可以通过由文件名和所有后代键组成的配置键来访问，这些键由点（`.`）分隔。
- en: 'So, if you create a file at *config/services.php* that looks like this:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果您在 *config/services.php* 创建以下内容的文件：
- en: '[PRE6]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You can access that config variable using `config('services.sparkpost.secret')`.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 `config('services.sparkpost.secret')` 访问该配置变量。
- en: 'Any configuration variables that should be distinct for each environment (and
    therefore not committed to source control) will instead live in your *.env* files.
    Let’s say you want to use a different Bugsnag API key for each environment. You’d
    set the config file to pull it from *.env*:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 任何应该对每个环境都不同的配置变量（因此不应提交到源代码控制）将存储在你的 *.env* 文件中。假设你想为每个环境使用不同的 Bugsnag API
    密钥。你可以设置配置文件从 *.env* 中获取它：
- en: '[PRE7]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This `env()` helper function pulls a value from your *.env* file with that
    same key. So now, add that key to your *.env* (settings for this environment)
    and *.env.example* (template for all environments) files:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 `env()` 辅助函数从你的 *.env* 文件中获取相同键的值。所以现在，将该键添加到你的 *.env*（这个环境的设置）和 *.env.example*（所有环境的模板）文件中：
- en: '[PRE8]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Your *.env* file will already contain quite a few environment-specific variables
    needed by the framework, like which mail driver you’ll be using and what your
    basic database settings are.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 你的 *.env* 文件已经包含了框架需要的许多环境特定变量，比如你将使用的邮件驱动程序以及基本的数据库设置。
- en: Using env() Outside of Config Files
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在配置文件之外使用 env()
- en: Certain features in Laravel, including some caching and optimization features,
    aren’t available if you use `env()` calls anywhere outside of config files.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel 中的某些功能，包括一些缓存和优化功能，如果你在配置文件之外的任何地方使用 `env()` 调用，则这些功能将不可用。
- en: 'The best way to pull in environment variables is to set up config items for
    anything you want to be environment-specific. Have those config items read the
    environment variables, and then reference the config variables anywhere within
    your app:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 最佳方法是引入环境变量是设置为任何你想要的环境特定项目的配置项。让这些配置项读取环境变量，然后在你的应用程序的任何地方引用配置变量即可。
- en: '[PRE10]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The .env File
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .env 文件
- en: Let’s take a quick look at the default contents of the *.env* file. The exact
    keys will vary depending on which version of Laravel you’re using, but take a
    look at [Example 2-1](#default_env_vars) to see what they look like.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速查看一下 *.env* 文件的默认内容。确切的键名会根据你使用的 Laravel 版本而有所不同，但可以查看 [示例 2-1](#default_env_vars)
    来了解它们的样子。
- en: Example 2-1\. The default environment variables in Laravel
  id: totrans-120
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 2-1\. Laravel 中的默认环境变量
- en: '[PRE11]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'I won’t go into all of them, because quite a few are just groups of authentication
    information for various services (Pusher, Redis, DB, Mail). Here are two important
    environment variables you should know about, though:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我不会详细讨论所有这些，因为其中有相当多只是各种服务的认证信息组（Pusher、Redis、DB、Mail）。但是，以下是你应该知道的两个重要环境变量：
- en: '`APP_KEY`'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '`APP_KEY`'
- en: A randomly generated string that’s used to encrypt data. If this is ever empty,
    you may run into the error “No application encryption key has been specified.”
    In that case, just run `php artisan key:generate`, and Laravel will generate one
    for you.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 一个随机生成的字符串，用于加密数据。如果这个值为空，你可能会遇到“未指定应用加密密钥”的错误。在这种情况下，只需运行 `php artisan key:generate`，Laravel
    将为你生成一个密钥。
- en: '`APP_DEBUG`'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '`APP_DEBUG`'
- en: A Boolean determining whether the users of this instance of your application
    should see debug errors—great for local and staging environments, terrible for
    production.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 一个布尔值，确定你的应用实例的用户是否应该看到调试错误——适用于本地和暂存环境，但对生产环境不适用。
- en: The rest of the nonauthentication settings (`BROADCAST_DRIVER`, `QUEUE_CONNECTION`,
    etc.) are given default values that work with as little reliance on external services
    as possible, which is perfect for when you’re getting started.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 其余的非认证设置（`BROADCAST_DRIVER`、`QUEUE_CONNECTION` 等）都给定了默认值，尽可能少依赖外部服务，这对刚开始使用时非常合适。
- en: 'When you start your first Laravel app, the only change you’ll likely want to
    make for most projects is to the database configuration settings. I use Laravel
    Valet, so I change `DB_DATABASE` to the name of my project, `DB_USERNAME` to `root`,
    and `DB_PASSWORD` to an empty string:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 当你启动你的第一个 Laravel 应用时，大多数项目你可能唯一想要更改的是数据库配置设置。我使用 Laravel Valet，所以我将 `DB_DATABASE`
    更改为我的项目名称，将 `DB_USERNAME` 更改为 `root`，将 `DB_PASSWORD` 更改为空字符串：
- en: '[PRE12]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Then, I create a database with the same name as my project in my favorite MySQL
    client, and I’m ready to go.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我在我最喜欢的 MySQL 客户端中创建一个与我的项目同名的数据库，然后就可以开始了。
- en: Up and Running
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行与启动
- en: 'You’re now up and running with a bare Laravel install. Run `git init`, commit
    the bare files with `git add .` and `git commit`, and you’re ready to start coding.
    That’s it! And if you’re using Valet, you can run the following commands and instantly
    see your site live in your browser:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你已经使用裸的 Laravel 安装运行起来了。运行 `git init`，使用 `git add .` 和 `git commit` 提交裸文件，然后你就可以开始编码了。就是这样！如果你使用
    Valet，你可以运行以下命令，立即在浏览器中看到你的站点上线：
- en: '[PRE13]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Every time I start a new project, these are the steps I take:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 每次我启动一个新项目时，我都会执行以下步骤：
- en: '[PRE14]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: I keep all of my sites in a *~/Sites* folder, which I have set up as my primary
    Valet directory, so in this case I’d instantly have *myProject.test* accessible
    in my browser with no added work. I can edit *.env* and point it to a particular
    database, add that database in my MySQL app, and I’m ready to start coding.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我将所有的站点都放在*~/Sites*文件夹中，这是我设置为主要Valet目录的地方，所以在这种情况下，我可以立即在浏览器中访问*myProject.test*，而无需额外工作。我可以编辑*.env*并将其指向特定的数据库，在我的MySQL应用程序中添加该数据库，然后就可以开始编码了。
- en: Testing
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试
- en: In every chapter after this, the “Testing” section at the end of the chapter
    will show you how to write tests for the feature or features that were covered.
    Since this chapter doesn’t cover a testable feature, let’s talk tests quickly.
    (To learn more about writing and running tests in Laravel, head over to [Chapter 12](ch12.html#testing).)
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 此后的每一章，“测试”部分都会展示如何为涵盖的功能编写测试。由于本章不涉及可测试的功能，让我们快速讨论一下测试。 （要了解更多关于在Laravel中编写和运行测试的内容，请转到[第12章](ch12.html#testing)。）
- en: Out of the box, Laravel brings in PHPUnit as a dependency and is configured
    to run the tests in any file in the *tests* directory whose name ends with *Test.php*
    (for example, *tests/UserTest.php*).
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel默认带有PHPUnit作为依赖项，并配置为在*tests*目录中任何以*Test.php*结尾的文件中运行测试（例如*tests/UserTest.php*）。
- en: So, the simplest way to write tests is to create a file in the *tests* directory
    with a name that ends with *Test.php*. And the easiest way to run them is to run
    `./vendor/bin/phpunit` from the command line (in the project root).
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，编写测试的最简单方法是在名为*tests*的目录中创建一个以*Test.php*结尾的文件。而运行它们的最简单方法是从命令行（在项目根目录中）运行`./vendor/bin/phpunit`。
- en: If any tests require database access, be sure to run your tests from the machine
    where your database is hosted—​so if you’re hosting your database in Vagrant,
    make sure to `ssh` into your Vagrant box to run your tests from there. Again,
    you can learn about this and much more in [Chapter 12](ch12.html#testing).
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 如果任何测试需要访问数据库，请确保从托管数据库的机器上运行您的测试—如果您在Vagrant中托管数据库，请确保通过`ssh`连接到您的Vagrant盒子来运行测试。同样，您可以在[第12章](ch12.html#testing)中了解更多相关内容。
- en: Also, some of the testing sections will use testing syntax and features that
    you will not be familiar with yet if you’re reading the book for the first time.
    If code in any of the testing sections is confusing, just skip it and come back
    to it after you’ve had a chance to read the testing chapter.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，一些测试部分将使用测试语法和功能，如果您是第一次阅读本书，可能会对其中的代码感到困惑。如果测试部分的代码令人困惑，只需跳过它，并在阅读测试章节后再回头查看。
- en: TL;DR
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TL;DR
- en: 'Since Laravel is a PHP framework, it’s very simple to serve it locally. Laravel
    also provides three tools for managing your local development: Sail, a Docker
    setup; Valet, a simpler macOS-based tool; and Homestead, a preconfigured Vagrant
    setup. Laravel relies on and can be installed by Composer and comes out of the
    box with a series of folders and files that reflect both its conventions and its
    relationship with other open source tools.'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Laravel是一个PHP框架，因此在本地运行它非常简单。Laravel还提供了三种工具来管理您的本地开发环境：Sail，一个Docker设置；Valet，一个更简单的基于macOS的工具；以及Homestead，一个预配置的Vagrant设置。Laravel依赖于Composer，并且默认情况下带有一系列反映其约定和与其他开源工具关系的文件和文件夹。
