- en: Chapter 1\. Why Laravel?
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章. 为什么选择 Laravel？
- en: In the early days of the dynamic web, writing a web application looked a lot
    different than it does today. Developers then were responsible for writing the
    code for not just the unique business logic of our applications but also each
    of the components that are so common across sites—​user authentication, input
    validation, database access, templating, and more.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在动态网络的早期阶段，编写 Web 应用程序看起来与今天大不相同。当时的开发人员不仅负责编写我们应用程序独特的业务逻辑代码，还负责编写那些在各个站点中如此常见的组件——用户认证、输入验证、数据库访问、模板化等等。
- en: Today, programmers have dozens of application development frameworks and thousands
    of components and libraries easily accessible. It’s a common refrain among programmers
    that, by the time you learn one framework, three newer (and purportedly better)
    frameworks have popped up intending to replace it.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，程序员们可以轻松访问数十种应用程序开发框架和数千个组件和库。程序员们常说，当你学会一个框架时，可能已经有三个更新（据称更好）的框架出现，试图取代它。
- en: “Just because it’s there” might be a valid justification for climbing a mountain,
    but there are better reasons to choose to use a specific framework—​or to use
    a framework at all. It’s worth asking the question, why frameworks? More specifically,
    why Laravel?
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: “因为它存在”可能是攀登山峰的有效理由，但选择使用特定框架——或者根本使用框架——有更好的理由。值得问的问题是，为什么要使用框架？更具体地说，为什么选择
    Laravel？
- en: Why Use a Framework?
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么使用框架？
- en: It’s easy to see why it’s beneficial to use the individual components, or packages,
    that are available to PHP developers. With packages, someone else is responsible
    for developing and maintaining an isolated piece of code that has a well-defined
    job, and, in theory, that person has a deeper understanding of this single component
    than you have time to have.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，使用 PHP 开发者可用的各个组件或包是有益的。通过包，其他人负责开发和维护一个有明确定义作用的隔离代码片段，理论上，这个人对这个单一组件的理解应该比你有时间去深入了解得更多。
- en: Frameworks like Laravel—​and Symfony, Lumen, and Slim—​prepackage a collection
    of third-party components together with custom framework “glue” like configuration
    files, service providers, prescribed directory structures, and application bootstraps.
    So, the benefit of using a framework in general is that someone has made decisions
    not just about individual components for you but also about *how those components
    should fit together.*
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 像 Laravel、Symfony、Lumen 和 Slim 这样的框架，会将一系列第三方组件与自定义框架“粘合剂”（如配置文件、服务提供者、预定义的目录结构和应用程序引导）打包在一起。因此，使用框架的好处不仅在于有人已经为您做出了关于单独组件的决定，还包括*这些组件如何组合在一起*的决策。
- en: “I’ll Just Build It Myself”
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: “我只是自己构建它”
- en: Let’s say you start a new web app without the benefit of a framework. Where
    do you begin? Well, it should probably route HTTP requests, so you now need to
    evaluate all of the HTTP request and response libraries available and pick one.
    Then you’ll have to pick a router. Oh, and you’ll probably need to set up some
    form of routes configuration file. What syntax should it use? Where should it
    go? What about controllers? Where do they live, and how are they loaded? Well,
    you probably need a dependency injection container to resolve the controllers
    and their dependencies. But which one?
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您开始一个新的 Web 应用程序，没有框架的帮助。您应该从哪里开始呢？嗯，它可能需要路由 HTTP 请求，所以现在您需要评估所有可用的 HTTP 请求和响应库并选择一个。然后，您将不得不选择一个路由器。哦，您可能还需要设置某种形式的路由配置文件。它应该使用什么语法？应该放在哪里？控制器呢？它们应该放在哪里，如何加载？嗯，您可能需要一个依赖注入容器来解析控制器及其依赖关系。但是选哪一个呢？
- en: Furthermore, if you do take the time to answer all those questions and successfully
    create your application, what’s the impact on the next developer? What about when
    you have four such custom framework–based applications, or a dozen, and you have
    to remember where the controllers live in each or what the routing syntax is?
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果您确实花时间回答所有这些问题并成功创建您的应用程序，那么对下一个开发者的影响是什么？当您有四个这样的基于定制框架的应用程序，或者十二个时，您需要记住每个应用程序中控制器的位置或路由语法是什么？
- en: Consistency and Flexibility
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一致性与灵活性
- en: Frameworks address this issue by providing a carefully considered answer to
    the question “Which component should we use here?” and ensuring that the particular
    components chosen work well together. Additionally, frameworks provide conventions
    that reduce the amount of code a developer new to the project has to understand—​if
    you understand how routing works in one Laravel project, for example, you understand
    how it works in all Laravel projects.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 框架通过提供慎重考虑的答案来解决“我们应该在这里使用哪个组件？”的问题，并确保所选组件能够很好地协同工作。此外，框架提供的约定减少了新项目的开发者需要理解的代码量——例如，如果你理解一个
    Laravel 项目中的路由工作原理，那么你就理解了所有 Laravel 项目中它是如何工作的。
- en: When someone prescribes rolling your own framework for each new project, what
    they’re really advocating is the ability to *control* what does and doesn’t go
    into your application’s foundation. That means the best frameworks will not only
    provide you with a solid foundation but also give you the freedom to customize
    to your heart’s content. And this, as I’ll show you in the rest of this book,
    is part of what makes Laravel so special.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 当有人建议为每个新项目定制框架时，他们实际上是在主张能够控制应用程序基础中包含和排除什么。这意味着最好的框架不仅会为你提供一个坚实的基础，还会让你有自由进行定制。正如我将在本书的其余部分中展示的那样，这是使
    Laravel 如此特别的部分。
- en: A Short History of Web and PHP Frameworks
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Web 和 PHP 框架的简史
- en: An important part of being able to answer the question “Why Laravel?” is understanding
    Laravel’s history—​and understanding what came before it. Prior to Laravel’s rise
    in popularity, there were a variety of frameworks and other movements in PHP and
    other web development spaces.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 能够回答“为什么选择 Laravel？”的一个重要部分是了解 Laravel 的历史——以及它之前的发展。在 Laravel 兴起之前，PHP 和其他
    Web 开发领域有各种框架和其他运动。
- en: Ruby on Rails
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Ruby on Rails
- en: David Heinemeier Hansson released the first version of Ruby on Rails in 2004,
    and it’s been hard to find a web application framework since then that hasn’t
    been influenced by Rails in some way.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: David Heinemeier Hansson 于 2004 年发布了 Ruby on Rails 的第一个版本，自那以后，很难找到一种 Web 应用框架不受
    Rails 影响的情况。
- en: Rails popularized MVC, RESTful JSON APIs, convention over configuration, ActiveRecord,
    and many more tools and conventions that had a profound influence on the way web
    developers approached their applications—​especially with regard to rapid application
    development.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Rails 推广了 MVC、RESTful JSON API、约定优于配置、ActiveRecord 等许多工具和惯例，对 Web 开发者处理他们的应用程序的方式产生了深远影响——特别是快速应用程序开发方面。
- en: The Influx of PHP Frameworks
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PHP 框架的激增
- en: It was clear to most developers that Rails and similar web application frameworks
    were the wave of the future, and PHP frameworks, including those admittedly imitating
    Rails, started popping up quickly.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数开发者很清楚，Rails 和类似的 Web 应用框架是未来的趋势，包括那些明显模仿 Rails 的 PHP 框架迅速涌现。
- en: CakePHP was the first in 2005, and it was soon followed by Symfony, CodeIgniter,
    Zend Framework, and Kohana (a CodeIgniter fork). Yii arrived in 2008, and Aura
    and Slim in 2010\. The year 2011 brought FuelPHP and Laravel, both of which were
    not quite CodeIgniter offshoots, but instead proposed as alternatives.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: CakePHP 是 2005 年的第一款，很快又有 Symfony、CodeIgniter、Zend Framework 和 Kohana（CodeIgniter
    的一个分支）。Yii 在 2008 年出现，Aura 和 Slim 则在 2010 年。2011 年推出的 FuelPHP 和 Laravel 既不是 CodeIgniter
    的分支，而是提出的替代方案。
- en: Some of these frameworks were more Rails-y, focusing on database object-relational
    mappers (ORMs), MVC structures, and other tools targeting rapid development. Others,
    like Symfony and Zend, focused more on enterprise design patterns and ecommerce.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这些框架中有些更像 Rails，专注于数据库对象关系映射（ORM）、MVC 结构和其他旨在快速开发的工具。另一些像 Symfony 和 Zend 则更专注于企业设计模式和电子商务。
- en: The Good and the Bad of CodeIgniter
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CodeIgniter 的优劣
- en: CakePHP and CodeIgniter were the two early PHP frameworks that were most open
    about how much their inspiration was drawn from Rails. CodeIgniter quickly rose
    to fame and by 2010 was arguably the most popular of the independent PHP frameworks.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: CakePHP 和 CodeIgniter 是最早公开承认从 Rails 获得灵感的两个早期 PHP 框架。CodeIgniter 迅速走红，并且到 2010
    年，可以说是独立 PHP 框架中最受欢迎的。
- en: CodeIgniter was simple, easy to use, and boasted amazing documentation and a
    strong community. But its use of modern technology and patterns advanced slowly;
    and as the framework world grew and PHP’s tooling advanced, CodeIgniter started
    falling behind in terms of both technological advances and out-of-the-box features.
    Unlike many other frameworks, CodeIgniter was managed by a company, and it was
    slow to catch up with PHP 5.3’s newer features, like namespaces and the moves
    to GitHub and later Composer. It was in 2010 that Taylor Otwell, Laravel’s creator,
    became dissatisfied enough with CodeIgniter that he set off to write his own framework.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: CodeIgniter简单易用，拥有出色的文档和强大的社区。但它的现代技术和模式使用进展缓慢；随着框架世界的发展和PHP工具的进步，CodeIgniter在技术进步和开箱即用功能方面开始落后。与许多其他框架不同，CodeIgniter由一家公司管理，它在适应PHP
    5.3的新功能（如命名空间以及后来的GitHub和Composer）方面进展缓慢。正是在2010年，Laravel的创始人Taylor Otwell对CodeIgniter不满意到足以自己动手写框架。
- en: Laravel 1, 2, and 3
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Laravel 1、2和3
- en: The first beta of Laravel 1 was released in June 2011, and it was written completely
    from scratch. It featured a custom ORM (Eloquent); closure-based routing (inspired
    by Ruby Sinatra); a module system for extension; and helpers for forms, validation,
    authentication, and more.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel 1的第一个beta版于2011年6月发布，完全从头开始编写。它具有自定义ORM（Eloquent）、基于闭包的路由（受Ruby Sinatra启发）、用于扩展的模块系统以及表单、验证、认证等助手。
- en: Early Laravel development moved quickly, and Laravel 2 and 3 were released in
    November 2011 and February 2012, respectively. They introduced controllers, unit
    testing, a command-line tool, an inversion of control (IoC) container, Eloquent
    relationships, and migrations.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 早期的Laravel开发进展迅速，Laravel 2和3分别于2011年11月和2012年2月发布。它们引入了控制器、单元测试、命令行工具、控制反转（IoC）容器、Eloquent关系和迁移。
- en: Laravel 4
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Laravel 4
- en: With Laravel 4, Taylor rewrote the entire framework from the ground up. By this
    point Composer, PHP’s now-ubiquitous package manager, was showing signs of becoming
    an industry standard, and Taylor saw the value of rewriting the framework as a
    collection of components, distributed and bundled together by Composer.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 到了Laravel 4，Taylor从头重新编写了整个框架。此时的Composer，PHP现在普遍使用的包管理器，显示出成为行业标准的迹象，Taylor看到了将框架重写为Composer分发和捆绑的组件集合的价值。
- en: Taylor developed a set of components under the code name *Illuminate* and, in
    May 2013, released Laravel 4 with an entirely new structure. Instead of bundling
    the majority of its code as a download, Laravel now pulled in the majority of
    its components from Symfony (another framework that released its components for
    use by others) and the Illuminate components through Composer.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Taylor开发了一组名为*Illuminate*的组件，并于2013年5月发布了全新结构的Laravel 4。现在，Laravel不再将大部分代码捆绑为下载包，而是通过Composer从Symfony（另一个将其组件释放供他人使用的框架）和Illuminate组件中拉取大部分组件。
- en: Laravel 4 also introduced queues, a mail component, facades, and database seeding.
    And because Laravel was now relying on Symfony components, it was announced that
    Laravel would be mirroring (not exactly, but soon after) the six-month release
    schedule Symfony follows.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel 4还引入了队列、邮件组件、门面和数据库种子。因为Laravel现在依赖于Symfony组件，因此宣布Laravel将会（并非完全一样，但很快）效仿Symfony的六个月发布计划。
- en: Laravel 5
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Laravel 5
- en: Laravel 4.3 was scheduled to be released in November 2014, but as development
    progressed it became clear that the significance of its changes merited a major
    release, and Laravel 5 was released in February 2015.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel 4.3原定于2014年11月发布，但随着开发的进展，其变化的重要性变得明显，因此Laravel 5于2015年2月发布。
- en: Laravel 5 featured a revamped directory structure, removal of the form and HTML
    helpers, the introduction of the contract interfaces, a spate of new views, Socialite
    for social media authentication, Elixir for asset compilation, Scheduler to simplify
    cron, dotenv for simplified environment management, form requests, and a brand-new
    REPL (read–evaluate–print loop). Since then, it’s grown in features and maturity,
    but there have been no major changes like in previous versions.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel 5采用了全新的目录结构，删除了表单和HTML助手，引入了契约接口，大量新的视图，Socialite用于社交媒体认证，Elixir用于资产编译，Scheduler简化了cron任务，dotenv简化了环境管理，还有全新的REPL（read–evaluate–print
    loop）。从那时起，它在功能和成熟度上都有所增长，但没有像以前版本那样有重大变化。
- en: Laravel 6
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Laravel 6
- en: 'In September 2019, Laravel 6 was introduced with two primary changes: first,
    removal of the string and array global helpers Laravel offers (in favor of facades);
    and second, moving to SemVer (semantic versioning) for version numbering. The
    practical effect of this change means that, for all versions of Laravel after
    5, both major (6, 7, etc.) and minor (6.1, 6.2, etc.) versions are released much
    more frequently.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在2019年9月，引入了Laravel 6，并带来了两个主要变化：首先，移除了Laravel提供的字符串和数组全局助手（改用Facade）；其次，转向语义化版本控制（SemVer）进行版本编号。这种变化的实际影响意味着，对于5之后的所有Laravel版本，无论是主要版本（6、7等）还是次要版本（6.1、6.2等），发布频率都大大增加了。
- en: Laravel Versions in the New SemVer World (6+)
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Laravel在新SemVer世界（6+）的版本
- en: Starting with version 6, Laravel releases are less monumental than in the past
    because of the new SemVer release schedule. So going forward, releases will be
    more about how much time has passed and less about very specific big new features.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本6开始，由于新的SemVer发布计划，Laravel的发布不再像过去那样具有里程碑意义。因此，未来的发布将更多地关注时间流逝，而不是非常具体的全新大功能。
- en: What’s So Special About Laravel?
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Laravel有什么特别之处？
- en: So, what is it that sets Laravel apart? Why is it worth having more than one
    PHP framework at any time? They all use components from Symfony anyway, right?
    Let’s talk a bit about what makes Laravel “tick.”
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，是什么让Laravel与众不同？为什么在任何时候都值得拥有超过一个PHP框架？他们毕竟都使用Symfony的组件，不是吗？让我们稍微谈谈是什么让Laravel如此“tick”。
- en: The Philosophy of Laravel
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Laravel的哲学
- en: 'You only need to read through the Laravel marketing materials and READMEs to
    start seeing its values. Taylor uses light-related words like “Illuminate” and
    “Spark.” And then there are these: “Artisans.” “Elegant.” Also, these: “Breath
    of fresh air.” “Fresh start.” And finally: “Rapid.” “Warp speed.”'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 您只需阅读Laravel的市场材料和README就可以开始看到它的价值。Taylor使用像“Illuminate”和“Spark”这样与光有关的词语。然后还有这些：“Artisans”。“优雅”。还有这些：“一股清新的空气”。“新的开始”。最后还有：“快速”。“光速”。
- en: The two most strongly communicated values of the framework are to increase developer
    speed and developer happiness. Taylor has described the “Artisan” language as
    intentionally contrasting against more utilitarian values. You can see the genesis
    of this sort of thinking in [his 2011 question on StackExchange](https://oreil.ly/q0tgM)
    in which he stated, “Sometimes I spend ridiculous amounts of time (hours) agonizing
    over making code ‘look pretty’” just for the sake of a better experience of looking
    at the code itself. And he’s often talked about the value of making it easier
    and quicker for developers to take their ideas to fruition, getting rid of unnecessary
    barriers to creating great products.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 框架最强烈传达的两个价值观是提高开发速度和开发者的幸福感。Taylor将“Artisan”语言描述为故意与更实用主义的价值观对立。你可以在[他2011年在StackExchange上的提问](https://oreil.ly/q0tgM)中看到这种思维方式的起源，他说：“有时我花费了大量时间（几个小时）来苦恼地让代码‘看起来漂亮’”，仅仅是为了改善看代码本身的体验。他经常谈论简化和加快开发者将想法变成现实的过程的价值，摒弃创建优秀产品的不必要障碍。
- en: Laravel is, at its core, about equipping and enabling developers. Its goal is
    to provide clear, simple, and beautiful code and features that help developers
    quickly learn, start, develop, and write code that’s simple, clear, and lasting.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel的核心是装备和使开发者能力。其目标是提供清晰、简单和优美的代码和功能，帮助开发者快速学习、启动、开发和编写简单、清晰且持久的代码。
- en: The concept of targeting developers is clear across Laravel materials. “Happy
    developers make the best code” is written in the documentation. “Developer happiness
    from download to deploy” was the unofficial slogan for a while. Of course, any
    tool or framework will say it wants developers to be happy. But having developer
    happiness as a *primary* concern, rather than secondary, has had a huge impact
    on Laravel’s style and decision-making progress. Where other frameworks may target
    architectural purity as their primary goal, or compatibility with the goals and
    values of enterprise development teams, Laravel’s primary focus is on serving
    the individual developer. That doesn’t mean you can’t write architecturally pure
    or enterprise-ready applications in Laravel, but it won’t have to be at the expense
    of the readability and comprehensibility of your codebase.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel 文档明确表达了面向开发者的概念。"开心的开发者编写最佳代码" 已经写入文档。"从下载到部署的开发者幸福" 曾是一段时间内的非官方口号。当然，任何工具或框架都会声称希望开发者开心。但将开发者幸福作为*首要*关注点，而不是次要，对
    Laravel 的风格和决策进展产生了巨大影响。其他框架可能将架构纯净性作为首要目标，或者与企业开发团队的目标和价值兼容，但 Laravel 的主要关注点是为个体开发者服务。这并不意味着你不能在
    Laravel 中编写架构纯净或企业级的应用程序，但这不会以损害代码库的可读性和理解性为代价。
- en: How Laravel Achieves Developer Happiness
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Laravel 如何实现开发者的幸福感
- en: Just saying you want to make developers happy is one thing. Doing it is another,
    and it requires you to question what in a framework is most likely to make developers
    unhappy and what is most likely to make them happy. There are a number of ways
    Laravel tries to make developers’ lives easier.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 仅仅说你想让开发者开心是一回事。实现它是另一回事，它要求你质疑框架中最有可能让开发者不开心的因素，以及最有可能让他们开心的因素。Laravel 试图通过多种方式使开发者的生活更轻松。
- en: First, Laravel is a rapid application development framework. This means it focuses
    on a shallow (easy) learning curve and on minimizing the steps between starting
    a new app and publishing it. All of the most common tasks in building web applications,
    from database interactions to authentication to queues to email to caching, are
    made simpler by the components Laravel provides. But Laravel’s components aren’t
    just great on their own; they provide a consistent API and predictable structures
    across the entire framework. That means that, when you’re trying something new
    in Laravel, you’re more than likely going to end up saying, “…​and it just works.”
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，Laravel 是一个快速应用开发框架。这意味着它专注于浅显易懂的学习曲线，并尽量减少从开始新应用到发布的步骤。Laravel 提供了构建 Web
    应用程序中最常见任务的所有组件，从数据库交互到身份验证、队列、电子邮件到缓存，都由 Laravel 提供简化。但 Laravel 的组件不仅仅在其自身上很棒；它们在整个框架中提供了一致的
    API 和可预测的结构。这意味着，当你在 Laravel 中尝试新事物时，你很可能会说，“...它就这样运行了。”
- en: 'This doesn’t end with the framework itself, either. Laravel provides an entire
    ecosystem of tools for building and launching applications. You have Sail and
    Valet and Homestead for local development, Forge for server management, and Envoyer
    and Vapor for advanced deployment. And there’s a suite of add-on packages: Cashier
    for payments and subscriptions, Echo for WebSockets, Scout for search, Sanctum
    and Passport for API authentication, Dusk for frontend testing, Socialite for
    social login, Horizon for monitoring queues, Nova for building admin panels, and
    Spark to bootstrap your SaaS. Laravel is trying to take the repetitive work out
    of developers’ jobs so they can do something unique.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不仅限于框架本身。Laravel 提供了一个完整的工具生态系统，用于构建和发布应用程序。你有 Sail 和 Valet 和 Homestead 用于本地开发，Forge
    用于服务器管理，Envoyer 和 Vapor 用于高级部署。还有一套附加包：Cashier 用于付款和订阅，Echo 用于 WebSockets，Scout
    用于搜索，Sanctum 和 Passport 用于 API 认证，Dusk 用于前端测试，Socialite 用于社交登录，Horizon 用于监控队列，Nova
    用于构建管理面板，以及 Spark 用于启动你的 SaaS。Laravel 努力减少开发者工作中的重复性工作，以便他们可以做一些独特的事情。
- en: Next, Laravel focuses on “convention over configuration”—meaning that if you’re
    willing to use Laravel’s defaults, you’ll have to do much less work than with
    other frameworks that require you to declare all of your settings even if you’re
    using the recommended configuration. Projects built on Laravel take less time
    than those built on most other PHP frameworks.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，Laravel 注重“约定优于配置”——这意味着如果你愿意使用 Laravel 的默认设置，你将比其他需要你声明所有设置的框架少做很多工作，即使你使用推荐的配置。使用
    Laravel 构建的项目所需时间比大多数其他 PHP 框架构建的项目要少。
- en: Laravel also focuses deeply on simplicity. It’s possible to use dependency injection
    and mocking and the Data Mapper pattern and repositories and command query responsibility
    segregation and all sorts of other more complex architectural patterns with Laravel,
    if you want. But while other frameworks might suggest using those tools and structures
    on every project, Laravel and its documentation and community lean toward starting
    with the simplest possible implementation—​a global function here, a facade there,
    ActiveRecord over there. This allows developers to create the simplest possible
    application to solve for their needs, without limiting its usefulness in complex
    environments.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel 也深入关注简洁性。如果你愿意，你可以在 Laravel 中使用依赖注入、模拟和数据映射器模式、仓储模式和命令查询职责分离等各种复杂的架构模式。但是，而其他框架可能建议在每个项目中使用这些工具和结构，Laravel
    及其文档和社区更倾向于从最简单的实现开始——这里用一个全局函数，那里用一个外观模式，再在那里用 ActiveRecord。这使开发人员能够创建最简单的应用程序来满足他们的需求，而不会限制其在复杂环境中的有用性。
- en: An interesting source of how Laravel is different from other PHP frameworks
    is that its creator and its community are more connected to and inspired by Ruby
    and Rails and functional programming languages than by Java. There’s a strong
    current in modern PHP to lean toward verbosity and complexity, embracing the more
    Java-esque aspects of PHP. But Laravel tends to be on the other side, embracing
    expressive, dynamic, and simple coding practices and language features.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel 与其他 PHP 框架不同的一个有趣之处在于，它的创作者和社区更多地受到 Ruby 和 Rails 以及函数式编程语言的影响和启发，而不是
    Java。在现代 PHP 中，有一种强烈的潮流倾向于冗长和复杂，接纳 PHP 更类似于 Java 的方面。但是 Laravel 往往站在另一边，拥抱富有表现力、动态和简单的编码实践和语言特性。
- en: The Laravel Community
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Laravel 社区
- en: 'If this book is your first exposure to the Laravel community, you have something
    special to look forward to. One of the distinguishing elements of Laravel, which
    has contributed to its growth and success, is the welcoming, teaching community
    that surrounds it. From Jeffrey Way’s [Laracasts video tutorials](https://laracasts.com)
    to [Laravel News](https://laravel-news.com) to Slack and IRC and Discord channels,
    from Twitter friends to bloggers to podcasts to the Laracon conferences, Laravel
    has a rich and vibrant community full of folks who’ve been around since day one
    and folks who are just starting their own “day one.” And this isn’t an accident:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这本书是你第一次接触 Laravel 社区，你有特别的期待。Laravel 的一个显著特点之一是其欢迎、教育氛围，这一点促成了它的成长和成功。从 Jeffrey
    Way 的[Laracasts 视频教程](https://laracasts.com)到[Laravel News](https://laravel-news.com)，再到
    Slack、IRC 和 Discord 频道，从 Twitter 的朋友到博客作者、播客到 Laracon 大会，Laravel 拥有一个充满活力和丰富多样的社区，其中既有从一开始就参与的人，也有刚刚开始的新人。“这并非偶然：
- en: From the very beginning of Laravel, I’ve had this idea that all people want
    to feel like they are part of something. It’s a natural human instinct to want
    to belong and be accepted into a group of other like-minded people. So, by injecting
    personality into a web framework and being really active with the community, that
    type of feeling can grow in the community.
  id: totrans-55
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 从 Laravel 的最初开始，我就有这样一个想法，即所有人都希望感觉自己是某个群体的一部分。想要归属并被其他志同道合的人接受，是人类的自然本能。因此，通过在
    web 框架中注入个性并积极参与社区，这种感觉可以在社区中蔓延。
- en: ''
  id: totrans-56
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Taylor Otwell, Product and Support interview
  id: totrans-57
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Taylor Otwell，产品与支持采访
- en: 'Taylor understood from the early days of Laravel that a successful open source
    project needed two things: good documentation and a welcoming community. And those
    two things are now hallmarks of Laravel.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Taylor 从 Laravel 早期就明白，一个成功的开源项目需要两样东西：良好的文档和一个友好的社区。而这两点现在已成为 Laravel 的标志性特征。
- en: How It Works
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何运作
- en: Up until now, everything I’ve shared here has been entirely abstract. What about
    the code, you ask? Let’s dig into a simple application ([Example 1-1](#EX1)) so
    you can see what working with Laravel day-to-day is actually like.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 直到现在，我在这里分享的一切都是完全抽象的。你可能会问，关于代码呢？让我们深入一个简单的应用程序（[示例 1-1](#EX1)）来看看日常使用 Laravel
    到底是怎样的体验。
- en: Example 1-1\. “Hello, World” in routes/web.php
  id: totrans-61
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 1-1\. 在 routes/web.php 中的“Hello, World”
- en: '[PRE0]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The simplest possible action you can take in a Laravel application is to define
    a route and return a result any time someone visits that route. If you initialize
    a brand-new Laravel application on your machine, define the route in [Example 1-1](#EX1),
    and then serve the site from the *public* directory, you’ll have a fully functioning
    “Hello, World” example (see [Figure 1-1](#FIG101)).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Laravel 应用中，你可以采取的最简单的操作就是定义一个路由并在访问该路由时返回结果。如果在你的机器上初始化一个全新的 Laravel 应用程序，在
    [示例 1-1](#EX1) 中定义路由，然后从 *public* 目录提供站点服务，你将拥有一个完全运作的“Hello, World”示例（见 [图 1-1](#FIG101)）。
- en: '![The words ''Hello, World'' on a white screen](assets/lur3_0101.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![白色屏幕上的“Hello, World”文字](assets/lur3_0101.png)'
- en: Figure 1-1\. Returning “Hello, World!” with Laravel
  id: totrans-65
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 1-1\. 使用 Laravel 返回“Hello, World!”
- en: It looks very similar with controllers, as you can see in [Example 1-2](#EX2)
    (which, if you’d like to test right away, requires you to run `php artisan make:controller
    WelcomeController` first to create the controller).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 它看起来非常类似于控制器，正如你在 [示例 1-2](#EX2) 中所看到的（如果你想立即测试，请首先运行 `php artisan make:controller
    WelcomeController` 创建控制器）。
- en: Example 1-2\. “Hello, World” with controllers
  id: totrans-67
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 1-2\. 使用控制器打印“Hello, World”
- en: '[PRE1]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: And if you’re storing your greetings in a database, it’ll also look pretty similar
    (see [Example 1-3](#EX3)).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将问候语存储在数据库中，它看起来也会非常相似（参见 [示例 1-3](#EX3)）。
- en: Example 1-3\. Multigreeting “Hello, World” with database access
  id: totrans-71
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 1-3\. 多问候语“Hello, World”并访问数据库
- en: '[PRE3]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[Example 1-3](#EX3) might be a bit overwhelming, and if so, just skip over
    it. You’ll learn about everything that’s happening here in later chapters, but
    you can already see that with just a few lines of code, you can set up database
    migrations and models and pull records out. It’s just that simple.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 1-3](#EX3) 可能会有些令人不知所措，如果是这样，请跳过。在后面的章节中你将了解到这里发生的一切，但你已经可以看到，仅仅几行代码就可以设置数据库迁移和模型，并提取记录。就是这么简单。'
- en: Why Laravel?
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么选择 Laravel？
- en: So—​why Laravel?
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，为什么选择 Laravel？
- en: Because Laravel helps you bring your ideas to reality with no wasted code, using
    modern coding standards, surrounded by a vibrant community, with an empowering
    ecosystem of tools.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 因为 Laravel 能帮助你将想法变为现实，无需编写多余的代码，采用现代编码标准，支持活跃的社区，并拥有强大的工具生态系统。
- en: And because you, dear developer, deserve to be happy.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 还有因为你，亲爱的开发者，值得快乐。
