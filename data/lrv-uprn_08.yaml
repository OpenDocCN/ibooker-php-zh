- en: Chapter 8\. Artisan and Tinker
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章。Artisan和Tinker
- en: 'From installation onward, modern PHP frameworks expect many interactions to
    take place on the command line. Laravel provides three primary tools for command-line
    interaction: Artisan, a suite of built-in command-line actions with the ability
    to add more; Tinker, an REPL or interactive shell for your application; and the
    installer, which we’ve already covered in [Chapter 2](ch02.html#setting_up_development_environment).'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 从安装开始，现代PHP框架期望在命令行上进行许多交互。Laravel提供了三种主要的命令行交互工具：Artisan，一组内置命令行操作，具有添加更多功能的能力；Tinker，用于应用程序的REPL或交互式shell；以及安装程序，在[第2章](ch02.html#setting_up_development_environment)中已经介绍过。
- en: An Introduction to Artisan
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个关于Artisan的介绍
- en: 'If you’ve been reading through this book chapter by chapter, you’ve already
    learned how to use Artisan commands. They look something like this:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经逐章阅读本书，已经学会如何使用Artisan命令。它们看起来像这样：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If you look in the root folder of your application, you’ll see that *artisan*
    is actually just a PHP file. That’s why you’re starting your call with `php artisan`;
    you’re passing that file into PHP to be parsed. Everything after that is just
    passed into Artisan as arguments.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您查看应用程序的根文件夹，您会看到*artisan*实际上只是一个PHP文件。这就是为什么您要以`php artisan`开头进行调用；您将该文件传递给PHP进行解析。之后的所有内容只是作为参数传递给Artisan。
- en: Symfony Console Syntax
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Symfony Console语法
- en: Artisan is actually a layer on top of the [Symfony Console component](https://oreil.ly/7Cb3Y);
    so, if you’re familiar with writing Symfony Console commands, you should feel
    right at home.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，Artisan是建立在[Symfony Console组件](https://oreil.ly/7Cb3Y)之上的一层；因此，如果您熟悉编写Symfony
    Console命令，那么您应该会感觉如同在家一样。
- en: Since the list of Artisan commands for an application can be changed by a package
    or by the specific code of the application, it’s worth checking every new application
    you encounter to see what commands are available.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 由于应用程序的Artisan命令列表可能会被包或特定应用程序代码更改，因此值得检查您遇到的每个新应用程序以查看可用的命令。
- en: To get a list of all available Artisan commands, you can run `php artisan list`
    from the project root (although if you just run `php artisan` with no parameters,
    it will do the same thing).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取所有可用Artisan命令的列表，可以从项目根目录运行`php artisan list`（尽管如果只运行`php artisan`而不带参数，它将执行相同的操作）。
- en: Basic Artisan Commands
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本的Artisan命令
- en: 'There’s not enough space here to cover all of the Artisan commands, but we’ll
    cover many of them. Let’s get started with the basic commands:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这里没有足够的空间来涵盖所有的Artisan命令，但我们将涵盖其中的许多命令。让我们从基本命令开始：
- en: '`clear-compiled`'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`clear-compiled`'
- en: Removes Laravel’s compiled class file, which is like an internal Laravel cache;
    run this as a first resort when things are going wrong and you don’t know why.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 移除Laravel的编译类文件，这类似于内部Laravel缓存；当事情出现问题并且您不知道原因时，首先尝试运行此命令。
- en: '`down`, `up`'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`down`，`up`'
- en: Puts your application in “maintenance mode” so you can fix an error, run migrations,
    or whatever else, and restores an application from maintenance mode, respectively.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 将您的应用程序置于“维护模式”中，以便您可以修复错误，运行迁移或其他操作，并将应用程序从维护模式恢复。
- en: '`dump-server`'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`dump-server`'
- en: Starts the dump server (see [“Laravel Dump Server”](#dump_server)) to collect
    and output dumped variables.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 启动转储服务器（参见[“Laravel Dump Server”](#dump_server)）以收集和输出转储的变量。
- en: '`env`'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`env`'
- en: Displays which environment Laravel is running in at the moment; it’s the equivalent
    of echoing `app()->environment()` in-app.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 显示Laravel当前运行的环境；这相当于在应用中回显`app()->environment()`。
- en: '`help`'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`help`'
- en: Provides help for a command; for example, `php artisan help *commandName*`.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 为命令提供帮助；例如，`php artisan help *commandName*`。
- en: '`migrate`'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`migrate`'
- en: Runs all database migrations.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 运行所有数据库迁移。
- en: '`optimize`'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`optimize`'
- en: Clears and refreshes the configuration and route files.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 清除并刷新配置和路由文件。
- en: '`serve`'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`serve`'
- en: Pins up a PHP server at `localhost:8000`. (You can customize the host and/or
    port with `--host` and `--port`.)
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在`localhost:8000`上启动PHP服务器。（您可以使用`--host`和`--port`自定义主机和/或端口。）
- en: '`tinker`'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`tinker`'
- en: Brings up the Tinker REPL, which we’ll cover later in this chapter.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 启动Tinker REPL，我们将在本章后面介绍它。
- en: '`stub:publish`'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`stub:publish`'
- en: Publishes all stubs that are available for customization.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 发布所有可用于自定义的存根。
- en: '`docs`'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`docs`'
- en: Gives you quick access to Laravel docs; pass a parameter and you’ll be prompted
    to open the URL for those docs, or don’t pass a parameter and you’ll be able to
    navigate a list of documentation topics to choose from.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 为您提供快速访问Laravel文档的途径；传递一个参数，您将被提示打开这些文档的URL，或者不传递参数，您将能够浏览文档主题列表以选择。
- en: '`about`'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`about`'
- en: Shows an overview of your project environment, general configurations, packages,
    and more.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 显示项目环境、通用配置、包等的概述。
- en: Changes to the Artisan Commands List Over Time
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Artisan 命令列表随时间变化
- en: The list of Artisan commands and their names have changed in small ways over
    the lifetime of Laravel. This list is as up to date as possible at the time of
    publishing this book. However, the best way to see what’s available to you is
    to run `php artisan` from your application.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel 生命周期内 Artisan 命令及其名称略有变化。在撰写本书时，此列表尽可能是最新的。但是，了解可用内容的最佳方法是从您的应用程序中运行
    `php artisan`。
- en: Options
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选项
- en: 'Before we cover the rest of the commands, let’s look at a few notable options
    you can pass any time you run an Artisan command:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们介绍其余命令之前，让我们看一下您在运行 Artisan 命令时可以随时传递的一些显著选项：
- en: '`-q`'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`-q`'
- en: Suppresses all output
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 抑制所有输出
- en: '`-v`, `-vv`, and `-vvv`'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`-v`、`-vv` 和 `-vvv`'
- en: Specifies the level of output verbosity (normal, verbose, and debug)
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 指定输出详细程度（正常、详细和调试）
- en: '`--no-interaction`'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`--no-interaction`'
- en: Suppresses interactive questions, so the command won’t interrupt automated processes
    running it
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 抑制交互式问题，因此命令不会中断正在运行它的自动化过程
- en: '`--env`'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`--env`'
- en: Allows you to define which environment the Artisan command should operate in
    (`local`, `production`, etc.)
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 允许您定义 Artisan 命令应在哪个环境中运行（`local`、`production` 等）。
- en: '`--version`'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`--version`'
- en: Shows which version of Laravel your application is running on
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 显示您的应用程序正在运行的 Laravel 版本
- en: 'You’ve probably guessed from looking at these options that Artisan commands
    are intended to be used much like basic shell commands: you might run them manually,
    but they can also function as a part of some automated process at some point.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经从这些选项中猜到，Artisan 命令的使用方式类似于基本的 shell 命令：您可以手动运行它们，但它们也可以作为某些自动化过程的一部分运行。
- en: For example, there are many automated deployment processes that might benefit
    from certain Artisan commands. You might want to run `php artisan config:cache`
    every time you deploy an application. Flags like `-q` and `--no-interaction` ensure
    that your deployment scripts, not attended by a human being, can keep running
    smoothly.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，许多自动化部署流程可能会从某些 Artisan 命令中受益。每次部署应用程序时，您可能希望运行 `php artisan config:cache`。像
    `-q` 和 `--no-interaction` 这样的标志确保您的部署脚本可以顺利运行，而无需人类干预。
- en: The Grouped Commands
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分组命令
- en: 'The rest of the commands available out of the box are grouped by context. We
    won’t cover them all here, but we’ll cover each context broadly:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 提供了默认情况下可用的其余命令，这些命令根据上下文进行分组。我们不会在此处详细介绍所有命令，但我们将广泛涵盖每个上下文：
- en: '`auth`'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`auth`'
- en: All we have here is `auth:clear-resets`, which flushes all of the expired password
    reset tokens from the database.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这里仅有 `auth:clear-resets`，该命令从数据库中清除所有过期的密码重置令牌。
- en: '`cache`'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`cache`'
- en: '`cache:clear` clears the cache, `cache:forget` removes an individual item from
    the cache, and `cache:table` creates a database migration if you plan to use the
    `database` cache driver.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`cache:clear` 清除缓存，`cache:forget` 从缓存中删除单个项，并且 `cache:table` 如果您计划使用 `database`
    缓存驱动程序，则创建数据库迁移。'
- en: '`config`'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`config`'
- en: '`config:cache` caches your configuration settings for faster lookup; to clear
    the cache, use `config:clear`.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`config:cache` 缓存您的配置设置以加快查找速度；要清除缓存，请使用 `config:clear`。'
- en: '`db`'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`db`'
- en: '`db:seed` seeds your database, if you have configured database seeders.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`db:seed` 如果已配置数据库填充器，则向数据库中填充数据。'
- en: '`event`'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`event`'
- en: '`event:list` lists all the events and listeners in your application, `event:cache`
    caches that list, `event:clear` clears that cache, and `event:generate` builds
    missing event and event listener files based on the definitions in `EventServiceProvider`.
    You’ll learn more about events in [Chapter 16](ch16.html#queues_jobs_events).'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`event:list` 列出应用程序中的所有事件和监听器，`event:cache` 缓存该列表，`event:clear` 清除该缓存，`event:generate`
    根据 `EventServiceProvider` 中的定义构建缺失的事件和事件监听器文件。您将在 [第16章](ch16.html#queues_jobs_events)
    中了解更多关于事件的信息。'
- en: '`key`'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`key`'
- en: '`key:generate` creates a random application encryption key in your *.env* file.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`key:generate` 在您的 *.env* 文件中创建一个随机的应用程序加密密钥。'
- en: Rerunning artisan key:generate Means Losing Some Encrypted Data
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重新生成 artisan key:generate 意味着丢失某些加密数据
- en: If you run `php artisan key:generate` more than once on your application, every
    currently logged-in user will be logged out. Additionally, any data you have manually
    encrypted will no longer be decryptable. To learn more, check out the article
    [“APP_KEY and You”](https://oreil.ly/T_l1h) by fellow Tightenite Jake Bathman.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在你的应用程序上多次运行`php artisan key:generate`，每个当前已登录的用户都将被注销。此外，任何您手动加密的数据将无法解密。要了解更多信息，请查看由同事
    Tightenite Jake Bathman 撰写的文章[“APP_KEY and You”](https://oreil.ly/T_l1h)。
- en: '`make`'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`make`'
- en: Each of the `make:` actions creates a single item from a stub and has parameters
    that vary accordingly. To learn more about any individual command’s parameters,
    use `help` to read its documentation.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 每个`make:`操作都从一个存根创建一个单独的项目，并具有相应变化的参数。要了解有关任何单个命令参数的更多信息，请使用`help`来阅读其文档。
- en: 'For example, you could run `php artisan help make:migration` and learn that
    you can pass `--create=*tableNameHere*` to create a migration that already has
    the create table syntax in the file, as shown here: `php artisan make:migration
    create_posts_table --create=posts`.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，您可以运行`php artisan help make:migration`，了解到可以传递`--create=*tableNameHere*`来创建一个已经包含创建表语法的迁移文件，如下所示：`php
    artisan make:migration create_posts_table --create=posts`。
- en: '`migrate`'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`migrate`'
- en: The `migrate` command used to run all migrations was mentioned earlier; see
    [“Running Migrations”](ch05.html#running_migrations) for details on all the migration-related
    commands.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 之前提到的用于运行所有迁移的`migrate`命令，请参阅[“Running Migrations”](ch05.html#running_migrations)以获取有关所有与迁移相关的命令的详细信息。
- en: '`notifications`'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`notifications`'
- en: '`notifications:table` generates a migration that creates the table for database
    notifications.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`notifications:table` 生成一个创建数据库通知表的迁移。'
- en: '`package`'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`package`'
- en: Laravel has a manifest generated by its “autodiscover” feature. This registers
    third-party packages for you when you first install them. `package:discover` rebuilds
    Laravel’s “discovered” manifest of the service providers from your external packages.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel 通过其“autodiscover”功能生成的清单。这在您首次安装第三方包时为您注册服务提供程序。`package:discover` 重新构建
    Laravel 的“已发现”清单，其中包含来自外部包的服务提供程序。
- en: '`queue`'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`queue`'
- en: We’ll cover Laravel’s queues in [Chapter 16](ch16.html#queues_jobs_events),
    but the basic idea is that you can push jobs up into remote queues to be executed
    one after another by a worker. This command group provides all the tools you need
    to interact with your queues, like `queue:listen` to start listening to a queue,
    `queue:table` to create a migration for database-backed queues, and `queue:flush`
    to flush all failed queue jobs. There are quite a few more, which you’ll learn
    about in [Chapter 16](ch16.html#queues_jobs_events).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第 16 章](ch16.html#queues_jobs_events)介绍 Laravel 的队列，但基本思想是您可以将作业推送到远程队列，由工作进程依次执行。此命令组提供了与队列交互所需的所有工具，如`queue:listen`用于开始监听队列，`queue:table`用于创建支持数据库的队列的迁移，`queue:flush`用于刷新所有失败的队列作业。还有更多命令，您将在[第
    16 章](ch16.html#queues_jobs_events)中了解到。
- en: '`route`'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`route`'
- en: If you run `route:list`, you’ll see the definitions of every route defined in
    the application, including each route’s verb(s), path, name, controller/closure
    action, and middleware. You can cache the route definitions for faster lookups
    with `route:cache` and clear your cache with `route:clear`.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果运行`route:list`，您将看到应用程序中定义的每个路由的定义，包括每个路由的动词、路径、名称、控制器/闭包动作和中间件。您可以使用`route:cache`缓存路由定义以加快查找速度，并使用`route:clear`清除缓存。
- en: '`schedule`'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`schedule`'
- en: 'We’ll cover Laravel’s cron-like scheduler in [Chapter 16](ch16.html#queues_jobs_events),
    but in order for it to work, you need to set the system cron to run `schedule:run`
    once a minute:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第 16 章](ch16.html#queues_jobs_events)介绍 Laravel 的类似于 cron 的调度器，但为了使其工作，您需要设置系统
    cron 每分钟运行`schedule:run`一次：
- en: '[PRE1]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As you can see, this Artisan command is intended to be run regularly in order
    to power a core Laravel service.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，此 Artisan 命令旨在定期运行，以支持 Laravel 核心服务。
- en: '`session`'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`session`'
- en: '`session:table` creates a migration for applications using database-backed
    sessions.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`session:table` 为使用数据库支持会话的应用程序创建迁移。'
- en: '`storage`'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`storage`'
- en: '`storage:link` creates a symbolic link from *public/storage* to *storage/app/public*.
    This is a common convention in Laravel apps, to make it easy to put user uploads
    (or other files that commonly end up in *storage/app*) somewhere where they’ll
    be accessible at a public URL.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`storage:link` 创建一个符号链接，将*public/storage*链接到*storage/app/public*。这是 Laravel
    应用程序中的常见约定，可以轻松地将用户上传的文件（或其他通常保存在*storage/app*中的文件）放在可以通过公共 URL 访问的地方。'
- en: '`vendor`'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`vendor`'
- en: Some Laravel-specific packages need to “publish” some of their assets, either
    so that they can be served from your *public* directory or so that you can modify
    them. Either way, these packages register these “publishable assets” with Laravel,
    and when you run `vendor:publish`, it publishes them to their specified locations.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 一些特定于 Laravel 的包需要“发布”它们的一些资源，这样它们可以从你的 *public* 目录提供或者你可以修改它们。无论哪种方式，这些包都会向
    Laravel 注册这些“可发布的资源”，当你运行 `vendor:publish` 时，它们就会发布到指定的位置。
- en: '`view`'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`view`'
- en: Laravel’s view rendering engine automatically caches your views. It usually
    does a good job of handling its own cache invalidation, but if you ever notice
    it’s gotten stuck, run `view:clear` to clear the cache.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel 的视图渲染引擎会自动缓存你的视图。通常它处理自己的缓存失效工作做得不错，但如果你注意到有时候卡住了，可以运行 `view:clear`
    来清除缓存。
- en: Writing Custom Artisan Commands
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写自定义 Artisan 命令
- en: Now that we’ve covered the Artisan commands that come with Laravel out of the
    box, let’s talk about writing your own.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经讨论了 Laravel 开箱即用的 Artisan 命令，让我们来谈谈如何编写你自己的命令。
- en: 'First, you should know: there’s an Artisan command for that! Running `php artisan
    make:command *YourCommandName*` generates a new Artisan command in *app/Console/Commands/{YourCommandName}.php*.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你应该知道：有一个专门的 Artisan 命令来处理这个！运行 `php artisan make:command *YourCommandName*`
    会在 *app/Console/Commands/{YourCommandName}.php* 中生成一个新的 Artisan 命令。
- en: 'Your first argument should be the class name of the command, and you can optionally
    pass a `--command` parameter to define what the terminal command will be (e.g.,
    `appname:action`). So, let’s do it:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 你的第一个参数应该是命令的类名，你还可以选择性地传递一个 `--command` 参数来定义终端命令将是什么（例如 `appname:action`）。所以，让我们来做吧：
- en: '[PRE2]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Take a look at [Example 8-1](#EX701) to see what you’ll get.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 [示例 8-1](#EX701) 以查看你将得到什么。
- en: Example 8-1\. The default skeleton of an Artisan command
  id: totrans-99
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 8-1\. Artisan 命令的默认骨架
- en: '[PRE3]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As you can see, it’s very easy to define the command signature, the help text
    it shows in command lists, and the command’s behavior on execution (`handle()`).
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，定义命令签名、命令列表中显示的帮助文本以及命令执行时的行为 (`handle()`) 非常简单。
- en: A Sample Command
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个示例命令
- en: We haven’t covered mail or Eloquent yet in this chapter (see [Chapter 15](ch15.html#mail_and_notifications)
    for mail and [Chapter 5](ch05.html#database_and_eloquent) for Eloquent), but the
    sample `handle()` method in [Example 8-2](#EX703) should read pretty clearly.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中我们还没有涵盖邮件或 Eloquent（查看 [第 15 章](ch15.html#mail_and_notifications) 获取邮件和
    [第 5 章](ch05.html#database_and_eloquent) 获取 Eloquent），但 [示例 8-2](#EX703) 中的示例
    `handle()` 方法应该读起来很清晰。
- en: Example 8-2\. A sample Artisan command `handle()` method
  id: totrans-104
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 8-2\. 一个样例 Artisan 命令 `handle()` 方法
- en: '[PRE4]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now every time you run `php artisan email:newusers`, this command will grab
    every user that signed up this week and send them the welcome email.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在每当你运行 `php artisan email:newusers` 命令时，该命令将获取本周注册的每个用户，并发送给他们欢迎邮件。
- en: If you would prefer injecting your mail and user dependencies instead of using
    facades, you can typehint them in the command constructor, and Laravel’s container
    will inject them for you when the command is instantiated.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你更喜欢注入你的邮件和用户依赖项而不是使用门面模式，你可以在命令构造函数中使用类型提示，当命令实例化时，Laravel 的容器会自动注入它们给你。
- en: Take a look at [Example 8-3](#EX704) to see what [Example 8-2](#EX703) might
    look like using dependency injection and extracting its behavior out to a service
    class.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 [示例 8-3](#EX704) 以查看使用依赖注入和将其行为提取到服务类中的 [示例 8-2](#EX703) 是什么样子的。
- en: Example 8-3\. The same command, refactored
  id: totrans-109
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 8-3\. 同一个命令，重构后
- en: '[PRE5]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Arguments and Options
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参数和选项
- en: The `$signature` property of the new command looks like it might just contain
    the command name. But this property is also where you’ll define any arguments
    and options for the command. There’s a specific, simple syntax you can use to
    add arguments and options to your Artisan commands.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 新命令的 `$signature` 属性看起来可能只包含命令名称。但这个属性也是你定义命令的参数和选项的地方。你可以使用特定而简单的语法来向你的 Artisan
    命令添加参数和选项。
- en: 'Before we dig into that syntax, take a look at an example for some context:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入研究语法之前，先看一个例子来获得一些上下文：
- en: '[PRE6]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Arguments—required, optional, and/or with defaults
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数 — 必填、可选、或者带有默认值
- en: 'To define a required argument, surround it with braces:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 要定义一个必填参数，用大括号括起来：
- en: '[PRE7]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'To make the argument optional, add a question mark:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 要使参数变成可选的，添加一个问号：
- en: '[PRE8]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'To make it optional and provide a default, use:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 要使它可选并提供默认值，使用：
- en: '[PRE9]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Options—required values, value defaults, and shortcuts
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选项 — 必填值、默认值和快捷方式
- en: 'Options are similar to arguments, but they’re prefixed with `--` and can be
    used with no value. To add a basic option, surround it with braces:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 选项类似于参数，但它们以 `--` 作为前缀，并且可以不带值使用。要添加基本选项，请用大括号括起来：
- en: '[PRE10]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'If your option requires a value, add an `=` to its signature:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的选项需要一个值，请在其签名中添加一个 `=`：
- en: '[PRE11]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'And if you want to pass a default value, add it after the `=`:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要传递默认值，请在 `=` 之后添加它：
- en: '[PRE12]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Array arguments and array options
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数组参数和数组选项
- en: 'Both for arguments and for options, if you want to accept an array as input,
    use the `*` character:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 无论是对于参数还是选项，如果要接受数组作为输入，请使用 `*` 字符：
- en: '[PRE13]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Using array arguments and parameters looks a bit like [Example 8-4](#EX705).
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 使用数组参数和参数看起来有点像 [8-4](#EX705) 示例。
- en: Example 8-4\. Using array syntax with Artisan commands
  id: totrans-133
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 8-4\. 在 Artisan 命令中使用数组语法
- en: '[PRE14]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Array Arguments Must Be the Last Argument
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数组参数必须是最后一个参数。
- en: Since an array argument captures every parameter after its definition and adds
    them as array items, an array argument has to be the last argument within an Artisan
    command’s signature.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 由于数组参数捕获其定义后的每个参数，并将它们作为数组项添加，因此数组参数必须是 Artisan 命令签名中的最后一个参数。
- en: Input descriptions
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 输入描述
- en: Remember how the built-in Artisan commands can give us more information about
    their parameters if we use `artisan help`? We can provide that same information
    about our custom commands. Just add a colon and the description text within the
    curly braces, like in [Example 8-5](#EX706X).
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 还记得内置的 Artisan 命令如何在使用 `artisan help` 时能为我们提供有关其参数的更多信息吗？我们可以为我们的自定义命令提供相同的信息。只需在大括号中加上冒号和描述文本，就像
    [8-5](#EX706X) 示例中一样。
- en: Example 8-5\. Defining description text for Artisan arguments and options
  id: totrans-139
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 8-5\. 为 Artisan 参数和选项定义描述文本
- en: '[PRE15]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Using Input
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用输入
- en: Now that we’ve prompted for this input, how do we use it in our command’s `handle()`
    method? We have two sets of methods for retrieving the values of arguments and
    options.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经提示了这个输入，那么我们如何在命令的 `handle()` 方法中使用它呢？我们有两套方法来检索参数和选项的值。
- en: argument() and arguments()
  id: totrans-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: argument() 和 arguments()
- en: '`$this->arguments()` returns an array of all arguments (the first array item
    will be the command name). `$this->argument()`, called with no parameters, returns
    the same response; the plural method, which I prefer, is just available for better
    readability.'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`$this->arguments()` 返回所有参数的数组（第一个数组项将是命令名称）。没有参数调用的 `$this->argument()` 返回相同的响应；我更喜欢复数形式的方法，仅仅是为了更好的可读性。'
- en: To get just the value of a single argument, pass the argument name as a parameter
    to `$this->argument()`, as shown in [Example 8-6](#EX8a).
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 要仅获取单个参数的值，请将参数名称作为参数传递给 `$this->argument()`，如示例 [8-6](#EX8a) 所示。
- en: Example 8-6\. Using `$this->arguments()` in an Artisan command
  id: totrans-146
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 8-6\. 在 Artisan 命令中使用 `$this->arguments()`
- en: '[PRE16]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: option() and options()
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: option() 和 options()
- en: '`$this->options()` returns an array of all options, including some that will
    by default be `false` or `null`. `$this->option()`, called with no parameters,
    returns the same response; again, the plural method, which I prefer, is just available
    for better readability.'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '`$this->options()` 返回一个包含所有选项的数组，其中一些默认为 `false` 或 `null`。没有参数调用的 `$this->option()`
    返回相同的响应；我更喜欢复数形式的方法，仅仅是为了更好的可读性。'
- en: To get just the value of a single option, pass the argument name as a parameter
    to `$this->option()`, as shown in [Example 8-7](#EX8b).
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 要仅获取单个选项的值，请将参数名称作为参数传递给 `$this->option()`，如示例 [8-7](#EX8b) 所示。
- en: Example 8-7\. Using `$this->options()` in an Artisan command
  id: totrans-151
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 8-7\. 在 Artisan 命令中使用 `$this->options()`
- en: '[PRE17]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[Example 8-8](#EX707) shows an Artisan command using `argument()` and `option()`
    in its `handle()` method.'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '[8-8](#EX707) 示例展示了在其 `handle()` 方法中使用 `argument()` 和 `option()` 的 Artisan
    命令。'
- en: Example 8-8\. Getting input from an Artisan command
  id: totrans-154
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 8-8\. 从 Artisan 命令获取输入
- en: '[PRE18]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Prompts
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提示
- en: 'There are a few more ways to get user input from within your `handle()` code,
    and they all involve prompting the user to enter information during the execution
    of your command:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行命令期间，有几种方法可以从 `handle()` 代码中获取用户输入：
- en: '`ask()`'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '`ask()`'
- en: 'Prompts the user to enter freeform text:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 提示用户输入自由格式文本：
- en: '[PRE19]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '`secret()`'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '`secret()`'
- en: 'Prompts the user to enter freeform text, but hides the typing with asterisks:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 提示用户输入自由格式文本，但用星号隐藏输入：
- en: '[PRE20]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '`confirm()`'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '`confirm()`'
- en: 'Prompts the user for a yes/no answer, and returns a Boolean:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 提示用户回答是或否，并返回布尔值：
- en: '[PRE21]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: All answers except `y` or `Y` will be treated as a “no.”
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 `y` 或 `Y` 之外的所有答案都将被视为“否”。
- en: '`anticipate()`'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '`anticipate()`'
- en: 'Prompts the user to enter freeform text, and provides autocomplete suggestions.
    Still allows the user to type whatever they want:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 提示用户输入自由格式文本，并提供自动完成建议。仍然允许用户输入他们想要的任何内容：
- en: '[PRE22]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '`choice()`'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '`choice()`'
- en: 'Prompts the user to choose one of the provided options. The last parameter
    is the default if the user doesn’t choose:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 提示用户从提供的选项中选择一个。如果用户没有选择，则使用最后一个参数作为默认值：
- en: '[PRE23]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Note that the final parameter, the default, should be the array key. Since
    we passed a nonassociative array, the key for `Gators` is `0`. You could also
    key your array, if you’d prefer:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，最后一个参数，默认应为数组键。由于我们传递了非关联数组，因此 `Gators` 的键是 `0`。如果您愿意，也可以对数组进行键分配：
- en: '[PRE24]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Output
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 输出
- en: 'During the execution of your command, you might want to write messages to the
    user. The most basic way to do this is to use `$this->info()` to output basic
    green text:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行命令期间，您可能希望向用户写入消息。实现这一最基本的方法是使用 `$this->info()` 输出基本的绿色文本：
- en: '[PRE25]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: You also have available the `comment()` (orange), `question()` (highlighted
    teal), `error()` (highlighted red), `line()` (uncolored), and `newLine()` (uncolored)
    methods to echo to the command line.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用 `comment()`（橙色）、`question()`（高亮青色）、`error()`（高亮红色）、`line()`（未着色）和 `newLine()`（未着色）方法在命令行输出。
- en: Please note that the exact colors may vary from machine to machine, but they
    try to be in line with the local machine’s standards for communicating to the
    end user.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，确切的颜色可能因机器而异，但它们试图符合本地机器与最终用户之间的标准沟通。
- en: Table output
  id: totrans-181
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 表格输出
- en: The `table()` method makes it simple to create ASCII tables full of your data.
    Take a look at [Example 8-9](#EX708).
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '`table()` 方法使得创建包含数据的 ASCII 表格变得简单。查看 [示例 8-9](#EX708)。'
- en: Example 8-9\. Outputting tables with Artisan commands
  id: totrans-183
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 8-9\. 使用 Artisan 命令输出表格
- en: '[PRE26]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Note that [Example 8-9](#EX708) has two sets of data: the headers, and the
    data itself. Both contain two “cells” per “row”; the first cell in each row is
    the name, and the second is the email. That way the data from the Eloquent call
    (which is constrained to pull only name and email) matches up with the headers.'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 注意 [示例 8-9](#EX708) 包含两组数据：标题和数据本身。每行都包含两个“单元格”；每行的第一个单元格是名称，第二个单元格是电子邮件。这样，来自
    Eloquent 调用的数据（限制为仅提取名称和电子邮件）与标题相匹配。
- en: Take a look at [Example 8-10](#EX709) to see what the table output looks like.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 [示例 8-10](#EX709) 以查看表格输出的样子。
- en: Example 8-10\. Sample output of an Artisan table
  id: totrans-187
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 8-10\. Artisan 表格的示例输出
- en: '[PRE27]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Progress bars
  id: totrans-189
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 进度条
- en: If you’ve ever run `npm install`, you’ve seen a command-line progress bar before.
    Let’s build one in [Example 8-11](#EX710).
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您曾经运行过 `npm install`，您之前见过命令行进度条。让我们在 [示例 8-11](#EX710) 中构建一个。
- en: Example 8-11\. Sample Artisan progress bar
  id: totrans-191
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 8-11\. Artisan 进度条示例
- en: '[PRE28]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: What did we do here? First, we informed the system how many “units” we needed
    to work through. Maybe a unit is a user, and you have 350 users. The bar will
    then divide the entire width it has available on your screen by 350, and increment
    it by 1/350th every time you run `progressAdvance()`. Once you’re done, run `progressFinish()`
    so that it knows it’s done displaying the progress bar.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里做了什么？首先，我们告诉系统需要处理多少“单位”。也许一个单位是一个用户，您有 350 个用户。进度条然后将屏幕上可用的整个宽度除以 350，并且每次运行
    `progressAdvance()` 时递增 1/350。完成后，请运行 `progressFinish()` 以通知它已完成显示进度条。
- en: Writing Closure-Based Commands
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写基于闭包的命令
- en: If you’d prefer to keep your command definition process simpler, you can write
    commands as closures instead of classes by defining them in *routes/console.php*.
    Everything we discuss in this chapter will apply the same way, but you will define
    and register the commands in a single step in that file, as shown in [Example 8-12](#EX8c).
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您更喜欢保持命令定义过程简单，可以将命令编写为闭包而不是类，方法是在 *routes/console.php* 中定义和注册它们。本章中讨论的所有内容都将同样适用，但您将在该文件中的单个步骤中定义和注册命令，如
    [示例 8-12](#EX8c) 所示。
- en: Example 8-12\. Defining an Artisan command using a closure
  id: totrans-196
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 8-12\. 使用闭包定义 Artisan 命令
- en: '[PRE29]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Calling Artisan Commands in Normal Code
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在普通代码中调用 Artisan 命令
- en: While Artisan commands are designed to be run from the command line, you can
    also call them from other code.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 Artisan 命令设计用于从命令行运行，但您也可以从其他代码中调用它们。
- en: The easiest way is to use the `Artisan` facade. You can either call a command
    using `Artisan::call()` (which will return the command’s exit code) or queue a
    command using `Artisan::queue()`.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的方法是使用 `Artisan` 门面。您可以使用 `Artisan::call()` 调用命令（这将返回命令的退出代码），或者使用 `Artisan::queue()`
    将命令排队。
- en: 'Both take two parameters: first, the terminal command (`password:reset`); and
    second, an array of parameters to pass it. Take a look at [Example 8-13](#EX711)
    to see how it works with arguments and options.'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 两者都接受两个参数：第一个是终端命令（`password:reset`）；第二个是要传递给它的参数数组。查看[示例 8-13](#EX711)以了解如何使用参数和选项。
- en: Example 8-13\. Calling Artisan commands from other code
  id: totrans-202
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 8-13\. 从其他代码调用Artisan命令
- en: '[PRE30]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: As you can see, arguments are passed by keying to the argument name, and options
    with no value can be passed `true` or `false`.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，参数通过键名传递给参数名，没有值的选项可以传递`true`或`false`。
- en: Calling Artisan Commands Using String Syntax
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用字符串语法调用Artisan命令
- en: 'You can also call Artisan commands much more naturally from your code by passing
    the same string you’d call from the command line into `Artisan::call()`:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过将与命令行中相同的字符串传递到`Artisan::call()`中，更自然地从您的代码中调用Artisan命令：
- en: '[PRE31]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: You can also call Artisan commands from other commands using `$this->call()`,
    (which is the same as `Artisan::call())` or `$this->callSilent()`, which is the
    same but suppresses all output. See [Example 8-14](#EX712) for an example.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以从其他命令中使用`$this->call()`调用Artisan命令（与`Artisan::call()`相同），或者使用`$this->callSilent()`，它们的作用相同，但抑制了所有输出。参见[示例 8-14](#EX712)作为示例。
- en: Example 8-14\. Calling Artisan commands from other Artisan commands
  id: totrans-209
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 8-14\. 从其他Artisan命令调用Artisan命令
- en: '[PRE32]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Finally, you can inject an instance of the `Illuminate\Contracts\Console\Kernel`
    contract and use its `call()` method.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您可以注入`Illuminate\Contracts\Console\Kernel`合同的一个实例，并使用它的`call()`方法。
- en: Tinker
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Tinker
- en: Tinker is an REPL, or read–evaluate–print loop. REPLs give you a prompt, similar
    to the command-line prompt, that mimics a “waiting” state of your application.
    You type your commands into the REPL, hit Return, and then expect what you typed
    to be evaluated and the response printed out.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: Tinker是一个REPL（交互式环境），或者读取-求值-打印循环。REPL会给您一个提示符，类似于命令行提示符，模仿应用程序的“等待”状态。您在REPL中键入命令，按回车键，然后期待您键入的内容进行评估并打印响应。
- en: '[Example 8-15](#EX713) provides a quick sample to give you a sense of how it
    works and how it might be useful. We start the REPL with `php artisan tinker`
    and are then presented with a blank prompt (`>>>`); every response to our commands
    is printed on a line prefaced with `=>`.'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 8-15](#EX713)提供了一个快速示例，让您了解它的工作方式及其可能的用处。我们使用`php artisan tinker`启动REPL，然后看到一个空白提示符（`>>>`）；每个命令的响应都打印在以`=>`为前缀的行上。'
- en: Example 8-15\. Using Tinker
  id: totrans-215
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 8-15\. 使用Tinker
- en: '[PRE33]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: As you can see, we created a new user, set some data (hashing the password with
    `bcrypt()` for security), and saved it to the database. And this is real. If this
    were a production application, we would’ve just created a brand new user in our
    system.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们创建了一个新用户，设置了一些数据（使用`bcrypt()`对密码进行了哈希处理以确保安全），并将其保存到数据库中。这是真实的情况。如果这是一个生产应用程序，我们会在系统中创建一个全新的用户。
- en: This makes Tinker a great tool for simple database interactions, for trying
    out new ideas, and for running snippets of code when it’d be a pain to find a
    place to put them in the application source files.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得Tinker成为一个用于简单数据库交互、尝试新想法以及在应用程序源文件中找不到放置位置时运行代码片段的绝佳工具。
- en: Tinker is powered by [Psy Shell](http://psysh.org), so check that out to see
    what else you can do with Tinker.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: Tinker由[Psy Shell](http://psysh.org)提供支持，因此请查看它，看看您还可以使用Tinker做什么。
- en: Laravel Dump Server
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Laravel转储服务器
- en: One common method of debugging the state of your data during development is
    to use Laravel’s `dump()` helper, which runs a decorated `var_dump()` on anything
    you pass to it. This is fine, but it can often run into view issues.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发过程中，调试数据状态的一种常见方法是使用Laravel的`dump()`助手函数，它对任何您传递给它的内容运行装饰过的`var_dump()`。这很好用，但它经常会遇到视图问题。
- en: You can enable the Laravel dump server, which catches those `dump()` statements
    and displays them in your console instead of rendering them to the page.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以启用Laravel转储服务器，它会捕获那些`dump()`语句，并在控制台中显示它们，而不是将它们渲染到页面中。
- en: 'To run the dump server in your local console, navigate to your project’s root
    directory and run `php artisan dump-server`:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 要在本地控制台中运行转储服务器，请导航至项目的根目录并运行`php artisan dump-server`：
- en: '[PRE34]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Now, try using the `dump()` helper function in your code somewhere. To test
    it out, try this code in your *routes/web.php* file:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，请尝试在您的代码中某个地方使用`dump()`助手函数。要测试它，请在您的*routes/web.php*文件中尝试以下代码：
- en: '[PRE35]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Without the dump server, you’d see both the dump and your “Hello World.” But
    with the dump server running, you’ll only see “Hello World” in the browser. In
    your console, you’ll see that the dump server caught that `dump()`, and you can
    inspect it there:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 没有 dump 服务器，你会同时看到 dump 和你的“Hello World”。但是有 dump 服务器运行时，你只会在浏览器中看到“Hello World”。在你的控制台中，你会看到
    dump 服务器捕捉到了 `dump()`，你可以在那里检查它：
- en: '[PRE36]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Customizing Generator Stubs
  id: totrans-229
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义生成器存根
- en: Any Artisan commands that generate files (e.g. `make:model` and `make:controller`)
    use “stub” files that the command then copies and modifies to create the newly
    generated files. You can customize these stubs in your applications.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 任何生成文件的 Artisan 命令（例如 `make:model` 和 `make:controller`）都使用“存根”文件，命令会复制并修改这些文件以创建新生成的文件。你可以在你的应用程序中自定义这些存根。
- en: To customize the stubs in your applications, run `php artisan stub:publish`,
    which will export the stub files into a `stub/` directory where you can customize
    them.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 要在你的应用程序中自定义存根，请运行 `php artisan stub:publish`，它将把存根文件导出到一个 `stub/` 目录中，你可以在那里自定义它们。
- en: Testing
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试
- en: Since you know how to call Artisan commands from code, it’s easy to do that
    in a test and ensure that whatever behavior you expected to be performed has been
    performed correctly, as in [Example 8-16](#EX714). In our tests, we use `$this->artisan()`
    instead of `Artisan::call()` because it has the same syntax but adds a few testing-related
    assertions.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 由于你知道如何从代码中调用 Artisan 命令，因此在测试中执行这些操作并确保你期望的行为已经正确执行很容易，就像 [示例 8-16](#EX714)
    中展示的那样。在我们的测试中，我们使用 `$this->artisan()` 而不是 `Artisan::call()`，因为它具有相同的语法但添加了一些与测试相关的断言。
- en: Example 8-16\. Calling Artisan commands from a test
  id: totrans-234
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 8-16\. 在测试中调用 Artisan 命令
- en: '[PRE37]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: You can chain on a few new assertions to your `$this->artisan()` calls that
    make it even easier to test Artisan commands—​not just the impact they have on
    the rest of your app, but also how they actually operate. Take a look at [Example 8-17](#EX716)
    to see an example of this syntax.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以链式调用一些新的断言到你的 `$this->artisan()` 调用中，这使得测试 Artisan 命令变得更加容易——不仅仅是它们对你的应用程序的影响，还有它们的实际操作。看看
    [示例 8-17](#EX716) 来看看这种语法的一个示例。
- en: Example 8-17\. Making assertions against the input and output of Artisan commands
  id: totrans-237
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 8-17\. 对 Artisan 命令的输入和输出进行断言
- en: '[PRE38]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: TL;DR
  id: totrans-239
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TL;DR
- en: Artisan commands are Laravel’s command-line tools. Laravel comes with quite
    a few out of the box, but it’s also easy to create your own Artisan commands and
    call them from the command line or your own code.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: Artisan 命令是 Laravel 的命令行工具。Laravel 自带了一些命令，但也很容易创建你自己的 Artisan 命令并从命令行或你自己的代码中调用它们。
- en: Tinker is an REPL that makes it simple to get into your application environment
    and interact with real code and real data, and the dump server lets you debug
    your code without stopping the code’s execution.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: Tinker 是一个 REPL，使得进入你的应用程序环境并与真实代码和真实数据交互变得简单，而 dump 服务器允许你在不停止代码执行的情况下调试你的代码。
