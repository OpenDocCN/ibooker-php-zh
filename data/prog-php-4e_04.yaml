- en: Chapter 3\. Functions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三章。函数
- en: A *function* is a named block of code that performs a specific task, possibly
    acting upon a set of values given to it, aka *parameters*, and possibly returning
    a single value or set of values in an array. Functions save on compile time—no
    matter how many times you call them, functions are compiled only once for the
    page. They also improve reliability by allowing you to fix any bugs in one place
    rather than everywhere you perform a task, and they improve readability by isolating
    code that performs specific tasks.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '*函数*是执行特定任务的命名代码块，可能作用于给定的一组值，即*参数*，并可能返回单个值或数组中的一组值。函数节省编译时间——无论调用多少次，函数仅在页面加载时编译一次。它们还通过允许您在一个地方修复任何错误来提高可靠性，而不是在每个执行任务的地方修复错误，并通过隔离执行特定任务的代码来提高可读性。'
- en: This chapter introduces the syntax of function calls and function definitions
    and discusses how to manage variables in functions and pass values to functions
    (including pass-by-value and pass-by-reference). It also covers variable functions
    and anonymous functions.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了函数调用和函数定义的语法，并讨论了如何在函数中管理变量和向函数传递值（包括传值调用和引用调用）。它还涵盖了可变函数和匿名函数。
- en: Calling a Function
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调用函数
- en: 'Functions in a PHP program can be built in (or, by being in an extension, effectively
    built in) or user-defined. Regardless of their source, all functions are evaluated
    in the same way:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: PHP程序中的函数可以是内置的（或者通过扩展实际上是内置的）或用户定义的。无论其来源如何，所有函数都以相同的方式进行评估：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The number of parameters a function requires differs from function to function
    (and, as we’ll see later, may even vary for the same function). The parameters
    supplied to the function may be any valid expression and must be in the specific
    order expected by the function. If the parameters are given out of order, the
    function may still run by a fluke, but it’s basically a case of “garbage in =
    garbage out.” A function’s documentation will tell you what parameters the function
    expects and what value(s) you can expect to be returned.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 函数需要的参数数量因函数而异（后面我们会看到，同一函数的参数甚至可能不同）。提供给函数的参数可以是任何有效表达式，并且必须按照函数期望的特定顺序提供。如果参数顺序给出错，函数可能仍会运行，但基本上是“垃圾进，垃圾出”的情况。函数的文档会告诉您函数期望的参数以及您可以期望返回的值（们）。
- en: 'Here are some examples of functions:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一些函数示例：
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the first example, we give an argument, `"PHP"`, to the function `strlen()`,
    which gives us the number of characters in the provided string. In this case,
    it returns `3`, which is assigned to the variable `$length`. This is the simplest
    and most common way to use a function.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个示例中，我们将一个参数`"PHP"`传递给`strlen()`函数，它返回所提供字符串的字符数。在这种情况下，它返回`3`，并赋值给变量`$length`。这是使用函数的最简单和最常见的方式。
- en: The second example passes the result of `asin(1)` to the `sin()` function. Since
    the sine and arcsine functions are inverses, taking the sine of the arcsine of
    any value will always return that same value. Here we see that a function can
    be called within another function. The returned value of the inner call is subsequently
    sent to the outer function before the overall result is returned and stored in
    the `$result` variable.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个示例将`asin(1)`的结果传递给`sin()`函数。由于正弦和反正弦函数是互为反函数，对任何值的反正弦的正弦总是返回该相同的值。在这里，我们看到一个函数可以在另一个函数内调用。内部调用的返回值随后被发送到外部函数，然后将总体结果返回并存储在`$result`变量中。
- en: 'In the final example, we give a filename to the `unlink()` function, which
    attempts to delete the file. Like many functions, it returns `false` when it fails.
    This allows you to use another built-in function, `die()`, and the short-circuiting
    property of the logic operators. Thus, this example might be rewritten as:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一个示例中，我们向`unlink()`函数提供一个文件名，它尝试删除该文件。像许多函数一样，当它失败时返回`false`。这使您可以使用另一个内置函数`die()`和逻辑运算符的短路特性。因此，这个示例可以重写为：
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `unlink()` function, unlike the other two examples, affects something outside
    of the parameters given to it. In this case, it deletes a file from the filesystem.
    All such side effects of a function should be carefully documented and carefully
    considered.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`unlink()`函数，与其他两个示例不同，会影响给定参数之外的内容。在这种情况下，它会从文件系统中删除文件。应仔细记录和考虑函数的所有此类副作用。'
- en: PHP has a huge array of functions already defined for you to use in your programs.
    These extensions perform tasks such as accessing databases, creating graphics,
    reading and writing XML files, grabbing files from remote systems, and more. PHP’s
    built-in functions are described in detail in the [Appendix](app01.xhtml#function_reference).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: PHP拥有大量已定义的函数可供在程序中使用。这些扩展执行任务包括访问数据库、创建图形、读写XML文件、从远程系统抓取文件等。PHP的内置函数在[附录](app01.xhtml#function_reference)中有详细描述。
- en: Note
  id: totrans-15
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Not all functions return a value. They can perform an action like sending an
    email and then just return controlling behavior to the calling code; having completed
    their task, they have nothing to “say.”
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有函数都返回一个值。它们可以执行像发送电子邮件这样的动作，然后只需将控制行为返回给调用代码；完成了它们的任务后，它们没有任何“话要说”。
- en: Defining a Function
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义一个函数
- en: 'To define a function, use the following syntax:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 要定义一个函数，使用以下语法：
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The statement list can include HTML. You can declare a PHP function that doesn’t
    contain any PHP code. For instance, the `column()` function simply gives a convenient
    short name to HTML code that may be needed many times throughout the page:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 语句列表可以包含HTML。你可以声明一个不包含任何PHP代码的PHP函数。例如，`column()`函数只是为页面中可能需要多次使用的HTML代码提供了一个方便的简短名称：
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The function name can be any string that starts with a letter or underscore
    followed by zero or more letters, underscores, and digits. Function names are
    case-insensitive; that is, you can call the `sin()` function as `sin(1)`, `SIN(1)`,
    `SiN(1)`, and so on, because all these names refer to the same function. By convention,
    built-in PHP functions are called with all lowercase.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 函数名可以是以字母或下划线开头，后跟零个或多个字母、下划线和数字的任何字符串。函数名不区分大小写；也就是说，你可以将`sin()`函数称为`sin(1)`、`SIN(1)`、`SiN(1)`等等，因为所有这些名称都指代同一个函数。按照惯例，内置的PHP函数都使用全小写来调用。
- en: 'Typically, functions return some value. To return a value from a function,
    use the `return` statement: put `return` *expr* inside your function. When a `return`
    statement is encountered during execution, control reverts to the calling statement,
    and the evaluated results of *expr* will be returned as the value of the function.
    You can include any number of `return` statements in a function (for example,
    if you have a `switch` statement to determine which of several values to return).'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，函数会返回某个值。要从函数中返回值，请使用`return`语句：将`return` *expr*放在函数内部。当执行到`return`语句时，控制流返回到调用语句，并将*expr*的计算结果作为函数的返回值返回。你可以在函数中包含任意数量的`return`语句（例如，如果有`switch`语句确定返回哪个值）。
- en: Let’s take a look at a simple function. [Example 3-1](#example_three_onedot_string_concatenati)
    takes two strings, concatenates them, and then returns the result (in this case,
    we’ve created a slightly slower equivalent to the concatenation operator, but
    bear with us for the sake of the example).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个简单的函数。[示例 3-1](#example_three_onedot_string_concatenati)接受两个字符串，将它们连接起来，然后返回结果（在这种情况下，我们创建了一个稍慢的等效于连接运算符的示例，但请谅解，这只是为了举例）。
- en: Example 3-1\. String concatenation
  id: totrans-25
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 3-1\. 字符串连接
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The function takes two arguments, `$left` and `$right`. Using the concatenation
    operator, the function creates a combined string in the variable `$combinedString`.
    Finally, in order to cause the function to have a value when it’s evaluated with
    our arguments, we return the value `$combinedString`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数接受两个参数`$left`和`$right`。使用连接运算符，函数在变量`$combinedString`中创建一个组合字符串。最后，为了使函数在用我们的参数进行评估时具有一个值，我们返回值`$combinedString`。
- en: 'Because the `return` statement can accept any expression, even complex ones,
    we can simplify the program as shown here:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 因为`return`语句可以接受任何表达式，甚至是复杂的表达式，我们可以像这样简化程序：
- en: '[PRE6]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: If we put this function on a PHP page, we can call it from anywhere within the
    page. Take a look at [Example 3-2](#example_three_twodot_using_our_concaten).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将这个函数放在一个PHP页面上，可以在页面的任何地方调用它。看看[示例 3-2](#example_three_twodot_using_our_concaten)。
- en: Example 3-2\. Using our concatenation function
  id: totrans-31
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 3-2\. 使用我们的连接函数
- en: '[PRE7]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: When this page is displayed, the full sentence is shown.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当显示这个页面时，将显示完整的句子。
- en: 'In this next example a function takes in an integer, doubles it by bit-shifting
    the original value, and returns the result:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个示例中，一个函数接受一个整数，通过对原始值进行位移来使其加倍，并返回结果：
- en: '[PRE8]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Once the function is defined, you can use it anywhere on the page. For example:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦函数被定义，你可以在页面的任何地方使用它。例如：
- en: '[PRE9]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You can nest function declarations, but with limited effect. Nested declarations
    do not limit the visibility of the inner-defined function, which may be called
    from anywhere in your program. The inner function does not automatically get the
    outer function’s arguments. And, finally, the inner function cannot be called
    until the outer function has been called, and also cannot be called from code
    parsed after the outer function:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以嵌套函数声明，但效果有限。嵌套声明不会限制内部定义函数的可见性，该函数可以从程序中的任何地方调用。内部函数不会自动获取外部函数的参数。最后，内部函数在外部函数被调用之前不能被调用，也不能在解析外部函数之后的代码中被调用：
- en: '[PRE10]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Variable Scope
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 变量作用域
- en: If you don’t use functions, any variable you create can be used anywhere in
    a page. With functions, this is not always true. Functions keep their own sets
    of variables that are distinct from those of the page and of other functions.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不使用函数，则创建的任何变量可以在页面的任何地方使用。但在函数中，情况并非总是如此。函数保持其自己的变量集，这些变量与页面和其他函数的变量不同。
- en: 'The variables defined in a function, including its parameters, are not accessible
    outside the function, and, by default, variables defined outside a function are
    not accessible inside the function. The following example illustrates this:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 函数中定义的变量（包括其参数）在函数外部不可访问，默认情况下，在函数外部定义的变量在函数内部也不可访问。以下示例说明了这一点：
- en: '[PRE11]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The variable `$a` inside the function `foo()` is a different variable than the
    variable `$a` outside the function; even though `foo()` uses the add-and-assign
    operator, the value of the outer `$a` remains `3` throughout the life of the page.
    Inside the function, `$a` has the value `2`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 函数`foo()`内的变量`$a`是一个不同的变量，而不是函数外部的变量`$a`；即使`foo()`使用了加法赋值运算符，页面的外部`$a`的值仍然是`3`。在函数内部，`$a`的值是`2`。
- en: As we discussed in [Chapter 2](ch02.xhtml#language_basics), the extent to which
    a variable can be seen in a program is called the *scope* of the variable. Variables
    created within a function are inside the scope of the function (i.e., have *function-level
    scope*). Variables created outside of functions and objects have *global scope*
    and exist anywhere outside of those functions and objects. A few variables provided
    by PHP have both function-level and global scope (often referred to as *super-global
    variables*).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[第2章](ch02.xhtml#language_basics)中讨论的那样，变量在程序中可见的程度被称为变量的*作用域*。在函数内创建的变量处于函数的作用域内（即具有*函数级作用域*）。在函数和对象外创建的变量具有*全局作用域*，可以在这些函数和对象之外的任何地方存在。PHP提供的少数变量既有函数级作用域也有全局作用域（通常称为*超全局变量*）。
- en: At first glance, even an experienced programmer may think that in the previous
    example `$a` will be `5` by the time the `echo` statement is reached, so keep
    that in mind when choosing names for your variables.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 乍一看，即使是经验丰富的程序员可能会认为在前面的例子中，到达`echo`语句时`$a`将会是`5`，因此在为变量选择名称时，请牢记这一点。
- en: Global Variables
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 全局变量
- en: 'If you want a variable in the global scope to be accessible from within a function,
    you can use the `global` keyword. Its syntax is:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想让全局作用域中的变量在函数内部可访问，可以使用`global`关键字。其语法如下：
- en: '[PRE12]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Changing the previous example to include a `global` keyword, we get:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 将上述例子更改以包括`global`关键字，我们得到：
- en: '[PRE13]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Instead of creating a new variable called `$a` with function-level scope, PHP
    uses the global `$a` within the function. Now, when the value of `$a` is displayed,
    it will be `5`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: PHP不会创建具有函数级作用域的新变量`$a`，而是在函数内部使用全局变量`$a`。现在，当显示`$a`的值时，它将是`5`。
- en: You must include the `global` keyword in a function before any uses of the global
    variable or variables you want to access. Because they are declared before the
    body of the function, function parameters can never be global variables.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在函数体之前必须使用`global`关键字声明函数中要访问的全局变量或变量。因为它们在函数体之前声明，所以函数参数永远不能是全局变量。
- en: 'Using `global` is equivalent to creating a reference to the variable in the
    `$GLOBALS` variable. That is, both of the following declarations create a variable
    in the function’s scope that is a reference to the same value as the variable
    `$var` in the global scope:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`global`等同于在`$GLOBALS`变量中创建变量的引用。也就是说，以下两个声明都会在函数作用域内创建一个变量，该变量是全局作用域变量`$var`的引用：
- en: '[PRE14]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Static Variables
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 静态变量
- en: 'Like C, PHP supports declaring function variables as *static*. A static variable
    retains its value between all calls to the function and is initialized during
    a script’s execution only the first time the function is called. Use the `static`
    keyword at the first use of a function variable to declare it as static. Typically,
    the first use of a static variable assigns an initial value:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 与C语言类似，PHP支持声明函数变量为*静态*。静态变量在所有对函数的调用之间保持其值，并且仅在脚本执行期间的第一次调用函数时初始化。使用`static`关键字在函数变量的第一次使用时将其声明为静态。通常，静态变量的第一次使用分配一个初始值：
- en: '[PRE15]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In [Example 3-3](#example_three_threedot_static_variable), the variable `$count`
    is incremented by one each time the function is called.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在[示例 3-3](#example_three_threedot_static_variable)中，变量`$count`每次调用函数时递增1。
- en: Example 3-3\. Static variable counter
  id: totrans-60
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 3-3\. 静态变量计数器
- en: '[PRE16]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: When the function is called for the first time, the static variable `$count`
    is assigned a value of `0`. The value is returned and `$count` is incremented.
    When the function ends, `$count` is not destroyed like a nonstatic variable, and
    its value remains the same until the next time `counter()` is called. The `for`
    loop displays the numbers from 0 to 4.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 当第一次调用函数时，静态变量`$count`被赋值为`0`。返回该值并递增`$count`。当函数结束时，`$count`不像非静态变量那样被销毁，其值保持不变，直到下次调用`counter()`。`for`循环显示从0到4的数字。
- en: Function Parameters
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 函数参数
- en: Functions can expect an arbitrary number of arguments, declared by the function
    definition. There are two different ways to pass parameters to a function. The
    first, and more common, is by value. The second is by reference.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 函数可以期望由函数定义声明的任意数量的参数。有两种不同的方法可以将参数传递给函数。第一种，也是更常见的，是通过值传递。第二种是通过引用。
- en: Passing Parameters by Value
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过值传递参数
- en: In most cases, you pass parameters by value. The argument is any valid expression.
    That expression is evaluated, and the resulting value is assigned to the appropriate
    variable in the function. In all of the examples so far, we’ve been passing arguments
    by value.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，您通过值传递参数。参数是任何有效表达式。该表达式被评估，并且结果值被分配给函数中适当的变量。到目前为止，我们在所有示例中都是通过值传递参数的。
- en: Passing Parameters by Reference
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过引用传递参数
- en: Passing by reference allows you to override the normal scoping rules and give
    a function direct access to a variable. To be passed by reference, the argument
    must be a variable; you indicate that a particular argument of a function will
    be passed by reference by preceding the variable name in the parameter list with
    an ampersand (`&`). [Example 3-4](#example_three_fourdot_doublerleft_paren) revisits
    our `doubler()` function with a slight change.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 通过引用传递允许您覆盖正常的作用域规则，并直接访问变量。要通过引用传递，参数必须是一个变量；您通过在参数列表中的变量名称前面加上一个`&`符号来指示函数的特定参数将通过引用传递。[示例 3-4](#example_three_fourdot_doublerleft_paren)重新访问我们的`doubler()`函数，稍作修改。
- en: Example 3-4\. doubler() redux
  id: totrans-69
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 3-4\. doubler() redux
- en: '[PRE17]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Because the function’s `$value` parameter is passed by reference, the actual
    value of `$a`, rather than a copy of that value, is modified by the function.
    Before, we had to `return` the doubled value, but now we change the caller’s variable
    to be the doubled value.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 因为函数的`$value`参数是通过引用传递的，所以`$a`的实际值被修改，而不是该值的副本。之前，我们必须`return`双倍值，但现在我们将调用者的变量更改为双倍值。
- en: 'This is another place where a function has side effects: since we passed the
    variable `$a` into `doubler()` by reference, the value of `$a` is at the mercy
    of the function. In this case, `doubler()` assigns a new value to it.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这是另一个函数具有副作用的地方：因为我们通过引用将变量`$a`传递给`doubler()`，所以`$a`的值受函数的影响。在这种情况下，`doubler()`为其分配了一个新值。
- en: Only variables—and not constants—can be supplied to parameters declared as passing
    by reference. Thus, if we included the statement `<?php echo doubler(7); ?>` in
    the previous example, it would issue an error. However, you may assign a default
    value to parameters passed by reference (in the same manner as you provide default
    values for parameters passed by value).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 仅变量——而不是常量——可以提供给声明为按引用传递的参数。因此，如果我们在前面的示例中包含语句 `<?php echo doubler(7); ?>`，它会发出一个错误。但是，您可以为通过引用传递的参数分配默认值（与为通过值传递的参数提供默认值的方式相同）。
- en: Even in cases where your function does not affect the given value, you may want
    a parameter to be passed by reference. When passing by value, PHP must copy the
    value. Particularly for large strings and objects, this can be an expensive operation.
    Passing by reference removes the need to copy the value.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 即使在您的函数不影响给定值的情况下，您可能希望通过引用传递参数。通过值传递时，PHP必须复制该值。特别是对于大字符串和对象，这可能是一个昂贵的操作。通过引用传递可以避免复制值的需要。
- en: Default Parameters
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 默认参数
- en: Sometimes a function may need to accept a particular parameter. For example,
    when you call a function to get the preferences for a site, the function may take
    in a parameter with the name of the preference to retrieve. Rather than using
    some special keyword to designate that you want to retrieve all of the preferences,
    you can simply not supply any argument. This behavior works by using default arguments.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，函数可能需要接受特定参数。例如，当您调用函数以获取站点的偏好设置时，函数可能需要一个带有要检索的偏好名称的参数。而不是使用某些特殊关键字来指定要检索所有偏好设置，您可以简单地不提供任何参数。此行为通过使用默认参数工作。
- en: 'To specify a default parameter, assign the parameter value in the function
    declaration. The value assigned to a parameter as a default value cannot be a
    complex expression, only a scalar value:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 要指定默认参数，请在函数声明中分配参数值。分配给参数的默认值不能是复杂表达式，只能是标量值：
- en: '[PRE18]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: When you call `getPreferences()`, you can choose to supply an argument. If you
    do, it returns the preference matching the string you give it; if not, it returns
    all preferences.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 当您调用`getPreferences()`时，您可以选择提供参数。如果这样做，它将返回与您提供的字符串匹配的偏好设置；如果不提供，则返回所有偏好设置。
- en: Note
  id: totrans-80
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: A function may have any number of parameters with default values. However, these
    defaulted parameters must be listed after all parameters that do not have default
    values.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 函数可以具有任意数量的具有默认值的参数。但是，这些具有默认值的参数必须在所有没有默认值的参数之后列出。
- en: Variable Parameters
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 变量参数
- en: 'A function may require a variable number of arguments. For example, the `getPreferences()`
    example in the previous section might return the preferences for any number of
    names, rather than for just one. To declare a function with a variable number
    of arguments, leave out the parameter block entirely:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 函数可能需要变量数量的参数。例如，在前一节中的`getPreferences()`示例中，可能返回任意数量的名称的偏好设置，而不仅仅是一个。要声明带有变量数量参数的函数，请完全省略参数块：
- en: '[PRE19]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'PHP provides three functions you can use in the function to retrieve the parameters
    passed to it. `func_get_args()` returns an array of all parameters provided to
    the function; `func_num_args()` returns the number of parameters provided to the
    function; and `func_get_arg()` returns a specific argument from the parameters.
    For example:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: PHP提供了三个函数供您在函数中使用以检索传递给它的参数。`func_get_args()`返回提供给函数的所有参数的数组；`func_num_args()`返回提供给函数的参数数量；`func_get_arg()`从参数中返回特定参数。例如：
- en: '[PRE20]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In [Example 3-5](#example_three_fivedot_argument_counter), the `count_list()`
    function takes in any number of arguments. It loops over those arguments and returns
    the total of all the values. If no parameters are given, it returns `false`.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在[例子 3-5](#example_three_fivedot_argument_counter)中，`count_list()`函数接受任意数量的参数。它遍历这些参数并返回所有值的总和。如果未提供参数，则返回`false`。
- en: Example 3-5\. Argument counter
  id: totrans-88
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 3-5\. 参数计数器
- en: '[PRE21]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The result of any of these functions cannot directly be used as a parameter
    to another function. Instead, you must first set a variable to the result of the
    function, and then use that in the function call. The following expression will
    not work:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数的任何结果都不能直接用作另一个函数的参数。相反，您必须首先将变量设置为函数的结果，然后在函数调用中使用它。以下表达式将不起作用：
- en: '[PRE22]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Instead, use:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 取而代之，使用：
- en: '[PRE23]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Missing Parameters
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缺失的参数
- en: 'PHP lets you be as lazy as you want—when you call a function, you can pass
    any number of arguments to the function. Any parameters the function expects that
    are not passed to it remain unset, and a warning is issued for each of them:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: PHP允许您随意——当您调用函数时，可以向函数传递任意数量的参数。函数期望但未传递给它的任何参数保持未设置，并为每个参数发出警告：
- en: '[PRE24]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Type Hinting
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类型提示
- en: 'When defining a function, you can add type hinting—that is, you can require
    that a parameter be an instance of a particular class (including instances of
    classes that extend that class), an instance of a class that implements a particular
    interface, an array, or a callable. To add type hinting to a parameter, include
    the class name, `array`, or `callable` *before* the variable name in the function’s
    parameter list. For example:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在定义函数时，可以添加类型提示，即可以要求参数是特定类的实例（包括扩展该类的类的实例）、实现特定接口的类的实例、数组或可调用的。要为参数添加类型提示，请在函数的参数列表中变量名**之前**包括类名、`array`或`callable`。例如：
- en: '[PRE25]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: A type-hinted parameter must be `NULL`, an instance of the given class or a
    subclass of the class, an array, or callable as a specified parameter. Otherwise,
    a runtime error occurs.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 类型提示的参数必须为`NULL`、给定类的实例或该类的子类、数组或可调用的指定参数。否则，会发生运行时错误。
- en: You can define a data type for a property in a class.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在类中为属性定义数据类型。
- en: Return Values
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 返回值
- en: 'PHP functions can return only a single value with the `return` keyword:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: PHP 函数只能使用`return`关键字返回单个值：
- en: '[PRE26]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'To return multiple values, return an array:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 要返回多个值，请返回一个数组：
- en: '[PRE27]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'If no return value is provided by a function, the function returns `NULL` instead.
    You can set a return data type by declaring it in the function definition. For
    example, the following code will return an integer of 50 when it is executed:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如果函数没有提供返回值，则函数会返回`NULL`。您可以通过在函数定义中声明来设置返回数据类型。例如，当执行以下代码时，将返回整数 50：
- en: '[PRE28]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'By default, values are copied out of the function. To return a value by reference,
    prepend the function name with `&` both when declaring it and when assigning the
    returned value to a variable:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，值是从函数中复制出来的。要通过引用返回值，请在声明函数和将返回值分配给变量时都在函数名前加上`&`：
- en: '[PRE29]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: In this code, the `findOne()` function returns an alias for `$names[1]` instead
    of a copy of its value. Because we assign by reference, `$person` is an alias
    for `$names[1]`, and the second assignment changes the value in `$names[1]`.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在此代码中，`findOne()`函数返回`$names[1]`的别名而不是其值的副本。因为我们通过引用赋值，所以`$person`是`$names[1]`的别名，第二次赋值会改变`$names[1]`中的值。
- en: This technique is sometimes used to return large string or array values efficiently
    from a function. However, PHP implements copy-on-write for variable values, meaning
    that returning a reference from a function is typically unnecessary. Returning
    a reference to a value is slower than returning the value itself.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，这种技术用于高效地从函数中返回大字符串或数组值。但是，PHP 对变量值实施写时复制（copy-on-write），意味着通常情况下从函数返回引用是不必要的。返回值的引用比返回值本身要慢。
- en: Variable Functions
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可变函数
- en: 'As with variable variables where the expression refers to the value of the
    variable whose name is the value held by the apparent variable (the `$$` construct),
    you can add parentheses after a variable to call the function whose name is the
    value held by the apparent variable—for example, `$variable()`. Consider this
    situation, where a variable is used to determine which of three functions to call:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 与可变变量类似，其中表达式引用的是外观变量（`$$`结构）的值的变量的值的变量（`$variable()`），可以在变量后添加括号来调用函数。考虑以下情况，其中一个变量用于确定要调用的三个函数之一：
- en: '[PRE30]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'In this case, we could use a variable function call to call the appropriate
    function. To make a variable function call, include the parameters for a function
    in parentheses after the variable. To rewrite the previous example:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们可以使用变量函数调用来调用适当的函数。要进行变量函数调用，请在变量后的括号中包含函数的参数。重新编写前面的示例：
- en: '[PRE31]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'If no function exists for the variable, a runtime error occurs when the code
    is evaluated. To prevent this, before calling the function you can use the built-in
    `function_exists()` function to determine whether a function exists for the value
    of the variable:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如果变量没有对应的函数存在，则在评估代码时会发生运行时错误。为了防止这种情况，在调用函数之前，可以使用内置的`function_exists()`函数来确定变量的值是否存在函数：
- en: '[PRE32]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'For example:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE33]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Language constructs such as `echo()` and `isset()` cannot be called through
    variable functions:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 语言结构（如`echo()`和`isset()`）不能通过可变函数调用：
- en: '[PRE34]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Anonymous Functions
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 匿名函数
- en: Some PHP functions do part of their work by using a function you provide to
    them. For example, the `usort()` function uses a function you create and pass
    to it as a parameter to determine the sort order of the items in an array.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 一些 PHP 函数通过使用您提供的函数来完成部分工作。例如，`usort()` 函数使用您创建并作为参数传递给它的函数来确定数组中项目的排序顺序。
- en: Although you can define a function for such purposes, as shown previously, these
    functions tend to be localized and temporary. To reflect the transient nature
    of the callback, create and use an *anonymous function* (also known as a *closure*).
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管您可以为此类目的定义一个函数，如前所示，但这些函数往往是局部化且临时的。为了反映回调的临时性质，请创建并使用 *匿名函数*（也称为 *闭包*）。
- en: You can create an anonymous function using the normal function definition syntax,
    but assign it to a variable or pass it directly.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用正常的函数定义语法创建匿名函数，但将其分配给变量或直接传递。
- en: '[Example 3-6](#example_three_sixdot_anonymous_function) shows an example using
    `usort()`.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 3-6](#example_three_sixdot_anonymous_function) 展示了使用 `usort()` 的示例。'
- en: Example 3-6\. Anonymous functions
  id: totrans-129
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 3-6\. 匿名函数
- en: '[PRE35]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The array is sorted by `usort()` using the anonymous function, in order of string
    length.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 数组通过使用匿名函数 `usort()` 按字符串长度顺序排序。
- en: 'Anonymous functions can use the variables defined in their enclosing scope
    using the `use` syntax. For example:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 匿名函数可以使用使用 `use` 语法在其封闭作用域中定义的变量。例如：
- en: '[PRE36]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Note that incorporating variables from the enclosing scope is not the same
    as using global variables—global variables are always in the global scope, while
    incorporating variables allows a closure to use the variables defined in the enclosing
    scope. Also note that this is not necessarily the same as the scope in which the
    closure is called. For example:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，将封闭作用域中的变量包含到闭包中并不等同于使用全局变量——全局变量始终位于全局作用域，而将变量包含允许闭包使用封闭作用域中定义的变量。还要注意，这不一定与调用闭包的作用域相同。例如：
- en: '[PRE37]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: In this example, `$array` is sorted normally, rather than randomly—the value
    of `$sortOption` inside the closure is the value of `$sortOption` in the scope
    of `sort``Nonrandom()`, not the value of `$sortOption` in the global scope.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，`$array` 是按正常顺序排序的，而不是随机排序——闭包内的 `$sortOption` 的值是在 `sortNonrandom()`
    作用域内的 `$sortOption` 的值，而不是全局作用域内的 `$sortOption` 的值。
- en: What’s Next
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接下来是什么
- en: 'User-defined functions can be confusing to write and complex to debug, so be
    sure to test them well and to try to limit them to performing one task each. In
    the next chapter we’ll be looking at strings and everything that they entail,
    which is another complex and potentially confusing topic. Don’t get discouraged:
    remember that we are building strong foundations for writing good, solid, succinct
    PHP code. Once you have a firm grasp of the key concepts of functions, strings,
    arrays, and objects, you’ll be well on your way to becoming a good PHP developer.'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 用户定义的函数编写起来可能令人困惑且难以调试，因此务必对其进行充分测试，并尽量限制其执行单一任务。在下一章中，我们将讨论字符串及其相关内容，这是另一个复杂且潜在令人困惑的主题。不要灰心：请记住，我们正在为编写良好、稳固、简洁的
    PHP 代码打下坚实的基础。一旦掌握了函数、字符串、数组和对象的关键概念，您就将成为一名优秀的 PHP 开发者。
