- en: Chapter 22\. Introduction to jQuery
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第22章。jQuery简介
- en: Powerful and flexible as JavaScript is, with its plethora of built-in functions
    and the continuing improvements being made to it, you often still need additional
    layers of code for simple things that cannot be achieved natively or with CSS,
    such as animations, event handling, and asynchronous communication.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管JavaScript强大而灵活，具有大量内置函数并不断改进，但对于一些不能通过本地或CSS实现的简单事物，例如动画、事件处理和异步通信，通常仍需要额外的代码层。
- en: What’s more, as a consequence of the various browser wars over the years, frustrating
    and annoying browser incompatibilities have come and gone, rearing their heads
    at different times on different platforms and programs.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，由于多年来的各种浏览器之争，令人沮丧和恼人的浏览器不兼容性已经来来去去，在不同平台和程序的不同时间重新出现。
- en: As a result, ensuring your web pages look the same on all devices can sometimes
    be achieved only through tedious JavaScript code that accounts for all the discrepancies
    across the range of browsers and versions released over recent years. Yes, much
    has been done to resolve these differences, but even today every responsive site
    I create still needs exceptions to handle the different browsers, unless I use
    a framework, as I’m sure many would agree.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，确保您的网页在所有设备上看起来一致有时只能通过冗长的JavaScript代码来实现，该代码考虑了近年来发布的各种浏览器和版本之间的差异。是的，已经做了很多工作来解决这些差异，但即使在今天，每个响应式网站我创建的都还需要例外来处理不同的浏览器，除非我使用一个框架，我相信很多人会同意这一点。
- en: To fill these gaps, a number of libraries of functions (many of which also provide
    easy hooks into the DOM) have been developed to minimize the differences between
    browsers and to facilitate asynchronous communication and event and animation
    handling, such as the subject of this chapter, jQuery.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 为了填补这些空白，已经开发了许多函数库（其中许多还提供了与DOM的简易钩子），以尽量减少浏览器之间的差异，促进异步通信、事件和动画处理，比如本章的主题jQuery。
- en: Note
  id: totrans-5
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Sometimes there is a simple JavaScript-based solution to the problem you are
    trying to solve. One way to check whether this is the case is to make a search
    at [youmightnotneedjquery.com](http://youmightnotneedjquery.com), which will let
    you know about any alternatives to jQuery that may actually be simpler in a particular
    situation.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，您正在解决的问题可能有一个简单的基于JavaScript的解决方案。检查是否有这种情况的一种方法是在[youmightnotneedjquery.com](http://youmightnotneedjquery.com)上进行搜索，该网站将告诉您可能在特定情况下实际上比jQuery更简单的替代方案。
- en: Why jQuery?
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么选择jQuery？
- en: With jQuery, not only do you get a very high level of cross-browser compatibility,
    but you also have quick and easy access to HTML and DOM manipulation, special
    functions to interact directly with CSS, the ability to control events, powerful
    tools to create professional effects and animations, and functions for conducting
    asynchronous communications with the web server. jQuery is also the base for a
    wide range of plug-ins and other utilities.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 使用jQuery，不仅可以获得非常高的跨浏览器兼容性，还可以快速简便地访问HTML和DOM操作，特殊功能直接与CSS交互，控制事件，强大工具创建专业效果和动画，以及进行与Web服务器的异步通信的功能。jQuery还是广泛范围的插件和其他实用工具的基础。
- en: Of course, you don’t *need* to use jQuery, and some programming purists would
    never touch a library, preferring to create their own bespoke collections of functions
    (and there can be good reasons for this, such as not having to wait on others
    to correct bugs you find, implementing your own security features, and so on).
    But jQuery has definitely stood the test of time, and if you would like to take
    advantage of its gentle learning curve and be developing quality web pages as
    quickly as possible, this chapter will show how you can get started using it.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你不*需要*使用jQuery，一些编程纯粹主义者可能根本不会接触库，更倾向于创建自己的专属函数集合（这样做有很多好处，比如不必等待其他人修复你发现的错误，实现自己的安全功能等等）。但是jQuery显然经受住了时间的考验，如果你想利用其温和的学习曲线，并尽快开发出质量高的网页，本章将展示如何开始使用它。
- en: Note
  id: totrans-10
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Important as jQuery is, being used on perhaps 90% of production websites, there
    are new kids on the block that have been drawing a lot of praise and attention.
    And because technology changes fast, as well as understanding jQuery, you need
    to keep up with newly surfacing technologies that could supersede the ones you
    are currently using. In my opinion React, Angular, and Vue are a few of these
    technologies as they offer new, interesting, and powerfully scalable ways to enhance
    JavaScript (as you would expect, having been created by Facebook, Google, and
    ex-Google staff, respectively). Although we cannot fill this book with JavaScript
    frameworks, it is important to keep abreast of the main ones, so I have chosen
    to also introduce you to React in [Chapter 24](ch24.xhtml#introduction_to_react),
    as I believe it is the framework you are likely to come into contact with most
    frequently, although you may wish to check out Angular, too, for completeness.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 jQuery 非常重要，几乎在 90% 的生产网站上使用，但有些新技术引起了广泛的赞誉和关注。因为技术变化迅速，您需要了解可能取代当前使用技术的新技术。在我看来，React、Angular
    和 Vue 是其中几种技术，它们提供了新的、有趣的和强大可扩展的增强 JavaScript 的方式（预料之中的是，它们分别由 Facebook、Google
    和前 Google 员工创建）。尽管我们无法在本书中涵盖所有 JavaScript 框架，但了解主要框架仍然很重要，因此我选择在[第 24 章](ch24.xhtml#introduction_to_react)中也向您介绍
    React，因为我认为这是您最有可能经常接触到的框架，尽管出于完整性考虑，您可能也想了解 Angular。
- en: Including jQuery
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 包含 jQuery
- en: There are two ways to include jQuery in your web pages. You can go to the [download
    page](https://code.jquery.com/jquery/), download the version you need, upload
    it to your web server, and reference it from a `<script>` tag in your HTML files.
    Or you can take advantage of a free content delivery network (CDN) and simply
    link to the version you require.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的网页中包含 jQuery 有两种方法。您可以前往[下载页面](https://code.jquery.com/jquery/)，下载您需要的版本，上传至您的
    Web 服务器，并在 HTML 文件中的 `<script>` 标签中引用它。或者，您可以利用免费的内容传递网络（CDN），简单地链接到您需要的版本。
- en: Note
  id: totrans-14
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: jQuery is released under the terms of the MIT license, which places almost no
    restrictions on what you can do with it. You are free to use any jQuery project
    in any other project (even commercial projects) as long as the copyright header
    is left intact.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 根据 MIT 许可证发布，几乎不限制您对其的使用。只要版权头部保持完整，您可以在任何其他项目（甚至是商业项目）中使用任何 jQuery 项目。
- en: Choosing the Right Version
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择正确的版本
- en: Before deciding whether to download and host jQuery directly or to use a CDN,
    you must pick a version of jQuery. In most cases this is straightforward, because
    you’ll simply opt for the latest release. However, if you are targeting particular
    browsers, or if you are maintaining a legacy website that relies on a particular
    version of jQuery, the latest one may not be right for you.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在决定是直接下载和托管 jQuery 还是使用 CDN 之前，您必须选择一个 jQuery 版本。在大多数情况下，这很简单，因为您只需选择最新版本。但是，如果您的目标是特定的浏览器，或者如果您正在维护依赖特定
    jQuery 版本的旧版网站，则最新版本可能不适合您。
- en: Unlike most software, where you simply download and install the newest available
    version, jQuery has evolved over time to take account of the changing dynamics
    in the market of differing browser versions, with different features and bugs.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 与大多数软件不同，您只需下载并安装最新可用版本即可。随着市场上不同浏览器版本的变化，jQuery 随着时间的推移发展，以考虑到其不同特性和缺陷。
- en: At the same time, improvements to jQuery have been made that might make newer
    versions operate differently on sites that have been specially tailored to a particular
    version (and the quirks surrounding it).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，jQuery 的改进已经进行了，这可能会使较新版本在专门为特定版本（及其周围的怪癖）量身定制的网站上运行方式不同。
- en: Of course, each newer version is an improvement over the previous one and is
    more and more likely to cover all the bases. But where identical operation is
    critical for a website, until you have fully tested a new version, it is often
    best to stick with an earlier one.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，每个新版本都比之前的版本更好，并且越来越可能涵盖所有基础知识。但是，在网站的操作相同至关重要时，通常最好仍然坚持早期版本，直到您完全测试了新版本为止。
- en: Different flavors of jQuery
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: jQuery 的不同版本
- en: There are now three branches of jQuery, called 1.x, 2.x, and 3.x, each designed
    for different environments.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在有三个 jQuery 分支，称为 1.x、2.x 和 3.x，每个分支设计用于不同的环境。
- en: Version 1.x was the first stable release of jQuery. This release supports older
    web browsers that aren’t even supported by their respective developers any longer.
    If you expect a large number of visitors with older web browsers, this is the
    version to go for (as I write, version 1.12 is probably the best).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.x 是 jQuery 的第一个稳定版本。这个版本支持一些老旧的网络浏览器，这些浏览器甚至不再被各自的开发者支持。如果你预计会有大量使用老旧浏览器的访问者，这个版本是一个不错的选择（截至我写作时，1.12
    版本可能是最好的选择）。
- en: Version 2.x dropped support for Internet Explorer 6–8 to increase jQuery’s overall
    performance and reduce the library’s file size. It is faster and smaller than
    version 1.x but doesn’t support older web browsers. Since Microsoft dropped support
    for Windows XP, it may be safe to assume that your visitors will be using a browser
    compatible with version 2.x, unless you know otherwise.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.x 放弃了对 Internet Explorer 6–8 的支持，以提高 jQuery 的整体性能并减小库的文件大小。它比 1.x 版本更快速和更小，但不支持老旧的网络浏览器。自从微软停止支持
    Windows XP 以来，可以安全地假设您的访问者将使用与 2.x 版本兼容的浏览器，除非您知道其他情况。
- en: If you need to support older browsers like Internet Explorer 6–8, Opera 12.1x,
    or Safari 5.1+, the jQuery developers recommend using version 1.12\. For full
    details on the different versions supported, please refer to the [website](http://jquery.com/browser-support).
    In this edition of the book, I have settled on version 3.5.1.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要支持像 Internet Explorer 6–8、Opera 12.1x 或 Safari 5.1+ 这样的老旧浏览器，jQuery 的开发者推荐使用
    1.12 版本。关于支持的不同版本的详细信息，请参阅[网站](http://jquery.com/browser-support)。在本书的这个版本中，我已经选定了
    3.5.1 版本。
- en: Compressed or editable
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 压缩或可编辑
- en: You also must decide whether to use a version of jQuery that has been minified
    (compressed in size to minimize bandwidth and decrease loading time) or an uncompressed
    version (perhaps because you want to make an edit to it yourself—which you are
    fully entitled to do). Generally, a minified version is best, but most web servers
    support *gzip* for on-the-fly compression and decompression, so this is becoming
    less important (although minification does remove comments too).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 你还必须决定是使用已压缩版本的 jQuery（压缩尺寸以减少带宽和加载时间）还是未压缩版本（可能是因为你想自己编辑它—这是完全可以的）。一般来说，压缩版本更好，但大多数
    Web 服务器支持使用 *gzip* 进行即时压缩和解压缩，所以这变得不那么重要了（尽管压缩还会去除注释）。
- en: Downloading
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 下载
- en: The most recent released version of jQuery is available in both uncompressed
    and minified forms on the [download page](http://jquery.com/download). You can
    also find all of the past releases on the [jQuery CDN](https://code.jquery.com/jquery/).
    The slim versions of jQuery that appear on the download page omit the asynchronous
    communication functions to save on space, so you should avoid these if you wish
    to make use of any Ajax functionality using jQuery.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 最近发布的 jQuery 版本可以在[下载页面](http://jquery.com/download)上以未压缩和压缩的形式找到。你也可以在[jQuery
    CDN](https://code.jquery.com/jquery/)上找到所有过去的发布版本。下载页面上显示的精简版 jQuery 省略了异步通信功能以节省空间，所以如果你希望使用
    jQuery 进行任何 Ajax 功能，应避免使用这些版本。
- en: 'All you need to do is choose the version you need, right-click the link displayed
    alongside it, and save it to your hard disk. From there, you can upload it to
    your web server and then include it within `<script>` tags, like this (for the
    minified version of release 3.5.1):'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 你只需选择所需的版本，右键单击旁边显示的链接，然后将其保存到硬盘。然后，你可以将其上传到 Web 服务器，然后在 `<script>` 标签中包含它，如以下示例（用于
    3.5.1 版本的压缩版本）。
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-32
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: If you have never used jQuery before (and have no special requirements), then
    just download the latest minified version, or link to it via a CDN, as described
    in the following section.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你以前从未使用过 jQuery（且没有特殊要求），那么只需下载最新的压缩版本，或者通过 CDN 进行链接，如下一节所述。
- en: Using a Content Delivery Network
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用内容传递网络
- en: Several CDNs support jQuery. If you use one of them, you can save yourself the
    hassle of having to download new versions and then upload them to your server
    by simply linking directly to the URLs supplied by these networks.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 几个 CDN 支持 jQuery。如果你使用其中一个，你可以通过直接链接到这些网络提供的 URL 来省去下载新版本并将其上传到服务器的麻烦。
- en: Not only that, but they provide this service free of charge, and usually on
    high-capacity backbones that are probably the fastest in the world. Additionally,
    CDNs usually hold their content in a number of different geographic locations
    and then supply the required file from the server closest to a user, ensuring
    the quickest possible delivery.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 不仅如此，而且它们免费提供此服务，并且通常位于可能是世界上最快速度的高容量骨干网中。此外，CDN 通常在许多不同的地理位置保存其内容，然后从距用户最近的服务器提供所需文件，确保尽可能快速地交付。
- en: 'Overall, if you don’t need to modify the jQuery source code (requiring you
    to host it on your own web servers), and your users are certain to have a live
    internet connection, using a CDN is probably the way to go. And it’s very easy.
    All you need to know is the filename you wish to access and the root folder the
    CDN is using. For example, all current and previous versions can be accessed through
    the CDN that jQuery uses, like this:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，如果您不需要修改 jQuery 源代码（需要将其托管在您自己的 Web 服务器上），并且您的用户确定有活动的互联网连接，那么使用 CDN 可能是一个不错的选择。而且这非常容易。您只需知道要访问的文件名以及
    CDN 使用的根文件夹即可。例如，您可以通过 jQuery 使用的 CDN 访问所有当前和以前的版本，如下所示：
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The base directory is at *http://code.jquery.com/*, and you simply follow this
    with the name of the file you need to include (in this case, *jquery-3.5.1.min.js*).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 基本目录位于 *http://code.jquery.com/*，您只需在其后加上您需要包含的文件名（在本例中为 *jquery-3.5.1.min.js*）。
- en: 'Both Microsoft and Google offer jQuery on their networks, so you can also include
    it in either of the following ways:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft 和 Google 都在其网络上提供 jQuery，因此您还可以通过以下方式之一包含它：
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the case of the [Microsoft CDN](http://ajax.aspnetcdn.com), you should begin
    the URL with the base directory of *ajax.aspnetcdn.com/ajax/jQuery/* and then
    follow that with the filename you require.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 [Microsoft CDN](http://ajax.aspnetcdn.com)，您应该从 *ajax.aspnetcdn.com/ajax/jQuery/*
    的基本目录开始，并在后面跟随您需要的文件名。
- en: 'For Google, however, you must split the filename (for example, *jquery-3.5.1.min.js*)
    into a folder and filename (like this: *3.5.1/jquery.min.js*). Then precede that
    with *ajax.googleapis.com/ajax/libs/jquery/*.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Google，但是，您必须将文件名（例如 *jquery-3.5.1.min.js*）拆分为文件夹和文件名（例如 *3.5.1/jquery.min.js*）。然后在前面加上
    *ajax.googleapis.com/ajax/libs/jquery/*。
- en: Note
  id: totrans-44
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: An added benefit of using a CDN is that most other websites also do this, so
    jQuery may well already be cached in the user’s browser and might not even require
    redelivery. With 90% or more of websites using jQuery, this can be a lot of valuable
    bandwidth and time saved.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 CDN 的附加好处是，大多数其他网站也这样做，因此 jQuery 可能已经缓存在用户的浏览器中，甚至可能无需重新传送。由于超过 90% 的网站使用
    jQuery，这可以节省大量宝贵的带宽和时间。
- en: Customizing jQuery
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定制 jQuery
- en: If it’s absolutely critical that you keep the amount of data downloaded by a
    web page to the minimum, then you may still be able to use jQuery by making a
    special build of it that includes only the features your website will be using.
    You won’t be able to rely on a CDN to deliver it, but in this circumstance you
    probably weren’t planning on using one anyway.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果绝对关键的是将网页下载的数据量保持最低，那么您可能仍然可以使用 jQuery，方法是制作一个特殊版本，其中仅包含您的网站将要使用的功能。您将无法依赖
    CDN 来传递它，但在这种情况下，您可能本来就没有打算使用 CDN。
- en: To create your own custom build of jQuery, try [jQuery Builder](http://projects.jga.me/jquery-builder).
    Simply check the boxes you want and uncheck those that you don’t. The bespoke
    version of jQuery will then be loaded into a separate tab or window, from where
    you can copy and paste it as required.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建自己的自定义版本的 jQuery，请尝试 [jQuery Builder](http://projects.jga.me/jquery-builder)。只需勾选您需要的选项，并取消您不需要的选项。然后，定制版本的
    jQuery 将加载到单独的选项卡或窗口中，您可以按需复制粘贴。
- en: jQuery Syntax
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: jQuery 语法
- en: The most striking thing about jQuery to people who are new to it is the `$`
    symbol, which acts as the jQuery factory method—the main means of access into
    the framework. It was chosen because the symbol is legal in JavaScript, is short,
    and is different from customary variable, object, or function/method names.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 对于对 jQuery 还不熟悉的人们来说，最显著的事情是 `$` 符号，它充当了 jQuery 的工厂方法——进入框架的主要手段。选择它是因为该符号在
    JavaScript 中是合法的，简短，并且与通常的变量、对象或函数/方法名称不同。
- en: This symbol takes the place of making a call to the `jQuery` function (which
    you can also do if you wish). The idea is to keep your code short and sweet and
    to save on unnecessary extra typing each time you access jQuery. It also immediately
    shows other developers new to your code that jQuery (or a similar library) is
    in use.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这个符号代替了调用 `jQuery` 函数的操作（如果您愿意，您也可以这样做）。这个想法是保持您的代码简短并节省每次访问 jQuery 时不必要的额外打字。它还立即向其他新接触您代码的开发人员显示出
    jQuery（或类似库）正在使用。
- en: A Simple Example
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 简单示例
- en: At its simplest, you access jQuery by typing a `$` symbol, followed by a selector
    in parentheses, and then a period and a method to apply to the selected element(s).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 简单来说，您可以通过在括号中输入一个 `$` 符号，然后是选择器，接着是一个句点和要应用于选定元素的方法，来访问 jQuery。
- en: 'For example, to change the font family of all paragraphs to monospace, you
    could use this statement:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要将所有段落的字体族更改为等宽字体，您可以使用此语句：
- en: '[PRE3]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Or to add a border to a `<code>` element, you could use this:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，要为 `<code>` 元素添加边框，您可以这样使用：
- en: '[PRE4]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Let’s look at that as part of a complete example (see [Example 22-1](#simple_jquery_example),
    where the jQuery parts are highlighted in bold).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们作为一个完整示例来看看这一点（参见 [示例 22-1](#simple_jquery_example)，其中用粗体突出显示了 jQuery 部分）。
- en: Example 22-1\. A simple jQuery example
  id: totrans-59
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 例 22-1\. 一个简单的 jQuery 示例
- en: '[PRE5]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: When you load this example into a browser, the result will be similar to [Figure 22-1](#modifying_elements_with_jquery).
    Of course, this particular instruction simply replicates what you can do with
    normal CSS, but the idea is to illustrate jQuery syntax, so I’m keeping things
    simple for now.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 当您将此示例加载到浏览器中时，结果将类似于 [图 22-1](#modifying_elements_with_jquery)。当然，这个特定的指令只是简单地复制了您可以使用普通
    CSS 做的事情，但是这个想法是为了说明 jQuery 语法，所以现在我保持简单。
- en: Note
  id: totrans-62
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: 'Another way of issuing this command is by calling the `jQuery` function (which
    works in the same way as `$`), like this:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种发出此命令的方式是调用 `jQuery` 函数（与 `$` 的工作方式相同），就像这样：
- en: '`jQuery(''code'').css(''border'', ''1px solid #aaa'')`'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`jQuery(''code'').css(''border'', ''1px solid #aaa'')`'
- en: '![Modifying elements with jQuery](Images/pmj6_2201.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![使用 jQuery 修改元素](Images/pmj6_2201.png)'
- en: Figure 22-1\. Modifying elements with jQuery
  id: totrans-66
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 22-1\. 使用 jQuery 修改元素
- en: Avoiding Library Conflicts
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 避免库冲突
- en: 'If you use other libraries alongside jQuery, you may find that they define
    their own `$` functions. To resolve this issue, you can call the `noConflict`
    method on the symbol, which releases control so that the other library can take
    over, like this:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在使用 jQuery 时同时使用其他库，可能会发现它们定义了自己的 `$` 函数。为了解决这个问题，您可以在这个符号上调用 `noConflict`
    方法，释放控制权，以便其他库可以接管，就像这样：
- en: '[PRE6]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Once you do this, to access jQuery thereafter, you must call the `jQuery` function.
    Or you can replace the `$` symbol with an object name of your choice, like this:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您这样做了，以后要访问 jQuery，您必须调用 `jQuery` 函数。或者您可以用您选择的对象名称替换 `$` 符号，像这样使用：
- en: '[PRE7]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now you can use the keyword `jq` to call jQuery wherever you had previously
    used `$`.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以使用关键字 `jq` 来调用 jQuery，以前您可能使用 `$`。
- en: Note
  id: totrans-73
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: To distinguish and keep track of jQuery objects separately from standard element
    objects, some developers prefix a `$` to any object created with jQuery (so that
    they end up looking like PHP variables!).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 为了区分并单独跟踪 jQuery 对象和标准元素对象，一些开发人员在任何使用 jQuery 创建的对象前加上 `$` 前缀（这样它们看起来像 PHP 变量！）。
- en: Selectors
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择器
- en: Now that you’ve seen how easy it is to include jQuery in a web page and access
    its features, let’s move on to looking at its selectors, which (I’m sure you’ll
    be pleased to learn) work in exactly the same way as in CSS. In fact, selectors
    are at the heart of how most of jQuery operates.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经看到了如何在网页中轻松包含 jQuery 并访问其功能，让我们继续看看它的选择器，它们（我相信您会高兴地了解到）与 CSS 中的工作方式完全相同。事实上，选择器是
    jQuery 大部分操作的核心。
- en: All you have to do is think about how you would style one or more elements using
    CSS, and then you can use the same selector(s) to apply jQuery operations on these
    selected elements. This means you can make use of element selectors, ID selectors,
    class selectors, and any combinations thereof.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 您所要做的只是考虑如何使用 CSS 样式化一个或多个元素，然后您可以使用相同的选择器在这些选定的元素上应用 jQuery 操作。这意味着您可以使用元素选择器、ID
    选择器、类选择器以及它们的任何组合。
- en: The css Method
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: css 方法
- en: 'To explain jQuery’s use of selectors, let’s first look at one of the more fundamental
    jQuery methods, `css`, with which you can dynamically alter any CSS property.
    It takes two arguments, the property name to be accessed and a value to be applied,
    like this:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 要解释 jQuery 对选择器的使用，让我们首先看一下更基本的 jQuery 方法之一 `css`，通过它您可以动态地更改任何 CSS 属性。它接受两个参数，要访问的属性名称和要应用的值，如下所示：
- en: '[PRE8]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'As you will see in the following sections, you cannot use this method on its
    own; you must append it to a jQuery selector, which will select one or more elements
    whose properties should be changed by the method. The following, which sets the
    content of all `<p>` elements to display with full justification, is an example:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如您将在接下来的部分中看到的那样，您不能单独使用此方法；您必须将其附加到一个 jQuery 选择器上，该选择器将选择一个或多个应该由该方法更改属性的元素。以下示例设置所有
    `<p>` 元素的内容以显示完全对齐：
- en: '[PRE9]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You can also use the `css` method to return (rather than set) a computed value
    by supplying only a property name (and no second argument). In this case, the
    value of the first element that matches the selector is returned. For example,
    the following will return the text color of the element with the ID of `elem`
    as an `rgb` method:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用 `css` 方法仅通过提供属性名称（而不是第二个参数）来返回（而不是设置）计算值。在这种情况下，将返回与 ID 为 `elem` 的元素匹配的第一个元素的文本颜色。例如，以下示例将返回
    ID 为 `elem` 的元素的文本颜色作为 `rgb` 方法：
- en: '[PRE10]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Remember that the value returned is the *computed* value. In other words, jQuery
    will compute and return the value as used by the browser at the moment the method
    is called, not the original value that may have been assigned to the property
    via a stylesheet or in any other way.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住返回的值是*计算出的*值。换句话说，在调用方法时，jQuery 将计算并返回浏览器当前使用的值，而不是可能通过样式表或其他方式分配给属性的原始值。
- en: So, if the text color is blue (for example), the value assigned to the variable
    `color` in the preceding statement will be `rgb(0, 0, 255)`, even if the color
    was originally set with the color name `blue`, or the hex strings `#00f` or `#0000ff`.
    This computed value, though, will always be in a form that can be assigned back
    to the element (or any other element) via the second argument of the `css` method.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果文本颜色是蓝色（例如），则在前面的语句中分配给变量 `color` 的值将是 `rgb(0, 0, 255)`，即使颜色最初是使用颜色名称 `blue`
    或十六进制字符串 `#00f` 或 `#0000ff` 设置的。但是，此计算值始终以可分配回元素（或任何其他元素）的形式存在，通过 `css` 方法的第二个参数。
- en: Warning
  id: totrans-87
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: Be wary of any computed dimensions returned by this method because, depending
    on the current `box-sizing` setting (see [Chapter 20](ch20.xhtml#advanced_css_with_css3)),
    they may or may not necessarily be what you expect. When you need to get or set
    widths and heights without consideration for `box-sizing`, you should use the
    `width` and `height` methods (and their siblings), as described in the section
    [“Modifying Dimensions”](#modifying_dimensions).
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 要注意由此方法返回的任何计算尺寸，因为根据当前的 `box-sizing` 设置（参见 [第 20 章](ch20.xhtml#advanced_css_with_css3)），它们可能与您的预期有所不同。当您需要获取或设置宽度和高度时，不考虑
    `box-sizing`，您应该使用 `width` 和 `height` 方法（以及它们的兄弟方法），如“修改尺寸”一节所述。
- en: The Element Selector
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 元素选择器
- en: 'To select an element to be manipulated by jQuery, just list its name within
    the parentheses following the `$` symbol (or jQuery function name). For example,
    if you wanted to change the background color of all `<blockquote>` elements, you
    could use a statement such as the following:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 要选择 jQuery 操作的元素，只需在 `$` 符号（或 jQuery 函数名）后面的括号内列出其名称即可。例如，如果您想更改所有 `<blockquote>`
    元素的背景颜色，可以使用如下语句：
- en: '[PRE11]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The ID Selector
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ID 选择器
- en: 'You can also refer to elements by their IDs if you place a `#` character in
    front of the ID name. So, to add a border to the element with the ID of `advert`
    (for example), you could use this:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在 ID 名称前面加上 `#` 字符，您也可以通过它们的 ID 引用元素。例如，要向 ID 为 `advert` 的元素添加边框，您可以使用以下方法：
- en: '[PRE12]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The Class Selector
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类选择器
- en: 'And you can manipulate groups of elements according to the class they use.
    For example, to underline all elements that use the class `new`, you could use
    this:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以根据它们使用的类来操作元素组。例如，要给所有使用类 `new` 的元素加下划线，您可以使用以下方法：
- en: '[PRE13]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Combining Selectors
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结合选择器
- en: 'Just as with CSS, you may combine selectors into a single jQuery selection
    using commas, as with the following example:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 与 CSS 一样，您可以使用逗号将选择器组合为单个 jQuery 选择，如以下示例所示：
- en: '[PRE14]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[Example 22-2](#using_jquery_with_different_selectors) brings all these types
    of selectors together into a single example (with the jQuery statements shown
    in bold), the result of which you can see in [Figure 22-2](#manipulating_multiple_elements).'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 22-2](#using_jquery_with_different_selectors) 将所有这些类型的选择器汇集到一个示例中（其中 jQuery
    语句以粗体显示），其结果你可以在 [图 22-2](#manipulating_multiple_elements) 中看到。'
- en: Example 22-2\. Using jQuery with different selectors
  id: totrans-102
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 22-2\. 使用不同选择器的 jQuery
- en: '[PRE15]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '![Manipulating multiple elements](Images/pmj6_2202.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![操作多个元素](Images/pmj6_2202.png)'
- en: Figure 22-2\. Manipulating multiple elements
  id: totrans-105
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 22-2\. 操作多个元素
- en: Handling Events
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理事件
- en: If all jQuery could do was alter CSS styles, it wouldn’t be a great deal of
    help—but of course, it can do far more than that. Let’s further investigate by
    seeing how it handles events.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 jQuery 只能修改 CSS 样式，那将不会有多大帮助，但当然，它能做的远不止于此。让我们进一步探讨它如何处理事件。
- en: 'As you will recall, most events are triggered by user interaction: when a mouse
    passes over an element, the mouse button is clicked or a key is pressed. But there
    are also other events that can be triggered, such as when a document completes
    loading.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所记得的，大多数事件是由用户交互触发的：当鼠标移过一个元素时，点击鼠标按钮或按键时。但也有其他可以触发的事件，例如文档加载完成时。
- en: 'With jQuery, it’s a simple matter to attach your own code to these events in
    a safe way that doesn’t block other code from also gaining access to them. For
    example, here’s how to get jQuery to respond to an element being clicked:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 jQuery，将自己的代码安全地附加到这些事件上是很简单的，这样就不会阻止其他代码访问它们。例如，这里是如何让 jQuery 响应元素被点击的：
- en: '[PRE16]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: When the element with the ID of `clickme` is clicked, the `innerHTML` property
    of the element with the ID of `result` is updated via the jQuery `html` function.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 当点击具有 `clickme` ID 的元素时，通过 jQuery 的 `html` 函数更新具有 `result` ID 的元素的 `innerHTML`
    属性。
- en: Warning
  id: totrans-112
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: jQuery objects (created with either the `$` or `jQuery` methods) are *not* the
    same as JavaScript objects created with `getElementById`. In plain JavaScript,
    you can use a statement like `object = document.getElementById('result')` followed
    by (for example) `object.innerHTML = 'something'`. But in the preceding example,
    `$('#result').innerHTML` would not work, because `innerHTML` is not a property
    of a jQuery object—hence the use of the jQuery method `html` to achieve the required
    result.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 对象（使用 `$` 或 `jQuery` 方法创建）与使用 `getElementById` 创建的 JavaScript 对象并不相同。在普通
    JavaScript 中，你可以使用类似 `object = document.getElementById('result')` 的语句，然后（例如）`object.innerHTML
    = 'something'`。但在上面的例子中，`$('#result').innerHTML` 将不起作用，因为 `innerHTML` 不是 jQuery
    对象的属性，因此需要使用 jQuery 方法 `html` 来实现所需的结果。
- en: '[Example 22-3](#processing_an_event) fleshes out the idea; you can see it running
    in [Figure 22-3](#processing_a_click_event).'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 22-3](#processing_an_event) 扩展了这一概念；你可以在 [图 22-3](#processing_a_click_event)
    中看到它的运行效果。'
- en: Example 22-3\. Processing an event
  id: totrans-115
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 22-3\. 处理事件
- en: '[PRE17]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '![Processing a click event](Images/pmj6_2203.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![处理点击事件](Images/pmj6_2203.png)'
- en: Figure 22-3\. Processing a click event
  id: totrans-118
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 22-3\. 处理点击事件
- en: Note
  id: totrans-119
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: When accessing an event with jQuery, omit the `on` prefix that you would use
    in standard JavaScript. So, for example, the `onmouseover` event name becomes
    the `mouseover` function in jQuery, `onclick` becomes `click`, and so on.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在 jQuery 中访问事件时，请省略标准 JavaScript 中使用的 `on` 前缀。因此，例如，`onmouseover` 事件名在 jQuery
    中变成了 `mouseover` 函数，`onclick` 变成了 `click`，依此类推。
- en: Waiting Until the Document Is Ready
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 等待文档加载完成
- en: Since jQuery is so closely related to the DOM in what it lets you achieve, more
    often than not you will need to wait until a web page has loaded before manipulating
    parts of it. Without jQuery, this can be achieved with the `onload` event, but
    there’s a more efficient, cross-browser jQuery method called `ready` that you
    can call to enable it at the earliest possible moment (even sooner than with `onload`).
    This means jQuery can get working on a page that much more quickly, and user-unfriendly
    delays are minimized.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 jQuery 与 DOM 关系密切，它能让你实现的功能往往需要在网页加载完成后才能操作。没有 jQuery，可以通过 `onload` 事件实现，但有一种更高效、跨浏览器的
    jQuery 方法称为 `ready`，可以在最早的时刻调用它（甚至比 `onload` 更早）。这意味着 jQuery 可以更快地在页面上工作，用户体验不友好的延迟得到最小化。
- en: 'To make use of this feature, place your jQuery code within the following structure:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用此功能，请将 jQuery 代码放置在以下结构中：
- en: '[PRE18]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The code will wait there until the document is ready, and only then will it
    be called by the `ready` method. In fact, there’s a shorter version you can use
    that takes even less typing, as shown in [Example 22-4](#smallest_jquery_apostrophereadyapost).
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 代码将在那里等待，直到文档准备就绪，然后才会被`ready`方法调用。实际上，你可以使用一个更短的版本，它的输入量更少，就像[示例 22-4](#smallest_jquery_apostrophereadyapost)中展示的那样。
- en: Example 22-4\. The smallest jQuery “ready” code encapsulation function
  id: totrans-126
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 22-4\. 最小的jQuery“ready”代码封装函数
- en: '[PRE19]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: If you get used to encapsulating your jQuery statements in one of these two
    structures, you won’t encounter the types of errors that can be generated by trying
    to access the DOM too soon.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你习惯于在这两种结构中的一种中封装你的jQuery语句，你就不会遇到试图过早访问DOM可能引发的错误类型。
- en: Note
  id: totrans-129
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Alternatively, another approach is to always place your JavaScript at the *end*
    of every HTML page so that it is executed only after the entire document has loaded.
    There is a secondary advantage too, in that this ensures the web page contents
    get priority with loading—thus, you may well see improvements in user experience.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，另一种方法是始终将你的JavaScript放在每个HTML页面的*末尾*，这样它只会在整个文档加载后执行。这也有一个次要优点，即确保网页内容优先加载，因此，你可能会看到用户体验的改善。
- en: The only time end-of-page scripts may not be a good idea is if a document could
    appear to be ready when it isn’t, or if all external stylesheets have not yet
    loaded (which can really be identified only by testing), causing users to think
    they can interact with it before your script is ready. In such cases, implement
    the `ready` function and all will be well. In fact, if in doubt, place your script
    at the page end *and* place its jQuery calls within the `ready` function, and
    you’ll get the best of both worlds.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 结束页面脚本可能不是个好主意的唯一时机是，如果文档看起来准备好了但其实还没有，或者所有外部样式表尚未加载（只能通过测试来真正识别），导致用户认为他们可以在你的脚本准备好之前与之交互。在这种情况下，实现`ready`函数，一切都会很顺利。实际上，如果有疑问，将你的脚本放在页面末尾，并将其jQuery调用放在`ready`函数内，你将获得最佳效果。
- en: Event Functions and Properties
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件函数和属性
- en: You’ve just seen the `ready` event method, but you can access several dozen
    jQuery event methods and associated properties (far too many to detail here).
    However, the following are some of the ones that are more commonly used, and they’ll
    get you started for most projects. For a comprehensive summary of all available
    events, please see the [documentation](http://api.jquery.com/category/events).
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 你刚刚看到了`ready`事件方法，但你可以访问数十个jQuery事件方法和相关属性（这里无法详细列出所有）。然而，以下是一些更常用的方法，它们将为大多数项目提供起点。要获取所有可用事件的详细总结，请参阅[文档](http://api.jquery.com/category/events)。
- en: The blur and focus Events
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模糊和焦点事件
- en: The `blur` event triggers when focus is removed from an element, causing it
    to blur, and is a good partner for the `focus` event. The `blur` and `focus` methods
    can be used to add a handler to the event. They will trigger the event if you
    omit any arguments from the method’s parentheses.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '`blur`事件在从元素中移除焦点时触发，导致其模糊，是`focus`事件的良好伴侣。`blur`和`focus`方法可以用于向事件添加处理程序。如果你在方法的括号中省略任何参数，它们将触发事件。'
- en: In [Example 22-5](#using_the_focus_and_blur_events), there are four input fields.
    The first is given immediate focus with a quick call to the `focus` method, applying
    it to the element with the ID of `first`. Then a pair of handlers is added to
    all `input` elements. The `focus` handler sets their background to yellow when
    focus is given, and the `blur` handler sets their background to light gray when
    focus is removed (or blurred).
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在[示例 22-5](#using_the_focus_and_blur_events)中，有四个输入字段。第一个通过快速调用`focus`方法立即获得焦点，应用于ID为`first`的元素。然后，对所有`input`元素添加了一对处理程序。`focus`处理程序在给予焦点时将其背景设置为黄色，而`blur`处理程序在移除焦点（或模糊）时将其背景设置为浅灰色。
- en: Example 22-5\. Using the `focus` and `blur` events
  id: totrans-137
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 22-5\. 使用`focus`和`blur`事件
- en: '[PRE20]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Note
  id: totrans-139
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: You are allowed to include whitespace characters between the closing parenthesis
    of a method and the period operator used to attach another method to it (and after
    the period too, if you like), as in the previous example where I have right-aligned
    the `blur` event name under `focus`, to help the rest of the statements also line
    up in columns.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 允许在一个方法的右括号和用于附加另一个方法的点运算符之间（如果你喜欢，也可以在点后）包含空白字符，就像在前面的示例中我已经将`blur`事件名称右对齐在`focus`下面，以帮助其余语句也对齐在列中。
- en: In [Figure 22-4](#attaching_to_blur_and_focus_events), you can see how this
    code gives any input fields that have ever had focus a light-gray background color.
    If one currently has focus, its background color is set to yellow, while unvisited
    fields remain with a white background color.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在[图 22-4](#attaching_to_blur_and_focus_events)中，你可以看到这段代码是如何给所有曾经获得焦点的输入字段设置浅灰色背景颜色的。如果当前有焦点，其背景颜色将设置为黄色，而未访问的字段保持白色背景颜色。
- en: '![Attaching to blur and focus events](Images/pmj6_2204.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![附加到模糊和焦点事件](Images/pmj6_2204.png)'
- en: Figure 22-4\. Attaching event handlers to the `blur` and `focus` events
  id: totrans-143
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 22-4\. 附加事件处理程序到`blur`和`focus`事件
- en: The this Keyword
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`this`关键字'
- en: 'This example also serves to illustrate the use of the `this` keyword. When
    an event is called, the element on which it was triggered is passed in the object
    `this`, which can then be given to the `$` method for processing. Or, since `this`
    is a standard JavaScript object (and not a jQuery object), it can be used as such.
    So, if you prefer, you could replace this:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 该示例还用来说明了`this`关键字的使用。当事件被调用时，触发它的元素会作为`this`对象传递，并可以传递给`$`方法进行处理。或者，由于`this`是一个标准的JavaScript对象（而不是jQuery对象），可以直接使用。所以，如果你喜欢，你可以用下面这种方式替换这段代码：
- en: '[PRE21]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'with this:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个：
- en: '[PRE22]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The click and dblclick Events
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 单击和双击事件
- en: 'You saw the `click` event a little earlier, but there’s an event for handling
    double-clicks too. To use either, attach the event’s method to a jQuery selection,
    and for its argument provide a jQuery method to invoke when the event triggers,
    like this:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 你之前看到了`click`事件，但也有处理双击的事件。要使用其中任何一个，将事件的方法附加到一个jQuery选择器上，并为其参数提供一个要触发的jQuery方法，就像这样：
- en: '[PRE23]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Here I have opted to use inline anonymous functions, but you can use named
    ones instead if you like (just remember to supply only the name of the function,
    without parentheses, or it will be called at the wrong time). The `this` object
    will pass through as expected and be made available to the named function, like
    this:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我选择使用内联的匿名函数，但如果你喜欢，也可以使用命名函数（只记得提供函数的名称而不带括号，否则会在错误的时间调用）。`this`对象将按预期传递并且可以作为命名函数的参数，就像这样：
- en: '[PRE24]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The `slideUp` and `hide` methods are detailed in the section [“Special Effects”](#special_effects).
    For now, though, just try running [Example 22-6](#attaching_to_the_click_and_dblclick_even)
    and either clicking or double-clicking the buttons to see how they sometimes disappear
    with an animation (using `slideUp`) and sometimes just vanish (using `hide`),
    as shown in [Figure 22-5](#button_3_has_been_clicked_once_and_is_sl).
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '`slideUp`和`hide`方法在“特效”章节中有详细说明。但现在，只需尝试运行[示例 22-6](#attaching_to_the_click_and_dblclick_even)，然后单击或双击按钮，看看它们如何有时会通过动画（使用`slideUp`）消失，有时只是消失（使用`hide`），如[图
    22-5](#button_3_has_been_clicked_once_and_is_sl)所示。'
- en: Example 22-6\. Attaching to the `click` and `dblclick` events
  id: totrans-155
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 22-6\. 附加到`click`和`dblclick`事件
- en: '[PRE25]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '![Button 3 has been clicked once and is sliding up](Images/pmj6_2205.png)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![按钮 3 已被点击一次并向上滑动](Images/pmj6_2205.png)'
- en: Figure 22-5\. Button 3 has been clicked once and is sliding up
  id: totrans-158
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 22-5\. 按钮 3 已被点击一次并向上滑动
- en: The keypress Event
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 键按事件
- en: From time to time, you’ll need better control over user keyboard interaction,
    particularly when processing complex forms or when writing games. For cases such
    as these, you can use the `keypress` method, which can be attached to anything
    that accepts keyboard input, such as an input field or even the document itself.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 不时地，你会需要更好地控制用户的键盘交互，特别是在处理复杂表单或编写游戏时。对于这些情况，你可以使用`keypress`方法，它可以附加到接受键盘输入的任何地方，比如输入字段，甚至是文档本身。
- en: In [Example 22-7](#intercepting_key_presses), the method has been attached to
    the document in order to intercept all key presses. The result of running it can
    be seen in [Figure 22-6](#processing_key_presses_from_the_keyboard).
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在[示例 22-7](#intercepting_key_presses)中，该方法已经附加到文档中以拦截所有键按。运行的结果可以在[图 22-6](#processing_key_presses_from_the_keyboard)中看到。
- en: Example 22-7\. Intercepting key presses
  id: totrans-162
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 22-7\. 拦截键按
- en: '[PRE26]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '![Processing key presses from the keyboard](Images/pmj6_2206.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![处理键盘按键](Images/pmj6_2206.png)'
- en: Figure 22-6\. Processing key presses from the keyboard
  id: totrans-165
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 22-6\. 处理键盘按键
- en: There are a few things of note in this example that you will need to bear in
    mind when writing your own keyboard handlers. For example, because browsers return
    differing values for this event, the `which` property of the `event` object is
    normalized by jQuery to return the same character codes across all browsers. So,
    this is where to look for which key was pressed.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，有几点需要注意，当编写自己的键盘处理程序时，您需要记住这些点。例如，因为不同的浏览器返回不同的值，jQuery将事件对象的`which`属性标准化为在所有浏览器中返回相同的字符代码。因此，这是查找按下的键的地方。
- en: Being a character code, though, the value in `which` is a number. You can turn
    it into a single-letter string by passing it through `String.fromCharCode`. You
    don’t have to do this, because you can easily respond to ASCII values in your
    code, but this method is useful when you need to work with characters.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 作为字符代码，`which`中的值是一个数字。您可以通过将其通过`String.fromCharCode`来将其转换为单个字母字符串。在您的代码中，您不必这样做，因为您可以轻松地响应ASCII值，但在需要处理字符时，此方法非常有用。
- en: Within the `if` block, when a key press is recognized, the example code inserts
    a simple statement to that effect into the `innerHTML` property of the `<div>`
    element with the ID of `result`.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在`if`块内，当识别到按键按下时，示例代码会将相应的简单语句插入到具有ID为`result`的`<div>`元素的`innerHTML`属性中。
- en: Warning
  id: totrans-169
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: This is a good example of where the `document.write` function should not be
    used, because the document will have already fully loaded by the time the user
    presses a key. If `document.write` were called to display the information at this
    time, it would erase the current document. Writing into the HTML of an element
    instead is a perfect, nondestructive means of supplying user feedback, as explained
    in [“About document.write”](ch14.xhtml#about_documentdotwrite) in [Chapter 14](ch14.xhtml#exploring_javascript).
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个很好的例子，说明为什么不应该使用`document.write`函数，因为用户按下键盘时文档已经完全加载。如果此时调用`document.write`来显示信息，它会擦除当前文档。相反，将信息写入元素的HTML中是一种完美的、非破坏性的方式，用于提供用户反馈，正如[“关于document.write”](ch14.xhtml#about_documentdotwrite)中在[第14章](ch14.xhtml#exploring_javascript)中所解释的那样。
- en: Considerate Programming
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 考虑周到的编程
- en: When you are anticipating user input, you should decide which values you will
    respond to and then ignore all others, just in case another event handler needs
    access to them. This is considerate practice for any other utilities (and the
    main browser itself) that may also be running. For example, in the preceding example
    I have chosen to accept only the characters a–z, A–Z, and 0–9, ignoring all others.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 当您预期用户输入时，您应该决定响应哪些值，然后忽略所有其他值，以防其他事件处理程序需要访问它们。这是一种考虑周到的做法，适用于可能正在运行的任何其他实用程序（以及主浏览器本身）。例如，在上述示例中，我选择仅接受字符a–z、A–Z和0–9，忽略所有其他字符。
- en: There are two ways you can pass keyboard interrupts on to (or deny them from)
    other handlers. First, do nothing; when your code exits, other handlers will also
    see and be able to react to the same key presses. This can cause confusion, though,
    if multiple actions occur from a single key press.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种方法可以将键盘中断传递给（或者从其他处理程序中拒绝）。首先，什么都不做；当您的代码退出时，其他处理程序也将看到并能够对相同的按键进行反应。然而，如果从单个按键触发多个动作，这可能会引起混乱。
- en: Alternatively, when you don’t want the event to trigger any other handlers,
    you can make a call to the `preventDefault` method of `event`, which then keeps
    the event from “bubbling up” to other handlers.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，当您不希望事件触发任何其他处理程序时，可以调用事件的`preventDefault`方法，从而阻止事件“冒泡”到其他处理程序。
- en: Warning
  id: totrans-175
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: Be careful where you place your call to `preventDefault`—if it’s outside the
    part of the code in which you process the key presses, it will prevent all other
    keyboard events from bubbling up, and you may lock the user out of the browser
    (or at least out of using certain features).
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 要小心`preventDefault`方法的调用位置——如果它在处理按键事件的代码部分之外，它将阻止所有其他键盘事件冒泡，并且您可能会锁定用户无法使用浏览器（或者至少无法使用某些功能）。
- en: The mousemove Event
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 鼠标移动事件
- en: Some of the most commonly intercepted events are for mouse handling. I’ve already
    covered mouse button clicks, but now let’s take a look at attaching to mouse movement
    events.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 最常拦截的事件之一是鼠标处理事件。我已经介绍了鼠标按钮点击，现在让我们来看看如何附加到鼠标移动事件。
- en: It’s time, I think, for a slightly more interesting example, so in [Example 22-8](#intercepting_mouse_movement_and_mouse_ke)
    I have put together a rudimentary drawing program using jQuery in conjunction
    with an HTML5 canvas. Although the canvas is not fully explained until [Chapter 26](ch26.xhtml#html5_canvas),
    don’t worry because the code is very simple.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 我觉得现在是时候来一个稍微有趣一点的例子了，在 [例子 22-8](#intercepting_mouse_movement_and_mouse_ke)
    中，我使用 jQuery 结合 HTML5 画布制作了一个简易的绘图程序。尽管画布直到 [第 26 章](ch26.xhtml#html5_canvas)
    才会完全解释，但别担心，因为代码非常简单。
- en: Example 22-8\. Intercepting mouse movement and mouse key events
  id: totrans-180
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 例子 22-8\. 捕获鼠标移动和鼠标按键事件
- en: '[PRE27]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'In [Figure 22-7](#capturing_mouse_movement_and_mouse_key_e), you can see how
    this fairly simple set of instructions can be used to create line drawings (well,
    if you have artistic ability, that is ☺). Here’s how it works. First, the program
    creates a `canvas` object by referencing the first (or zeroth) element of the
    jQuery selector, like this:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [图 22-7](#capturing_mouse_movement_and_mouse_key_e) 中，你可以看到这组相当简单的指令如何用来创建线条图（前提是你有艺术天赋，哈哈）。它的工作原理如下。首先，程序通过引用
    jQuery 选择器的第一个（或零索引）元素来创建一个 `canvas` 对象，如下所示：
- en: '[PRE28]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '![Capturing mouse movement and mouse key events](Images/pmj6_2207.png)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![捕获鼠标移动和鼠标按键事件](Images/pmj6_2207.png)'
- en: Figure 22-7\. Capturing mouse movement and mouse key events
  id: totrans-185
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 22-7\. 捕获鼠标移动和鼠标按键事件
- en: 'This is one way you can quickly take a jQuery object and extract a standard
    JavaScript element object. Another would be to use the `get` method, like this:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种快速将 jQuery 对象转换为标准 JavaScript 元素对象的方法之一。另一种方法是使用 `get` 方法，如下所示：
- en: '[PRE29]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The two are interchangeable, but `get` has the edge because, without any argument
    passed, it will return all the element node objects from a jQuery object as an
    array.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 这两者是可以互换的，但 `get` 方法更胜一筹，因为在不传递任何参数的情况下，它将返回 jQuery 对象中所有元素节点对象作为一个数组。
- en: 'Anyway, as you’ll learn in [Chapter 26](ch26.xhtml#html5_canvas), the canvas
    will be written using a special `context` object, which is now created:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，就像你将在 [第 26 章](ch26.xhtml#html5_canvas) 中学到的那样，画布将使用一个特殊的 `context` 对象进行绘制，现在已经创建了：
- en: '[PRE30]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'There’s one more thing to initialize, which is a Boolean variable called `pendown`
    to track the status of the mouse button (initially `false` because the pen is
    up):'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一件需要初始化的事情，那就是一个名为 `pendown` 的布尔变量，用来跟踪鼠标按钮的状态（初始为 `false`，因为画笔处于未按下状态）：
- en: '[PRE31]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'After this, the canvas (with the ID of `pad`) has its `mousemove` event intercepted
    by the anonymous function that follows, within which three sets of things happen:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在此之后，具有 ID 为 `pad` 的画布将其 `mousemove` 事件被下面的匿名函数拦截，其中发生了三组事情：
- en: '[PRE32]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: First, the `xpos` and `ypos` local variables (local because of the `var` keywords,
    although better practice these days is to use `let` in place of `var`) are assigned
    values representing the position of the mouse within the canvas area.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，`xpos` 和 `ypos` 这两个本地变量（因为使用了 `var` 关键字，虽然现在更好的做法是用 `let` 替代 `var`）被赋予了表示鼠标在画布区域内位置的值。
- en: 'These values are taken from the jQuery `pageX` and `pageY` properties, which
    refer to the mouse pointer’s offset from the top-left-hand corner of the containing
    document. Therefore, since the canvas is itself offset slightly from that location,
    the `canvas` offset values (in `offsetLeft` and `offsetTop`) are subtracted from
    `pageX` and `pageY`:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 这些值来自于 jQuery 的 `pageX` 和 `pageY` 属性，它们指的是鼠标指针相对于包含文档左上角的偏移量。因此，由于画布本身稍微偏离该位置，`canvas`
    的偏移值（在 `offsetLeft` 和 `offsetTop` 中）会从 `pageX` 和 `pageY` 中减去：
- en: '[PRE33]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Now that we know where the mouse pointer is in relation to the canvas, the
    next pair of lines tests the value of `pendown`. If it is `true`, we know that
    the mouse button is being pressed, so a `lineTo` call is made to draw a line to
    the current location. Otherwise, the pen is up, and so `moveTo` is called to simply
    update the current location:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了鼠标指针相对于画布的位置，接下来的一对行代码测试了 `pendown` 的值。如果它是 `true`，则表示鼠标按钮被按下，因此会调用 `lineTo`
    来绘制到当前位置的线条。否则，表示画笔未按下，所以会调用 `moveTo` 来简单更新当前位置：
- en: '[PRE34]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Then the `stroke` method is called to apply whichever drawing command was just
    made to the canvas. These five lines are all that is needed to handle drawing,
    but it’s still necessary to track the mouse button state, so the final two lines
    of code intercept the `mousedown` and `mouseup` events, setting `pendown` to `true`
    when the mouse button is pressed and `false` when it’s released:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 然后调用 `stroke` 方法以应用刚刚进行的任何绘图命令到画布上。这五行代码就足以处理绘图，但仍然需要跟踪鼠标按钮状态，因此代码的最后两行拦截 `mousedown`
    和 `mouseup` 事件，当鼠标按下时将 `pendown` 设置为 `true`，释放时将其设置为 `false`：
- en: '[PRE35]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: In this example, you see the combination of three different event handlers working
    together to create a simple utility, using both local variables for internal expressions
    and global variables where an object or the state of something must be made available
    across multiple functions.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，你可以看到三种不同的事件处理程序组合在一起创建了一个简单的实用程序，使用局部变量来进行内部表达式，并在需要跨多个函数可用对象或状态时使用全局变量。
- en: Other Mouse Events
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他鼠标事件
- en: The `mouseenter` and `mouseleave` events trigger whenever the mouse passes into
    an element or leaves it. No position values are supplied because the functions
    assume you simply want to make a Boolean decision about what to do when one of
    these events is triggered.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '`mouseenter` 和 `mouseleave` 事件在鼠标进入或离开元素时触发。不提供位置值，因为函数假定您只是希望在触发其中一个事件时做出布尔决策。'
- en: In [Example 22-9](#detecting_the_mouse_entering_and_leaving), a pair of anonymous
    functions is attached to these events, altering the HTML of an element accordingly,
    as shown in [Figure 22-8](#detecting_when_the_mouse_enters_and_leav).
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [示例 22-9](#detecting_the_mouse_entering_and_leaving) 中，一对匿名函数附加到这些事件上，相应地改变了元素的HTML，如
    [图 22-8](#detecting_when_the_mouse_enters_and_leav) 所示。
- en: Example 22-9\. Detecting the mouse entering and leaving an element
  id: totrans-206
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 22-9\. 检测鼠标进入和离开元素
- en: '[PRE36]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '![Detecting when the mouse enters and leaves an element](Images/pmj6_2208.png)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![检测鼠标进入和离开元素](Images/pmj6_2208.png)'
- en: Figure 22-8\. Detecting when the mouse enters and leaves an element
  id: totrans-209
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 22-8\. 检测鼠标进入和离开元素
- en: When the mouse enters the bounds of the selected element, that element’s `innerHTML`
    property is updated (with a call to `html`). Then, when the mouse leaves again,
    a further update is made to the element’s HTML.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 当鼠标进入所选元素的边界时，该元素的 `innerHTML` 属性会更新（通过调用 `html`）。然后，当鼠标再次离开时，会进一步更新元素的HTML。
- en: Alternative Mouse Methods
  id: totrans-211
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 替代鼠标方法
- en: 'A number of other jQuery mouse event functions are available to cover a wide
    range of circumstances, all of which are detailed in the [mouse events documentation](https://tinyurl.com/jquerymouse).
    For example, you can use the following alternative `mouseover` and `mouseout`
    methods to achieve similar results to the code in the preceding section:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 还有许多其他的 jQuery 鼠标事件函数可用于覆盖各种情况，所有这些都在 [鼠标事件文档](https://tinyurl.com/jquerymouse)
    中详细描述。例如，您可以使用以下替代的 `mouseover` 和 `mouseout` 方法来实现与前面章节中代码类似的结果：
- en: '[PRE37]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Or you could use the `hover` method to bind two handlers with a single function
    call, like this:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 或者您可以使用 `hover` 方法通过单个函数调用绑定两个处理程序，如下所示：
- en: '[PRE38]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'If you are planning on creating `mouseover` and `mouseout` combined effects,
    clearly the `hover` method is the logical function to choose—but there’s also
    another way you can achieve the same result, which is *chaining* (explained in
    the section [“Method chaining”](#method_chaining)), using code like this:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您计划创建 `mouseover` 和 `mouseout` 的组合效果，`hover` 方法显然是选择的逻辑函数，但也有另一种方法可以实现相同的结果，即
    *方法链*（在 [“方法链”](#method_chaining) 部分解释），使用以下代码：
- en: '[PRE39]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Here the period operator at the start of the second statement attaches it to
    the first, creating a chain of methods.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二个语句的开始处使用句点操作符将其附加到第一个语句，从而创建了一系列方法链。
- en: Note
  id: totrans-219
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: The preceding examples show how to capture mouse click, mouse movement, and
    keyboard events, and therefore they are mostly suitable for desktop environments—which
    is what jQuery is primarily targeted at. However, there is a version of jQuery
    for mobile devices that provides all the touch-handling event control you could
    wish for (and much more), called [jQuery Mobile](http://jquerymobile.com). We’ll
    take a closer look at this in the next chapter.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 上述示例展示了如何捕获鼠标点击、鼠标移动和键盘事件，因此它们大多适用于桌面环境——这是 jQuery 主要针对的。但是，jQuery 还有一个为移动设备提供所有触摸处理事件控制的版本，称为
    [jQuery Mobile](http://jquerymobile.com)。我们将在下一章中详细介绍这一点。
- en: The submit Event
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提交事件
- en: When a form is submitted, you may want to perform some error checking on the
    data entered before it gets sent to the server. One way to do this is to intercept
    the `submit` event of the form, as in [Example 22-10](#intercepting_the_submit_event_of_a_form).
    [Figure 22-9](#checking_user_input_upon_submission) shows the result of loading
    this document and then submitting the form with one or more fields left empty.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: When a form is submitted, you may want to perform some error checking on the
    data entered before it gets sent to the server. One way to do this is to intercept
    the `submit` event of the form, as in [Example 22-10](#intercepting_the_submit_event_of_a_form).
    [Figure 22-9](#checking_user_input_upon_submission) shows the result of loading
    this document and then submitting the form with one or more fields left empty.
- en: Example 22-10\. Intercepting the `submit` event of a form
  id: totrans-223
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: Example 22-10\. 拦截表单的 `submit` 事件
- en: '[PRE40]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '![Checking user input upon submission](Images/pmj6_2209.png)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![提交时检查用户输入](Images/pmj6_2209.png)'
- en: Figure 22-9\. Checking user input upon submission
  id: totrans-226
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: Figure 22-9\. 提交时检查用户输入
- en: 'The key parts of this example are where the event is attached to an anonymous
    function, like this:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 'The key parts of this example are where the event is attached to an anonymous
    function, like this:'
- en: '[PRE41]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'and where the values of the two input fields are tested for being empty:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 'and where the values of the two input fields are tested for being empty:'
- en: '[PRE42]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Here the jQuery `val` method is used to retrieve the value in the `value` property
    of each field. This is neater than using `$(''#fname'')[0]` (as in [Example 22-8](#intercepting_mouse_movement_and_mouse_ke))
    to get access to the DOM object and then appending `value` to it to read the field’s
    value, like this: `$(''#fname'')[0].value`.'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 'Here the jQuery `val` method is used to retrieve the value in the `value` property
    of each field. This is neater than using `$(''#fname'')[0]` (as in [Example 22-8](#intercepting_mouse_movement_and_mouse_ke))
    to get access to the DOM object and then appending `value` to it to read the field’s
    value, like this: `$(''#fname'')[0].value`.'
- en: In this example, by returning the value `false` if one or more fields are empty,
    the `if` test cancels the normal submission process. To enable the submission
    to proceed, you can return `true`, or just not return anything.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: In this example, by returning the value `false` if one or more fields are empty,
    the `if` test cancels the normal submission process. To enable the submission
    to proceed, you can return `true`, or just not return anything.
- en: Special Effects
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 特效
- en: jQuery really begins to come into its own when processing special effects. Although
    you can use CSS3 transitions, they are not always easy to manage dynamically from
    JavaScript—but with jQuery it really is as simple as selecting one or more elements
    and then applying one or more effects to them.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery really begins to come into its own when processing special effects. Although
    you can use CSS3 transitions, they are not always easy to manage dynamically from
    JavaScript—but with jQuery it really is as simple as selecting one or more elements
    and then applying one or more effects to them.
- en: The core effects available are hiding and showing, fading in and out, sliding,
    and animations. These can be used singly, together in synchronization, or in sequence.
    They also support the use of callbacks, which are functions or methods that get
    called only once an operation has completed.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: The core effects available are hiding and showing, fading in and out, sliding,
    and animations. These can be used singly, together in synchronization, or in sequence.
    They also support the use of callbacks, which are functions or methods that get
    called only once an operation has completed.
- en: 'The following sections describe some of the more useful jQuery effects, each
    of which supports up to three arguments, as follows:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 'The following sections describe some of the more useful jQuery effects, each
    of which supports up to three arguments, as follows:'
- en: <dfn class="keep-together">Duration</dfn>
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: <dfn class="keep-together">持续时间</dfn>
- en: When a duration value is supplied, the effect will take place over the assigned
    time, which can be a value in milliseconds or the strings `fast` or `slow`.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: When a duration value is supplied, the effect will take place over the assigned
    time, which can be a value in milliseconds or the strings `fast` or `slow`.
- en: <dfn class="keep-together">Easing</dfn>
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: <dfn class="keep-together">缓动</dfn>
- en: There are only two easing options in the jQuery library, `swing` and `linear`.
    The default is `swing`, which gives a more natural effect than `linear`. For more
    easing options, you can check out plug-ins like [jQuery UI](http://jqueryui.com/easing).
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: There are only two easing options in the jQuery library, `swing` and `linear`.
    The default is `swing`, which gives a more natural effect than `linear`. For more
    easing options, you can check out plug-ins like [jQuery UI](http://jqueryui.com/easing).
- en: <dfn class="keep-together">Callback</dfn>
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: <dfn class="keep-together">回调</dfn>
- en: If you supply a callback function, it will be called after the effect method
    completes.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: If you supply a callback function, it will be called after the effect method
    completes.
- en: This means that when no arguments are given, the method is called immediately
    without being placed in the animation queue.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: This means that when no arguments are given, the method is called immediately
    without being placed in the animation queue.
- en: 'So, for example, you can call the `hide` method in a variety of ways, such
    as these:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 'So, for example, you can call the `hide` method in a variety of ways, such
    as these:'
- en: '[PRE43]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'As you’ll see in the section [“Method chaining”](#method_chaining), you can
    attach function calls (with arguments) to each other and they will then be animated
    in turn, like in the following example, which will hide and then reveal an element:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您将在[“方法链接”](#method_chaining)部分中看到的那样，您可以将函数调用（带参数）连接在一起，它们将依次被动画化，就像以下示例中将隐藏然后显示一个元素的方式：
- en: '[PRE44]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Other less commonly used arguments are also supported by many of these methods,
    and you can get full details on them (and all the other supported effects methods)
    by visiting the [documentation on effects](http://api.jquery.com/category/effects).
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 许多这些方法还支持其他不常用的参数，并且您可以访问[effects 文档](http://api.jquery.com/category/effects)以获取所有这些方法的详细信息。
- en: Hiding and Showing
  id: totrans-249
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 隐藏和显示
- en: Probably the simplest effect is to hide and show elements in response to user
    interaction. As described in the previous section, you can provide no arguments
    or a variety of arguments to the `hide` and `show` methods. By default, when none
    are supplied, the result is to instantly hide or reveal an element.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 可能最简单的效果是根据用户交互隐藏和显示元素。正如前一节所述，您可以不提供参数或提供各种参数给 `hide` 和 `show` 方法。默认情况下，当没有参数提供时，结果是立即隐藏或显示一个元素。
- en: When arguments are supplied, these two methods modify the `width`, `height`,
    and `opacity` properties of an element simultaneously, until they reach `0` for
    `hide` or their original values for `show`. The `hide` function sets the `display`
    property of the element to `none` when it is fully hidden, and the `show` function
    reassigns its previous value to it once the element is fully restored.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 当提供了参数时，这两种方法同时修改元素的 `width`、`height` 和 `opacity` 属性，直到对于 `hide` 是达到 `0`，对于
    `show` 是达到它们的原始值。当元素完全隐藏时，`hide` 函数将元素的 `display` 属性设置为 `none`，而 `show` 函数在元素完全恢复后重新分配其先前的值。
- en: '[Example 22-11](#hiding_and_showing_an_element) lets you try `hide` and `show`
    for yourself (as shown in [Figure 22-10](#element_is_in_the_process_of_being_r)).'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 22-11](#hiding_and_showing_an_element) 允许您自己尝试 `hide` 和 `show`（如[图 22-10](#element_is_in_the_process_of_being_r)所示）。'
- en: Example 22-11\. Hiding and showing an element
  id: totrans-253
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 22-11\. 隐藏和显示一个元素
- en: '[PRE45]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '![The element is in the process of being revealed](Images/pmj6_2210.png)'
  id: totrans-255
  prefs: []
  type: TYPE_IMG
  zh: '![元素正在被显示的过程中](Images/pmj6_2210.png)'
- en: Figure 22-10\. The element is in the process of being revealed
  id: totrans-256
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 22-10\. 元素正在被显示的过程中
- en: The toggle Method
  id: totrans-257
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: toggle 方法
- en: As an alternative to calling both the `hide` and `show` methods, you can use
    the `toggle` method, which enables you to replace the previous example with [Example 22-12](#using_the_toggle_method).
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 作为调用 `hide` 和 `show` 方法的替代方法，您可以使用 `toggle` 方法，它使您可以用[示例 22-12](#using_the_toggle_method)替换前面的示例。
- en: Example 22-12\. Using the `toggle` method
  id: totrans-259
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 22-12\. 使用 `toggle` 方法
- en: '[PRE46]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: The `toggle` method takes the same arguments as `hide` and `show` but keeps
    track of the state of the element internally so that it knows whether to hide
    or show it.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '`toggle` 方法接受与 `hide` 和 `show` 相同的参数，但在内部跟踪元素的状态，以便知道是隐藏还是显示它。'
- en: Note
  id: totrans-262
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注
- en: There are four main jQuery methods that set either one state or another and
    that offer toggling versions to simplify coding. In addition to `toggle`, there’s
    `fadeToggle`, `slideToggle`, and `toggleClass`, all described in this chapter.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 有四种主要的 jQuery 方法可以设置元素的一个状态或另一个状态，并提供切换版本以简化编码。除了 `toggle` 外，还有 `fadeToggle`、`slideToggle`
    和 `toggleClass`，本章节中均有描述。
- en: Fading In and Out
  id: totrans-264
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 淡入和淡出
- en: 'Four methods manage fades: `fadeIn`, `fadeOut`, `fadeToggle`, and `fadeTo`.
    You should be getting the idea of how jQuery works by now and realize that the
    first three are similar to `show`, `hide`, and `toggle`, respectively. The last
    one, though, is a little different in that it lets you specify an opacity value
    to which an element (or elements) should be faded, between `0` and `1`.'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 四种方法管理淡入淡出：`fadeIn`、`fadeOut`、`fadeToggle` 和 `fadeTo`。到目前为止，您应该已经了解了 jQuery
    的工作原理，并且意识到前三者与 `show`、`hide` 和 `toggle` 类似。然而，最后一个有点不同，它允许您指定一个透明度值，使元素（或元素）淡入到
    `0` 和 `1` 之间。
- en: '[Example 22-13](#four_fade_methods) provides four buttons with which to try
    out each of these methods, as shown in [Figure 22-11](#text_has_been_faded_to_50_percent_op).'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 22-13](#four_fade_methods) 提供了四个按钮，用于尝试每种方法，如[图 22-11](#text_has_been_faded_to_50_percent_op)所示。'
- en: Example 22-13\. The four fade methods
  id: totrans-267
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 22-13\. 四种淡入淡出方法
- en: '[PRE47]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '![The text has been faded to 50% opacity](Images/pmj6_2211.png)'
  id: totrans-269
  prefs: []
  type: TYPE_IMG
  zh: '![文本已经淡出到 50% 的不透明度](Images/pmj6_2211.png)'
- en: Figure 22-11\. The text has been faded to 50% opacity
  id: totrans-270
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 22-11\. 文本已经淡出到 50% 的不透明度
- en: Sliding Elements Up and Down
  id: totrans-271
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 上下滑动元素
- en: 'Another way to make elements disappear and reappear is to alter their height
    over time to make them appear to slide up and down. There are three jQuery methods
    to do this: `slideDown`, `slideUp`, and `slideToggle`. They work in a similar
    way to the previous functions, as coded in [Example 22-14](#using_the_slide_methods)
    and shown in [Figure 22-12](#paragraph_is_sliding_up).'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种让元素消失和重新出现的方法是随着时间的推移改变它们的高度，使它们看起来像是向上和向下滑动。这里有三个 jQuery 方法来实现：`slideDown`、`slideUp`和`slideToggle`。它们的工作方式类似于之前的函数，如在[例子
    22-14](#using_the_slide_methods) 中编码和[图 22-12](#paragraph_is_sliding_up) 中显示的那样。
- en: Example 22-14\. Using the slide methods
  id: totrans-273
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 例子 22-14\. 使用滑动方法
- en: '[PRE48]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '![The paragraph is sliding up](Images/pmj6_2212.png)'
  id: totrans-275
  prefs: []
  type: TYPE_IMG
  zh: '![段落正在向上滑动](Images/pmj6_2212.png)'
- en: Figure 22-12\. The paragraph is sliding up
  id: totrans-276
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 22-12\. 段落正在向上滑动
- en: These methods work well when you have menus and submenus that you want to open
    up or close dynamically, according to the sections clicked by the user.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 当你想要根据用户点击的部分动态打开或关闭菜单和子菜单时，这些方法表现很好。
- en: Animations
  id: totrans-278
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动画
- en: Now we can really start to have some fun by actually moving elements around
    in the browser. To do this, though, because the default value of `static` will
    not allow them to move, you must remember to first give your elements’ `position`
    properties the values of `relative`, `fixed`, or `absolute`.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以真正开始在浏览器中移动元素，这样做的话，由于默认的 `static` 值不允许它们移动，你必须首先给你的元素的 `position` 属性赋予
    `relative`、`fixed` 或 `absolute` 的值。
- en: To animate an element, all you do is supply a list of CSS properties (excluding
    colors) to the `animate` method. Unlike the previous effects methods, `animate`
    requires this list of properties first, and then you can supply any duration,
    easing, and callback arguments you need.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 要为一个元素添加动画效果，你只需提供一个 CSS 属性列表（不包括颜色）给`animate`方法。不同于之前的效果方法，`animate`首先需要这个属性列表，然后你可以提供任何所需的持续时间、缓动和回调参数。
- en: So, for example, to animate a bouncing ball, you could use code such as that
    in [Example 22-15](#creating_a_bouncing_ball_animation) (which displays like [Figure 22-13](#ball_is_bouncing_around_in_the_brows)).
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要创建一个跳动的球动画，可以使用如下代码，就像[例子 22-15](#creating_a_bouncing_ball_animation) 中显示的那样（显示为[图
    22-13](#ball_is_bouncing_around_in_the_brows)）。
- en: Example 22-15\. Creating a bouncing ball animation
  id: totrans-282
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 例子 22-15\. 创建一个跳动的球动画
- en: '[PRE49]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '![The ball is bouncing around in the browser](Images/pmj6_2213.png)'
  id: totrans-284
  prefs: []
  type: TYPE_IMG
  zh: '![球在浏览器中跳动](Images/pmj6_2213.png)'
- en: Figure 22-13\. The ball is bouncing around in the browser
  id: totrans-285
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 22-13\. 浏览器中的球在跳动
- en: In the `<style>` section of this example, the `position` property of the ball
    is set relative to its container, which is a `<div>` element that has been given
    a border and a green background.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子的 `<style>` 部分中，球的 `position` 属性相对于其容器设置为相对定位，容器是一个带有边框和绿色背景的 `<div>` 元素。
- en: Then the `<script>` section features a function called `bounce`, which concatenates
    four calls to `animate`. Notice how the names of the properties to animate (`left`
    and `top` in this example) are supplied without quotation marks and are separated
    from the values to which they should be changed (such as `'270px'`) with colons—in
    other words, in the form of associative arrays.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在 `<script>` 部分有一个名为 `bounce` 的函数，它连接了四次 `animate` 调用。请注意，要动画化的属性名称（例如此例中的
    `left` 和 `top`）是以关联数组的形式提供的，不需要引号，并且与它们应该更改到的值（例如 `'270px'`）之间用冒号分隔。
- en: 'You can also supply relative values in place of absolute ones by using the
    `+=` and `-=` operators. So, for example, the following will animate the ball
    to the right and up by 50 pixels relative to its current position:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以通过使用`+=`和`-=`运算符提供相对值来代替绝对值。例如，以下代码将使球相对于其当前位置向右和向上移动 50 像素：
- en: '[PRE50]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'And you can even use the string values of `hide`, `show`, and `toggle` to update
    a property, like this:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 而且你甚至可以使用字符串值`hide`，`show`和`toggle`来更新属性，就像这样：
- en: '[PRE51]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Warning
  id: totrans-292
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: If you wish to modify any hyphenated CSS properties and they’re not being passed
    within quotation marks (as with `height` and `width` in the previous example),
    you must convert their names to camelCase by removing the hyphens and capitalizing
    the letter following. For example, to animate the `left-margin` property of an
    element, you would supply the name of `leftMargin`. However, when supplying a
    hyphenated property name within a string—for example, `css('font-weight', 'bold')`,
    you *shouldn’t* convert it to camelCase.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望修改任何连字符的 CSS 属性，并且它们未在引号内传递（例如在前面示例中的`height`和`width`），则必须通过删除连字符并大写后面的字母来将其名称转换为
    camelCase。例如，要动画化元素的`left-margin`属性，您应该提供`leftMargin`作为名称。然而，当在字符串内提供连字符属性名时，例如`css('font-weight',
    'bold')`，*不应*将其转换为 camelCase。
- en: Method chaining
  id: totrans-294
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 方法链
- en: Because of the way that method chaining works, when jQuery methods have been
    given arguments, they will run sequentially. So, each of these methods is called
    only after the previous one has finished animating. Any methods you call without
    arguments, however, will run immediately and quickly, without animation.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 由于方法链的工作方式，当 jQuery 方法带有参数时，它们将按顺序运行。因此，这些方法中的每一个都是在前一个动画完成后才调用的。然而，您调用的没有参数的方法将立即并快速地运行，而不会有动画效果。
- en: When you load [Example 22-15](#creating_a_bouncing_ball_animation) into a web
    browser, the animation is kicked off (so to speak) with a single call to `bounce`,
    causing the ball to bounce off the bottom, right, and top edges of its container
    and then come to rest back at the middle of the left-hand edge. Looking again
    at the `bounce` function in this example, you can see there are four chained calls
    to the `animate` function.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 当您将 [Example 22-15](#creating_a_bouncing_ball_animation) 加载到 Web 浏览器中时，动画会通过对`bounce`的单个调用（可以说）启动，导致球从其容器的底部、右侧和顶部边缘弹起，然后回到左侧边缘的中间位置。再次查看本示例中的`bounce`函数，您可以看到有四个链接调用了`animate`函数。
- en: Using callbacks
  id: totrans-297
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用回调
- en: As it stands, the preceding example stops after four animations, but you can
    use a callback function to make the animation start over again every time it completes.
    This is why I chose to place the animation in a named function.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 就目前而言，前面的示例在四个动画后停止，但您可以使用回调函数使动画在每次完成后重新开始。这就是我选择将动画放在一个命名函数中的原因。
- en: 'With the animation in the `bounce` function, it is necessary only to add that
    name as a callback to the fourth animation in the group in order to make the animation
    repeat forever, as shown in bold here:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`bounce`函数中的动画，只需将该名称作为第四个动画组的回调添加即可使动画永远重复，如下所示加粗显示：
- en: '[PRE52]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Using the `animate` method, you can animate many CSS properties, with the notable
    exception of colors. However, even color animation is possible with the addition
    of the jQuery UI add-in, which provides the facility to create very eye-pleasing
    color-changing effects (plus many more goodies). Please refer to the [jQuery UI
    page](http://jqueryui.com) for details.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`animate`方法，您可以动画化许多 CSS 属性，但颜色是一个值得注意的例外。然而，即使是颜色动画也可以通过 jQuery UI 插件的添加来实现，该插件提供了创建非常令人愉悦的颜色变化效果（以及许多其他好处）的功能。请参阅
    [jQuery UI 页面](http://jqueryui.com) 了解详情。
- en: Stopping Animations
  id: totrans-302
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 停止动画
- en: There are several methods available for cutting off animations midway through,
    or ending a chain of animations. For example, `clearQueue` can empty all stored
    animations from the queue, `stop` can immediately stop any animation currently
    in progress, and `finish` will stop the currently running animation and remove
    any that are queued.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种方法可以在动画进行中途停止或结束一系列动画。例如，`clearQueue`可以清空队列中的所有存储的动画，`stop`可以立即停止当前正在进行的任何动画，`finish`将停止当前运行的动画并移除队列中的任何动画。
- en: 'Let’s turn the previous example into a sort of game by making the ball clickable,
    such that when the click event triggers, the animation will cease. To do this,
    all that’s required is to add the following single line of code underneath the
    `bounce` function:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 将之前的示例转换为一种类似游戏的形式，通过使球可以点击，触发点击事件时动画将停止。要做到这一点，只需在`bounce`函数下面添加以下单行代码即可：
- en: '[PRE53]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: If you successfully manage to click the ball, the `finish` method will stop
    the current animation, empty the queue, and ignore any callbacks—in other words,
    the ball will come to rest.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您成功地点击了球，`finish`方法将停止当前动画，清空队列，并忽略任何回调——换句话说，球将停止在原地。
- en: For more information on managing jQuery queues, check out the [documentation
    for the `queue` method](http://api.jquery.com/queue), where you’ll also learn
    how to directly manipulate the contents of queues to get exactly the effects you
    need.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于管理jQuery队列的信息，请查看[`queue`方法的文档](http://api.jquery.com/queue)，您还将了解如何直接操作队列的内容以获得您需要的效果。
- en: Manipulating the DOM
  id: totrans-308
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作DOM
- en: Because jQuery is so tightly linked with the DOM, of necessity the examples
    in this chapter have already utilized some of its DOM-accessing methods, such
    as `html` and `val`. But let’s now look at all the DOM methods in detail to discover
    exactly what you can get access to with jQuery, and how.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 由于jQuery与DOM紧密相关，因此本章的示例已经使用了一些其DOM访问方法，如`html`和`val`。现在让我们详细看看所有的DOM方法，以了解您可以如何利用jQuery来访问它们。
- en: In [Example 22-3](#processing_an_event), you saw how to use the `html` method
    to change the `innerHTML` property of an element. This method can be used either
    to set the HTML or retrieve it from an HTML document. [Example 22-16](#displaying_the_html_of_an_element_using)
    (with the jQuery highlighted in bold) shows how to retrieve the HTML content of
    an element (as shown in [Figure 22-14](#retrieving_and_displaying_the_html_of_an)).
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 在[示例 22-3](#processing_an_event)中，您看到如何使用`html`方法更改元素的`innerHTML`属性。此方法可用于设置HTML或从HTML文档中检索HTML。[示例 22-16](#displaying_the_html_of_an_element_using)（其中使用粗体显示了jQuery）展示了如何检索元素的HTML内容（如[图 22-14](#retrieving_and_displaying_the_html_of_an)所示）。
- en: Example 22-16\. Displaying the HTML of an element using an alert window
  id: totrans-311
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例22-16\. 使用警告窗口显示元素的HTML
- en: '[PRE54]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '![Retrieving and displaying the HTML of an element](Images/pmj6_2214.png)'
  id: totrans-313
  prefs: []
  type: TYPE_IMG
  zh: '![检索和显示元素的HTML](Images/pmj6_2214.png)'
- en: Figure 22-14\. Retrieving and displaying the HTML of an element
  id: totrans-314
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图22-14\. 检索和显示元素的HTML
- en: When you issue this method without arguments, the result is to read rather than
    set the HTML of the element.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 当您调用此方法而不带参数时，结果是读取元素的HTML而不是设置它。
- en: The Difference Between the text and html Methods
  id: totrans-316
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: text和html方法的区别
- en: 'When you are working with XML documents, you cannot use the `html` method because
    it simply won’t work (it’s designed for use only with HTML). But you can use the
    `text` method to achieve a similar result (in XML or HTML documents), like this:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 当您使用XML文档时，您不能使用`html`方法，因为它根本不起作用（它仅设计用于HTML）。但是，您可以使用`text`方法来实现类似的结果（在XML或HTML文档中），如下所示：
- en: '[PRE55]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'The difference between the two is quite simply that `html` treats the content
    as HTML and `text` treats it as text. So, for example, let’s assume you wish to
    assign the following string to an element:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 这两者的区别非常简单，即`html`将内容视为HTML，而`text`将其视为文本。例如，假设您希望将以下字符串分配给一个元素：
- en: '[PRE56]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: If you assign it to an HTML element using the `html` method, the DOM will be
    updated with the new `<a>` element and the link will become clickable. But if
    you do so to either an XML or HTML document using the `text` method, that string
    will first be escaped into text (for example, by converting HTML characters such
    as `<` into the `&lt;` entity, and so on) and then inserted into the element—no
    element is added to the DOM.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用`html`方法将其分配给HTML元素，则DOM将使用新的`<a>`元素进行更新，链接将变为可点击。但是，如果您将其分配给XML或HTML文档并使用`text`方法，则该字符串将首先转义为文本（例如，通过将HTML字符如`<`转换为`&lt;`实体等），然后插入元素中——不会向DOM添加元素。
- en: The val and attr Methods
  id: totrans-322
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: val和attr方法
- en: 'There are a couple more methods for interacting with the content of elements.
    First, you can set and get the value of an input element with the `val` method,
    as illustrated in [Example 22-10](#intercepting_the_submit_event_of_a_form), in
    which the first and last name fields are read. To set a value, simply provide
    it as an argument to the method, like this:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些与元素内容交互的方法。首先，您可以使用`val`方法设置和获取输入元素的值，如[示例 22-10](#intercepting_the_submit_event_of_a_form)所示，其中读取了名字字段。要设置值，只需将其作为参数提供给该方法，如下所示：
- en: '[PRE57]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: With the `attr` method, you can get and set the attributes of elements, as shown
    in [Example 22-17](#modifying_attributes_with_the_attr_metho), in which a link
    to the Google website has been completely replaced with one to Yahoo.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`attr`方法，您可以获取和设置元素的属性，如[示例 22-17](#modifying_attributes_with_the_attr_metho)所示，其中将指向Google网站的链接完全替换为指向Yahoo的链接。
- en: Example 22-17\. Modifying attributes with the `attr` method
  id: totrans-326
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例22-17\. 使用`attr`方法修改属性
- en: '[PRE58]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: The first jQuery statement uses the `text` method to change the text inside
    the `<a>` element, and the second one changes the `href` and `title` attribute
    values to match by supplying the data in the form of an associative array. The
    third statement displays the changed element’s contents in an alert window by
    first retrieving it with the `html` method, as shown in [Figure 22-15](#link_has_now_been_completely_modifie).
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个jQuery语句使用`text`方法来更改`<a>`元素内的文本，第二个语句通过提供关联数组形式的数据来更改`href`和`title`属性值以匹配。第三个语句通过首先使用`html`方法检索更改后的元素内容，然后在警告窗口中显示它，如[图
    22-15](#link_has_now_been_completely_modifie)所示。
- en: '![The link has now been completely modified](Images/pmj6_2215.png)'
  id: totrans-329
  prefs: []
  type: TYPE_IMG
  zh: '![链接现在已完全修改](Images/pmj6_2215.png)'
- en: Figure 22-15\. The link has now been completely modified
  id: totrans-330
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 22-15\. 现在链接已完全修改
- en: 'You can also read the value of an attribute like this:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以这样读取属性的值：
- en: '[PRE59]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Adding and Removing Elements
  id: totrans-333
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加和删除元素
- en: While it is possible to insert elements into the DOM using the `html` method,
    this is suitable only for creating child elements of a particular element. Therefore,
    jQuery provides a number of methods for manipulating any part of the DOM.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然可以使用`html`方法将元素插入DOM中，但这仅适用于创建特定元素的子元素。因此，jQuery提供了许多方法来操作DOM的任何部分。
- en: These methods are `append`, `prepend`, `after`, `before`, `remove`, and `empty`.
    An example of each appears in [Example 22-18](#adding_and_removing_elements-id00113).
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法是`append`、`prepend`、`after`、`before`、`remove`和`empty`。每个示例都在[示例 22-18](#adding_and_removing_elements-id00113)中出现。
- en: Example 22-18\. Adding and removing elements
  id: totrans-336
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 22-18\. 添加和删除元素
- en: '[PRE60]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: In [Figure 22-16](#document_with_a_variety_of_different_e), you can see the
    result of applying the `prepend`, `append`, `before`, and `after` methods to some
    elements.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 在[图 22-16](#document_with_a_variety_of_different_e)中，您可以看到将`prepend`、`append`、`before`和`after`方法应用于某些元素的结果。
- en: '![A document with a variety of elements](Images/pmj6_2216.png)'
  id: totrans-339
  prefs: []
  type: TYPE_IMG
  zh: '![一个包含各种元素的文档](Images/pmj6_2216.png)'
- en: Figure 22-16\. A document with a variety of elements
  id: totrans-340
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 22-16\. 一个包含各种元素的文档
- en: 'The `prepend` method has been used to insert the string `Link:` before the
    inner text or HTML of all `<a>` elements, like this:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 已使用`prepend`方法在所有`<a>`元素的内部文本或HTML前插入字符串`Link:`，如下所示：
- en: '[PRE61]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Then an attribute selector is used to select all elements that have an `href`
    attribute starting with `http`. The string `http` appearing at the beginning of
    the URL (because of the `^=` operator) denotes links that are not relative and
    therefore are absolute. In these cases, an external link icon is appended to the
    end of the inner text or HTML of all matching elements, like this:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 然后使用属性选择器选择所有具有以`http`开头的`href`属性的元素。由于`^=`运算符，URL开头的字符串`http`表示非相对链接，因此是绝对链接。在所有匹配元素的内部文本或HTML末尾附加外部链接图标，如下所示：
- en: '[PRE62]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Note
  id: totrans-345
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: The `^=` operator is how only the start of the string is matched. If just the
    `=` operator were used, only entire strings that matched would be selected. CSS
    selectors are covered in detail in Chapters [19](ch19.xhtml#introduction_to_css)
    and [20](ch20.xhtml#advanced_css_with_css3).
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: '`^=`运算符是仅匹配字符串开头的方式。如果只使用`=`运算符，则只会选择整个匹配的字符串。有关详细的CSS选择器信息，请参见第[19](ch19.xhtml#introduction_to_css)章和第[20](ch20.xhtml#advanced_css_with_css3)章。'
- en: 'Next, using chained methods, the `before` and `after` methods are employed
    to place sibling elements either before or after another one. In this instance,
    I have chosen to place an `<hr>` element both before and after `<code>` elements,
    like this:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，使用链式方法，将`before`和`after`方法用于在另一个元素之前或之后放置同级元素。在此示例中，我选择在`<code>`元素之前和之后分别放置一个`<hr>`元素，如下所示：
- en: '[PRE63]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Then I added a little user interaction with a couple of buttons. When clicked,
    using the `remove` method, the first button removes the `<img>` element containing
    the ball, like this:'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我通过添加几个按钮增加了一些用户交互。点击时，第一个按钮使用`remove`方法移除包含球的`<img>`元素，如下所示：
- en: '[PRE64]'
  id: totrans-350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Note
  id: totrans-351
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: The image is now no longer in the DOM, which you can verify if you right-click
    and choose Inspect Element in most major desktop browsers.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在大多数主要桌面浏览器中右键单击并选择检查元素，您将会发现图片现在已不再在DOM中。
- en: 'Finally, the `empty` method is applied to the `<blockquote>` element when the
    second button is clicked, like this:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，当点击第二个按钮时，将`empty`方法应用于`<blockquote>`元素，如下所示：
- en: '[PRE65]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: This empties out the element’s contents but leaves the element in the DOM.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 这会清空元素的内容，但保留元素在DOM中。
- en: Dynamically Applying Classes
  id: totrans-356
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动态应用类
- en: 'Sometimes it can be convenient to change the class applied to an element, or
    maybe just add a class to an element or remove it from one. For example, suppose
    you have a class called `read` that you use to style blog posts that have been
    read. Using the `addClass` method, it’s a simple matter to add a class to that
    post, like this:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候改变应用于元素的类会很方便，或者只是向元素添加一个类或从一个类中删除它。例如，假设你有一个名为`read`的类，用来为已读的博客文章设置样式。使用`addClass`方法，很容易向该文章添加一个类，就像这样：
- en: '[PRE66]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'You can add more than one class at a time by separating them with spaces, like
    this:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以一次添加多个类，用空格分隔，就像这样：
- en: '[PRE67]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'But what if a reader chooses to mark a post as unread again, perhaps to be
    reminded to read it again later? In this case, all you need to do is use `removeClass`,
    like this:'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 但是如果读者选择将文章标记为未读，以便稍后再次阅读呢？在这种情况下，只需使用`removeClass`，像这样：
- en: '[PRE68]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: All other classes that the post uses remain unaffected when you do this.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 当你这样做时，文章使用的所有其他类都不受影响。
- en: 'Where you are supporting the ability of a class to be continuously added or
    removed, however, you might find it simpler to use the `toggleClass` method, like
    this:'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在支持类持续添加或删除的情况下，您可能会发现使用`toggleClass`方法更简单，像这样：
- en: '[PRE69]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: Now, if the post doesn’t already use the class, it is added; otherwise, it is
    removed.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果文章尚未使用该类，则添加它；否则，将其删除。
- en: Modifying Dimensions
  id: totrans-367
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改尺寸
- en: Working with dimensions is always a tricky web development task because different
    browsers tend to utilize slightly differing values. One of jQuery’s big strengths,
    therefore, is that it does a great job of normalizing these types of values so
    that your pages will look how you intend them to appear in all major browsers.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 处理尺寸始终是一个棘手的Web开发任务，因为不同的浏览器倾向于使用略有不同的值。因此，jQuery的一个主要优势之一是它很好地规范化这些类型的值，使得您的页面在所有主要浏览器中显示效果符合您的意图。
- en: 'There are three types of dimensions: element width and height, inner width
    and height, and outer width and height. Let’s look at these in turn.'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 有三种类型的尺寸：元素宽度和高度，内部宽度和高度，外部宽度和高度。让我们依次看看这些。
- en: The width and height Methods
  id: totrans-370
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 宽度和高度方法
- en: 'Both the `width` and `height` methods can get the width or height of the first
    element that matches a selector, or set the width or height of all matching elements.
    For example, to get the width of an element with the ID of `elem`, you could use
    this statement:'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: '`width`和`height`方法都可以获取与选择器匹配的第一个元素的宽度或高度，或者设置所有匹配元素的宽度或高度。例如，要获取ID为`elem`的元素的宽度，可以使用这个语句：'
- en: '[PRE70]'
  id: totrans-372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'The value returned to the variable `width` is a plain numeric value, which
    is different from returning the CSS value from a call to the `css` method, as
    in the following example, which would return (for example) `230px` rather than
    just the number `230`:'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 赋给变量`width`的值是一个纯数值，与调用`css`方法返回CSS值不同，例如下面的例子，将返回（例如）`230px`而不只是数字`230`：
- en: '[PRE71]'
  id: totrans-374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'You can also obtain the width of either the current window or the document,
    like this:'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以获取当前窗口或文档的宽度，如下所示：
- en: '[PRE72]'
  id: totrans-376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: Warning
  id: totrans-377
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: When you pass the `window` or `document` objects to jQuery, you cannot fetch
    their width or height with the `css` method. Instead, you must use the `width`
    or `height` methods.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 当你将`window`或`document`对象传递给jQuery时，不能使用`css`方法获取它们的宽度或高度。相反，你必须使用`width`或`height`方法。
- en: 'The value returned is independent of the `box-sizing` setting (see [Chapter 20](ch20.xhtml#advanced_css_with_css3)).
    If you need to take `box-sizing` into account, use the `css` method with an argument
    of `width` instead, like this (but remember to remove from the returned value
    the `px` that will be added after the numeric part if you intend to work with
    the values returned):'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的值与`box-sizing`设置无关（见[第 20 章](ch20.xhtml#advanced_css_with_css3)）。如果需要考虑`box-sizing`，则应使用`css`方法并传递`width`作为参数，就像这样（但记住在打算使用返回值时从数字部分后面添加的`px`中删除）：
- en: '[PRE73]'
  id: totrans-380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Setting values is just as easy. For example, to set all elements that use the
    class `box` to 100 × 100 pixels, you could use this statement:'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 设置值同样简单。例如，要将所有使用`box`类的元素设置为100×100像素，可以使用这个语句：
- en: '[PRE74]'
  id: totrans-382
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[Example 22-19](#getting_and_setting_element_dimensions) combines these actions
    into a single program that displays as [Figure 22-17](#getting_and_setting_element_dim-id00114).'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 22-19](#getting_and_setting_element_dimensions)将这些操作组合成一个单独的程序，显示为[图 22-17](#getting_and_setting_element_dim-id00114)。'
- en: Example 22-19\. Getting and setting element dimensions
  id: totrans-384
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 22-19\. 获取和设置元素尺寸
- en: '[PRE75]'
  id: totrans-385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '![Getting and setting element dimensions](Images/pmj6_2217.png)'
  id: totrans-386
  prefs: []
  type: TYPE_IMG
  zh: '![获取和设置元素尺寸](Images/pmj6_2217.png)'
- en: Figure 22-17\. Getting and setting element dimensions
  id: totrans-387
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图22-17\. 获取和设置元素尺寸
- en: 'At the start of the `<body>`, there are four buttons: three for reporting the
    widths of the document, window, and a `<div>` element that appears just below
    the buttons; and one to set the `<div>`’s width to a new value. In the `<script>`
    section, there are four jQuery statements, the first three of which simply fetch
    the widths of the objects given and then report these values by writing into the
    HTML of the `<div>`.'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 在`<body>`的开头，有四个按钮：三个用于报告文档、窗口和出现在按钮正下方的`<div>`元素的宽度；还有一个用于将`<div>`的宽度设置为新值。在`<script>`部分中，有四个jQuery语句，前三个只是获取给定对象的宽度，然后通过写入HTML到`<div>`中报告这些值。
- en: 'The final statement has two parts: the first reduces the width of the `<div>`
    element to 150 pixels, and the second displays the new width value within the
    `<div>` by fetching it using the `width` method, to ensure the computed value
    is displayed.'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 最终的语句有两个部分：第一个将`<div>`元素的宽度减少到150像素，第二个通过使用`width`方法获取并在`<div>`内显示新的宽度值，以确保显示计算出的值。
- en: Warning
  id: totrans-390
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: When the page has been zoomed (either in or out) by the user, this event is
    not noted in any major browser in any way that JavaScript can reliably detect.
    Therefore, jQuery cannot take zooming into account when it applies or returns
    dimensional values, so it is possible to get unexpected results in this circumstance.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户缩放页面（无论是放大还是缩小），这个事件在所有主要浏览器中都不能以JavaScript可靠检测到。因此，jQuery在应用或返回尺寸值时无法考虑缩放，因此在这种情况下可能会得到意外的结果。
- en: The innerWidth and innerHeight Methods
  id: totrans-392
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`innerWidth`和`innerHeight`方法'
- en: It’s often necessary to also take borders, padding, and other properties into
    account when working with dimensions. For these purposes, you can use the `innerWidth`
    and `innerHeight` methods to return the width and height of the first element
    that matches the selector, *including* the padding but *not including* any border.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理尺寸时，通常还需要考虑边框、填充和其他属性。为此，您可以使用`innerWidth`和`innerHeight`方法返回匹配选择器的第一个元素的宽度和高度，*包括*填充但*不包括*边框。
- en: 'For example, the following returns the `innerWidth` of the element with an
    ID of `elem`, including padding:'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下代码返回具有ID为`elem`的元素的`innerWidth`，包括填充：
- en: '[PRE76]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: The outerWidth and outerHeight Methods
  id: totrans-396
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`outerWidth`和`outerHeight`方法'
- en: 'To return the dimensions of an element including *both* padding and border,
    you can call the `outerWidth` and `outerHeight` methods, like this:'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 要返回包括*填充和边框*在内的元素尺寸，您可以调用`outerWidth`和`outerHeight`方法，如下所示：
- en: '[PRE77]'
  id: totrans-398
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'If you wish to *also* include any margin in the returned value, you can pass
    the value of `true` when you call either of these methods, like this:'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望*还*在返回的值中包括任何边距，可以在调用这些方法时传递`true`值，如下所示：
- en: '[PRE78]'
  id: totrans-400
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: Warning
  id: totrans-401
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: The values returned for any of the `inner...` or `outer...` methods are not
    necessarily integers and may be fractional in some cases. User page zooming is
    not detected by these methods, and you cannot use these methods on `window` or
    `document` objects—for those, use the `width` or `height` methods instead.
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何`inner...`或`outer...`方法返回的值，不一定是整数，在某些情况下可能是小数。这些方法不能检测用户页面缩放，并且不能在`window`或`document`对象上使用这些方法；对于这些对象，请使用`width`或`height`方法。
- en: DOM Traversal
  id: totrans-403
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DOM遍历
- en: 'If you refer back to the section on the Document Object Model in [Chapter 14](ch14.xhtml#exploring_javascript),
    you’ll recall that all web pages are constructed in much the same way as extended
    families. There are parent and child objects, siblings, grandparents, grandchildren,
    and even element relationships that could be referred to as cousins, aunts, and
    so forth. For example, in the following snippet, the `<li>` elements are children
    of the `<ul>` element, which, in turn, is parent to the `<li>` elements:'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您回顾一下[第14章](ch14.xhtml#exploring_javascript)中关于文档对象模型的部分，您会记得所有网页都构建得像是扩展家族。有父对象和子对象，兄弟姐妹，祖父母，孙子辈，甚至可以称为表亲，姨妈等元素关系。例如，在以下片段中，`<li>`元素是`<ul>`元素的子元素，而`<ul>`元素反过来是`<li>`元素的父元素：
- en: '[PRE79]'
  id: totrans-405
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: And, like in families, there are multiple ways you can refer to HTML elements,
    such as with absolute specifications or by starting at the window level and moving
    on down (also known as *traversing the DOM*). You can also use the relationship
    between one element and another to refer to elements. Really, it’s a matter of
    what makes sense for your particular project—for example, if you want a web page
    to be as self-contained as possible so that you have a better chance of cutting
    and pasting elements into other web documents without having to change the pasted
    HTML to match that of the destination. Whatever you choose, though, jQuery offers
    a wide range of functions to help you accurately address elements.
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在家庭中一样，你可以用多种方式引用 HTML 元素，比如通过绝对规格或者从窗口级别开始，然后往下移动（也称为*遍历 DOM*）。你还可以利用一个元素与另一个元素之间的关系来引用元素。实际上，这取决于你的具体项目——例如，如果你希望网页尽可能自包含，这样你就能更有可能将元素剪切并粘贴到其他网页文档中，而无需修改粘贴到的
    HTML 以匹配目标的 HTML。无论你选择什么，jQuery 都提供了广泛的功能来帮助你准确地处理元素。
- en: Parent Elements
  id: totrans-407
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 父元素
- en: 'To refer to an element’s direct parent, use the `parent` method like this:'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 要引用元素的直接父级，请使用以下`parent`方法：
- en: '[PRE80]'
  id: totrans-409
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: Whatever type of element `elem` may be, the `my_parent` object now contains
    a jQuery object that refers to its parent element. In fact, since selectors can
    refer to multiple elements, this call actually returns an object that refers to
    a list of parent elements (although the list can have only one item), one for
    each matching element.
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 无论`elem`是什么类型的元素，`my_parent`对象现在包含一个指向其父元素的 jQuery 对象。实际上，由于选择器可以引用多个元素，这个调用实际上返回一个指向父元素列表的对象（尽管列表可能只有一项）。
- en: 'Since a parent may have many children, you might wonder whether more elements
    can be returned by this method than there are parents. Take the preceding snippet
    with three `<li>` elements. If we do this:'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 因为父元素可能有许多子元素，所以你可能会想知道是否可以通过这种方法返回比父元素多的元素。以前面的代码片段为例，其中有三个`<li>`元素。如果我们这样做：
- en: '[PRE81]'
  id: totrans-412
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'will three parent elements be returned (because three matches will be made),
    even though there is just a single `<ul>` parent? The answer is no, because jQuery
    is smart enough to recognize all duplicates and filter them out. To verify this,
    if you ask for the number of elements returned like this, the result will be `1`:'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，由于一个父元素可能有多个子元素，你可能会想知道此方法是否会返回比父元素更多的元素。考虑前面有三个`<li>`元素的片段。如果我们这样做：
- en: '[PRE82]'
  id: totrans-414
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'Let’s now make something happen when the selector matches, such as changing
    the `font-weight` property of the parent element in the previous snippet to `bold`,
    like this:'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们在选择器匹配时执行某些操作，例如将前面代码段中父元素的`font-weight`属性更改为`bold`，如下所示：
- en: '[PRE83]'
  id: totrans-416
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: Using a filter
  id: totrans-417
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用过滤器
- en: Optionally, a selector can be passed to `parent` to filter out which of the
    parents should reflect the desired changes. To illustrate, [Example 22-20](#accessing_parent_elements)
    has three small lists and a couple of jQuery statements.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 可选地，可以向`parent`传递选择器以过滤应该反映所需更改的父级。例如，[例子 22-20](#accessing_parent_elements)
    有三个小列表和几个 jQuery 语句。
- en: Example 22-20\. Accessing parent elements
  id: totrans-419
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 22-20\. 访问父元素
- en: '[PRE84]'
  id: totrans-420
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: The three lists are all the same, except that the middle one’s `<ul>` element
    uses a class of `memo`. In the `<script>` section, the first statement applies
    a value of `bold` to the `font-weight` property of all parents of `<li>` elements.
    In this instance, it causes all the `<ul>` elements to display in bold.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 这三个列表都一样，除了中间的`<ul>`元素使用了类`memo`。在`<script>`部分，第一个语句将`font-weight`属性应用于所有`<li>`元素的父级，属性值为`bold`。在这种情况下，导致所有`<ul>`元素显示为粗体。
- en: The second statement is similar but also passes the class name `memo` to the
    parent method so that only that parent will be selected. Then the `css` method
    is called to set the `list-style-type` property of the selected list to `circle`.
    [Figure 22-18](#accessing_parent_elements_with_and_witho) shows the effect of
    these two statements.
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个语句类似，但还将类名`memo`传递给`parent`方法，以便只选择该父元素。然后调用`css`方法将所选列表的`list-style-type`属性设置为`circle`。[图 22-18](#accessing_parent_elements_with_and_witho)
    展示了这两个语句的效果。
- en: '![Accessing parent elements with and without filters](Images/pmj6_2218.png)'
  id: totrans-423
  prefs: []
  type: TYPE_IMG
  zh: '![使用和不使用过滤器访问父元素](Images/pmj6_2218.png)'
- en: Figure 22-18\. Accessing parent elements with and without filters
  id: totrans-424
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 22-18\. 使用和不使用过滤器访问父元素
- en: Selecting all ancestor elements
  id: totrans-425
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选择所有祖先元素
- en: We’ve just seen how to select direct parents of elements, but you can also select
    ancestors, all the way back to the `<html>` root element, by using the `parents`
    method. But why might you want to do this? Well, how about wanting to access the
    first `<div>` element up the ancestry chain in order to style it according to
    something dynamic that has gone on further down the chain?
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚看到如何选择元素的直接父元素，但你也可以通过使用`parents`方法选择祖先元素，一直返回到`<html>`根元素。但为什么要这样做呢？好吧，可能是想要访问祖先链中第一个`<div>`元素，以根据稍后在链中进行的某些动态操作来设置其样式？
- en: 'This type of selection may be slightly too advanced for any purpose you can
    think of right now, but you’ll be pleased it’s there when you need it, and here’s
    how you might proceed:'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 对于你现在能想到的任何目的，这种类型的选择可能稍微过于高级，但当你需要时，你会很高兴它在那里，以下是你可能要采取的步骤：
- en: '[PRE85]'
  id: totrans-428
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: Actually, that may not be exactly what you want, because it will select all
    `<div>` elements in the ancestry chain, and there may be others further up that
    you don’t want to style. So, for this type of eventuality, you can further filter
    the selection by using the `parentsUntil` method instead.
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，这可能并不完全是你想要的，因为它会选择祖先链中的所有`<div>`元素，而可能还有其他你不想样式化的元素进一步向上。因此，在这种情况下，你可以使用`parentsUntil`方法进一步过滤选择。
- en: 'The `parentsUntil` method traverses up the ancestry chain in the same way as
    `parents` but stops at the first element that matches the selection filter (in
    this case, it’s a `<div>` element), so you can use it in the same way as the preceding
    statement, certain in the knowledge that you will select only the closest matching
    element you want:'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: '`parentsUntil`方法沿着祖先链向上遍历，方式与`parents`相同，但在遇到与选择过滤器匹配的第一个元素时停止（在本例中，是一个`<div>`元素），因此可以像前述语句一样使用它，确保只选择你想要的最接近匹配的元素：'
- en: '[PRE86]'
  id: totrans-431
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: To illustrate the difference between these two methods, take a look at [Example 22-21](#using_the_parents_and_parentsuntil_metho),
    which contains two sets of nested elements, both of which are within one parent
    `<div>` element. The `<script>` section calls one example each of the `parents`
    and `parentsUntil` methods.
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 要说明这两种方法的区别，请查看[示例 22-21](#using_the_parents_and_parentsuntil_metho)，其中包含两组嵌套元素，都位于一个父`<div>`元素内。`<script>`部分调用了`parents`和`parentsUntil`方法的一个示例。
- en: Example 22-21\. Using the `parents` and `parentsUntil` methods
  id: totrans-433
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 22-21\. 使用`parents`和`parentsUntil`方法
- en: '[PRE87]'
  id: totrans-434
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: If you take a look at [Figure 22-19](#comparing_the_parents_and_parentsuntil_m),
    you’ll see that the first jQuery statement has set the background color of all
    the contents to yellow. This is because the ancestry tree has been traversed all
    the way up to the `<html>` element using the `parents` method, and both `<div>`
    elements encountered on the way up the tree have been selected (the one containing
    the list with the `<li>` element—highlighted in bold—with the ID of `elem` *and*
    its parent `<div>`, which contains both sets of nested elements).
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看一下[图 22-19](#comparing_the_parents_and_parentsuntil_m)，你会发现第一个jQuery语句设置了所有内容的背景颜色为黄色。这是因为祖先树已经通过`parents`方法遍历到`<html>`元素，同时选择了在树向上遍历过程中遇到的两个`<div>`元素（其中一个包含具有`elem`
    ID的`<li>`元素—以粗体显示—及其父`<div>`，它包含两组嵌套元素）。
- en: '![Comparing the parents and parentsUntil methods](Images/pmj6_2219.png)'
  id: totrans-436
  prefs: []
  type: TYPE_IMG
  zh: '![比较`parents`和`parentsUntil`方法](Images/pmj6_2219.png)'
- en: Figure 22-19\. Comparing the `parents` and `parentsUntil` methods
  id: totrans-437
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 22-19\. 比较`parents`和`parentsUntil`方法
- en: However, the second statement uses `parentsUntil` so that the selection stops
    at the first `<div>` element encountered. This means that when the underline styling
    is applied, it is applied only to the closest parent `<div>` that contains the
    `<li>` element with the ID of `elem`. The outer `<div>` is not reached, and because
    it doesn’t get styled, the second list isn’t underlined.
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，第二个语句使用了`parentsUntil`，使得选择在遇到第一个`<div>`元素时停止。这意味着当应用下划线样式时，它仅适用于包含具有`elem`
    ID的`<li>`元素的最近的父`<div>`。外部的`<div>`没有被达到，因为它没有被样式化，所以第二个列表没有被下划线标记。
- en: Child Elements
  id: totrans-439
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 子元素
- en: 'To access the children of an element, use the `children` method, like this:'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问元素的子元素，请使用`children`方法，如下所示：
- en: '[PRE88]'
  id: totrans-441
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'Like the `parent` method, this goes down only one level and returns a list
    of zero, one, or more matching selections. You can also pass a filter argument
    to it to select between the children, like this:'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 像`parent`方法一样，这只下降一级并返回零、一个或多个匹配选择的列表。你也可以向它传递一个过滤器参数来选择子元素，如下所示：
- en: '[PRE89]'
  id: totrans-443
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: Here, only children that are `<li>` elements will be selected.
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，只会选择作为`<li>`元素的子元素的子元素。
- en: 'To delve deeper down the generations, you need to use the `find` method, which
    is the inverse of `parents`, like this:'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 要深入到后代中，你需要使用`find`方法，它是`parents`的反向操作，就像这样：
- en: '[PRE90]'
  id: totrans-446
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'However, unlike with `parents`, you *must* provide a filter selector to the
    `find` method. If you need to select all descendants, you can use the universal
    selector, like this:'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，与`parents`不同，你*必须*为`find`方法提供一个过滤选择器。如果你需要选择所有后代元素，你可以使用通用选择器，就像这样：
- en: '[PRE91]'
  id: totrans-448
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: Sibling Elements
  id: totrans-449
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 兄弟元素
- en: When it comes to selecting siblings, there’s an even wider range of methods
    available, starting with `siblings`.
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择兄弟元素时，有更广泛的方法可用，从`siblings`开始。
- en: 'The `siblings` method will return all the matching elements that are children
    of the same parent, *except* for the element used for selecting. So, taking the
    example of the following snippet, if you look up the siblings of the `<li>` element
    with the ID of `two`, it will return only the first and third `<li>` elements:'
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: '`siblings`方法将返回所有符合条件的元素，这些元素是同一父元素的子元素，*除了*用于选择的元素。因此，以以下片段的示例来说，如果你查找具有ID为`two`的`<li>`元素的兄弟元素，它将仅返回第一个和第三个`<li>`元素：'
- en: '[PRE92]'
  id: totrans-452
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'For example, the following statement will cause the first and third sibling
    elements to be bold:'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下语句将导致第一个和第三个兄弟元素加粗：
- en: '[PRE93]'
  id: totrans-454
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'You can also use a filter in the `siblings` method to further narrow down the
    siblings returned. For example, to select only those siblings that use the class
    `new`, you might use a statement such as this:'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以在`siblings`方法中使用过滤器来进一步缩小返回的兄弟元素。例如，要仅选择使用类`new`的兄弟元素，可以使用如下语句：
- en: '[PRE94]'
  id: totrans-456
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[Example 22-22](#selecting_and_filtering_sibling_elements) (liberally whitespaced
    to line up the attributes in columns) displays an unordered list of seven items,
    of which four use the class `new`. The second item also has the ID of `two`.'
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 22-22](#selecting_and_filtering_sibling_elements)（自由地在属性列中对齐空格）显示了一个包含七个项目的无序列表，其中四个使用了类`new`。第二个项目还具有ID为`two`。'
- en: Example 22-22\. Selecting and filtering sibling elements
  id: totrans-458
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 22-22\. 选择和过滤兄弟元素
- en: '[PRE95]'
  id: totrans-459
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: When loaded into a browser, the jQuery statement results in [Figure 22-20](#selecting_sibling_elements),
    in which only Item 1, Item 4, and Item 5 are in bold, even though Item 2 also
    uses the class `new` (because the method is called on that element, and so it
    is excluded from the selection).
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 当加载到浏览器中时，jQuery语句的结果是[图 22-20](#selecting_sibling_elements)，其中只有项目1、项目4和项目5是加粗的，尽管项目2也使用了类`new`（因为该方法是在该元素上调用的，因此它被排除在选择范围之外）。
- en: '![Selecting sibling elements](Images/pmj6_2220.png)'
  id: totrans-461
  prefs: []
  type: TYPE_IMG
  zh: '![选择兄弟元素](Images/pmj6_2220.png)'
- en: Figure 22-20\. Selecting sibling elements
  id: totrans-462
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 22-20\. 选择兄弟元素
- en: Note
  id: totrans-463
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: 'Since the `siblings` method omits the element on which it is called (which
    I will refer to as the *callee*), it cannot be used to select from *all* children
    of a parent element. However, to achieve that with the preceding example, you
    could use a statement such as the following, which will return all siblings (including
    the callee) that use the class `new`:'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`siblings`方法省略了其调用元素（我将其称为*调用方*），它无法用于从父元素的*所有*子元素中进行选择。但是，要使用前面的示例来实现这一点，你可以使用如下语句，它将返回所有使用类`new`的兄弟元素（包括调用方）：
- en: '[PRE96]'
  id: totrans-465
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: 'You can alternatively add the `addBack` method to the selection to achieve
    the same result, like this:'
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以通过在选择中添加`addBack`方法来实现相同的结果，就像这样：
- en: '[PRE97]'
  id: totrans-467
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: Selecting the Next and Previous Elements
  id: totrans-468
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择下一个和上一个元素
- en: 'When you need finer control over the selection of siblings, you can further
    narrow down the elements returned using the `next` and `prev` methods and their
    extended versions. For example, to refer to the element immediately following
    a selector, you can use a statement such as this (which sets the matched element(s)
    to display in bold):'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 当你需要更精细地控制兄弟元素的选择时，可以进一步使用`next`和`prev`方法及其扩展版本来缩小返回的元素。例如，要引用选择器后面紧接的元素，可以使用如下语句（将匹配的元素设置为加粗显示）：
- en: '[PRE98]'
  id: totrans-470
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: 'In the case of the following liberally whitespaced snippet, for example, the
    third item has the ID `new`, and therefore the fourth item is returned:'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下自由地排列的片段中，例如，第三个项目具有ID `new`，因此第四个项目被返回：
- en: '[PRE99]'
  id: totrans-472
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: 'So far, so simple. But what if you would like to reference *all* the siblings
    following a particular element? Well, you can do that with the `nextAll` method,
    like this (which in the preceding snippet would style the last two items):'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，一切都很简单。但是，如果您想引用特定元素之后的*所有*兄弟元素怎么办？好吧，您可以使用`nextAll`方法来做到这一点，像这样（在前面的代码片段中，这将样式化最后两个项目）：
- en: '[PRE100]'
  id: totrans-474
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: 'When calling `nextAll`, you can also supply a filter to select from the elements
    that are matched, such as in the following example, which will style only the
    following siblings that use the class `info` (in the previous snippet, however,
    there are no elements that use that class, so the statement will do nothing):'
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 在调用`nextAll`时，您还可以提供一个过滤器来从匹配的元素中选择，例如下面的示例，它将仅样式化使用`info`类的后续兄弟元素（然而，在前面的代码片段中，没有使用该类的元素，因此该语句不会执行任何操作）：
- en: '[PRE101]'
  id: totrans-476
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: 'Or consider the case of this snippet, in which one item has the ID `new` and
    another has the ID `old`:'
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: 或者考虑这种情况，其中一个项目具有ID`new`，另一个项目具有ID`old`：
- en: '[PRE102]'
  id: totrans-478
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: 'Now it’s possible to select only those siblings following the one with the
    ID of `new`, up to (but not including) the one with the ID of `old`, like this
    (in which just the third item will be styled):'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以选择仅跟随具有ID为`new`的元素的那些兄弟元素，直到（但不包括）具有ID为`old`的元素，像这样（其中只会样式化第三个项目）：
- en: '[PRE103]'
  id: totrans-480
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: 'If no argument is supplied to `nextUntil`, it behaves exactly like `nextAll`,
    returning all the following siblings. You can also supply a second argument to
    `nextUntil` to act as a filter for selecting from the elements that are matched
    by it, like this:'
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 如果未向`nextUntil`提供参数，它的行为与`nextAll`完全相同，返回所有后续兄弟元素。您还可以向`nextUntil`提供第二个参数，以充当选择匹配元素的过滤器，例如：
- en: '[PRE104]'
  id: totrans-482
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: In this statement, only those elements that use the class `info` will be styled,
    which in the case of the preceding snippet is none of them, so no action will
    be taken.
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 在此语句中，仅会对使用`info`类的那些元素应用样式，但在前面的代码片段中，没有使用这些类的元素，因此不会采取任何操作。
- en: You can do exactly the same, working backward through groups of siblings, by
    using the `prev`, `prevAll`, and `prevUntil` methods.
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以通过使用`prev`、`prevAll`和`prevUntil`方法向后反向工作，遍历组的兄弟元素。
- en: Traversing jQuery Selections
  id: totrans-485
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 遍历jQuery选择
- en: In addition to traversing the DOM, once you have returned a set of elements
    as a jQuery selection you can also traverse those elements, choosing which ones
    to act on.
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: 除了遍历DOM，一旦您将一组元素作为jQuery选择返回，还可以遍历这些元素，并选择要对其进行操作的元素。
- en: 'For example, to style just the first element returned by a selection, you can
    use the `first` method, like this (to set the first list item in the first unordered
    list to display underlined):'
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要仅对选择返回的第一个元素应用样式，您可以使用`first`方法，像这样（将第一个无序列表中的第一个列表项设置为显示下划线）：
- en: '[PRE105]'
  id: totrans-488
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: 'Or you can choose to style only the last item by using the `last` method, like
    this:'
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: 或者您可以选择仅使用`last`方法样式化最后一项，像这样：
- en: '[PRE106]'
  id: totrans-490
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: 'Or, to access an element by index (starting from 0), you can use the `eq` method,
    like this (which styles the second item in the list, because numbering starts
    at 0):'
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，要按索引访问一个元素（从0开始），可以使用`eq`方法，像这样（它会样式化列表中的第二个项目，因为编号从0开始）：
- en: '[PRE107]'
  id: totrans-492
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: 'You can also apply a filter to a selection using the `filter` method, like
    this (which changes the background color of every other element starting with
    the first, element 0):'
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用`filter`方法对选择应用过滤器，像这样（更改从第一个元素开始的每个其他元素的背景颜色，元素0）：
- en: '[PRE108]'
  id: totrans-494
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: Warning
  id: totrans-495
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: Remember that when you are indexing into jQuery selections, the first element
    is the zeroth. So, for example, when you use the selector `:even` in this manner,
    elements 1, 3, 5, and so on will be selected (not 0, 2, 4, 6, etc.).
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，当您对jQuery选择进行索引时，第一个元素是零。因此，例如，在此方式中使用选择器`:even`时，将选择元素1、3、5等（而不是0、2、4、6等）。
- en: 'To exclude one or more elements, you can apply the `not` method, like this
    (where elements that *don’t* use the ID `new` are styled in blue):'
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: 要排除一个或多个元素，可以应用`not`方法，像这样（其中不使用ID`new`的元素以蓝色样式显示）：
- en: '[PRE109]'
  id: totrans-498
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: 'You can also select an element depending on what descendants it has. To select
    only elements that have descendant `<ol>` elements, for example, you could use
    this statement to place a line through those that match:'
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以根据它具有哪些后代来选择元素。例如，要仅选择具有后代`<ol>`元素的元素，您可以使用此语句来为匹配的元素添加一条删除线：
- en: '[PRE110]'
  id: totrans-500
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '[Example 22-23](#traversing_a_jquery_selection) brings all these together to
    style an unordered list, one of whose elements also contains an ordered list.'
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 22-23](#traversing_a_jquery_selection) 将所有这些内容合并起来，以样式化一个无序列表，其中一个元素还包含一个有序列表。'
- en: Example 22-23\. Traversing a jQuery selection
  id: totrans-502
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 22-23\. 遍历jQuery选择
- en: '[PRE111]'
  id: totrans-503
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: As you will see from studying [Figure 22-21](#uniquely_addressing_elements_in_a_jquery),
    every element in each list has been styled by one or more of the jQuery statements.
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: 从学习[图 22-21](#uniquely_addressing_elements_in_a_jquery)可以看出，每个列表中的每个元素都被一个或多个jQuery语句所样式化。
- en: '![Uniquely addressing elements in a jQuery selection](Images/pmj6_2221.png)'
  id: totrans-505
  prefs: []
  type: TYPE_IMG
  zh: '![在jQuery选择中唯一定位元素](Images/pmj6_2221.png)'
- en: Figure 22-21\. Uniquely addressing elements in a jQuery selection
  id: totrans-506
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 22-21\. 在jQuery选择中唯一定位元素
- en: The is Method
  id: totrans-507
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: is方法
- en: 'There is also a jQuery selector that returns a Boolean value for use in plain
    JavaScript: the `is` method. Unlike the jQuery filtering methods shown in earlier
    sections, this function doesn’t create a new jQuery object that can then have
    other methods appended to it, or that can then be further filtered. Instead, it
    returns just `true` or `false`, making the method most suitable for use in conditional
    statements.'
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个jQuery选择器，返回用于在普通JavaScript中使用的布尔值：`is`方法。与前面部分展示的jQuery过滤方法不同，此函数不会创建一个新的jQuery对象，然后可以附加其他方法，或者可以进一步过滤。相反，它只返回`true`或`false`，使该方法最适合在条件语句中使用。
- en: '[Example 22-24](#reporting_the_parent_element_with_is) uses the `is` method
    attached to a call to `parent` in an event handler for a set of buttons. When
    any button is clicked, the handler is called, and the `is` method returns a value
    of `true` or `false` when asked whether the parent element is a `<div>` ([Figure 22-22](#using_the_is_method_to_report_the_parent)).'
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 22-24](#reporting_the_parent_element_with_is)使用`is`方法附加到对按钮集的事件处理程序中的`parent`调用。当单击任何按钮时，调用处理程序，`is`方法返回一个值，询问其父元素是否为`<div>`（[图 22-22](#using_the_is_method_to_report_the_parent)）。'
- en: Example 22-24\. Reporting the `parent` element with `is`
  id: totrans-510
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 22-24\. 使用`is`报告`parent`元素
- en: '[PRE112]'
  id: totrans-511
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '![Using the is method to report the parent element](Images/pmj6_2222.png)'
  id: totrans-512
  prefs: []
  type: TYPE_IMG
  zh: '![使用is方法报告parent元素](Images/pmj6_2222.png)'
- en: Figure 22-22\. Using the `is` method to report the `parent` element
  id: totrans-513
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 22-22\. 使用`is`方法报告`parent`元素
- en: Using jQuery Without Selectors
  id: totrans-514
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不使用选择器的jQuery
- en: A couple of jQuery methods are provided for use with standard JavaScript objects,
    rendering their handling a lot simpler. These are `$.each` and `$.map`, which
    are similar but have subtle differences.
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: 提供了一些用于与标准JavaScript对象一起使用的jQuery方法，使其处理变得更加简单。这些方法包括`$.each`和`$.map`，它们类似但有微妙的区别。
- en: The $.each Method
  id: totrans-516
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: $.each方法
- en: Using `$.each`, you can iterate through arrays or array-like objects by simply
    attaching a function to be called for each iteration. [Example 22-25](#calling_the_each_method)
    shows an array of pet names and types (called `pets`), from which another array
    (called `guineapigs`) needs to be extracted, containing only the names of the
    guinea pigs.
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`$.each`，可以通过简单地附加一个用于每次迭代调用的函数来迭代数组或类数组对象。[示例 22-25](#calling_the_each_method)展示了一个宠物名字和类型的数组（称为`pets`），从中需要提取另一个数组（称为`guineapigs`），其中只包含豚鼠的名字。
- en: Example 22-25\. Calling the `$.each` method
  id: totrans-518
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 22-25\. 调用`$.each`方法
- en: '[PRE113]'
  id: totrans-519
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: To do this, the `$.each` method is passed the array, along with an anonymous
    function to process it. The function takes two arguments, the index into the array
    (called `name`) and the contents of each element (called `type`).
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，`$.each`方法将数组传递给一个匿名函数来处理。该函数接受两个参数，数组的索引（称为`name`）和每个元素的内容（称为`type`）。
- en: 'The value in `type` is then tested to see whether it is `Guinea Pig`, and if
    so, the value in `name` is pushed onto the `guineapigs` array. Upon completion,
    the code displays the contents of the `guineapigs` array by writing them into
    the `<div>` element with the ID of `info`. To separate the items in the array,
    the JavaScript `join` method is used with the `&` symbol as a separator. The result
    of loading this example into a browser is simply to display the text “The guinea
    pig names are: Scratchy & Squeaky.”'
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: '然后测试`type`的值是否为`Guinea Pig`，如果是，则将`name`的值推入`guineapigs`数组。完成后，代码将`guineapigs`数组的内容显示在ID为`info`的`<div>`元素中。为了分隔数组中的项目，使用JavaScript的`join`方法，以`&`符号作为分隔符。加载此示例到浏览器中的结果就是显示文本“The
    guinea pig names are: Scratchy & Squeaky.”。'
- en: The $.map Method
  id: totrans-522
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: $.map方法
- en: Another way to achieve this is with the `$.map` method, which returns all the
    values that your function returns in an array.
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是使用`$.map`方法，它返回函数在数组中返回的所有值组成的数组。
- en: 'This function saves you the trouble of creating an array, as we had to in the
    preceding example. Instead, you can create and populate the array at the same
    time, by assigning the array returned by `$.map` to a variable, like this (the
    end result being the same but with less code):'
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数可以帮助您省去创建数组的麻烦，正如我们在前面的示例中所做的那样。相反，您可以通过将 `$.map` 返回的数组分配给一个变量来同时创建和填充数组，就像这样（最终结果相同但代码更少）：
- en: '[PRE114]'
  id: totrans-525
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: Warning
  id: totrans-526
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: Watch out when you change between using the `$.each` and `$.map` methods, because
    `$.each` passes arguments to the function in the order *index*, *value*, but map
    uses the order *value*, *index*. This is why the two arguments are swapped in
    the preceding `$.map` example.
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: 当您在使用 `$.each` 和 `$.map` 方法之间切换时，请注意，因为 `$.each` 将参数按顺序传递给函数，顺序是 *index*、*value*，但是
    `$.map` 使用的顺序是 *value*、*index*。这就是为什么在前面的 `$.map` 示例中这两个参数被交换的原因。
- en: Using Asynchronous Communication
  id: totrans-528
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用异步通信
- en: In [Chapter 18](ch18.xhtml#using_ajax), I showed in detail how to implement
    asynchronous communications between JavaScript in a browser and PHP running on
    a web server. I also provided some handy and compact functions you can call to
    simplify the process.
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [第 18 章](ch18.xhtml#using_ajax) 中，我详细介绍了如何在浏览器中的 JavaScript 和运行在 Web 服务器上的
    PHP 之间实现异步通信。我还提供了一些方便和紧凑的函数，您可以调用它们来简化这个过程。
- en: But if you have jQuery loaded, you can use its asynchronous functionality instead,
    if you prefer—it works in a very similar way, in that you choose whether to make
    a POST or a GET request and then take it from there.
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果加载了 jQuery，您可以选择使用其异步功能，它的工作方式非常相似，您可以选择是使用 POST 还是 GET 请求，然后继续进行操作。
- en: Using the POST Method
  id: totrans-531
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 POST 方法
- en: '[Example 22-26](#sending_a_post_ajax_request) (which loads the Amazon Mobile
    website into a `<div>` element) is the direct jQuery equivalent to [Example 18-1](ch18.xhtml#urlpostdothtml),
    but since all the asynchronous communication–handling code is tidied away in the
    jQuery library file, it’s much shorter. It requires just a single call to the
    `$.post` method, passing it the following three items:'
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 22-26](#sending_a_post_ajax_request)（将亚马逊移动网站加载到 `<div>` 元素中）是 [示例 18-1](ch18.xhtml#urlpostdothtml)
    的直接 jQuery 等效物，但由于所有异步通信处理代码都被整理到了 jQuery 库文件中，所以代码更简洁。只需调用 `$.post` 方法一次，并传递以下三个项目： '
- en: The URL of a PHP program on the server to access
  id: totrans-533
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于访问服务器上 PHP 程序的 URL
- en: The data to pass to that URL
  id: totrans-534
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要传递到该 URL 的数据
- en: An anonymous function to process the returned data
  id: totrans-535
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于处理返回数据的匿名函数
- en: Example 22-26\. Sending a POST asynchronous request
  id: totrans-536
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 22-26\. 发送一个异步 POST 请求
- en: '[PRE115]'
  id: totrans-537
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: The *urlpost.php* program remains unchanged from [Example 18-2](ch18.xhtml#urlpostdotphp),
    because this example and [Example 18-1](ch18.xhtml#urlpostdothtml) are interchangeable.
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: '*urlpost.php* 程序与 [示例 18-2](ch18.xhtml#urlpostdotphp) 没有改变，因为这个示例和 [示例 18-1](ch18.xhtml#urlpostdothtml)
    可以互换使用。'
- en: Using the GET Method
  id: totrans-539
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 GET 方法
- en: 'Communicating asynchronously using the GET method is just as easy, requiring
    only the following two arguments:'
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 GET 方法进行异步通信同样很简单，只需要以下两个参数：
- en: The URL of a PHP program on the server to access (including a query string containing
    the data to pass to it)
  id: totrans-541
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于访问服务器上 PHP 程序的 URL（包括包含要传递给它的数据的查询字符串）
- en: An anonymous function to process the returned data
  id: totrans-542
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于处理返回数据的匿名函数
- en: '[Example 22-27](#sending_a_get_ajax_request) is therefore the jQuery equivalent
    to [Example 18-3](ch18.xhtml#urlgetdothtml).'
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 22-27](#sending_a_get_ajax_request) 因此是 [示例 18-3](ch18.xhtml#urlgetdothtml)
    的 jQuery 等效物。'
- en: Example 22-27\. Sending a GET asynchronous request
  id: totrans-544
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 22-27\. 发送一个异步 GET 请求
- en: '[PRE116]'
  id: totrans-545
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: The *urlget.php* program remains unchanged from [Example 18-4](ch18.xhtml#urlgetdotphp),
    because this example and [Example 18-3](ch18.xhtml#urlgetdothtml) are interchangeable.
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: '*urlget.php* 程序与 [示例 18-4](ch18.xhtml#urlgetdotphp) 没有改变，因为这个示例和 [示例 18-3](ch18.xhtml#urlgetdothtml)
    可以互换使用。'
- en: Warning
  id: totrans-547
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: Remember that the security restrictions of asynchronous communication require
    that the communication takes place with the same server that supplied the main
    web document. You must also use a web server for asynchronous communication, *not*
    a local filesystem. These examples are therefore best tested with a production
    or development server, as described in [Chapter 2](ch02.xhtml#setting_up_a_development_server).
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，异步通信的安全限制要求通信必须在提供主 Web 文档的同一服务器上进行。您还必须使用 Web 服务器进行异步通信，*而不是* 使用本地文件系统。因此，建议使用生产或开发服务器来测试这些示例，正如
    [第 2 章](ch02.xhtml#setting_up_a_development_server) 中所描述的那样。
- en: Plug-ins
  id: totrans-549
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 插件
- en: There’s room in this chapter to cover only the core jQuery library, and while
    that’s more than enough for a beginner to accomplish a lot, the time will come
    when you’ll find you need even more features and functionality. Thankfully, other
    jQuery projects can help you there, because a range of official and third-party
    plug-ins are now available to provide just about any features you can imagine.
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: 本章只涵盖了核心jQuery库的内容，对于初学者来说已经足够完成很多任务，但总有一天您会发现需要更多功能和功能。幸运的是，现在已经有了许多官方和第三方jQuery项目可供选择，以提供几乎您能想象到的任何功能。
- en: jQuery User Interface
  id: totrans-551
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jQuery用户界面
- en: First, there’s the jQuery User Interface plug-in, known as [jQuery UI](http://jqueryui.com),
    which takes over directly where jQuery leaves off. With it, you can add dragging
    and dropping, resizing, and sorting methods to your web pages, as well as more
    animations and effects, animated color transitions, and more easing effects. It
    also provides a bunch of widgets to create menus and other features such as accordions,
    buttons, pickers, progress bars, sliders, spinners, tabs, tooltips, and much more.
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，有一个jQuery用户界面插件，称为[jQuery UI](http://jqueryui.com)，它直接延续了jQuery的功能。使用它，您可以为网页添加拖放、调整大小和排序方法，以及更多动画效果、动态颜色过渡和更多缓动效果。它还提供了许多小部件，用于创建菜单和其他功能，如手风琴、按钮、选择器、进度条、滑块、微调器、选项卡、工具提示等等。
- en: If you want to see some demos before deciding whether to download it, check
    out the [jQuery UI Demos page](http://jqueryui.com/demos).
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想在决定下载之前看一些演示，请查看[jQuery UI演示页面](http://jqueryui.com/demos)。
- en: The whole package is under 400 KB zipped and is usable with almost no restrictions
    (just the very generous MIT license).
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: 整个包压缩后不到400 KB，并且几乎没有任何限制（仅限非常慷慨的MIT许可证）。
- en: Other Plug-ins
  id: totrans-555
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他插件
- en: The [jQuery Plugin Registry](http://plugins.jquery.com) brings together a wide
    variety of free, ready-made plug-ins to jQuery from numerous developers. These
    include plug-ins for form handling and verification, slideshows, responsive layout,
    image manipulation, additional animations, and much more.
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: '[jQuery插件注册表](http://plugins.jquery.com)汇集了来自众多开发者的各种免费即用的jQuery插件。这些包括用于表单处理和验证、幻灯片放映、响应式布局、图像处理、附加动画等等。'
- en: Note
  id: totrans-557
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: If you are using jQuery and developing for mobile browsers, you will also want
    to take a look at jQuery Mobile (see [Chapter 23](ch23.xhtml#introduction_to_jquery_mobile)),
    which offers sophisticated, touch-optimized ways to navigate the wide range of
    different types of mobile hardware and software to provide the best possible user
    experience.
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在使用jQuery并开发移动浏览器，您还需要查看jQuery Mobile（见[第23章](ch23.xhtml#introduction_to_jquery_mobile)），它提供了针对不同类型移动硬件和软件的先进的触摸优化导航方式，以提供最佳的用户体验。
- en: You’ve come a long way in this chapter, learning material that sometimes takes
    up entire books. I hope you’ve found everything clear, though, because jQuery
    is very easy to learn and use. If you need any other information, check out the
    [jQuery website](http://jquery.com).
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，您学习了有时占据整本书的内容。我希望您觉得一切都很清晰，因为jQuery非常容易学习和使用。如果您需要其他信息，请查看[jQuery网站](http://jquery.com)。
- en: Questions
  id: totrans-560
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is the symbol commonly used as the factory method for creating jQuery objects,
    and what is the alternative method name?
  id: totrans-561
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用作创建jQuery对象的工厂方法的常用符号是什么，替代方法名称是什么？
- en: How would you link to the minified release 3.5.1 of jQuery from the Google CDN?
  id: totrans-562
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您如何链接到Google CDN上的jQuery最小化版本3.5.1发布版？
- en: What types of argument does the jQuery factory method accept?
  id: totrans-563
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: jQuery工厂方法接受哪些类型的参数？
- en: With which jQuery method can you get or set a CSS property value?
  id: totrans-564
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用哪个jQuery方法可以获取或设置CSS属性值？
- en: What statement would you use to attach a method to the click event of an element
    with the ID of `elem`, to make it slowly hide?
  id: totrans-565
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您会使用哪个语句将方法附加到具有ID为`elem`的元素的点击事件上，以使其慢慢隐藏？
- en: What element property must you modify in order to allow it to be animated, and
    what are the acceptable values?
  id: totrans-566
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在动画中，必须修改哪个元素属性才能使其可以被动画化，并且可以接受哪些值？
- en: How can you cause several methods to run at once (or sequentially, in the case
    of animations)?
  id: totrans-567
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何使多个方法同时运行（或在动画中按顺序运行）？
- en: How can you retrieve an element node object from a jQuery selection object?
  id: totrans-568
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何从jQuery选择对象中检索元素节点对象？
- en: What statement would set the sibling element immediately preceding one with
    the ID of `news` to display in bold?
  id: totrans-569
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个语句会将具有ID为`news`的元素节点之前的兄弟元素设置为粗体显示？
- en: With which method can you make a jQuery asynchronous GET request?
  id: totrans-570
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以使用哪种方法进行jQuery异步GET请求？
- en: See [“Chapter 22 Answers”](app01_split_021.xhtml#chapter_22_answers) in the
    [Appendix A](app01_split_000.xhtml#solutions_to_the_chapter_questions) for the
    answers to these questions.
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: 查看[“第22章答案”](app01_split_021.xhtml#chapter_22_answers)，获取这些问题的答案。
