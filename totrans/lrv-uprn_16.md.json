["```php\nphp artisan make:job CrunchReports\n```", "```php\n<?php\n\nnamespace App\\Jobs;\n\nuse Illuminate\\Bus\\Queueable;\nuse Illuminate\\Contracts\\Queue\\ShouldBeUnique;\nuse Illuminate\\Contracts\\Queue\\ShouldQueue;\nuse Illuminate\\Foundation\\Bus\\Dispatchable;\nuse Illuminate\\Queue\\InteractsWithQueue;\nuse Illuminate\\Queue\\SerializesModels;\n\nclass CrunchReports implements ShouldQueue\n{\n    use Dispatchable, InteractsWithQueue, Queueable, SerializesModels;\n\n    /**\n * Create a new job instance.\n */\n    public function __construct()\n    {\n        //\n    }\n\n    /**\n * Execute the job.\n */\n    public function handle(): void\n    {\n        //\n    }\n}\n```", "```php\n...\nuse App\\ReportGenerator;\n\nclass CrunchReports implements ShouldQueue\n{\n    use Dispatchable, InteractsWithQueue, Queueable, SerializesModels;\n\n    protected $user;\n\n    public function __construct($user)\n    {\n        $this->user = $user;\n    }\n\n    public function handle(ReportGenerator $generator): void\n    {\n        $generator->generateReportsForUser($this->user);\n\n        Log::info('Generated reports.');\n    }\n}\n```", "```php\n$user = auth()->user();\n$daysToCrunch = 7;\n\\App\\Jobs\\CrunchReports::dispatch($user, $daysToCrunch);\n```", "```php\nDoThingJob::dispatch()->onConnection('redis');\n```", "```php\nDoThingJob::dispatch()->onQueue('high');\n```", "```php\n// Delays five minutes before releasing the job to queue workers\n$delay = now()->addMinutes(5);\nDoThingJob::dispatch()->delay($delay);\n```", "```php\n$user = auth()->user();\n$daysToCrunch = 7;\n\nBus::chain([\n    new CrunchReports($user, $daysToCrunch),\n    new SendReport($user),\n])->dispatch();\n```", "```php\n$user = auth()->user();\n$daysToCrunch = 7;\n\nBus::chain([\n    new CrunchReports($user, $daysToCrunch),\n    new NotifyNewReportsDone($user)\n])->catch(function (Throwable $e) {\n    new ReportsNotCrunchedNotification($user)\n})->dispatch($user);\n```", "```php\nphp artisan queue:batches-table\nphp artisan migrate\n```", "```php\n...\nclass SampleBatchableJob implements ShouldQueue\n{\n    use Batchable, Dispatchable, InteractsWithQueue, Queueable, SerializesModels;\n\n    public function handle(): void\n    {\n        // Don't run if this batch is canceled\n        if ($this->batch()->cancelled()) {\n            return;\n        }\n\n        // Otherwise, run like normal\n        // ...\n    }\n}\n```", "```php\nuse App\\Jobs\\CrunchReports;\nuse Illuminate\\Support\\Facades\\Bus;\n\n$user = auth()->user();\n$admin = User::admin()->first();\n$supervisor = User::supervisor()->first();\n\n$daysToCrunch = 7;\n\nBus::batch([\n    new CrunchReports::dispatch($user, $daysToCrunch),\n    new CrunchReports::dispatch($admin, $daysToCrunch),\n    new CrunchReports::dispatch($supervisor, $daysToCrunch)\n])->then(function (Batch $batch) {\n    // Run when the batch is completed successfully\n})->catch(function (Batch $batch, Throwable $e) {\n    // Run when any job fails\n})->finally(function (Batch $batch) {\n    // Run when the batch is complete\n})->dispatch();\n```", "```php\npublic function handle(): void\n{\n    if ($this->batch()->cancelled()) {\n        return;\n    }\n\n    $this->batch()->add([\n        new \\App\\Jobs\\ImportContacts,\n        new \\App\\Jobs\\ImportContacts,\n        new \\App\\Jobs\\ImportContacts,\n    ]);\n}\n```", "```php\npublic function handle(): void\n{\n    if (/* This batch should be canceled for whatever reason */) {\n        return $this->batch()->cancel();\n    }\n\n    // ...\n}\n```", "```php\n$batch = Bus::batch([\n    // ...\n])->allowFailures()->dispatch();\n```", "```php\n$schedule->command('queue:prune-batches')->daily();\n```", "```php\nphp artisan queue:work\n```", "```php\nphp artisan queue:work redis --timeout=60 --sleep=15 --tries=3\n --queue=high,medium\n```", "```php\nphp artisan queue:work --tries=3\n```", "```php\npublic function handle(): void\n{\n    ...\n    if ($this->attempts() > 3) {\n        //\n    }\n}\n```", "```php\npublic $tries = 3;\n```", "```php\n// Can attempt this job 10 times.\npublic $tries = 10;\n\n// If the job fails 3 times because an exception was thrown,\n// stop attempting the job and fail it.\npublic $maxExceptions = 3;\n```", "```php\npublic function retryUntil()\n{\n    return now()->addSeconds(30);\n}\n```", "```php\npublic $retryAfter = 10;\n\npublic function retryAfter() {...}\n```", "```php\n<?php\n\nnamespace App\\Jobs\\Middleware;\n\nuse Illuminate\\Http\\Response;\n\nclass MyMiddleware\n{\n    public function handle($job, $next): Response\n    {\n        if ($something) {\n            $next($job);\n        } else {\n            $job->release(5);\n        }\n    }\n}\n```", "```php\n...\nuse App\\Jobs\\Middleware\\MyMiddleware;\n\n...\npublic function middleware()\n{\n    return [new MyMiddleware];\n}\n```", "```php\nDoThingJob::dispatch()->through([new MyMiddleware]);\n```", "```php\n// In a service provider\npublic function boot(): void\n{\n    RateLimiter::for('imageConversions', function (object $job) {\n        return $job->user->paidForPriorityConversions()\n            ? Limit::none()\n            : Limit::perHour(1)->by($job->user->id);\n    });\n}\n```", "```php\nphp artisan queue:failed-table\nphp artisan migrate\n```", "```php\n...\nclass CrunchReports implements ShouldQueue\n{\n    ...\n\n    public function failed()\n    {\n        // Do whatever you want, like notify an admin\n    }\n}\n```", "```php\n// Some service provider\nuse Illuminate\\Support\\Facades\\Queue;\nuse Illuminate\\Queue\\Events\\JobFailed;\n// ...\n    public function boot(): void\n    {\n        Queue::failing(function (JobFailed $event) {\n            // $event->connectionName\n            // $event->job\n            // $event->exception\n        });\n    }\n```", "```php\nphp artisan queue:failed\n```", "```php\n+----+------------+---------+----------------------+---------------------+\n| ID | Connection | Queue   | Class                | Failed At           |\n+----+------------+---------+----------------------+---------------------+\n| 9  | database   | default | App\\Jobs\\AlwaysFails | 2018-08-26 03:42:55 |\n+----+------------+---------+----------------------+---------------------+\n```", "```php\nphp artisan queue:retry 9\n```", "```php\nphp artisan queue:retry all\n```", "```php\nphp artisan queue:forget 5\n```", "```php\nphp artisan queue:prune-failed\n```", "```php\nphp artisan queue:flush\n```", "```php\npublic function handle()\n{\n    ...\n    if (condition) {\n        $this->release($numberOfSecondsToDelayBeforeRetrying);\n    }\n}\n```", "```php\npublic function handle(): void\n{\n    // ...\n    if ($jobShouldBeDeleted) {\n        return;\n    }\n}\n```", "```php\nEvent::fire(new UserSubscribed($user, $plan));\n// or\n$dispatcher = app(Illuminate\\Contracts\\Events\\Dispatcher::class);\n$dispatcher->fire(new UserSubscribed($user, $plan));\n// or\nevent(new UserSubscribed($user, $plan));\n```", "```php\nphp artisan make:event UserSubscribed\n```", "```php\n<?php\n\nnamespace App\\Events;\n\nuse Illuminate\\Broadcasting\\Channel;\nuse Illuminate\\Broadcasting\\InteractsWithSockets;\nuse Illuminate\\Broadcasting\\PresenceChannel;\nuse Illuminate\\Broadcasting\\PrivateChannel;\nuse Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast;\nuse Illuminate\\Foundation\\Events\\Dispatchable;\nuse Illuminate\\Queue\\SerializesModels;\n\nclass UserSubscribed\n{\n    use Dispatchable, InteractsWithSockets, SerializesModels;\n\n    /**\n * Create a new event instance.\n */\n    public function __construct()\n    {\n        //\n    }\n\n    /**\n * Get the channels the event should broadcast on.\n *\n * @return array<int, \\Illuminate\\Broadcasting\\Channel>\n */\n    public function broadcastOn(): array\n    {\n        return [\n            new PrivateChannel('channel-name'),\n        ];\n    }\n}\n```", "```php\n...\nclass UserSubscribed\n{\n    use InteractsWithSockets, SerializesModels;\n\n    public $user;\n    public $plan;\n\n    public function __construct($user, $plan)\n    {\n        $this->user = $user;\n        $this->plan = $plan;\n    }\n}\n```", "```php\nphp artisan make:listener EmailOwnerAboutSubscription --event=UserSubscribed\n```", "```php\n<?php\n\nnamespace App\\Listeners;\n\nuse App\\Events\\UserSubscribed;\nuse Illuminate\\Contracts\\Queue\\ShouldQueue;\nuse Illuminate\\Queue\\InteractsWithQueue;\n\nclass EmailOwnerAboutSubscription\n{\n    /**\n * Create the event listener.\n */\n    public function __construct()\n    {\n        //\n    }\n\n    /**\n * Handle the event.\n */\n    public function handle(UserSubscribed $event): void\n    {\n        //\n    }\n}\n```", "```php\n...\nuse App\\Mail\\UserSubscribed as UserSubscribedMessage;\n\nclass EmailOwnerAboutSubscription\n{\n    public function handle(UserSubscribed $event): void\n    {\n        Log::info('Emailed owner about new user: ' . $event->user->email);\n\n        Mail::to(config('app.owner-email'))\n            ->send(new UserSubscribedMessage($event->user, $event->plan);\n    }\n}\n```", "```php\nclass EventServiceProvider extends ServiceProvider\n{\n    protected $listen = [\n        \\App\\Events\\UserSubscribed::class => [\n            \\App\\Listeners\\EmailOwnerAboutSubscription::class,\n        ],\n    ];\n```", "```php\n/**\n * Determine if events and listeners should be automatically discovered.\n */\npublic function shouldDiscoverEvents(): bool\n{\n    return true;\n}\n```", "```php\n<?php\n\nnamespace App\\Listeners;\n\nclass UserEventSubscriber\n{\n    public function onUserSubscription($event)\n    {\n        // Handles the UserSubscribed event\n    }\n\n    public function onUserCancellation($event)\n    {\n        // Handles the UserCanceled event\n    }\n\n    public function subscribe($events)\n    {\n        $events->listen(\n            \\App\\Events\\UserSubscribed::class,\n            'App\\Listeners\\UserEventSubscriber@onUserSubscription'\n        );\n\n        $events->listen(\n            \\App\\Events\\UserCanceled::class,\n            'App\\Listeners\\UserEventSubscriber@onUserCancellation'\n        );\n    }\n}\n```", "```php\n...\nclass EventServiceProvider extends ServiceProvider\n{\n    ...\n    protected $subscribe = [\n        \\App\\Listeners\\UserEventSubscriber::class\n    ];\n}\n```", "```php\n...\nuse Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast;\n\nclass UserSubscribed implements ShouldBroadcast\n{\n    use Dispatchable, InteractsWithSockets, SerializesModels;\n\n    public $user;\n    public $plan;\n\n    public function __construct($user, $plan)\n    {\n        $this->user = $user;\n        $this->plan = $plan;\n    }\n\n    public function broadcastOn(): array\n    {\n        // String syntax\n        return [\n            'users.' . $this->user->id,\n            'admins'\n        ];\n\n        // Channel object syntax\n        return [\n            new Channel('users.' . $this->user->id),\n            new Channel('admins'),\n            // If it were a private channel: new PrivateChannel('admins'),\n            // If it were a presence channel: new PresenceChannel('admins'),\n        ];\n    }\n}\n```", "```php\n{\n    'user': {\n        'id': 5,\n        'name': 'Fred McFeely',\n        ...\n    },\n    'plan': 'silver'\n}\n```", "```php\npublic function broadcastWith()\n{\n    return [\n        'userId' => $this->user->id,\n        'plan' => $this->plan\n    ];\n}\n```", "```php\npublic $broadcastQueue = 'websockets-for-faster-processing';\n```", "```php\nuse Illuminate\\Contracts\\Broadcasting\\ShouldBroadcastNow;\n\nclass UserSubscribed implements ShouldBroadcastNow\n{\n    //\n}\n```", "```php\npublic function broadcastWhen()\n{\n    // Notify me only when users sign up from the White House\n    return Str::contains($this->user->email, 'whitehouse.gov');\n}\n```", "```php\n...\n<script src=\"https://js.pusher.com/4.3/pusher.min.js\"></script>\n<script>\n// Enable Pusher logging - don't include this in production\nPusher.logToConsole = true;\n\n// Globally, perhaps; just a sample of how to get data in\nvar App = {\n    'userId': {{ auth()->id() }},\n    'pusherKey': '{{ config('broadcasting.connections.pusher.key') }}'\n};\n\n// Locally\nvar pusher = new Pusher(App.pusherKey, {\n    cluster: '{{ config('broadcasting.connections.pusher.options.cluster') }}',\n    encrypted: {{ config('broadcasting.connections.pusher.options.encrypted') }}\n});\n\nvar pusherChannel = pusher.subscribe('users.' + App.userId);\n\npusherChannel.bind('App\\\\Events\\\\UserSubscribed', (data) => {\n    console.log(data.user, data.plan);\n});\n</script>\n```", "```php\n// Run this right after you initialize Echo\n// With Axios\nwindow.axios.defaults.headers.common['X-Socket-Id'] = Echo.socketId();\n\n// With jQuery\n$.ajaxSetup({\n    headers: {\n        'X-Socket-Id': Echo.socketId()\n    }\n});\n```", "```php\nbroadcast(new UserSubscribed($user, $plan))->toOthers();\n```", "```php\n...\n// routes/channels.php\n\n// Define how to authenticate a private channel\nBroadcast::channel('teams.{teamId}', function ($user, $teamId) {\n    return (int) $user->team_id === (int) $teamId;\n});\n\n// Define how to authenticate a presence channel; return any data\n// you want the app to have about the user in the channel\nBroadcast::channel('rooms.{roomId}', function ($user, $roomId) {\n    if ($user->rooms->contains($roomId)) {\n        return [\n            'name' => $user->name\n        ];\n    }\n});\n```", "```php\nvar pusher = new Pusher(App.pusherKey, {\n    authEndpoint: '/broadcasting/auth'\n});\n```", "```php\n...\n<script src=\"https://js.pusher.com/4.3/pusher.min.js\"></script>\n<script>\n    // Enable Pusher logging - don't include this in production\n    Pusher.logToConsole = true;\n\n    // Globally, perhaps; just a sample of how to get data in\n    var App = {\n        'userId': {{ auth()->id() }},\n        'pusherKey': '{{ config('broadcasting.connections.pusher.key') }}'\n    };\n\n    // Locally\n    var pusher = new Pusher(App.pusherKey, {\n        cluster: '{{ config('broadcasting.connections.pusher.options.cluster') }}',\n        encrypted: {{ config('broadcasting.connections.pusher.options.encrypted') }},\n        authEndpoint: '/broadcasting/auth'\n    });\n\n    // Private channel\n    var privateChannel = pusher.subscribe('private-teams.1');\n\n    privateChannel.bind('App\\\\Events\\\\UserSubscribed', (data) => {\n        console.log(data.user, data.plan);\n    });\n\n    // Presence channel\n    var presenceChannel = pusher.subscribe('presence-rooms.5');\n\n    console.log(presenceChannel.members);\n</script>\n```", "```php\nnpm install pusher-js laravel-echo --save\n```", "```php\n// app.js\nrequire('./bootstrap');\n\n// ... lots of Vue stuff ...\n\n// Add your Echo bindings here\n```", "```php\n// bootstrap.js\nimport Echo from \"laravel-echo\";\n\nwindow.Echo = new Echo({\n    broadcaster: 'pusher',\n    key: process.env.MIX_PUSHER_APP_KEY,\n    cluster: process.env.MIX_PUSHER_APP_CLUSTER\n});\n```", "```php\n<meta name=\"csrf-token\" content=\"{{ csrf_token() }}\">\n```", "```php\n<script src=\"{{ asset('js/app.js') }}\"></script>\n```", "```php\nvar currentTeamId = 5; // Likely set elsewhere\n\nEcho.channel(`teams.${currentTeamId}`)\n    .listen('UserSubscribed', (data) => {\n        console.log(data);\n    });\n```", "```php\nEcho.channel(`teams.${currentTeamId}`)\n    .listen('UserSubscribed', (data) => {\n        console.log(data);\n    })\n    .listen('UserCanceled', (data) => {\n        console.log(data);\n    });\n```", "```php\nvar currentTeamId = 5; // Likely set elsewhere\n\nEcho.private(`teams.${currentTeamId}`)\n    .listen('UserSubscribed', (data) => {\n        console.log(data);\n    });\n```", "```php\nvar currentTeamId = 5; // Likely set elsewhere\n\nEcho.join(`teams.${currentTeamId}`)\n    .here((members) => {\n        console.log(members);\n    });\n```", "```php\nvar currentTeamId = 5; // Likely set elsewhere\n\nEcho.join('teams.' + currentTeamId)\n    .here((members) => {\n        // Runs when you join\n        console.table(members);\n    })\n    .joining((joiningMember, members) => {\n        // Runs when another member joins\n        console.table(joiningMember);\n    })\n    .leaving((leavingMember, members) => {\n        // Runs when another member leaves\n        console.table(leavingMember);\n    });\n```", "```php\nEcho.private(`App.User.${userId}`)\n    .notification((notification) => {\n        console.log(notification.type);\n    });\n```", "```php\nEcho.private('room')\n    .whisper('typing', {\n        name: this.user.name\n    });\n```", "```php\nEcho.private('room')\n    .listenForWhisper('typing', (e) => {\n        console.log(e.name);\n    });\n```", "```php\n* * * * * cd /home/myapp.com && php artisan schedule:run >> /dev/null 2>&1\n```", "```php\n// app/Console/Kernel.php\npublic function schedule(Schedule $schedule): void\n{\n    $schedule->call(function () {\n        CalculateTotals::dispatch();\n    })->everyMinute();\n}\n```", "```php\n$schedule->command('scores:tally --reset-cache')->everyMinute();\n```", "```php\n$schedule->exec('/home/myapp.com/bin/build.sh')->everyMinute();\n```", "```php\n$schedule->call(function () {\n    // Runs once a week on Sunday at 23:50\n})->weekly()->sundays()->at('23:50');\n```", "```php\n// Both run weekly on Sunday at 23:50\n$schedule->command('do:thing')->weeklyOn(0, '23:50');\n$schedule->command('do:thing')->weekly()->sundays()->at('23:50');\n\n// Run once per hour, weekdays, 8am-5pm\n$schedule->command('do:thing')->weekdays()->hourly()->when(function () {\n    return date('H') >= 8 && date('H') <= 17;\n});\n\n// Run once per hour, weekdays, 8am-5pm using the \"between\" method\n$schedule->command('do:thing')->weekdays()->hourly()->between('8:00', '17:00');\n\n// Run every 30 minutes except when directed not to by the SkipDetector\n$schedule->command('do:thing')->everyThirtyMinutes()->skip(function () {\n    return app('SkipDetector')->shouldSkip();\n});\n```", "```php\n$schedule->command('do:it')->weeklyOn(0, '23:50')->timezone('America/Chicago');\n```", "```php\nprotected function scheduleTimezone()\n{\n    return 'America/Chicago';\n}\n```", "```php\n$schedule->command('do:thing')->everyMinute()->withoutOverlapping();\n```", "```php\n$schedule->command('do:thing')->daily()->sendOutputTo($filePath);\n```", "```php\n$schedule->command('do:thing')->daily()->appendOutputTo($filePath);\n```", "```php\n$schedule->command('do:thing')\n    ->daily()\n    ->sendOutputTo($filePath)\n    ->emailOutputTo('me@myapp.com');\n```", "```php\n$schedule->command('do:thing')\n    ->daily()\n    ->pingBefore($beforeUrl)\n    ->thenPing($afterUrl);\n```", "```php\n$schedule->command('do_thing')\n    ->daily()\n    ->before(function () {\n        // Prepare\n    })\n    ->after(function () {\n        // Cleanup\n    });\n```", "```php\nphp artisan schedule:work\n```", "```php\nuse Illuminate\\Support\\Facades\\Bus;\n...\npublic function test_changing_subscriptions_triggers_crunch_job()\n{\n    // ...\n\n    Bus::fake();\n\n    Bus::assertDispatched(CrunchReports::class, function ($job) {\n        return $job->subscriptions->contains(5);\n    });\n\n    // Also can use assertNotDispatched()\n}\n```", "```php\nBus::fake();\n\nBus::assertPushedWithChain(\n    CrunchReports::class,\n    [ChainedJob::class],\n    function ($job) {\n        return $job->subscriptions->contains(5);\n    }\n);\n\n    // Also can use assertPushedWithoutChain()\n    Bus::assertPushedWithChain(CrunchReports::class, function ($job) {\n        return $job->subscriptions->contains(5);\n    });\n```", "```php\nuse Illuminate\\Support\\Facades\\Event;\n...\npublic function test_usersubscribed_event_fires()\n{\n    Event::fake();\n\n    // ...\n\n    Event::assertDispatched(UserSubscribed::class, function ($e) {\n        return $e->user->email = 'user-who-subscribed@mail.com';\n    });\n\n    // Also can use assertNotDispatched()\n}\n```", "```php\npublic function test_something_subscription_related()\n{\n    $this->withoutEvents();\n\n    // ...\n}\n```"]