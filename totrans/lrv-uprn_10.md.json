["```php\n...\nuse Illuminate\\Contracts\\Support\\DeferrableProvider;\n\nclass GitHubServiceProvider extends ServiceProvider implements DeferrableProvider\n{\n    public function provides()\n    {\n        return [\n            GitHubClient::class,\n        ];\n    }\n```", "```php\n$request = Illuminate\\Http\\Request::capture();\n```", "```php\n...\nuse Illuminate\\Http\\Request;\n\nclass PersonController extends Controller\n{\n    public function index(Request $request)\n    {\n        $allInput = $request->all();\n    }\n```", "```php\n$request = request();\n$allInput = $request->all();\n// or\n$allInput = request()->all();\n```", "```php\n$request = app(Illuminate\\Http\\Request::class);\n$request = app('request');\n```", "```php\n// form\n<form method=\"POST\" action=\"/form\">\n    @csrf\n    <input name=\"name\"> Name<br>\n    <input type=\"submit\">\n</form>\n```", "```php\n// Route receiving the form\nRoute::post('form', function (Request $request) {\n    echo 'name is ' . $request->input('name') . '<br>';\n    echo 'all input is ' . print_r($request->all()) . '<br>';\n    echo 'user provided email address: ' . $request->has('email') ? 'true' : 'false';\n});\n```", "```php\nRoute::get('route', function () {\n    return new Illuminate\\Http\\Response('Hello!');\n});\n\n// Same, using global function:\nRoute::get('route', function () {\n    return response('Hello!');\n});\n```", "```php\nRoute::get('route', function () {\n    return response('Error!', 400)\n        ->header('X-Header-Name', 'header-value')\n        ->cookie('cookie-name', 'cookie-value');\n});\n```", "```php\n    return response($content)\n        ->cookie('signup_dismissed', true);\n```", "```php\nRoute::get('/', function (XmlGetterService $xml) {\n    $data = $xml->get();\n    return response()\n        ->view('xml-structure', $data)\n        ->header('Content-Type', 'text/xml');\n});\n```", "```php\npublic function export()\n{\n    return response()\n        ->download('file.csv', 'export.csv', ['header' => 'value']);\n}\n\npublic function otherExport()\n{\n    return response()->download('file.pdf');\n}\n```", "```php\npublic function export()\n{\n    return response()\n        ->download('file.csv', 'export.csv')\n        ->deleteFileAfterSend();\n}\n```", "```php\npublic function invoice($id)\n{\n    return response()->file(\"./invoices/{$id}.pdf\", ['header' => 'value']);\n}\n```", "```php\npublic function contacts()\n{\n    return response()->json(Contact::all());\n}\n\npublic function jsonpContacts(Request $request)\n{\n    return response()\n        ->json(Contact::all())\n        ->setCallback($request->input('callback'));\n}\n\npublic function nonEloquentContacts()\n{\n    return response()->json(['Tom', 'Jerry']);\n}\n```", "```php\nreturn redirect('account/payment');\nreturn redirect()->to('account/payment');\nreturn redirect()->route('account.payment');\nreturn redirect()->action('AccountController@showPayment');\n\n// If redirecting to an external domain\nreturn redirect()->away('https://tighten.co');\n\n// If named route or controller needs parameters\nreturn redirect()->route('contacts.edit', ['id' => 15]);\nreturn redirect()->action('ContactController@edit', ['id' => 15]);\n```", "```php\npublic function store()\n{\n    // If validation fails...\n    return back()->withInput();\n}\n```", "```php\nRoute::post('contacts', function () {\n    // Store the contact\n\n    return redirect('dashboard')->with('message', 'Contact created!');\n});\n\nRoute::get('dashboard', function () {\n    // Get the flashed data from session--usually handled in Blade template\n    echo session('message');\n});\n```", "```php\n...\nclass AppServiceProvider\n{\n    public function boot()\n    {\n        Response::macro('myJson', function ($content) {\n            return response(json_encode($content))\n                ->withHeaders(['Content-Type' => 'application/json']);\n        });\n    }\n```", "```php\nreturn response()->myJson(['name' => 'Sangeetha']);\n```", "```php\n...\nuse Illuminate\\Contracts\\Support\\Responsable;\n\nclass MyJson implements Responsable\n{\n    public function __construct($content)\n    {\n        $this->content = $content;\n    }\n\n    public function toResponse()\n    {\n        return response(json_encode($this->content))\n            ->withHeaders(['Content-Type' => 'application/json']);\n    }\n```", "```php\nreturn new MyJson(['name' => 'Sangeetha']);\n```", "```php\n...\nuse Illuminate\\Contracts\\Support\\Responsable;\n\nclass GroupDonationDashboard implements Responsable\n{\n    public function __construct($group)\n    {\n        $this->group = $group;\n    }\n\n    public function budgetThisYear()\n    {\n        // ...\n    }\n\n    public function giftsThisYear()\n    {\n        // ...\n    }\n\n    public function toResponse()\n    {\n        return view('groups.dashboard')\n            ->with('annual_budget', $this->budgetThisYear())\n            ->with('annual_gifts_received', $this->giftsThisYear());\n    }\n```", "```php\n...\nclass GroupController\n{\n    public function index(Group $group)\n    {\n        return new GroupDonationsDashboard($group);\n    }\n```", "```php\nphp artisan make:middleware BanDeleteMethod\n```", "```php\n...\nclass BanDeleteMethod\n{\n    public function handle($request, Closure $next)\n    {\n        return $next($request);\n    }\n}\n```", "```php\n...\nclass BanDeleteMethod\n{\n    public function handle($request, Closure $next)\n    {\n        // At this point, $request is the raw request from the user.\n        // Let's do something with it, just for fun.\n        if ($request->ip() === '192.168.1.1') {\n            return response('BANNED IP ADDRESS!', 403);\n        }\n\n        // Now we've decided to accept it. Let's pass it on to the next\n        // middleware in the stack. We pass it to $next(), and what is\n        // returned is the response after the $request has been passed\n        // down the stack of middleware to the application and the\n        // application's response has been passed back up the stack.\n        $response = $next($request);\n\n        // At this point, we can once again interact with the response\n        // just before it is returned to the user\n        $response->cookie('visited-our-site', true);\n\n        // Finally, we can release this response to the end user\n        return $response;\n    }\n}\n```", "```php\n...\nclass BanDeleteMethod\n{\n    public function handle($request, Closure $next)\n    {\n        // Test for the DELETE method\n        if ($request->method() === 'DELETE') {\n            return response(\n                \"Get out of here with that delete method\",\n                405\n            );\n        }\n\n        $response = $next($request);\n\n        // Assign cookie\n        $response->cookie('visited-our-site', true);\n\n        // Return response\n        return $response;\n    }\n}\n```", "```php\n// app/Http/Kernel.php\nprotected $middleware = [\n    \\App\\Http\\Middleware\\TrustProxies::class,\n    \\Illuminate\\Foundation\\Http\\Middleware\\CheckForMaintenanceMode::class,\n    \\App\\Http\\Middleware\\BanDeleteMethod::class,\n];\n```", "```php\n// app/Http/Kernel.php\nprotected $middlewareAliases = [\n    'auth' => \\App\\Http\\Middleware\\Authenticate::class,\n    ...\n    'ban-delete' => \\App\\Http\\Middleware\\BanDeleteMethod::class,\n];\n```", "```php\n// Doesn't make much sense for our current example...\nRoute::get('contacts', [ContactController::class, 'index'])->middleware('ban-delete');\n\n// Makes more sense for our current example...\nRoute::prefix('api')->middleware('ban-delete')->group(function () {\n    // All routes related to an API\n});\n```", "```php\nuse App\\Http\\Controllers\\HomeController;\n\nRoute::get('/', [HomeController::class, 'index']);\n```", "```php\n// App\\Providers\\RouteServiceProvider\npublic const HOME = '/home';\n\n// protected $namespace = 'App\\\\Http\\\\Controllers';\n\npublic function boot(): void\n{\n    $this->configureRateLimiting();\n\n    $this->routes(function () {\n        Route::prefix('api')\n            ->middleware('api')\n            ->namespace($this->namespace)\n            ->group(base_path('routes/api.php'));\n\n        Route::middleware('web')\n            ->namespace($this->namespace)\n            ->group(base_path('routes/web.php'));\n    });\n}\n\nprotected function configureRateLimiting()\n{\n    RateLimiter::for('api', function (Request $request) {\n        return Limit::perMinute(60)\n            ->by(optional($request->user())->id ?: $request->ip());\n    });\n}\n```", "```php\nRoute::get('company', function () {\n    return view('company.admin');\n})->middleware('auth:owner');\n```", "```php\npublic function handle(Request $request, Closure $next, $role): Response\n{\n    if (auth()->check() && auth()->user()->hasRole($role)) {\n        return $next($request);\n    }\n\n    return redirect('login');\n}\n```", "```php\nRoute::get('company', function () {\n    return view('company.admin');\n})->middleware('auth:owner,view');\n```", "```php\nphp artisan down --refresh=5 --retry=30 --secret=\"long-password\"\n```", "```php\nphp artisan up\n```", "```php\nRoute::middleware(['auth:api', 'throttle:api'])->group(function () {\n    Route::get('/profile', function () {\n        //\n    });\n});\n```", "```php\nRateLimiter::for('api', function (Request $request) {\n    return Limit::perMinute(60)->by($request->user()?->id ?: $request->ip());\n});\n```", "```php\n    /**\n * The trusted proxies for this application.\n *\n * @var array<int, string>|string|null\n */\n    protected $proxies;\n\n    /**\n * The headers that should be used to detect proxies\n *\n * @var int\n */\n    protected $headers =\n        Request::HEADER_X_FORWARDED_FOR |\n        Request::HEADER_X_FORWARDED_HOST |\n        Request::HEADER_X_FORWARDED_PORT |\n        Request::HEADER_X_FORWARDED_PROTO |\n        Request::HEADER_X_FORWARDED_AWS_ELB;\n```", "```php\n$request = new Illuminate\\Http\\Request(\n    $query,      // GET array\n    $request,    // POST array\n    $attributes, // \"attributes\" array; empty is fine\n    $cookies,    // Cookies array\n    $files,      // Files array\n    $server,     // Servers array\n    $content     // Raw body data\n);\n```", "```php\n$response = new Illuminate\\Http\\Response(\n    $content, // response content\n    $status,  // HTTP status, default 200\n    $headers  // array headers array\n);\n```"]