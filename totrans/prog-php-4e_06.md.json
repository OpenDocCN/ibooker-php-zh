["```php\n$age['fred']\n$shows[2]\n```", "```php\n$person = `array`(\"name\" => 'Peter');\n*`print`* \"Hello, {$person[name]}\";\n*`// output: Hello, Peter`*\n*`// this 'works' but emits this warning as well:`* `Warning``:` Use of undefined constant name - assumed 'name' (this will throw an \nError in a future version of PHP)\n\n```", "```php\n$person = `array`(\"name\" => 'Peter');\n*`print`* \"Hello, {$person[\"name\"]}\";*`// output: Hello, Peter (with no warning)`*\n```", "```php\ndefine('NAME', 'bob');\n$person = `array`(\"name\" => 'Peter');\necho \"Hello, {$person['name']}\";\n`echo` \"<br/>\" ;\n`echo` \"Hello, NAME\";\n`echo` \"<br/>\" ;\n`echo` NAME ;\n// output: Hello, Peter\nHello, NAME\nbob\n```", "```php\n// $addresses not defined before this point\necho $addresses[0]; // prints nothing\necho $addresses; // prints nothing\n\n$addresses[0] = \"spam@cyberpromo.net\";\necho $addresses; // prints \"Array\"\n```", "```php\n$addresses[0] = \"spam@cyberpromo.net\";\n$addresses[1] = \"abuse@example.com\";\n$addresses[2] = \"root@example.com\";\n```", "```php\n$price['gasket'] = 15.29;\n$price['wheel'] = 75.25;\n$price['tire'] = 50.00;\n```", "```php\n$addresses = array(\"spam@cyberpromo.net\", \"abuse@example.com\", \n\"root@example.com\");\n```", "```php\n$price = array(\n 'gasket' => 15.29,\n 'wheel' => 75.25,\n 'tire' => 50.00\n);\n```", "```php\n$price = array('gasket' => 15.29, 'wheel' => 75.25, 'tire' => 50.00);\n```", "```php\n$price = ['gasket' => 15.29, 'wheel' => 75.25, 'tire' => 50.0];\n```", "```php\n$addresses = array();\n```", "```php\n$days = array(1 => \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\");\n// 2 is Tue, 3 is Wed, etc.\n```", "```php\n$whoops = array('Fri' => \"Black\", \"Brown\", \"Green\");\n\n// same as\n$whoops = array('Fri' => \"Black\", 0 => \"Brown\", 1 => \"Green\");\n```", "```php\n$family = array(\"Fred\", \"Wilma\");\n$family[] = \"Pebbles\"; // $family[2] is \"Pebbles\"\n```", "```php\n$person = array('name' => \"Fred\");\n$person[] = \"Wilma\"; // $person[0] is now \"Wilma\"\n```", "```php\n$numbers = range(2, 5); // $numbers = array(2, 3, 4, 5);\n$letters = range('a', 'z'); // $letters holds the alphabet\n$reversedNumbers = range(5, 2); // $reversedNumbers = array(5, 4, 3, 2);\n```", "```php\nrange(\"aaa\", \"zzz\"); // same as range('a','z')\n```", "```php\n$family = array(\"Fred\", \"Wilma\", \"Pebbles\");\n$size = count($family); // $size is 3\n```", "```php\n$confusion = array( 10 => \"ten\", 11 => \"eleven\", 12 => \"twelve\");\n$size = count($confusion); // $size is 3\n```", "```php\n$scores = array(5, 10);\n$padded = array_pad($scores, 5, 0); // $padded is now array(5, 10, 0, 0, 0)\n```", "```php\n$padded = array_pad($scores, âˆ’5, 0); // $padded is now array(0, 0, 0, 5, 10);\n```", "```php\n$row0 = array(1, 2, 3);\n$row1 = array(4, 5, 6);\n$row2 = array(7, 8, 9);\n$multi = array($row0, $row1, $row2);\n```", "```php\n$value = $multi[2][0]; // row 2, column 0\\. $value = 7\n```", "```php\necho(\"The value at row 2, column 0 is {$multi[2][0]}\\n\");\n```", "```php\n`The` `value` `at` `row` `2``,` `column` `0` `is` `Array``[``0``]`\n```", "```php\nlist (*`$variable``,` `...`*) = *`$array`*;\n```", "```php\n$person = array(\"Fred\", 35, \"Betty\");\nlist($name, $age, $wife) = $person;\n// $name is \"Fred\", $age is 35, $wife is \"Betty\"\n```", "```php\n$sql = \"SELECT HomeTeam, AwayTeam FROM schedule WHERE \nIdent = 7\";\n$result = mysql_query($sql);\nlist($hometeam, $awayteam) = mysql_fetch_assoc($result);\n```", "```php\n$person = array(\"Fred\", 35, \"Betty\");\nlist($name, $age) = $person; // $name is \"Fred\", $age is 35\n```", "```php\n$values = array(\"hello\", \"world\");\nlist($a, $b, $c) = $values; // $a is \"hello\", $b is \"world\", $c is NULL\n```", "```php\n$values = range('a', 'e'); // use range to populate the array\nlist($m, , $n, , $o) = $values; // $m is \"a\", $n is \"c\", $o is \"e\"\n```", "```php\n$subset = array_slice*`(``array`*, *`offset`*, *`length`*);\n```", "```php\n$people = array(\"Tom\", \"Dick\", \"Harriet\", \"Brenda\", \"Jo\");\n$middle = array_slice($people, 2, 2); // $middle is array(\"Harriet\", \"Brenda\")\n```", "```php\n// this use of array_slice() makes no sense\n$person = array('name' => \"Fred\", 'age' => 35, 'wife' => \"Betty\");\n$subset = array_slice($person, 1, 2); // $subset is array(0 => 35, 1 => \"Betty\")\n```", "```php\n$order = array(\"Tom\", \"Dick\", \"Harriet\", \"Brenda\", \"Jo\");\nlist($second, $third) = array_slice($order, 1, 2);\n// $second is \"Dick\", $third is \"Harriet\"\n```", "```php\n$chunks = array_chunk(*`array`*, *`size`* [, *`preserve_keys`*]);\n```", "```php\n$nums = range(1, 7);\n$rows = array_chunk($nums, 3);\nprint_r($rows);\n\n`Array` `(`\n `[``0``]` `=>` `Array` `(`\n `[``0``]` `=>` `1`\n `[``1``]` `=>` `2`\n `[``2``]` `=>` `3`\n `)`\n `[``1``]` `=>` `Array` `(`\n `[``0``]` `=>` `4`\n `[``1``]` `=>` `5`\n `[``2``]` `=>` `6`\n `)`\n `[``2``]` `=>` `Array` `(`\n `[``0``]` `=>` `7`\n `)`\n`)`\n```", "```php\n$arrayOfKeys = array_keys(*`array`*);\n```", "```php\n$person = array('name' => \"Fred\", 'age' => 35, 'wife' => \"Wilma\");\n$keys = array_keys($person); // $keys is array(\"name\", \"age\", \"wife\")\n```", "```php\n$arrayOfValues = array_values(*`array`*);\n```", "```php\n$values = array_values($person); // $values is array(\"Fred\", 35, \"Wilma\");\n```", "```php\nif (array_key_exists(*`key`*, *`array`*)) { ... }\n```", "```php\nif ($person['name']) { ... } // this can be misleading\n```", "```php\n$person['age'] = 0; // unborn? \nif ($person['age']) {\n echo \"true!\\n\";\n}\n\nif (array_key_exists('age', $person)) {\n echo \"exists!\\n\";\n}\n\n`exists``!`\n```", "```php\n$a = array(0, NULL, '');\n\nfunction tf($v)\n{\n return $v ? 'T' : 'F';\n}\n\nfor ($i=0; $i < 4; $i++) {\n printf(\"%d: %s %s\\n\", $i, tf(isset($a[$i])), tf(array_key_exists($i, $a)));\n}\n`0``:` `T` `T`\n`1``:` `F` `T`\n`2``:` `T` `T`\n`3``:` `F` `F`\n```", "```php\n$removed = array_splice(*`array`*, *`start`* [, *`length`* [, *`replacement`* ] ]);\n```", "```php\n$subjects = array(\"physics\", \"chem\", \"math\", \"bio\", \"cs\", \"drama\", \"classics\");\n```", "```php\n$removed = array_splice($subjects, 2, 3);\n// $removed is array(\"math\", \"bio\", \"cs\")\n// $subjects is array(\"physics\", \"chem\", \"drama\", \"classics\")\n```", "```php\n$removed = array_splice($subjects, 2);\n// $removed is array(\"math\", \"bio\", \"cs\", \"drama\", \"classics\")\n// $subjects is array(\"physics\", \"chem\")\n```", "```php\narray_splice($subjects, 2);\n// $subjects is array(\"physics\", \"chem\");\n```", "```php\n$new = array(\"law\", \"business\", \"IS\");\narray_splice($subjects, 4, 3, $new);\n// $subjects is array(\"physics\", \"chem\", \"math\", \"bio\", \"law\", \"business\", \"IS\")\n```", "```php\n$new = array(\"law\", \"business\", \"IS\");\narray_splice($subjects, 3, 4, $new);\n// $subjects is array(\"physics\", \"chem\", \"math\", \"law\", \"business\", \"IS\")\n```", "```php\n$subjects = array(\"physics\", \"chem\", \"math');\n$new = array(\"law\", \"business\");\narray_splice($subjects, 2, 0, $new);\n// $subjects is array(\"physics\", \"chem\", \"law\", \"business\", \"math\")\n```", "```php\n$capitals = array(\n 'USA' => \"Washington\",\n 'Great Britain' => \"London\",\n 'New Zealand' => \"Wellington\",\n 'Australia' => \"Canberra\",\n 'Italy' => \"Rome\",\n 'Canada' => \"Ottawa\"\n);\n\n$downUnder = array_splice($capitals, 2, 2); // remove New Zealand and Australia\n$france = array('France' => \"Paris\");\n\narray_splice($capitals, 1, 0, $france); // insert France between USA and GB\n```", "```php\n$person = array('name' => \"Fred\", 'age' => 35, 'wife' => \"Betty\");\n```", "```php\n$name = \"Fred\";\n$age = 35;\n$wife = \"Betty\";\n```", "```php\nextract($person); // $name, $age, and $wife are now set\n```", "```php\n$shape = \"round\";\n$array = array('cover' => \"bird\", 'shape' => \"rectangular\");\n\nextract($array, EXTR_PREFIX_ALL, \"book\");\necho \"Cover: {$book_cover}, Book Shape: {$book_shape}, Shape: {$shape}\";\n\n`Cover``:` `bird``,` `Book` `Shape``:` `rectangular``,` `Shape``:` `round`\n```", "```php\n$color = \"indigo\";\n$shape = \"curvy\";\n$floppy = \"none\";\n\n$a = compact(\"color\", \"shape\", \"floppy\");\n// or\n$names = array(\"color\", \"shape\", \"floppy\");\n$a = compact($names);\n```", "```php\n$addresses = array(\"spam@cyberpromo.net\", \"abuse@example.com\");\n\nforeach ($addresses as $value) {\n echo \"Processing {$value}\\n\";\n}\n`Processing` `spam``@``cyberpromo``.``net`\n`Processing` `abuse``@``example``.``com`\n```", "```php\n$person = array('name' => \"Fred\", 'age' => 35, 'wife' => \"Wilma\");\n\nforeach ($person as $key => $value) {\n echo \"Fred's {$key} is {$value}\\n\";\n}\n`Fred``'s name is Fred`\n`Fred'``s` `age` `is` `35`\n`Fred``'``s` `wife` `is` `Wilma`\n```", "```php\nreset($addresses);\n\nwhile (list($key, $value) = each($addresses)) {\n echo \"{$key} is {$value}<br />\\n\";\n}\n`0` `is` `spam``@``cyberpromo``.``net`\n`1` `is` `abuse``@``example``.``com`\n```", "```php\n$ages = array(\n 'Person' => \"Age\",\n 'Fred' => 35,\n 'Barney' => 30,\n 'Tigger' => 8,\n 'Pooh' => 40\n);\n\n// start table and print heading\nreset($ages);\n\nlist($c1, $c2) = each($ages);\n\necho(\"<table>\\n<tr><th>{$c1}</th><th>{$c2}</th></tr>\\n\");\n\n// print the rest of the values\nwhile (list($c1, $c2) = each($ages)) {\n echo(\"<tr><td>{$c1}</td><td>{$c2}</td></tr>\\n\");\n}\n\n// end the table\necho(\"</table>\");\n```", "```php\n$addresses = array(\"spam@cyberpromo.net\", \"abuse@example.com\");\n$addressCount = count($addresses);\n\nfor ($i = 0; $i < $addressCount; $i++) {\n $value = $addresses[$i];\n echo \"{$value}\\n\";\n}\n`spam``@``cyberpromo``.``net`\n`abuse``@``example``.``com`\n```", "```php\narray_walk(*`array`*, *`callable`*);\n```", "```php\n$printRow = function ($value, $key)\n{\n print(\"<tr><td>{$key}</td><td>{$value}</td></tr>\\n\");\n};\n\n$person = array('name' => \"Fred\", 'age' => 35, 'wife' => \"Wilma\");\n\necho \"<table border=1>\";\n\narray_walk($person, $printRow);\n\necho \"</table>\";\n```", "```php\nfunction printRow($value, $key, $color)\n{\n echo \"<tr>\\n<td bgcolor=\\\"{$color}\\\">{$value}</td>\";\n echo \"<td bgcolor=\\\"{$color}\\\">{$key}</td>\\n</tr>\\n\";\n}\n\n$person = array('name' => \"Fred\", 'age' => 35, 'wife' => \"Wilma\");\n\necho \"<table border=\\\"1\\\">\";\n\narray_walk($person, \"printRow\", \"lightblue\");\necho \"</table>\";\n```", "```php\n$extraData = array('border' => 2, 'color' => \"red\");\n$baseArray = array(\"Ford\", \"Chrysler\", \"Volkswagen\", \"Honda\", \"Toyota\");\n\narray_walk($baseArray, \"walkFunction\", $extraData);\n\nfunction walkFunction($item, $index, $data)\n{\n echo \"{$item} <- item, then border: {$data['border']}\";\n echo \" color->{$data['color']}<br />\" ;\n}\n`Ford` `<-` `item``,` `then` `border``:` `2` `color``->``red`\n`Crysler` `<-` `item``,` `then` `border``:` `2` `color``->``red`\n`VW` `<-` `item``,` `then` `border``:` `2` `color``->``red`\n`Honda` `<-` `item``,` `then` `border``:` `2` `color``->``red`\n`Toyota` `<-` `item``,` `then` `border``:` `2` `color``->``red`\n```", "```php\n$result = array_reduce(*`array`*, *`callable`* [, *`default`* ]);\n```", "```php\n$addItUp = function ($runningTotal, $currentValue)\n{\n $runningTotal += $currentValue * $currentValue;\n\n return $runningTotal;\n};\n\n$numbers = array(2, 3, 5, 7);\n$total = array_reduce($numbers, $addItUp);\n\necho $total;\n\n`87`\n```", "```php\naddItUp(0, 2);\naddItUp(4, 3);\naddItUp(13, 5);\naddItUp(38, 7);\n```", "```php\n$total = array_reduce($numbers, \"addItUp\", 11);\n```", "```php\naddItUp(11, 2);\naddItUp(15, 3);\naddItUp(24, 5);\naddItUp(49, 7);\n```", "```php\nif (in_array(*`to_find`*, *`array`* [, *`strict`*])) { ... }\n```", "```php\n$addresses = array(\"spam@cyberpromo.net\", \"abuse@example.com\", \n\"root@example.com\");\n$gotSpam = in_array(\"spam@cyberpromo.net\", $addresses); // $gotSpam is true\n$gotMilk = in_array(\"milk@tucows.com\", $addresses); // $gotMilk is false\n```", "```php\n<?php\nfunction hasRequired($array, $requiredFields) {\n $array =\n\n $keys = array_keys ( $array );\n foreach ( $requiredFields as $fieldName ) {\n if (! in_array ( $fieldName, $keys )) {\n return false;\n }\n }\n return true;\n}\nif ($_POST ['submitted']) {\n $testArray = array_filter($_POST);\n echo \"<p>You \";\n echo hasRequired ( $testArray, array (\n 'name',\n 'email_address'\n ) ) ? \"did\" : \"did not\";\n echo \" have all the required fields.</p>\";\n}\n?>\n<form action=\"<?php echo $_SERVER['PHP_SELF']; ?>\" method=\"POST\">\n <p>\n Name: <input type=\"text\" name=\"name\" /><br /> Email address: <input\n type=\"text\" name=\"email_address\" /><br /> Age (optional): <input\n type=\"text\" name=\"age\" />\n </p>\n <p align=\"center\">\n <input type=\"submit\" value=\"submit\" name=\"submitted\" />\n </p>\n</form>\n```", "```php\n$person = array('name' => \"Fred\", 'age' => 35, 'wife' => \"Wilma\");\n$k = array_search(\"Wilma\", $person);\n\necho(\"Fred's {$k} is Wilma\\n\");\n\n`Fred``'``s` `wife` `is` `Wilma`\n```", "```php\n$names = array(\"Cath\", \"Angela\", \"Brad\", \"Mira\");\nsort($names); // $names is now \"Angela\", \"Brad\", \"Cath\", \"Mira\"\n```", "```php\n$logins = array(\n 'njt' => 415,\n 'kt' => 492,\n 'rl' => 652,\n 'jht' => 441,\n 'jj' => 441,\n 'wt' => 402,\n 'hut' => 309,\n);\n\narsort($logins);\n\n$numPrinted = 0;\n\necho \"<table>\\n\";\n\nforeach ($logins as $user => $time) {\n echo(\"<tr><td>{$user}</td><td>{$time}</td></tr>\\n\");\n\n if (++$numPrinted == 3) {\n break; // stop after three\n }\n}\n\necho \"</table>\";\n```", "```php\n<?php\nfunction userSort($a, $b)\n{\n // smarts is all-important, so sort it first\n if ($b == \"smarts\") {\n return 1;\n }\n else if ($a == \"smarts\") {\n return âˆ’1;\n }\n\n return ($a == $b) ? 0 : (($a < $b) ? âˆ’1 : 1);\n}\n\n$values = array(\n 'name' => \"Buzz Lightyear\",\n 'email_address' => \"buzz@starcommand.gal\",\n 'age' => 32,\n 'smarts' => \"some\"\n);\n\nif ($_POST['submitted']) {\n $sortType = $_POST['sort_type'];\n\n if ($sortType == \"usort\" || $sortType == \"uksort\" || $sortType == \"uasort\") {\n $sortType($values, \"userSort\");\n }\n else {\n $sortType($values);\n }\n} ?>\n<form action=\"<?php echo $_SERVER['PHP_SELF']; ?> \" method=\"post\">\n <p>\n <input type=\"radio\" name=\"sort_type\"\n value=\"sort\" checked=\"checked\" /> Standard<br />\n <input type=\"radio\" name=\"sort_type\" value=\"rsort\" /> Reverse<br />\n <input type=\"radio\" name=\"sort_type\" value=\"usort\" /> User-defined<br />\n <input type=\"radio\" name=\"sort_type\" value=\"ksort\" /> Key<br />\n <input type=\"radio\" name=\"sort_type\" value=\"krsort\" /> Reverse key<br />\n <input type=\"radio\" name=\"sort_type\"\n value=\"uksort\" /> User-defined key<br />\n <input type=\"radio\" name=\"sort_type\" value=\"asort\" /> Value<br />\n <input type=\"radio\" name=\"sort_type\"\n value=\"arsort\" /> Reverse value<br />\n <input type=\"radio\" name=\"sort_type\"\n value=\"uasort\" /> User-defined value<br />\n </p>\n\n <p align=\"center\"><input type=\"submit\" value=\"Sort\" name=\"submitted\" /></p>\n\n <p>Values <?php echo $_POST['submitted'] ? \"sorted by {$sortType}\" : \"unsorted\"; \n ?>:</p>\n\n <ul>\n <?php foreach ($values as $key => $value) {\n echo \"<li><b>{$key}</b>: {$value}</li>\";\n } ?>\n </ul>\n</form>\n```", "```php\n$output = natsort(*`input`*);\n$output = natcasesort(*`input`*);\n```", "```php\narray_multisort(*`array1`* [, *`array2`*, ... ]);\n```", "```php\n$names = array(\"Tom\", \"Dick\", \"Harriet\", \"Brenda\", \"Joe\");\n$ages = array(25, 35, 29, 35, 35);\n$zips = array(80522, '02140', 90210, 64141, 80522);\n```", "```php\narray_multisort($ages, SORT_ASC, $zips, SORT_DESC, $names, SORT_ASC);\n```", "```php\nfor ($i = 0; $i < count($names); $i++) {\n echo \"{$names[$i]}, {$ages[$i]}, {$zips[$i]}\\n\";\n}\n`Tom``,` `25``,` `80522`\n`Harriet``,` `29``,` `90210`\n`Joe``,` `35``,` `80522`\n`Brenda``,` `35``,` `64141`\n`Dick``,` `35``,` `02140`\n```", "```php\n$reversed = array_reverse(*`array`*);\n```", "```php\n$flipped = array_flip(*`array`*);\n```", "```php\n$u2h = array(\n 'gnat' => \"/home/staff/nathan\",\n 'frank' => \"/home/action/frank\",\n 'petermac' => \"/home/staff/petermac\",\n 'ktatroe' => \"/home/staff/kevin\"\n);\n$h2u = array_flip($u2h);\n\n$user = $h2u[\"/home/staff/kevin\"]; // $user is now 'ktatroe'\n```", "```php\n$weekdays = array(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\");\nshuffle($weekdays);\n\nprint_r($weekdays);\n\n`Array``(`\n `[``0``]` `=>` `Tuesday`\n `[``1``]` `=>` `Thursday`\n `[``2``]` `=>` `Monday`\n `[``3``]` `=>` `Friday`\n `[``4``]` `=>` `Wednesday`\n`)`\n```", "```php\n$sum = array_sum(*`array`*);\n```", "```php\n$scores = array(98, 76, 56, 80);\n$total = array_sum($scores); // $total = 310\n```", "```php\n$merged = array_merge(*`array1`*, *`array2`* [, *`array` `...`* ])\n```", "```php\n$first = array(\"hello\", \"world\"); // 0 => \"hello\", 1 => \"world\"\n$second = array(\"exit\", \"here\"); // 0 => \"exit\", 1 => \"here\"\n\n$merged = array_merge($first, $second);\n// $merged = array(\"hello\", \"world\", \"exit\", \"here\")\n```", "```php\n$first = array('bill' => \"clinton\", 'tony' => \"danza\");\n$second = array('bill' => \"gates\", 'adam' => \"west\");\n\n$merged = array_merge($first, $second);\n// $merged = array('bill' => \"gates\", 'tony' => \"danza\", 'adam' => \"west\")\n```", "```php\n$diff = array_diff(*`array1`*, *`array2`* [, *`array`* ... ]);\n```", "```php\n$a1 = array(\"bill\", \"claire\", \"ella\", \"simon\", \"judy\");\n$a2 = array(\"jack\", \"claire\", \"toni\");\n$a3 = array(\"ella\", \"simon\", \"garfunkel\");\n\n// find values of $a1 not in $a2 or $a3 $difference = array_diff($a1, $a2, $a3);\nprint_r($difference);\n\n`Array``(`\n `[``0``]` `=>` `\"``bill``\"``,`\n `[``4``]` `=>` `\"``judy``\"`\n`);`\n```", "```php\n$first = array(1, \"two\", 3);\n$second = array(\"two\", \"three\", \"four\");\n\n$difference = array_diff($first, $second);\nprint_r($difference);\n\n`Array``(`\n `[``0``]` `=>` `1`\n `[``2``]` `=>` `3`\n`)`\n```", "```php\n$filtered = array_filter(*`array`*, *`callback`*);\n```", "```php\n`function` *`isOdd`* ($element) {\n `return` $element % 2;\n}\n\n$numbers = `array`(9, 23, 24, 27);\n$odds = *`array_filter`*($numbers, \"isOdd\");\n\n// $odds is array(0 => 9, 1 => 23, 3 => 27)\n```", "```php\nfunction arrayUnion($a, $b)\n{\n $union = array_merge($a, $b); // duplicates may still exist\n $union = array_unique($union);\n\n return $union;\n}\n\n$first = array(1, \"two\", 3);\n$second = array(\"two\", \"three\", \"four\");\n\n$union = arrayUnion($first, $second);\nprint_r($union);\n\n`Array``(`\n `[``0``]` `=>` `1`\n `[``1``]` `=>` `two`\n `[``2``]` `=>` `3`\n `[``4``]` `=>` `three`\n `[``5``]` `=>` `four`\n`)`\n```", "```php\n$callTrace = array();\n\nfunction enterFunction($name)\n{\n global $callTrace;\n $callTrace[] = $name;\n\n echo \"Entering {$name} (stack is now: \" . join(' -> ', $callTrace) . \")<br />\";\n}\n\nfunction exitFunction()\n{\n echo \"Exiting<br />\";\n\n global $callTrace;\n array_pop($callTrace);\n}\n\nfunction first()\n{\n enterFunction(\"first\");\n exitFunction();\n}\n\nfunction second()\n{\n enterFunction(\"second\");\n first();\n exitFunction();\n}\n\nfunction third()\n{\n enterFunction(\"third\");\n second();\n first();\n exitFunction();\n}\n\nfirst();\nthird();\n```", "```php\n`Entering` `first` `(``stack` `is` `now``:` `first``)`\n`Exiting`\n`Entering` `third` `(``stack` `is` `now``:` `third``)`\n`Entering` `second` `(``stack` `is` `now``:` `third` `->` `second``)`\n`Entering` `first` `(``stack` `is` `now``:` `third` `->` `second` `->` `first``)`\n`Exiting`\n`Exiting`\n`Entering` `first` `(``stack` `is` `now``:` `third` `->` `first``)`\n`Exiting`\n`Exiting`\n```", "```php\nclass BasicArray implements Iterator\n{\n private $position = 0;\n private $array = [\"first\", \"second\", \"third\"];\n\n public function __construct()\n {\n $this->position = 0;\n }\n\n public function rewind()\n {\n $this->position = 0;\n }\n\n public function current()\n {\n return $this->array[$this->position];\n }\n\n public function key()\n {\n return $this->position;\n }\n\n public function next()\n {\n $this->position += 1;\n }\n\n public function valid()\n {\n return isset($this->array[$this->position]);\n }\n}\n\n$basicArray = new BasicArray;\n\nforeach ($basicArray as $value) {\n echo \"{$value}\\n\";\n}\n\nforeach ($basicArray as $key => $value) {\n echo \"{$key} => {$value}\\n\";\n}\n\n`first`\n`second`\n`third`\n\n`0` `=>` `first`\n`1` `=>` `second`\n`2` `=>` `third`\n```", "```php\nclass Trie implements Iterator\n{\n const POSITION_LEFT = \"left\";\n const POSITION_THIS = \"this\";\n const POSITION_RIGHT = \"right\";\n\n var $leftNode;\n var $rightNode;\n\n var $position;\n\n // implement Iterator methods here...\n}\n\n$trie = new Trie();\n\nrewind($trie);\n```"]