["```php\n$colors = [];\n$colors['apple']  = 'red';\n$colors['pear']   = 'green';\n$colors['banana'] = 'yellow';\n\n$numbers = [22, 15, 42, 105];\n\necho $colors['pear']; // green\necho $numbers[2]; // 42\n```", "```php\n$movies = array('Fahrenheit 451', 'Without Remorse', 'Black Panther');\n```", "```php\n$movies = ['Fahrenheit 451', 'Without Remorse', 'Black Panther'];\n```", "```php\n$array = array(1, 2, array(3, 4), [5, 6]);\n```", "```php\n$array = array(\n    'a' => 'A',\n    'b' => ['b', 'B'],\n    'c' => array('c', ['c', 'K'])\n);\n```", "```php\n$cars = [\n    'fast'     => ['ferrari', 'lamborghini'],\n    'slow'     => ['honda', 'toyota'],\n    'electric' => ['rivian', 'tesla'],\n    'big'      => ['hummer']\n];\n```", "```php\n$basket = [];\n\n$basket['color']    = 'brown';\n$basket['size']     = 'large';\n$basket['contents'] = 'apple';\n$basket['contents'] = 'orange';\n$basket['contents'] = 'pineapple';\n\nprint_r($basket);\n\n// Array\n// (\n//    [color] => brown\n//    [size] => large\n//    [contents] => pineapple\n// )\n```", "```php\n$basket = [];\n\n$basket['color']    = 'brown';\n$basket['size']     = 'large';\n$basket['contents'] = [];\n$basket['contents'][] = 'apple';\n$basket['contents'][] = 'orange';\n$basket['contents'][] = 'pineapple';\n\nprint_r($basket);\n\n// Array\n// (\n//    [color] => brown\n//    [size] => large\n//    [contents] => Array\n//        (\n//            [0] => apple\n//            [1] => orange\n//            [2] => pineapple\n//        )\n// )\n\necho $basket['contents'][2]; // pineapple\n```", "```php\nforeach ($basket as $key => $value) { ![1](assets/1.png)\n    if (is_array($value)) { ![2](assets/2.png)\n        echo \"{$key} => [\" . PHP_EOL;\n\n        foreach ($value as $item) { ![3](assets/3.png)\n            echo \"\\t{$item}\" . PHP_EOL;\n        }\n\n        echo ']' . PHP_EOL;\n    } else {\n        echo \"{$key}: $value\" . PHP_EOL;\n    }\n}\n\n// color: brown // size: large // contents => [ //     apple //     orange //     pineapple // ]\n```", "```php\n$array = range(1, 10);\nprint_r($array);\n\n// Array\n// (\n//     [0] => 1\n//     [1] => 2\n//     [2] => 3\n//     [3] => 4\n//     [4] => 5\n//     [5] => 6\n//     [6] => 7\n//     [7] => 8\n//     [8] => 9\n//     [9] => 10\n// )\n```", "```php\n$array = range(2, 100, 2);\n```", "```php\n$array = range(1, 100, 2);\n```", "```php\n$array = range(1, 5, 0.25);\n```", "```php\n$uppers = range('A', 'Z'); ![1](assets/1.png)\n\n$lowers = range('a', 'z'); ![2](assets/2.png)\n\n$special = range('!', ')'); ![3](assets/3.png)\n```", "```php\nforeach ($array as $value) {\n    // Act on each $value\n}\n```", "```php\nforeach ($array as $key => $value) {\n    // Act on each $value and/or $key\n}\n```", "```php\n$array = [1, 2, 3];\n\nforeach ($array as &$value) {\n    $value += 1;\n}\n\nprint_r($array); // 2, 3, 4\n```", "```php\n$array = ['red', 'green', 'blue'];\n\n$arrayLength = count($array);\nfor ($i = 0; $i < $array_length; $i++) {\n    echo $array[$i] . PHP_EOL;\n}\n```", "```php\n$array = [\n    'os'   => 'linux',\n    'mfr'  => 'system76',\n    'name' => 'thelio',\n];\n\n$keys = array_keys($array);\n$arrayLength = count($keys);\nfor ($i = 0; $i < $arrayLength; $i++) {\n    $key = $keys[$i];\n    $value = $array[$key];\n\n    echo \"{$key} => {$value}\" . PHP_EOL;\n}\n```", "```php\nunset($array['key']);\n\nunset($array[3]);\n```", "```php\nunset($array['first'], $array['second']);\n\nunset($array[3], $array[4], $array[5]);\n```", "```php\n$array = range('a', 'z');\n\necho count($array) . PHP_EOL; ![1](assets/1.png)\necho $array[12] . PHP_EOL; ![2](assets/2.png)\necho $array[25] . PHP_EOL; ![3](assets/3.png)\n\nunset($array[22]);\necho count($array) . PHP_EOL; ![4](assets/4.png)\necho $array[12] . PHP_EOL; ![5](assets/5.png)\necho $array[25] . PHP_EOL; ![6](assets/6.png)\n```", "```php\n$array = ['first', 'second', 'third', 'fourth']; ![1](assets/1.png)\n\nunset($array[2]); ![2](assets/2.png)\n\n$array = array_values($array); ![3](assets/3.png)\n```", "```php\n$celestials = [\n    'sun',\n    'mercury',\n    'venus',\n    'earth',\n    'mars',\n    'asteroid belt',\n    'jupiter',\n    'saturn',\n    'uranus',\n    'neptune',\n    'pluto',\n    'voyagers 1 & 2',\n];\n\narray_splice($celestials, 0, 1); ![1](assets/1.png)\narray_splice($celestials, 4, 1); ![2](assets/2.png)\narray_splice($celestials, 8); ![3](assets/3.png)\n\nprint_r($celestials);\n\n// Array // ( //     [0] => mercury //     [1] => venus //     [2] => earth //     [3] => mars //     [4] => jupiter //     [5] => saturn //     [6] => uranus //     [7] => neptune // )\n```", "```php\n$array = ['apple', 'banana', 'coconut'];\narray_push($array, 'grape');\n\nprint_r($array);\n\n// Array\n// (\n//     [0] => apple\n//     [1] => banana\n//     [2] => coconut\n//     [3] => grape\n// )\n```", "```php\n$array = ['apple', 'banana', 'coconut', 'grape'];\narray_splice($array, 1, 2);\n\nprint_r($array);\n\n// Array\n// (\n//     [0] => apple\n//     [1] => grape\n// )\n```", "```php\n$array = ['apple', 'banana', 'coconut'];\n$array[] = 'grape';\n\nprint_r($array);\n\n// Array\n// (\n//     [0] => apple\n//     [1] => banana\n//     [2] => coconut\n//     [3] => grape\n// )\n```", "```php\n$first = ['apple'];\narray_push($first, 'banana', 'coconut', 'grape');\n\n$second = ['apple'];\n$second[] = 'banana';\n$second[] = 'coconut';\n$second[] = 'grape';\n\necho 'The arrays are ' . ($first === $second ? 'equal' : 'different');\n\n// The arrays are equal\n```", "```php\n$array = ['grape'];\narray_unshift($array, 'apple', 'banana', 'coconut');\n\nprint_r($array);\n\n// Array\n// (\n//     [0] => apple\n//     [1] => banana\n//     [2] => coconut\n//     [3] => grape\n// )\n```", "```php\n$array = ['apple', 'banana', 'coconut'];\n$array[3] = 'grape';\n```", "```php\n$first = ['a', 'b', 'c'];\n$second = ['x', 'y', 'z'];\n\n$merged = array_merge($first, $second);\n```", "```php\n$merged = [...$first, ...$second];\n```", "```php\n$first = [\n    'title'  => 'Practical Handbook',\n    'author' => 'Bob Mills',\n    'year'   => 2018\n];\n$second = [\n    'year'   => 2023,\n    'region' => 'United States'\n];\n\n$merged = array_merge($first, $second);\nprint_r($merged);\n\n// Array\n// (\n//     [title] => Practical Handbook\n//     [author] => Bob Mills\n//     [year] => 2023\n//     [region] => United States\n// )\n```", "```php\n$first = [\n    'title'  => 'Practical Handbook',\n    'author' => 'Bob Mills',\n    'year'   => 2018\n];\n$second = [\n    'year'   => 2023,\n    'region' => 'United States'\n];\n\n$merged = array_merge_recursive($first, $second);\nprint_r($merged);\n\n// Array\n// (\n//     [title] => Practical Handbook\n//     [author] => Bob Mills\n//     [year] => Array\n//         (\n//             [0] => 2018\n//             [1] => 2023\n//         )\n//\n//     [region] => United States\n// )\n```", "```php\n$array = range('A', 'Z');\n$slice = array_slice($array, 7, 4);\n\nprint_r($slice);\n\n// Array\n// (\n//     [0] => H\n//     [1] => I\n//     [2] => J\n//     [3] => K\n// )\n```", "```php\narray_slice(\n    array $array,\n    int   $offset,\n    ?$int $length = null,\n    $bool $preserve_keys = false\n): array\n```", "```php\n$array = range('a', 'e');\n$newArray = array_slice($array, 4, 100);\n\nprint_r($newArray);\n\n// Array\n// (\n//     [0] => e\n// )\n```", "```php\n$array = range('a', 'e');\n\n$standard = array_slice($array, 1, 2);\nprint_r($standard);\n\n// Array\n// (\n//     [0] => b\n//     [1] => c\n// )\n\n$preserved = array_slice($array, 1, 2, true);\nprint_r($preserved);\n\n// Array\n// (\n//     [1] => b\n//     [2] => c\n// )\n```", "```php\n$array = ['a' => 'apple', 'b' => 'banana', 25 => 'cola', 'd' => 'donut'];\nprint_r(array_slice($array, 0, 3));\n\n// Array\n// (\n//     [a] => apple\n//     [b] => banana\n//     [0] => cola\n// )\n\nprint_r(array_slice($array, 0, 3, true));\n\n// Array\n// (\n//     [a] => apple\n//     [b] => banana\n//     [25] => cola\n// )\n```", "```php\n array_splice(\n    array &$array,\n    int   $offset,\n    ?int  $length = null,\n    mixed $replacement = []\n): array\n```", "```php\n$string = 'To be or not to be';\n$array = str_split($string);\n```", "```php\n$array = ['H', 'e', 'l', 'l', 'o', ' ', 'w', 'o', 'r', 'l', 'd'];\n$string = join('', $array);\n```", "```php\n$string = 'To be or not to be';\n$array = str_split($string, 5);\nvar_dump($array);\n\n// array(4) {\n//   [0]=>\n//   string(5) \"To be\"\n//   [1]=>\n//   string(5) \" or n\"\n//   [2]=>\n//   string(5) \"ot to\"\n//   [3]=>\n//   string(3) \" be\"\n// }\n```", "```php\n$string = 'To be or not to be';\n$words = explode(' ', $string);\n\nprint_r($words);\n\n// Array\n// (\n//     [0] => To\n//     [1] => be\n//     [2] => or\n//     [3] => not\n//     [4] => to\n//     [5] => be\n// )\n```", "```php\nimplode(string $separator, array $array): string\n\nimplode(array $array): string\n```", "```php\n$array = ['H', 'e', 'l', 'l', 'o', ' ', 'w', 'o', 'r', 'l', 'd'];\n\n$option1 = implode($array);\n\n$option2 = implode('', $array);\n\necho 'The two are ' . ($option1 === $option2 ? 'identical' : 'different');\n\n// The two are identical\n```", "```php\n$fruit = ['apple', 'orange', 'pear', 'peach'];\n\necho implode(', ', $fruit);\n\n// apple, orange, pear, peach\n```", "```php\n$array = ['five', 'four', 'three', 'two', 'one', 'zero'];\n\n$reversed = array_reverse($array);\n```", "```php\n$array = ['a' => 'A', 'b' => 'B', 'c' => 'C'];\n$reversed = array_reverse($array);\n\nprint_r($reversed);\n\n// Array\n// (\n//     [c] => C\n//     [b] => B\n//     [a] => A\n// )\n```", "```php\n$array = ['a' => 'A', 'b' => 'B', 42 => 'C', 'd' => 'D'];\nprint_r(array_reverse($array)); ![1](assets/1.png)\n\n// Array // ( //     [d] => D //     [0] => C //     [b] => B //     [a] => A // ) \nprint_r(array_reverse($array, true)); ![2](assets/2.png)\n\n// Array // ( //     [d] => D //     [42] => C //     [b] => B //     [a] => A // )\n```", "```php\n$states = ['Oregon', 'California', 'Alaska', 'Washington', 'Hawaii'];\nsort($states);\n```", "```php\n$numbers = [1, 10, 100, 5, 50, 500];\nsort($numbers, SORT_STRING);\nprint_r($numbers);\n\n// Array\n// (\n//     [0] => 1\n//     [1] => 10\n//     [2] => 100\n//     [3] => 5\n//     [4] => 50\n//     [5] => 500\n// )\n\nsort($numbers, SORT_NUMERIC);\nprint_r($numbers);\n\n// Array\n// (\n//     [0] => 1\n//     [1] => 5\n//     [2] => 10\n//     [3] => 50\n//     [4] => 100\n//     [5] => 500\n// )\n```", "```php\n$numbers = [1, 10, 100, 5, 50, 500];\nasort($numbers, SORT_NUMERIC);\nprint_r($numbers);\n\n// Array\n// (\n//     [0] => 1\n//     [3] => 5\n//     [1] => 10\n//     [4] => 50\n//     [2] => 100\n//     [5] => 500\n// )\n```", "```php\n$bonds = [\n    ['first' => 'Sean',    'last' => 'Connery'],\n    ['first' => 'Daniel',  'last' => 'Craig'],\n    ['first' => 'Pierce',  'last' => 'Brosnan'],\n    ['first' => 'Roger',   'last' => 'Moore'],\n    ['first' => 'Timothy', 'last' => 'Dalton'],\n    ['first' => 'George',  'last' => 'Lazenby'],\n];\n\nfunction sorter(array $a, array $b) {\n    return [$a['last'], $a['first']] <=> [$b['last'], $b['first']];\n}\n\nusort($bonds, 'sorter');\n\nforeach ($bonds as $bond) {\n    echo \"{$bond['last']}. {$bond['first']} {$bond['last']}\" . PHP_EOL;\n}\n```", "```php\n$dates = [\n    new DateTime('2022-12-25'),\n    new DateTime('2022-04-17'),\n    new DateTime('2022-11-24'),\n    new DateTime('2023-01-01'),\n    new DateTime('2022-07-04'),\n    new DateTime('2023-02-14'),\n];\n\nfunction sorter(DateTime $a, DateTime $b) {\n    return\n        [$a->format('N'), $a->format('Y'), $a->format('j')]\n        <=>\n        [$b->format('N'), $b->format('Y'), $b->format('j')];\n}\n\nusort($dates, 'sorter');\n\nforeach ($dates as $date) {\n    echo $date->format('l, F jS, Y') . PHP_EOL;\n}\n\n// Monday, July 4th, 2022\n// Tuesday, February 14th, 2023\n// Thursday, November 24th, 2022\n// Sunday, April 17th, 2022\n// Sunday, December 25th, 2022\n// Sunday, January 1st, 2023\n```", "```php\n$array = range('a', 'e');\nshuffle($array);\n```", "```php\n$values = range(2, 5);\n\narray_walk($values, function(&$value, $key) {\n    $value *= $value;\n});\n\nprint_r($values);\n\n// Array\n// (\n//     [0] => 4\n//     [1] => 9\n//     [2] => 16\n//     [3] => 25\n// )\n```", "```php\nfunction mutate(&$value, $key, $arg)\n{\n    $value *= $arg;\n}\n\n$values = range(2, 5);\n\narray_walk($values, 'mutate', 10);\n\nprint_r($values);\n\n// Array\n// (\n//     [0] => 20\n//     [1] => 30\n//     [2] => 40\n//     [3] => 50\n// )\n```", "```php\n$array = [\n    'even' => [2, 4, 6],\n    'odd'  => 1,\n];\n\nfunction mutate(&$value, $key, $arg)\n{\n    $value *= $arg;\n}\n\narray_walk_recursive($array, 'mutate', 10);\nprint_r($array);\n\n// Array\n// (\n//     [even] => Array\n//         (\n//             [0] => 20\n//             [1] => 40\n//             [2] => 60\n//         )\n//\n//     [odd] => 10\n// )\n\narray_walk($array, 'mutate', 10);\n\n// PHP Warning: Uncaught TypeError: Unsupported operand types: array * int\n```", "```php\n$values = range(2, 5);\n\n$mutated = array_map(function($value) {\n    return $value * $value;\n}, $values);\n\nprint_r($mutated);\n\n// Array\n// (\n//     [0] => 4\n//     [1] => 9\n//     [2] => 16\n//     [3] => 25\n// )\n```", "```php\n$values = range(0, 10);\n\n$sum = array_reduce($values, function($carry, $item) {\n    return $carry + $item;\n}, 0);\n\n// $sum = 55\n```", "```php\nfunction array_reduce_assoc(\n    array $array,\n    callable $callback,\n    mixed $initial = null\n): mixed\n{\n    return array_reduce(\n        array_keys($array),\n        function($carry, $item) use ($array, $callback) {\n            return $callback($carry, $array[$item], $item);\n        },\n        $initial\n    );\n}\n\n$array = [1 => 10, 2 => 10, 3 => 5];\n\n$sumMultiples = array_reduce_assoc(\n    $array,\n    function($carry, $item, $key) {\n        return $carry + ($item * $key);\n    },\n    0\n);\n\n// $sumMultiples = 45\n```", "```php\nfunction weekday()\n{\n    static $day = 'Monday';\n\n    while (true) {\n        yield $day;\n\n        switch($day) {\n            case 'Monday':\n                $day = 'Tuesday';\n                break;\n            case 'Tuesday':\n                $day = 'Wednesday';\n                break;\n            case 'Wednesday':\n                $day = 'Thursday';\n                break;\n            case 'Thursday':\n                $day = 'Friday';\n                break;\n            case 'Friday':\n                $day = 'Monday';\n                break;\n        }\n    }\n}\n\n$weekdays = weekday();\nforeach ($weekdays as $day) {\n    echo $day . PHP_EOL;\n}\n```", "```php\n$weekdays = weekday();\nfor ($i = 0; $i < 14; $i++) {\n    echo $weekdays->current() . PHP_EOL;\n    $weekdays->next();\n}\n```"]