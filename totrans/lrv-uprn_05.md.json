["```php\n'connections' => [\n\n    'sqlite' => [\n        'driver' => 'sqlite',\n        'url' => env('DATABASE_URL'),\n        'database' => env('DB_DATABASE', database_path('database.sqlite')),\n        'prefix' => '',\n        'foreign_key_constraints' => env('DB_FOREIGN_KEYS', true),\n    ],\n\n    'mysql' => [\n        'driver' => 'mysql',\n        'url' => env('DATABASE_URL'),\n        'host' => env('DB_HOST', '127.0.0.1'),\n        'port' => env('DB_PORT', '3306'),\n        'database' => env('DB_DATABASE', 'forge'),\n        'username' => env('DB_USERNAME', 'forge'),\n        'password' => env('DB_PASSWORD', ''),\n        'unix_socket' => env('DB_SOCKET', ''),\n        'charset' => 'utf8mb4',\n        'collation' => 'utf8mb4_unicode_ci',\n        'prefix' => '',\n        'prefix_indexes' => true,\n        'strict' => true,\n        'engine' => null,\n        'options' => extension_loaded('pdo_mysql') ? array_filter([\n            PDO::MYSQL_ATTR_SSL_CA => env('MYSQL_ATTR_SSL_CA'),\n        ]) : [],\n    ],\n\n    'pgsql' => [\n        'driver' => 'pgsql',\n        'url' => env('DATABASE_URL'),\n        'host' => env('DB_HOST', '127.0.0.1'),\n        'port' => env('DB_PORT', '5432'),\n        'database' => env('DB_DATABASE', 'forge'),\n        'username' => env('DB_USERNAME', 'forge'),\n        'password' => env('DB_PASSWORD', ''),\n        'charset' => 'utf8',\n        'prefix' => '',\n        'prefix_indexes' => true,\n        'search_path' => 'public',\n        'sslmode' => 'prefer',\n    ],\n\n    'sqlsrv' => [\n        'driver' => 'sqlsrv',\n        'url' => env('DATABASE_URL'),\n        'host' => env('DB_HOST', 'localhost'),\n        'port' => env('DB_PORT', '1433'),\n        'database' => env('DB_DATABASE', 'forge'),\n        'username' => env('DB_USERNAME', 'forge'),\n        'password' => env('DB_PASSWORD', ''),\n        'charset' => 'utf8',\n        'prefix' => '',\n        'prefix_indexes' => true,\n        // 'encrypt' => env('DB_ENCRYPT', 'yes'),\n        // 'trust_server_certificate' => env('DB_TRUST_SERVER_CERTIFICATE', 'false'),\n    ],\n\n]\n```", "```php\nmysql://root:password@127.0.0.1/forge?charset=UTF-8\n```", "```php\n$users = DB::connection('secondary')->select('select * from users');\n```", "```php\n<?php\n\nuse Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nreturn new class extends Migration\n{\n    /**\n * Run the migrations.\n *\n * @return void\n */\n    public function up(): void\n    {\n        Schema::create('users', function (Blueprint $table) {\n            $table->id();\n            $table->string('name');\n            $table->string('email')->unique();\n            $table->timestamp('email_verified_at')->nullable();\n            $table->string('password');\n            $table->rememberToken();\n            $table->timestamps();\n        });\n    }\n\n    /**\n * Reverse the migrations.\n *\n * @return void\n */\n    public function down(): void\n    {\n        Schema::dropIfExists('users');\n    }\n};\n```", "```php\nphp artisan make:migration create_users_table\nphp artisan make:migration add_votes_to_users_table --table=users\nphp artisan make:migration create_users_table --create=users\n```", "```php\nSchema::create('users', function (Blueprint $table) {\n    // Create columns here\n});\n```", "```php\nSchema::create('users', function (Blueprint $table) {\n    $table->string('name');\n});\n```", "```php\nSchema::table('users', function (Blueprint $table) {\n    $table->string('email')->nullable()->after('last_name');\n});\n```", "```php\nSchema::dropIfExists('contacts');\n```", "```php\nSchema::table('users', function (Blueprint $table) {\n    $table->string('name', 100)->change();\n});\n```", "```php\nSchema::table('contacts', function (Blueprint $table) {\n    $table->string('deleted_at')->nullable()->change();\n});\n```", "```php\nSchema::table('contacts', function (Blueprint $table)\n{\n    $table->renameColumn('promoted', 'is_promoted');\n});\n```", "```php\nSchema::table('contacts', function (Blueprint $table)\n{\n    $table->dropColumn('votes');\n});\n```", "```php\n// Squash the schema but keep your existing migrations\nphp artisan schema:dump\n\n// Dump the current database schema and delete all existing migrations\nphp artisan schema:dump --prune\n```", "```php\n// After columns are created...\n$table->primary('primary_id'); // Primary key; unnecessary if used increments()\n$table->primary(['first_name', 'last_name']); // Composite keys\n$table->unique('email'); // Unique index\n$table->unique('email', 'optional_custom_index_name'); // Unique index\n$table->index('amount'); // Basic index\n$table->index('amount', 'optional_custom_index_name'); // Basic index\n```", "```php\n$table->dropPrimary('contacts_id_primary');\n$table->dropUnique('contacts_email_unique');\n$table->dropIndex('optional_custom_index_name');\n\n// If you pass an array of column names to dropIndex, it will\n// guess the index names for you based on the generation rules\n$table->dropIndex(['email', 'amount']);\n```", "```php\n$table->foreign('user_id')->references('id')->on('users');\n```", "```php\n$table->foreign('user_id')\n    ->references('id')\n    ->on('users')\n    ->cascadeOnDelete();\n```", "```php\n$table->foreignId('user_id')->constrained()->cascadeOnDelete();\n```", "```php\n$table->dropForeign('contacts_user_id_foreign');\n```", "```php\n$table->dropForeign(['user_id']);\n```", "```php\nphp artisan migrate\n```", "```php\nphp artisan migrate --seed\n```", "```php\nphp artisan migrate --seed\nphp artisan migrate:refresh --seed\n```", "```php\nphp artisan db:seed\nphp artisan db:seed VotesTableSeeder\n```", "```php\nphp artisan make:seeder ContactsTableSeeder\n```", "```php\n// database/seeders/DatabaseSeeder.php\n...\npublic function run(): void\n{\n    $this->call(ContactsTableSeeder::class);\n}\n```", "```php\n<?php\n\nnamespace Database\\Seeders;\n\nuse Illuminate\\Database\\Seeder;\n\nclass ContactsTableSeeder extends Seeder\n{\n    public function run(): void\n    {\n        DB::table('contacts')->insert([\n            'name' => 'Lupita Smith',\n            'email' => 'lupita@gmail.com',\n        ]);\n    }\n}\n```", "```php\nphp artisan make:factory ContactFactory\n```", "```php\n<?php\n\nnamespace Database\\Factories;\n\nuse App\\Models\\Contact;\nuse Illuminate\\Database\\Eloquent\\Factories\\Factory;\n\nclass ContactFactory extends Factory\n{\n    public function definition(): array\n    {\n        return [\n            'name' => 'Lupita Smith',\n            'email' => 'lupita@gmail.com',\n        ];\n    }\n}\n```", "```php\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Contact extends Model\n{\n    use HasFactory;\n}\n```", "```php\n// app/Models/Contact.php\n...\n * Create a new factory instance for the model.\n *\n * @return \\Illuminate\\Database\\Eloquent\\Factories\\Factory\n */\nprotected static function newFactory()\n{\n    return \\Database\\Factories\\Base\\ContactFactory::new();\n}\n```", "```php\n// Create one\n$contact = Contact::factory()->create();\n\n// Create many\nContact::factory()->count(20)->create();\n```", "```php\n<?php\n\nnamespace Database\\Factories;\n\nuse App\\Models\\Contact;\nuse Illuminate\\Database\\Eloquent\\Factories\\Factory;\n\nclass ContactFactory extends Factory\n{\n    public function definition(): array\n    {\n        return [\n            'name' => fake()->name(),\n            'email' => fake()->email(),\n        ];\n    }\n}\n```", "```php\nreturn ['email' => fake()->unique()->email()];\n```", "```php\n$post = Post::factory()->create([\n    'title' => 'My greatest post ever',\n]);\n\n// Pro-level factory; but don't get overwhelmed!\nUser::factory()->count(20)->has(Address::factory()->count(2))->create()\n```", "```php\n$posts = Post::factory()->count(6);\n```", "```php\n$posts = Post::factory()\n    ->count(6)\n    ->state(new Sequence(\n        ['is_published' => true],\n        ['is_published' => false],\n    ))\n    ->create();\n```", "```php\n<?php\n\nnamespace Database\\Factories;\n\nuse App\\Models\\Contact;\nuse Illuminate\\Database\\Eloquent\\Factories\\Factory;\n\nclass ContactFactory extends Factory\n{\n    protected $model = Contact::class;\n\n    public function definition(): array\n    {\n        return [\n            'name' => 'Lupita Smith',\n            'email' => 'lupita@gmail.com',\n            'company_id' => \\App\\Models\\Company::factory(),\n        ];\n    }\n}\n```", "```php\n// ContactFactory.php\npublic function definition(): array\n{\n    return [\n        'name' => 'Lupita Smith',\n        'email' => 'lupita@gmail.com',\n        'company_id' => Company::factory(),\n        'company_size' => function (array $attributes) {\n            // Uses the \"company_id\" property generated above\n            return Company::find($attributes['company_id'])->size;\n        },\n    ];\n}\n```", "```php\n// Attach 3 addresses\nContact::factory()\n    ->has(Address::factory()->count(3))\n    ->create()\n\n// Accessing information about each user in the child factory\n$contact = Contact::factory()\n    ->has(\n        Address::factory()\n            ->count(3)\n            ->state(function (array $attributes, User $user) {\n                return ['label' => $user->name . ' address'];\n            })\n    )\n    ->create();\n```", "```php\n// Specify details about the created parent\nAddress::factory()\n    ->count(3)\n    ->for(Contact::factory()->state([\n        'name' => 'Imani Carette',\n    ]))\n    ->create();\n\n// Use an existing parent model (assuming we already have it as $contact)\nAddress::factory()\n    ->count(3)\n    ->for($contact)\n    ->create();\n```", "```php\nclass ContactFactory extends Factory\n{\n    protected $model = Contact::class;\n\n    public function definition(): array\n    {\n        return [\n            'name' => 'Lupita Smith',\n            'email' => 'lupita@gmail.com',\n        ];\n    }\n}\n```", "```php\nclass ContactFactory extends Factory\n{\n    protected $model = Contact::class;\n\n    public function definition(): array\n    {\n        return [\n            'name' => 'Lupita Smith',\n            'email' => 'lupita@gmail.com',\n        ];\n    }\n\n    public function vip()\n    {\n        return $this->state(function (array $attributes) {\n            return [\n                'vip' => true,\n                // Uses the \"company_id\" property from the $attributes\n                'company_size' => function () use ($attributes) {\n                    return Company::find($attributes['company_id'])->size;\n                },\n            ];\n        });\n    }\n}\n```", "```php\n$vip = Contact::factory()->vip()->create();\n\n$vips = Contact::factory()->count(3)->vip()->create();\n```", "```php\n$user = User::factory()->create();\n\n$trip = Trip::factory()\n    ->recycle($user)\n    ->create();\n```", "```php\n// Basic statement\nDB::statement('drop table users');\n\n// Raw select, and parameter binding\nDB::select('select * from contacts where validated = ?', [true]);\n\n// Select using the fluent builder\n$users = DB::table('users')->get();\n\n// Joins and other complex calls\nDB::table('users')\n    ->join('contacts', function ($join) {\n        $join->on('users.id', '=', 'contacts.user_id')\n             ->where('contacts.type', 'donor');\n    })\n    ->get();\n```", "```php\n$users = DB::select('select * from users');\n```", "```php\n$usersOfType = DB::select(\n    'select * from users where type = ?',\n    [$type]\n);\n```", "```php\n$usersOfType = DB::select(\n    'select * from users where type = :type',\n    ['type' => $userType]\n);\n```", "```php\nDB::insert(\n    'insert into contacts (name, email) values (?, ?)',\n    ['sally', 'sally@me.com']\n);\n```", "```php\n$countUpdated = DB::update(\n    'update contacts set status = ? where id = ?',\n    ['donor', $id]\n);\n```", "```php\n$countDeleted = DB::delete(\n    'delete from contacts where archived = ?',\n    [true]\n);\n```", "```php\n$usersOfType = DB::table('users')\n    ->where('type', $type)\n    ->get();\n```", "```php\n$emails = DB::table('contacts')\n    ->select('email', 'email2 as second_email')\n    ->get();\n// Or\n$emails = DB::table('contacts')\n    ->select('email')\n    ->addSelect('email2 as second_email')\n    ->get();\n```", "```php\n$newContacts = DB::table('contact')\n    ->where('created_at', '>', now()->subDay())\n    ->get();\n```", "```php\n$vipContacts = DB::table('contacts')->where('vip',true)->get();\n```", "```php\n$newVips = DB::table('contacts')\n    ->where('vip', true)\n    ->where('created_at', '>', now()->subDay());\n// Or\n$newVips = DB::table('contacts')->where([\n    ['vip', true],\n    ['created_at', '>', now()->subDay()],\n]);\n```", "```php\n$priorityContacts = DB::table('contacts')\n    ->where('vip', true)\n    ->orWhere('created_at', '>', now()->subDay())\n    ->get();\n```", "```php\n$contacts = DB::table('contacts')\n    ->where('vip', true)\n    ->orWhere(function ($query) {\n        $query->where('created_at', '>', now()->subDay())\n            ->where('trial', false);\n    })\n    ->get();\n```", "```php\n$mediumDrinks = DB::table('drinks')\n    ->whereBetween('size', [6, 12])\n    ->get();\n```", "```php\n$closeBy = DB::table('contacts')\n    ->whereIn('state', ['FL', 'GA', 'AL'])\n    ->get();\n```", "```php\n$goofs = DB::table('contacts')->whereRaw('id = 12345')->get();\n```", "```php\n$commenters = DB::table('users')\n    ->whereExists(function ($query) {\n        $query->select('id')\n            ->from('comments')\n            ->whereRaw('comments.user_id = users.id');\n    })\n    ->get();\n```", "```php\n$lastNames = DB::table('contacts')->select('city')->distinct()->get();\n```", "```php\n$contacts = DB::table('contacts')\n    ->orderBy('last_name', 'asc')\n    ->get();\n```", "```php\n$populousCities = DB::table('contacts')\n    ->groupBy('city')\n    ->havingRaw('count(contact_id) > 30')\n    ->get();\n```", "```php\n// returns rows 31-40\n$page4 = DB::table('contacts')->skip(30)->take(10)->get();\n```", "```php\n$status = request('status'); // Defaults to null if not set\n\n$posts = DB::table('posts')\n    ->when($status, function ($query) use ($status) {\n        return $query->where('status', $status);\n    })\n    ->get();\n\n// Or\n$posts = DB::table('posts')\n    ->when($ignoreDrafts, function ($query) {\n        return $query->where('draft', false);\n    })\n    ->get();\n```", "```php\n$contacts = DB::table('contacts')->get();\n$vipContacts = DB::table('contacts')->where('vip', true)->get();\n```", "```php\n$newestContact = DB::table('contacts')\n    ->orderBy('created_at', 'desc')\n    ->first();\n```", "```php\n$contactFive = DB::table('contacts')->find(5);\n```", "```php\n$newestContactEmail = DB::table('contacts')\n    ->orderBy('created_at', 'desc')\n    ->value('email');\n```", "```php\n$countVips = DB::table('contacts')\n    ->where('vip', true)\n    ->count();\n```", "```php\n$highestCost = DB::table('orders')->max('amount');\n```", "```php\n$averageCost = DB::table('orders')\n    ->where('status', 'completed')\n    ->avg('amount');\n```", "```php\nDB::table('users')->where('name', 'Wilbur Powery')->dd();\n\n// \"select * from `users` where `name` = ?\"\n// array:1 [ 0 => \"Wilbur Powery\"]\n```", "```php\nUser::where('name', 'Wilbur Powery')->explain()->dd();\n\n/*\narray:1 [\n 0 => {#5111\n +\"id\": 1\n +\"select_type\": \"SIMPLE\"\n +\"table\": \"users\"\n +\"type\": \"ALL\"\n +\"possible_keys\": null\n +\"key\": null\n +\"key_len\": null\n +\"ref\": null\n +\"rows\": \"209\"\n +\"Extra\": \"Using where\"\n }\n]\n*/\n```", "```php\n$contacts = DB::table('contacts')\n    ->select(DB::raw('*, (score * 100) AS integer_score'))\n    ->get();\n```", "```php\n$users = DB::table('users')\n    ->join('contacts', 'users.id', '=', 'contacts.user_id')\n    ->select('users.*', 'contacts.name', 'contacts.status')\n    ->get();\n```", "```php\nDB::table('users')\n    ->join('contacts', function ($join) {\n        $join\n            ->on('users.id', '=', 'contacts.user_id')\n            ->orOn('users.id', '=', 'contacts.proxy_user_id');\n    })\n    ->get();\n```", "```php\n$first = DB::table('contacts')\n    ->whereNull('first_name');\n\n$contacts = DB::table('contacts')\n    ->whereNull('last_name')\n    ->union($first)\n    ->get();\n```", "```php\n$id = DB::table('contacts')->insertGetId([\n    'name' => 'Abe Thomas',\n    'email' => 'athomas1987@gmail.com',\n]);\n\nDB::table('contacts')->insert([\n    ['name' => 'Tamika Johnson', 'email' => 'tamikaj@gmail.com'],\n    ['name' => 'Jim Patterson', 'email' => 'james.patterson@hotmail.com'],\n]);\n```", "```php\nDB::table('contacts')\n    ->where('points', '>', 100)\n    ->update(['status' => 'vip']);\n```", "```php\nDB::table('contacts')->increment('tokens', 5);\nDB::table('contacts')->decrement('tokens');\n```", "```php\nDB::table('users')\n    ->where('last_login', '<', now()->subYear())\n    ->delete();\n```", "```php\nDB::table('contacts')->truncate();\n```", "```php\n// Select all records where the \"isAdmin\" property of the \"options\"\n// JSON column is set to true\nDB::table('users')->where('options->isAdmin', true)->get();\n\n// Update all records, setting the \"verified\" property\n// of the \"options\" JSON column to true\nDB::table('users')->update(['options->isVerified', true]);\n```", "```php\nDB::transaction(function () use ($userId, $numVotes) {\n    // Possibly failing DB query\n    DB::table('users')\n        ->where('id', $userId)\n        ->update(['votes' => $numVotes]);\n\n    // Caching query that we don't want to run if the above query fails\n    DB::table('votes')\n        ->where('user_id', $userId)\n        ->delete();\n});\n```", "```php\nDB::beginTransaction();\n\n// Take database actions\n\nif ($badThingsHappened) {\n    DB::rollBack();\n}\n\n// Take other database actions\n\nDB::commit();\n```", "```php\n<?php\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Contact extends Model {}\n```", "```php\n// In a controller\npublic function save(Request $request)\n{\n    // Create and save a new contact from user input\n    $contact = new Contact();\n    $contact->first_name = $request->input('first_name');\n    $contact->last_name = $request->input('last_name');\n    $contact->email = $request->input('email');\n    $contact->save();\n\n    return redirect('contacts');\n}\n\npublic function show($contactId)\n{\n    // Return a JSON representation of a contact based on a URL segment;\n    // if the contact doesn't exist, throw an exception\n    return Contact::findOrFail($contactId);\n}\n\npublic function vips()\n{\n    // Unnecessarily complex example, but still possible with basic Eloquent\n    // class; adds a \"formalName\" property to every VIP entry\n    return Contact::where('vip', true)->get()->map(function ($contact) {\n        $contact->formalName = \"The exalted {$contact->first_name} of the\n         {$contact->last_name}s\";\n\n        return $contact;\n    });\n}\n```", "```php\nphp artisan make:model Contact\n```", "```php\n<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Contact extends Model\n{\n    //\n}\n```", "```php\nphp artisan make:model Contact --migration\n```", "```php\n    protected $table = 'contacts_secondary';\n```", "```php\n    protected $primaryKey = 'contact_id';\n```", "```php\n    public $incrementing = false;\n```", "```php\n    public $timestamps = false;\n```", "```php\n    protected $dateFormat = 'U';\n```", "```php\n$allContacts = Contact::all();\n```", "```php\n$vipContacts = Contact::where('vip', true)->get();\n```", "```php\n$newestContacts = Contact::orderBy('created_at', 'desc')\n    ->take(10)\n    ->get();\n```", "```php\n// ContactController\npublic function show($contactId)\n{\n    return view('contacts.show')\n        ->with('contact', Contact::findOrFail($contactId));\n}\n```", "```php\n// With where() and first()\nContact::where('name', 'Wilbur Powery')->first();\n\n// With firstWhere()\nContact::firstWhere('name', 'Wilbur Powery');\n```", "```php\n$vipContacts = Contact::where('vip', true)->get();\n```", "```php\n$contacts = Contact::all();\n```", "```php\nContact::chunk(100, function ($contacts) {\n    foreach ($contacts as $contact)  {\n        // Do something with $contact\n    }\n});\n```", "```php\n$countVips = Contact::where('vip', true)->count();\n$sumVotes = Contact::sum('votes');\n$averageSkill = User::avg('skill_level');\n```", "```php\n$contact = new Contact;\n$contact->name = 'Ken Hirata';\n$contact->email = 'ken@hirata.com';\n$contact->save();\n\n// or\n\n$contact = new Contact([\n    'name' => 'Ken Hirata',\n    'email' => 'ken@hirata.com',\n]);\n$contact->save();\n\n// or\n\n$contact = Contact::make([\n    'name' => 'Ken Hirata',\n    'email' => 'ken@hirata.com',\n]);\n$contact->save();\n```", "```php\n$contact = Contact::create([\n    'name' => 'Keahi Hale',\n    'email' => 'halek481@yahoo.com',\n]);\n```", "```php\n$contact = Contact::find(1);\n$contact->email = 'natalie@parkfamily.com';\n$contact->save();\n```", "```php\nContact::where('created_at', '<', now()->subYear())\n    ->update(['longevity' => 'ancient']);\n\n// or\n\n$contact = Contact::find(1);\n$contact->update(['longevity' => 'ancient']);\n```", "```php\n// ContactController\npublic function update(Contact $contact, Request $request)\n{\n    $contact->update($request->all());\n}\n```", "```php\nclass Contact extends Model\n{\n    protected $fillable = ['name', 'email'];\n\n    // or\n\n    protected $guarded = ['id', 'created_at', 'updated_at', 'owner_id'];\n}\n```", "```php\nContact::create($request->only('name', 'email'));\n```", "```php\n$contact = Contact::firstOrCreate(['email' => 'luis.ramos@myacme.com']);\n```", "```php\n$contact = Contact::find(5);\n$contact->delete();\n```", "```php\nContact::destroy(1);\n// or\nContact::destroy([1, 5, 7]);\n```", "```php\nContact::where('updated_at', '<', now()->subYear())->delete();\n```", "```php\nSchema::table('contacts', function (Blueprint $table) {\n    $table->softDeletes();\n});\n```", "```php\n<?php\n\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\SoftDeletes;\n\nclass Contact extends Model\n{\n    use SoftDeletes; // use the trait\n}\n```", "```php\n$allHistoricContacts = Contact::withTrashed()->get();\n```", "```php\nif ($contact->trashed()) {\n    // do something\n}\n```", "```php\n$deletedContacts = Contact::onlyTrashed()->get();\n```", "```php\n$contact->restore();\n\n// or\n\nContact::onlyTrashed()->where('vip', true)->restore();\n```", "```php\n$contact->forceDelete();\n\n// or\n\nContact::onlyTrashed()->forceDelete();\n```", "```php\n$activeVips = Contact::where('vip', true)->where('trial', false)->get();\n```", "```php\n$activeVips = Contact::activeVips()->get();\n```", "```php\nclass Contact extends Model\n{\n    public function scopeActiveVips($query)\n    {\n        return $query->where('vip', true)->where('trial', false);\n    }\n```", "```php\nclass Contact extends Model\n{\n    public function scopeStatus($query, $status)\n    {\n        return $query->where('status', $status);\n    }\n```", "```php\n$friends = Contact::status('friend')->get();\n```", "```php\n$activeOrVips = Contact::active()->orWhere()->vip()->get();\n```", "```php\n...\nclass Contact extends Model\n{\n    protected static function booted()\n    {\n        static::addGlobalScope('active', function (Builder $builder) {\n            $builder->where('active', true);\n        });\n    }\n```", "```php\nphp artisan make:scope ActiveScope\n```", "```php\n<?php\n\nnamespace App\\Models\\Scopes;\n\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\Scope;\n\nclass ActiveScope implements Scope\n{\n    public function apply(Builder $builder, Model $model): void\n    {\n        $builder->where('active', true);\n    }\n}\n```", "```php\n<?php\n\nuse App\\Models\\Scopes;\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Contact extends Model\n{\n    protected static function booted()\n    {\n        static::addGlobalScope(new ActiveScope);\n    }\n}\n```", "```php\n$allContacts = Contact::withoutGlobalScope('active')->get();\n```", "```php\nContact::withoutGlobalScope(ActiveScope::class)->get();\n\nContact::withoutGlobalScopes([ActiveScope::class, VipScope::class])->get();\n```", "```php\nContact::withoutGlobalScopes()->get();\n```", "```php\n// Model definition:\nuse Illuminate\\Database\\Eloquent\\Casts\\Attribute;\n\nclass Contact extends Model\n{\n    protected function name(): Attribute\n    {\n        return Attribute::make(\n            get: fn (string $value) => $value ?: '(No name provided)',\n        );\n    }\n}\n\n// Accessor usage:\n$name = $contact->name;\n```", "```php\n// Model definition:\nclass Contact extends Model\n{\n    protected function fullName(): Attribute\n    {\n        return Attribute::make(\n            get: fn () => $this->first_name . ' ' . $this->last_name,\n        );\n    }\n}\n\n// Accessor usage:\n$fullName = $contact->full_name;\n```", "```php\n// Defining the mutator\nclass Order extends Model\n{\n    protected function amount(): Attribute\n    {\n        return Attribute::make(\n            set: fn (string $value) => $value > 0 ? $value : 0,\n        );\n    }\n}\n\n// Using the mutator\n$order->amount = '15';\n```", "```php\n// Defining the mutator\nclass Order extends Model\n{\n    protected function workgroupName(): Attribute\n    {\n        return Attribute::make(\n            set: fn (string $value) => [\n                'email' => \"{$value}@ourcompany.com\",\n            ],\n        );\n    }\n}\n\n// Using the mutator\n$order->workgroup_name = 'jstott';\n```", "```php\nuse App\\Enums\\SubscriptionStatus;\n\nclass Contact extends Model\n{\n    protected $casts = [\n        'vip' => 'boolean',\n        'children_names' => 'array',\n        'birthday' => 'date',\n        'subscription' => SubscriptionStatus::class\n    ];\n}\n```", "```php\n<?php\n\nnamespace App\\Casts;\n\nuse Carbon\\Carbon;\nuse Illuminate\\Support\\Facades\\Crypt;\nuse Illuminate\\Contracts\\Database\\Eloquent\\CastsAttributes;\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Encrypted implements CastsAttributes\n{\n\n    /**\n * Cast the given value.\n *\n * @param  array<string, mixed>  $attributes\n */\n    public function get(Model $model, string $key, mixed $value, array $attributes)\n    {\n        return Crypt::decrypt($value);\n    }\n\n    /**\n * Prepare the given value for storage.\n *\n * @param  array<string, mixed>  $attributes\n */\n    public function set(Model $model, string $key, mixed $value, array $attributes)\n    {\n        return Crypt::encrypt($value);\n    }\n}\n```", "```php\nprotected $casts = [\n    'ssn' => \\App\\Casts\\Encrypted::class,\n];\n```", "```php\n$collection = collect([1, 2, 3]);\n```", "```php\n$odds = $collection->reject(function ($item) {\n    return $item % 2 === 0;\n});\n```", "```php\n$multiplied = $collection->map(function ($item) {\n    return $item * 10;\n});\n```", "```php\n$sum = $collection\n    ->filter(function ($item) {\n        return $item % 2 == 0;\n    })->map(function ($item) {\n        return $item * 10;\n    })->sum();\n```", "```php\n$verifiedContacts = App\\Contact::all()->filter(function ($contact) {\n    return $contact->isVerified();\n});\n```", "```php\n$verifiedContacts = App\\Contact::cursor()->filter(function ($contact) {\n    return $contact->isVerified();\n});\n```", "```php\n...\nclass OrderCollection extends Collection\n{\n    public function sumBillableAmount()\n    {\n        return $this->reduce(function ($carry, $order) {\n            return $carry + ($order->billable ? $order->amount : 0);\n        }, 0);\n    }\n}\n\n...\nclass Order extends Model\n{\n    public function newCollection(array $models = [])\n    {\n        return new OrderCollection($models);\n    }\n```", "```php\n$orders = Order::all();\n$billableAmount = $orders->sumBillableAmount();\n```", "```php\n$contactArray = Contact::first()->toArray();\n$contactJson = Contact::first()->toJson();\n$contactsArray = Contact::all()->toArray();\n$contactsJson = Contact::all()->toJson();\n```", "```php\n// routes/web.php\nRoute::get('api/contacts', function () {\n    return Contact::all();\n});\n\nRoute::get('api/contacts/{id}', function ($id) {\n    return Contact::findOrFail($id);\n});\n```", "```php\nclass Contact extends Model\n{\n    public $hidden = ['password', 'remember_token'];\n```", "```php\nclass Contact extends Model\n{\n    public $visible = ['name', 'email', 'status'];\n```", "```php\nclass User extends Model\n{\n    public $hidden = ['contacts'];\n\n    public function contacts()\n    {\n        return $this->hasMany(Contact::class);\n    }\n```", "```php\n$user = User::with('contacts')->first();\n```", "```php\n$array = $user->makeVisible('remember_token')->toArray();\n```", "```php\nclass Contact extends Model\n{\n    protected $appends = ['full_name'];\n\n    public function getFullNameAttribute()\n    {\n        return \"{$this->first_name} {$this->last_name}\";\n    }\n}\n```", "```php\nclass Contact extends Model\n{\n    public function phoneNumber()\n    {\n        return $this->hasOne(PhoneNumber::class);\n    }\n```", "```php\nreturn $this->hasOne(PhoneNumber::class, 'owner_id');\n```", "```php\n$contact = Contact::first();\n$contactPhone = $contact->phoneNumber;\n```", "```php\nclass PhoneNumber extends Model\n{\n    public function contact()\n    {\n        return $this->belongsTo(Contact::class);\n    }\n```", "```php\n$contact = $phoneNumber->contact;\n```", "```php\nclass User extends Model\n{\n    public function contacts()\n    {\n        return $this->hasMany(Contact::class);\n    }\n```", "```php\n$user = User::first();\n$usersContacts = $user->contacts;\n```", "```php\n$donors = $user->contacts->filter(function ($contact) {\n    return $contact->status == 'donor';\n});\n\n$lifetimeValue = $contact->orders->reduce(function ($carry, $order) {\n    return $carry + $order->amount;\n}, 0);\n```", "```php\nclass Contact extends Model\n{\n    public function user()\n    {\n        return $this->belongsTo(User::class);\n    }\n```", "```php\n$userName = $contact->user->name;\n```", "```php\n$contact = Contact::first();\n\n$contact->user()->associate(User::first());\n$contact->save();\n\n// and later\n\n$contact->user()->dissociate();\n$contact->save();\n```", "```php\n$donors = $user->contacts()->where('status', 'donor')->get();\n```", "```php\n$postsWithComments = Post::has('comments')->get();\n```", "```php\n$postsWithManyComments = Post::has('comments', '>=', 5)->get();\n```", "```php\n$usersWithPhoneBooks = User::has('contacts.phoneNumbers')->get();\n```", "```php\n// Gets all contacts with a phone number containing the string \"867-5309\"\n$jennyIGotYourNumber = Contact::whereHas('phoneNumbers', function ($query) {\n    $query->where('number', 'like', '%867-5309%');\n})->get();\n\n// Shortened version of the same code above\n$jennyIGotYourNumber = Contact::whereRelation(\n    'phoneNumbers',\n    'number',\n    'like',\n'%867-5309')->get();\n```", "```php\nclass User extends Model\n{\n    public function newestContact(): HasOne\n    {\n        return $this->hasOne(Contact::class)->latestOfMany();\n    }\n\n    public function oldestContact(): HasOne\n    {\n        return $this->hasOne(Contact::class)->oldestOfMany();\n    }\n\n    public function emergencyContact(): HasOne\n    {\n        return $this->hasOne(Contact::class)->ofMany('priority', 'max');\n    }\n```", "```php\nclass User extends Model\n{\n    public function phoneNumbers()\n    {\n        // Newer string-based syntax\n        return $this->through('contact')->has('phoneNumber');\n\n        // Traditional syntax\n        return $this->hasManyThrough(PhoneNumber::class, Contact::class);\n    }\n```", "```php\nclass User extends Model\n{\n    public function phoneNumber()\n    {\n        // Newer string-based syntax\n        return $this->through('company')->has('phoneNumber');\n\n        // Traditional syntax\n        return $this->hasOneThrough(PhoneNumber::class, Company::class);\n    }\n```", "```php\nclass User extends Model\n{\n    public function contacts()\n    {\n        return $this->belongsToMany(Contact::class);\n    }\n}\n```", "```php\nclass Contact extends Model\n{\n    public function users()\n    {\n        return $this->belongsToMany(User::class);\n    }\n}\n```", "```php\n$user = User::first();\n\n$user->contacts->each(function ($contact) {\n    // do something\n});\n\n$contact = Contact::first();\n\n$contact->users->each(function ($user) {\n    // do something\n});\n\n$donors = $user->contacts()->where('status', 'donor')->get();\n```", "```php\npublic function contacts()\n{\n    return $this->belongsToMany(Contact::class)\n        ->withTimestamps()\n        ->withPivot('status', 'preferred_greeting');\n}\n```", "```php\n$user = User::first();\n\n$user->contacts->each(function ($contact) {\n    echo sprintf(\n        'Contact associated with this user at: %s',\n        $contact->pivot->created_at\n    );\n});\n```", "```php\n// User model\npublic function groups()\n{\n    return $this->belongsToMany(Group::class)\n        ->withTimestamps()\n        ->as('membership');\n}\n```", "```php\n// Using this relationship:\nUser::first()->groups->each(function ($group) {\n    echo sprintf(\n        'User joined this group at: %s',\n        $group->membership->created_at\n    );\n});\n```", "```php\nclass Star extends Model\n{\n    public function starrable()\n    {\n        return $this->morphTo();\n    }\n}\n\nclass Contact extends Model\n{\n    public function stars()\n    {\n        return $this->morphMany(Star::class, 'starrable');\n    }\n}\n\nclass Event extends Model\n{\n    public function stars()\n    {\n        return $this->morphMany(Star::class, 'starrable');\n    }\n}\n```", "```php\n$contact = Contact::first();\n$contact->stars()->create();\n```", "```php\n$contact = Contact::first();\n\n$contact->stars->each(function ($star) {\n    // Do stuff\n});\n```", "```php\n$stars = Star::all();\n\n$stars->each(function ($star) {\n    var_dump($star->starrable); // An instance of Contact or Event\n});\n```", "```php\nclass Star extends Model\n{\n    public function starrable()\n    {\n        return $this->morphsTo;\n    }\n\n    public function user()\n    {\n        return $this->belongsTo(User::class);\n    }\n}\n\nclass User extends Model\n{\n    public function stars()\n    {\n        return $this->hasMany(Star::class);\n    }\n}\n```", "```php\n$user = User::first();\n$event = Event::first();\n$event->stars()->create(['user_id' => $user->id]);\n```", "```php\nclass Contact extends Model\n{\n    public function tags()\n    {\n        return $this->morphToMany(Tag::class, 'taggable');\n    }\n}\n\nclass Event extends Model\n{\n    public function tags()\n    {\n        return $this->morphToMany(Tag::class, 'taggable');\n    }\n}\n\nclass Tag extends Model\n{\n    public function contacts()\n    {\n        return $this->morphedByMany(Contact::class, 'taggable');\n    }\n\n    public function events()\n    {\n        return $this->morphedByMany(Event::class, 'taggable');\n    }\n}\n```", "```php\n$tag = Tag::firstOrCreate(['name' => 'likes-cheese']);\n$contact = Contact::first();\n$contact->tags()->attach($tag->id);\n```", "```php\n$contact = Contact::first();\n\n$contact->tags->each(function ($tag) {\n    // Do stuff\n});\n\n$tag = Tag::first();\n$tag->contacts->each(function ($contact) {\n    // Do stuff\n});\n```", "```php\nclass PhoneNumber extends Model\n{\n    protected $touches = ['contact'];\n\n    public function contact()\n    {\n        return $this->belongsTo(Contact::class);\n    }\n}\n```", "```php\n$contacts = Contact::all();\n\nforeach ($contacts as $contact) {\n    foreach ($contact->phone_numbers as $phone_number) {\n        echo $phone_number->number;\n    }\n}\n```", "```php\n$contacts = Contact::with('phoneNumbers')->get();\n```", "```php\n$contacts = Contact::with(['phoneNumbers', 'addresses'])->get();\n```", "```php\n$authors = Author::with('posts.comments')->get();\n```", "```php\n$contacts = Contact::with(['addresses' => function ($query) {\n    $query->where('mailable', true);\n}])->get();\n```", "```php\n$contacts = Contact::all();\n\nif ($showPhoneNumbers) {\n    $contacts->load('phoneNumbers');\n}\n```", "```php\n$contacts = Contact::all();\n\nif ($showPhoneNumbers) {\n    $contacts->loadMissing('phoneNumbers');\n}\n```", "```php\nuse Illuminate\\Database\\Eloquent\\Model;\n\n    public function boot()\n    {\n        Model::preventLazyLoading(! $this->app->isProduction());\n    }\n```", "```php\n$authors = Author::withCount('posts')->get();\n\n// Adds a \"posts_count\" integer to each Author with a count of that\n// author's related posts\n```", "```php\nclass AppServiceProvider extends ServiceProvider\n{\n    public function boot(): void\n    {\n        $thirdPartyService = new SomeThirdPartyService;\n\n        Contact::creating(function ($contact) use ($thirdPartyService) {\n            try {\n                $thirdPartyService->addContact($contact);\n            } catch (Exception $e) {\n                Log::error('Failed adding contact to ThirdPartyService; canceled.');\n\n                return false; // Cancels Eloquent create()\n            }\n        });\n    }\n```", "```php\npublic function test_active_page_shows_active_and_not_inactive_contacts()\n{\n    $activeContact = Contact::factory()->create();\n    $inactiveContact = Contact::factory()->inactive()->create();\n\n    $this->get('active-contacts')\n        ->assertSee($activeContact->name)\n        ->assertDontSee($inactiveContact->name);\n}\n```", "```php\npublic function test_contact_creation_works()\n{\n    $this->post('contacts', [\n        'email' => 'jim@bo.com'\n    ]);\n\n    $this->assertDatabaseHas('contacts', [\n        'email' => 'jim@bo.com'\n    ]);\n}\n```", "```php\npublic function test_full_name_accessor_works()\n{\n    $contact = Contact::factory()->make([\n        'first_name' => 'Alphonse',\n        'last_name' => 'Cumberbund'\n    ]);\n\n    $this->assertEquals('Alphonse Cumberbund', $contact->fullName);\n}\n\npublic function test_vip_scope_filters_out_non_vips()\n{\n    $vip = Contact::factory()->vip()->create();\n    $nonVip = Contact::factory()->create();\n\n    $vips = Contact::vips()->get();\n\n    $this->assertTrue($vips->contains('id', $vip->id));\n    $this->assertFalse($vips->contains('id', $nonVip->id));\n}\n```"]