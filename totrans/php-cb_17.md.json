["```php\nfunction doSomethingAsync(): Promise\n{\n    // ...\n}\n\ndoSomethingAsync()->onResolve(function (Throwable $error = null, $value = null) {\n    if ($error) {\n        // ...\n    } else {\n        // ...\n    }\n});\n```", "```php\nfunction doSomethingAsync(): Promise\n{\n    // ...\n}\n\ndoSomethingAsync()->then(function ($value) {\n    // ...\n}, function ($error) {\n    // ...\n});\n```", "```php\n$client = HttpClientBuilder::buildDefault();\n\n$promise = Amp\\call(function () use ($client) {\n    try {\n        $response = yield $client->request(new Request(\"https://eamann.com\"));\n\n        return $response->getBody()->buffer();\n    } catch (HttpException $e) {\n        // ...\n    }\n});\n\n$promise->onResolve(function ($error = null, $value = null) {\n    if ($error) {\n        // ...\n    } else {\n        var_dump($value);\n    }\n});\n```", "```php\n$fiber = new Fiber(function (): void {\n    $value = Fiber::suspend('fiber');\n    echo \"Value used to resume fiber: \", $value, \"\\n\";\n});\n\n$value = $fiber->start();\n\necho \"Value from fiber suspending: \", $value, \"\\n\";\n\n$fiber->resume('test');\n```", "```php\nuse Amp\\Http\\Client\\HttpClientBuilder;\nuse Amp\\Http\\Client\\Request;\n\nuse function Amp\\Promise\\all;\nuse function Amp\\Promise\\wait;\n\n$client = HttpClientBuilder::buildDefault();\n$promises = [];\n\n$apiUrls = ['\\https://github.com', '\\https://gitlab.com', '\\https://bitbucket.org'];\n\nforeach($apiUrls as $url) {\n    $promises[$url] = Amp\\call(static function() use ($client, $url) {\n        $request = new Request($url);\n\n        $response = yield $client->request($request);\n\n        $body = yield $response->getBody()->buffer();\n\n        return $body;\n    });\n}\n\n$responses = wait(all($promises));\n```", "```php\nuse Amp\\Promise;\nuse function Amp\\ParallelFunctions\\parallelMap;\n\n$values = Promise\\wait(parallelMap([3, 1, 5, 2, 6], function ($i) {\n    echo \"Sleeping for {$i} seconds.\" . PHP_EOL; ![1](assets/1.png)\n\n    \\sleep($i); ![2](assets/2.png)\n\n    echo \"Slept for {$i} seconds.\" . PHP_EOL; ![3](assets/3.png)\n\n    return $i ** 2; ![4](assets/4.png)\n}));\n\nprint_r($values); ![5](assets/5.png)\n```", "```php\nuse Amp\\Delayed;\nuse Amp\\Loop;\nuse function Amp\\asyncCall;\n\nasyncCall(function () {\n    for ($i = 0; $i < 5; $i++) { ![1](assets/1.png)\n        print \"Loop A - \" . $i . PHP_EOL;\n        yield new Delayed(1000); ![2](assets/2.png)\n    }\n});\n\nasyncCall(function () {\n    for ($i = 0; $i < 5; $i++) { ![3](assets/3.png)\n        print \"Loop B - \" . $i . PHP_EOL;\n        yield new Delayed(400); ![4](assets/4.png)\n    }\n});\n\nLoop::run(); ![5](assets/5.png)\n```", "```php\n% php concurrent.php\nLoop A - 0\nLoop B - 0\nLoop B - 1\nLoop B - 2\nLoop A - 1\nLoop B - 3\nLoop B - 4\nLoop A - 2\nLoop A - 3\nLoop A - 4\n```", "```php\nuse Amp\\Delayed;\nuse Amp\\Loop;\nuse function Amp\\asyncCall;\n\n$start = microtime(true);\n\n// ...\n\nLoop::run();\n\n$time = microtime(true) - $start;\necho \"Executed in {$time} seconds\" . PHP_EOL;\n```", "```php\nclass Reducer implements Task\n{\n    private $array;\n    private $preHash;\n    private $count;\n\n    public function __construct(\n        array $array,\n        string $preHash = '',\n        int $count = 1000)\n    {\n        $this->array = $array;\n        $this->preHash = $preHash;\n        $this->count = $count;\n    }\n\n    public function run(Environment $environment)\n    {\n        $reduction = $this->preHash;\n\n        foreach($this->array as $item) {\n            $reduction = hash_pbkdf2('sha256', $item, $reduction, $this->count);\n        }\n\n        return $reduction;\n    }\n}\n```", "```php\nuse Amp\\Loop;\nuse Amp\\Parallel\\Worker\\DefaultPool;\n\n$results = [];\n\n$tasks = [\n    new Reducer(range('a', 'z'), count: 100),\n    new Reducer(range('a', 'z'), count: 1000),\n    new Reducer(range('a', 'z'), count: 10000),\n    new Reducer(range('a', 'z'), count: 100000),\n    new Reducer(range('A', 'Z'), count: 100),\n    new Reducer(range('A', 'Z'), count: 1000),\n    new Reducer(range('A', 'Z'), count: 10000),\n    new Reducer(range('A', 'Z'), count: 100000),\n];\n\nLoop::run(function () use (&$results, $tasks) {\n    require_once __DIR__ . '/vendor/autoload.php';\n    use PhpAmqpLib\\Connection\\AMQPStreamConnection;\n    use PhpAmqpLib\\Message\\AMQPMessage;\n    $timer = Loop::repeat(200, function () {\n        printf('.');\n    });\n    Loop::unreference($timer);\n\n    $pool = new DefaultPool;\n\n    $coroutines = [];\n\n    foreach ($tasks as $index => $task) {\n        $coroutines[] = Amp\\call(function () use ($pool, $index, $task) {\n            $result = yield $pool->enqueue($task);\n\n            return $result;\n        });\n    }\n\n    $results = yield Amp\\Promise\\all($coroutines);\n\n    return yield $pool->shutdown();\n});\n\necho PHP_EOL . 'Hash Results:' . PHP_EOL;\necho var_export($results, true) . PHP_EOL;\n```", "```php\nuse Amp\\Parallel\\Worker;\nuse Amp\\Promise;\n\n$forecasts = [\n    'Washington, DC' => 'https://api.weather.gov/gridpoints/LWX/97,71/forecast',\n    'New York, NY'   => 'https://api.weather.gov/gridpoints/OKX/33,37/forecast',\n    'Tualatin, OR'   => 'https://api.weather.gov/gridpoints/PQR/108,97/forecast',\n];\n\n$promises = [];\nforeach ($forecasts as $city => $forecast) {\n    $promises[$city] = Worker\\enqueueCallable('file_get_contents', $forecast); ![1](assets/1.png)\n}\n\n$responses = Promise\\wait(Promise\\all($promises)); ![2](assets/2.png)\n\nforeach($responses as $city => $forecast) {\n    $forecast = json_decode($forecast); ![3](assets/3.png)\n    $latest = $forecast->properties->periods[0];\n\n    echo \"Forecast for {$city}:\" . PHP_EOL;\n    print_r($latest);\n}\n```", "```php\nuse PhpAmqpLib\\Connection\\AMQPStreamConnection;\n\n$connection = new AMQPStreamConnection('127.0.0.1', 5762, 'guest', 'guest'); ![1](assets/1.png)\n\n$channel = $connection->channel();\n$channel->queue_declare('default', false, false, false, false); ![2](assets/2.png)\n\necho '... Waiting for messages. To exit press CTRL+C' . PHP_EOL;\n\n$callback = function($msg) {\n    $data = json_decode($msg->body, true); ![3](assets/3.png)\n    $to = $data['to'];\n    $from = $data['from'] ?? 'worker.local';\n    $subject = $data['subject'];\n    $message = wordwrap($data['message'], 70) . PHP_EOL;\n\n    $headers = \"From: {$from} PHP_EOL X-Mailer: PHP Worker\";\n\n    print_r([$to, $subject, $message, $headers]) . PHP_EOL; ![4](assets/4.png)\n\n    mail($to, $subject, $message, $headers);\n\n    $msg->ack(); ![5](assets/5.png)\n};\n\n$channel->basic_consume('default', '', false, false, false, false, $callback); ![6](assets/6.png)\nwhile(count($channel->callbacks)) {\n    $channel->wait(); ![7](assets/7.png)\n}\n```", "```php\nuse PhpAmqpLib\\Connection\\AMQPStreamConnection;\nuse PhpAmqpLib\\Message\\AMQPMessage;\n\n$connection = new AMQPStreamConnection('127.0.0.1', 5672, 'guest', 'guest'); ![1](assets/1.png)\n\n$channel = $connection->channel();\n$channel->queue_declare('default', false, false, false, false); ![2](assets/2.png)\n\n$message = [\n    'subject' => 'Welcome to the team!',\n    'from'    => 'admin@mail.local',\n    'message' => \"Welcome to the team!\\r\\nWe're excited to have you here!\"\n];\n\n$teammates = [\n    'adam@eden.local',\n    'eve@eden.local',\n    'cain@eden.local',\n    'abel@eden.local',\n];\n\nforeach($teammates as $employee) {\n    $email = $message;\n    $email['to'] = $employee;\n\n    $msg = new AMQPMessage(json_encode($email)); ![3](assets/3.png)\n    $channel->basic_publish($msg, '', 'default'); ![4](assets/4.png)\n}\n\n$channel->close(); ![5](assets/5.png)\n$connection->close();\n```", "```php\n$ docker run -d -h localhost -p 127.0.0.1:5672:5672 --name rabbit rabbitmq:3\n```", "```php\n$fiber = new Fiber(function($stream): void {\n    while (!feof($stream)) {\n        $contents = fread($stream, 50); ![1](assets/1.png)\n        Fiber::suspend($contents); ![2](assets/2.png)\n    }\n});\n\n$stream = fopen('https://www.eamann.com/', 'r');\nstream_set_blocking($stream, false); ![3](assets/3.png)\n\n$output = fopen('cache.html', 'w'); ![4](assets/4.png)\n\n$contents = $fiber->start($stream); ![5](assets/5.png)\n\n$num_bytes = 0;\nwhile (!$fiber->isTerminated()) {\n        echo chr(27) . \"[0G\"; ![6](assets/6.png)\n\n        $num_bytes += strlen($contents);\n        fwrite($output, $contents); ![7](assets/7.png)\n\n        echo str_pad(\"Wrote {$num_bytes} bytes ...\", 24, ' ', STR_PAD_RIGHT);\n        usleep(500); ![8](assets/8.png)\n\n        $contents = $fiber->resume(); ![9](assets/9.png)\n}\n\necho chr(27) . \"[0G\";\necho \"Done writing {$num_bytes} bytes to cache.html!\" . PHP_EOL;\n\nfclose($stream); ![10](assets/10.png)\nfclose($output);\n```", "```php\n$fiber = new Fiber(function(): void {\n    try {\n        Fiber::suspend(); ![1](assets/1.png)\n    }\n    catch (Exception $e) {\n        echo $e->getMessage() . PHP_EOL; ![2](assets/2.png)\n    }\n\n    echo 'Finished within Fiber' . PHP_EOL; ![3](assets/3.png)\n});\n\n$fiber->start(); ![4](assets/4.png)\n$fiber->throw(new Exception('Error')); ![5](assets/5.png)\n```"]