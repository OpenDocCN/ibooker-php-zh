- en: Chapter 1\. Variables
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 1 章 变量
- en: The foundation of a flexible application is *variability*—the capability of
    the program to serve multiple purposes in different contexts. *Variables* are
    a common mechanism to build such flexibility in any programming language. These
    named placeholders reference a specific value that a program wants to use. This
    could be a number, a raw string, or even a more complex object with its own properties
    and methods. The point is that a variable is the way a program (and the developer)
    references that value and passes it along from one part of the program to another.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 灵活应用的基础是*变量*——程序在不同上下文中提供多种用途的能力。*变量*是任何编程语言中构建此类灵活性的常见机制。这些命名占位符引用程序希望使用的特定值。这可以是一个数字、一个原始字符串，甚至是一个具有自己属性和方法的更复杂的对象。关键在于变量是程序（以及开发者）引用该值并将其从程序的一部分传递到另一部分的方式。
- en: Variables do not need to be set by default—it is perfectly reasonable to define
    a placeholder variable without assigning any value to it. Think of this like having
    an empty box on the shelf, ready and waiting to receive a gift for Christmas.
    You can easily find the box—the variable—but because nothing is inside it, you
    can’t do much with it.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 变量默认情况下不需要设置——定义一个占位符变量而不给它分配任何值是完全合理的。可以将其视为架子上的空盒子，准备好等待圣诞节礼物。您可以轻松找到这个盒子——即变量——但因为里面什么也没有，所以您不能做太多事情。
- en: For example, assume the variable is called `$giftbox`. If you were to try to
    check the value of this variable right now, it would be empty, as it has not yet
    been set. In fact, `empty($giftbox)` will return `true`, and `isset($giftbox)`
    will return `false`. The box is both empty and not yet set.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设变量称为 `$giftbox`。如果您现在尝试检查此变量的值，它将是空的，因为它尚未设置。实际上，`empty($giftbox)` 将返回
    `true`，而 `isset($giftbox)` 将返回 `false`。这个盒子既是空的，也还未设置。
- en: Note
  id: totrans-4
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: It’s important to remember that any variable that has not been explicitly defined
    (or set) will be treated as `empty()` by PHP. An actually defined (or set) variable
    can either be empty or non-empty depending on its value, as any real value that
    evaluates to `false` will be treated as empty.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要记住，任何未显式定义（或设置）的变量在 PHP 中将被视为 `empty()`。一个实际定义（或设置）的变量可以是空的或非空的，具体取决于其值，因为任何评估为
    `false` 的实际值将被视为空。
- en: Broadly speaking, programming languages can either be strongly or loosely typed.
    A strongly typed language requires explicit identification of all variable, parameter,
    and function return types and enforces that the type of each value absolutely
    matches expectations. With a loosely typed language—like PHP—values are typed
    *dynamically* when they’re used. For example, developers can store an integer
    (like `42`) in a variable and then use that variable as a string elsewhere (i.e.,
    `"42"`), and PHP will transparently cast that variable from an integer to a string
    at runtime.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 广义上讲，编程语言可以是强类型或松散类型。强类型语言要求明确标识所有变量、参数和函数返回类型，并强制确保每个值的类型完全符合预期。而松散类型语言（如 PHP）在使用时对值进行*动态*类型化。例如，开发者可以将整数（如
    `42`）存储在变量中，然后在其他地方将该变量用作字符串（即 `"42"`），PHP 将在运行时将该变量从整数透明地转换为字符串。
- en: The advantage of loose typing is that developers don’t need to identify how
    they will use a variable when it’s defined, as the interpreter can do that identification
    well enough at runtime. A key disadvantage is that it’s not always clear how certain
    values will be treated when the interpreter coerces them from one type to another.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 松散类型的优势在于，开发者在定义变量时不需要确定其如何使用，因为解释器可以在运行时很好地识别。其主要缺点在于，当解释器从一种类型强制转换为另一种类型时，某些值将如何处理并不总是清楚。
- en: PHP is well known as a loosely typed language. This sets the language apart
    as developers are not required to identify the type of a specific variable when
    it’s created or even when it’s called. The interpreter behind PHP will identify
    the right type when the variable is used and, in many cases, transparently cast
    the variable as a different type at runtime. [Table 1-1](#php_empty_expressions)
    illustrates various expressions that, as of PHP 8.0, are evaluated as “empty”
    regardless of their underlying type.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: PHP 以松散类型语言而闻名。这使得该语言与众不同，开发者在创建或调用特定变量时无需明确标识其类型。PHP 解释器会在变量使用时识别正确的类型，并且在许多情况下，会在运行时将变量透明地转换为不同的类型。[表格
    1-1](#php_empty_expressions) 展示了各种表达式，截至 PHP 8.0 版本，无论其底层类型如何，都被评估为“空”。
- en: Table 1-1\. PHP empty expressions
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 表格 1-1 PHP 空表达式
- en: '| Expression | `empty($x)` |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| 表达式 | `empty($x)` |'
- en: '| --- | --- |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `$x = ""` | `true` |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| `$x = ""` | `true` |'
- en: '| `$x = null` | `true` |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| `$x = null` | `true` |'
- en: '| `$x = []` | `true` |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| `$x = []` | `true` |'
- en: '| `$x = false` | `true` |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| `$x = false` | `true` |'
- en: '| `$x = 0` | `true` |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| `$x = 0` | `true` |'
- en: '| `$x = "0"` | `true` |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| `$x = "0"` | `true` |'
- en: Note that some of these expressions are not truly empty but are treated as such
    by PHP. In common conversation, they’re considered `falsey` because they are treated
    to be equivalent to `false` although they’re not identical to `false`. It’s therefore
    important to *explicitly* check for expected values like `null` or `false` or
    `0` in an application rather than relying on language constructs like `empty()`
    to do the check for you. In such cases, you might want to check for emptiness
    of a variable *and* make an explicit equality check against a known, fixed value.^([1](ch01.html#idm45875192117424))
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，其中一些表达式虽然不是真正的空值，但在PHP中被视为空值。在一般对话中，它们被视为`falsey`，因为它们被视为等同于`false`，尽管它们与`false`并非完全相同。因此，在应用程序中明确检查预期值如`null`、`false`或`0`比依赖于像`empty()`这样的语言结构更为重要。在这种情况下，您可能希望检查变量是否为空，并对已知的固定值进行显式的等式检查。^([1](ch01.html#idm45875192117424))
- en: The recipes in this chapter handle the basics of variable definition, management,
    and utilization in PHP.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的示例介绍了PHP中变量定义、管理和利用的基础知识。
- en: 1.1 Defining Constants
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1.1 定义常量
- en: Problem
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to define a specific variable in your program to have a fixed value
    that cannot be mutated or changed by any other code.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望在程序中定义一个特定的变量，使其具有固定的值，不受任何其他代码的突变或更改影响。
- en: Solution
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'The following block of code uses `define()` to explicitly define the value
    of a globally scoped constant that cannot be changed by other code:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码块使用`define()`来显式定义一个全局作用域常量的值，其他代码无法更改它：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As an alternative approach, the following block of code uses the `const` directive
    within a class to define a constant scoped to that class itself:^([2](ch01.html#idm45875192074384))
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 作为替代方法，以下代码块使用类内的`const`指令来定义一个仅在该类内部作用域中有效的常量：^([2](ch01.html#idm45875192074384))
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Discussion
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: If a constant is defined in an application, the function `defined()` will return
    `true` and let you know that you can access that constant directly within your
    code. If the constant is not yet defined, PHP tries to guess at what you’re doing
    and instead converts the reference to the constant into a string literal.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在应用程序中定义了一个常量，函数`defined()`将返回`true`，告诉您可以直接在代码中访问该常量。如果常量尚未定义，PHP会尝试猜测您的意图，并将常量引用转换为字符串字面量。
- en: Tip
  id: totrans-30
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: Writing constant names in all caps is not required. However, this convention,
    defined in the [Basic Coding Standard (PHP Standard Recommendation 1, or PSR-1)](https://oreil.ly/_rNMe)
    as published by the [PHP Framework Interoperability Group (PHP-FIG)](https://oreil.ly/JHj-l),
    is strongly encouraged by documented standards.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 将常量名称全部大写并非必需。但是，PHP基础编码规范（PHP标准推荐1，或PSR-1）中定义的这一约定被PHP框架互操作性组（PHP-FIG）强烈推荐。[Basic
    Coding Standard (PHP Standard Recommendation 1, or PSR-1)](https://oreil.ly/_rNMe)中有详细的标准。
- en: 'For example, the following block of code will assign the value of `MY_CONSTANT`
    to the variable `$x` only when the constant is defined. Prior to PHP 8.0, an undefined
    constant would lead `$x` to hold the literal string `"MY_CONSTANT"` instead:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下代码块只有在定义了常量时才会将`MY_CONSTANT`的值赋给变量`$x`。在PHP 8.0之前，未定义的常量会导致`$x`保存字面字符串`"MY_CONSTANT"`：
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If the expected value of `MY_CONSTANT` is anything other than a string, the
    fallback behavior of PHP to provide a string literal could introduce unexpected
    side effects into your application. The interpreter won’t necessarily crash, but
    having `"MY_​CON⁠STANT"` floating around where an integer is expected will cause
    problems. As of PHP 8.0, referencing an as-yet-undefined constant results in a
    fatal error.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`MY_CONSTANT`的预期值不是字符串，则PHP的回退行为会导致应用程序出现意外副作用。解释器不一定会崩溃，但在期望整数的位置出现`"MY_​CON⁠STANT"`将会引起问题。从PHP
    8.0开始，引用未定义的常量会导致致命错误。
- en: 'The Solution example demonstrates the two patterns used to define constants:
    `define()` or `const`. Using `define()` will create a global constant that is
    available anywhere in your application by using just the name of the constant
    itself. Defining a constant by way of `const` within a class definition will scope
    the constant to that class. Instead of referencing `MY_CONSTANT` as in the first
    solution, the class-scoped constant is referenced as `MyClass::MY_CONSTANT`.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案示例演示了定义常量的两种模式：`define()` 或 `const`。使用 `define()` 将创建一个全局常量，在应用程序的任何地方都可以通过常量的名称直接访问。在类定义中使用
    `const` 定义常量将常量作用域限定为该类。与在第一个解决方案中引用 `MY_CONSTANT` 不同，类作用域的常量被引用为 `MyClass::MY_CONSTANT`。
- en: Warning
  id: totrans-36
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: PHP defines [several default constants](https://oreil.ly/zQ40o) that cannot
    be overwritten by user code. Constants in general are fixed and cannot be modified
    or replaced, so *always* check that a constant is not defined before attempting
    to define it. Attempts to redefine a constant will result in a notice. See [Chapter 12](ch12.html#chapter_errors)
    for more information on handling errors and notices.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: PHP 定义了[几个默认常量](https://oreil.ly/zQ40o)，不能被用户代码覆盖。总体上，常量是固定的，不能被修改或替换，因此*始终*在尝试定义常量之前检查它是否已定义。尝试重新定义常量将导致通知。有关处理错误和通知的更多信息，请参见[第 12
    章](ch12.html#chapter_errors)。
- en: Class constants are publicly visible by default, meaning any code in the application
    that can reference `MyClass` can reference its public constants as well. However,
    it is possible as of PHP 7.1.0 to apply a visibility modifier to a class constant
    and make it private to instances of the class.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 类常量默认为公共可见，这意味着应用程序中可以引用 `MyClass` 的任何代码也可以引用其公共常量。但是，自 PHP 7.1.0 起，可以对类常量应用可见性修饰符，并将其私有化为类的实例。
- en: See Also
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: Documentation on [constants in PHP](https://oreil.ly/9WBhy), [`defined()`](https://oreil.ly/jmiau),
    [`define()`](https://oreil.ly/9iON9), and [class constants](https://oreil.ly/ggaCv).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '[PHP 中的常量文档](https://oreil.ly/9WBhy)，[`defined()`](https://oreil.ly/jmiau)，[`define()`](https://oreil.ly/9iON9)
    和 [类常量](https://oreil.ly/ggaCv) 的文档。'
- en: 1.2 Creating Variable Variables
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1.2 创建变量变量
- en: Problem
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to reference a specific variable dynamically without knowing ahead
    of time which of several related variables the program will need.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望动态引用特定变量，而不知道程序将需要哪个相关变量。
- en: Solution
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'PHP’s variable syntax starts with a `$` followed by the name of the variable
    you want to reference. You can make the name of a variable *itself* a variable.
    The following program will print `#f00` by using a variable variable:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: PHP 的变量语法以 `$` 开头，后跟要引用的变量名称。您可以使变量名称本身成为一个变量。以下程序将通过使用变量变量打印 `#f00`：
- en: '[PRE3]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Discussion
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: When PHP is interpreting your code, it sees a leading `$` character as identifying
    a variable, and the immediate next section of text to represent that variable’s
    name. In the Solution example, that text is itself, a variable. PHP will evaluate
    variable variables from right to left, passing the result of one evaluation as
    the name used for the left evaluation before printing any data to the screen.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 当 PHP 解析您的代码时，它将看到以 `$` 字符开头的内容作为变量的标识，并且紧随其后的文本表示该变量的名称。在解决方案示例中，该文本本身就是一个变量。PHP
    将从右向左评估变量变量，将一个评估的结果作为左侧评估使用的名称，然后再将任何数据打印到屏幕上。
- en: Said another way, [Example 1-1](#variable_variable_evaluation) shows two lines
    of code that are functionally equivalent, except the second uses curly braces
    to explicitly identify the code evaluated first.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，[示例 1-1](#variable_variable_evaluation) 显示了两行代码，在功能上是等效的，只是第二行使用大括号显式标识首先评估的代码。
- en: Example 1-1\. Evaluating variable variables
  id: totrans-50
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: Example 1-1\. 评估变量变量
- en: '[PRE4]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The rightmost `$color` is first evaluated to a literal `"red"`, which in turn
    means `$$color` and `$red` ultimately reference the same value. The introduction
    of curly braces as explicit evaluation delimiters suggests even more complicated
    applications.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 最右边的 `$color` 首先评估为文字 `"red"`，这反过来意味着 `$$color` 和 `$red` 最终引用相同的值。引入大括号作为显式评估分隔符，可以提供更复杂的应用程序。
- en: '[Example 1-2](#ab_test_headlines) assumes an application wants to A/B test
    a headline for search engine optimization (SEO) purposes. Two options are provided
    by the marketing team, and the developers want to return different headlines for
    different visitors—but return the *same* headline when a visitor returns to the
    site. You can do so by leveraging the visitor’s IP address and creating a variable
    variable that chooses a headline based on the visitor IP address.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 1-2](#ab_test_headlines) 假设应用程序希望出于搜索引擎优化（SEO）目的对标题进行 A/B 测试。 市场团队提供了两个选项，开发人员希望针对不同的访问者返回不同的标题—但当访问者返回网站时返回*相同*的标题。
    您可以通过利用访问者的 IP 地址并创建一个变量变量来实现这一目的，选择基于访问者 IP 地址的标题。'
- en: Example 1-2\. A/B testing headlines
  id: totrans-54
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 1-2\. A/B 测试标题
- en: '[PRE5]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `crc32()` function in the preceding example is a handy utility that calculates
    a 32-bit checksum of a given string—it turns a string into an integer in a deterministic
    fashion. The `%` operator performs a modulo operation on the resulting integer,
    returning `0` if the checksum is even and `1` if it is odd. The result is then
    concatenated to the string `headline` within your dynamic variable to allow the
    function to choose one or the other headline.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述示例中，`crc32()` 函数是一个方便的实用工具，用于以确定性方式计算给定字符串的 32 位校验和—它将字符串转换为整数。 `%` 操作符对结果整数执行模运算，如果校验和为偶数则返回
    `0`，为奇数则返回 `1`。然后将结果连接到你的动态变量 `headline` 中，以使函数能够选择其中一个标题。
- en: Note
  id: totrans-57
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: The `$_SERVER` array is a system-defined [superglobal variable](https://oreil.ly/DtQV-)
    that contains useful information about the server running your code and the incoming
    request that triggered PHP to run in the first place. The exact contents of this
    particular array will differ from server to server, particularly based on whether
    you used NGINX or Apache HTTP Server (or another web server) in front of PHP,
    but it usually contains helpful information like request headers, request paths,
    and the filename of the currently executing script.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`$_SERVER` 数组是一个系统定义的[超全局变量](https://oreil.ly/DtQV-)，包含有关运行代码的服务器以及触发 PHP 运行的传入请求的有用信息。
    这个特定数组的确切内容会因服务器而异，特别是根据您在 PHP 前端使用的是 NGINX 还是 Apache HTTP 服务器（或其他 Web 服务器），但它通常包含有用的信息，如请求头、请求路径和当前执行脚本的文件名。'
- en: '[Example 1-3](#crc32_walkthrough) presents a `crc32()` utilization line by
    line to further illustrate how a user-associated value like an IP address can
    be leveraged to deterministically identify a headline used for SEO purposes.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 1-3](#crc32_walkthrough) 逐行展示了 `crc32()` 的使用，进一步说明了如何利用像 IP 地址这样的用户相关值来确定性地标识用于
    SEO 目的的标题。'
- en: Example 1-3\. Walk-through of checksums against visitor IP addresses
  id: totrans-60
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 1-3\. IP 地址检验和演练
- en: '[PRE6]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[![1](assets/1.png)](#co_variables_CO1-1)'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_variables_CO1-1)'
- en: The IP address is extracted from the `$_SERVER` superglobal variable. Note also
    that the `REMOTE_ADDR` key will only be present when using PHP from a web server
    and not through the CLI.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: IP 地址从 `$_SERVER` 超全局变量中提取。 还请注意，仅在通过 Web 服务器而不是通过 CLI 使用 PHP 时，`REMOTE_ADDR`
    键才会存在。
- en: '[![2](assets/2.png)](#co_variables_CO1-2)'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_variables_CO1-2)'
- en: '`crc32()` converts the string IP address to an integer checksum.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`crc32()` 将字符串 IP 地址转换为整数校验和。'
- en: '[![3](assets/3.png)](#co_variables_CO1-3)'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_variables_CO1-3)'
- en: The modulo operator (`%`) determines whether the checksum is even or odd.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 模运算符 (`%`) 确定校验和是偶数还是奇数。
- en: '[![4](assets/4.png)](#co_variables_CO1-4)'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_variables_CO1-4)'
- en: The result of this modulo operation is appended to `headline`.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 此模运算的结果附加到 `headline` 中。
- en: '[![5](assets/5.png)](#co_variables_CO1-5)'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_variables_CO1-5)'
- en: The final string `headline0` is used as a variable variable to identify the
    correct SEO headline value.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 最终字符串 `headline0` 被用作变量变量，用于标识正确的 SEO 标题值。
- en: It’s even possible to nest variable variables more than two layers deep. Using
    three `$` characters—as with `$$$name`—is just as valid, as would be `$$${*some_function*()}`.
    It’s a good idea, both for the simplicity of code review and for general maintenance,
    to limit the levels of variability within your variable names. The use cases for
    variable variables are rare enough to begin with, but multiple levels of indirection
    will render your code difficult to follow, understand, test, or maintain if something
    ever breaks.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 甚至可以嵌套多层次的可变变量。使用三个 `$` 字符，例如 `$$$name`，同样有效，就像 `$$${*some_function*()}` 一样。在变量名中限制变化水平既有助于代码审查的简化，也有助于一般维护。变量变量的使用案例本来就很少见，但如果出现问题，多层间接将使您的代码难以跟踪、理解、测试或维护。
- en: See Also
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: Documentation on [variable variables](https://oreil.ly/wNBh0).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 关于[可变变量](https://oreil.ly/wNBh0)的文档。
- en: 1.3 Swapping Variables in Place
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1.3 在原地交换变量
- en: Problem
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to exchange the values stored in two variables without defining any
    additional variables.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 你想要在不定义任何额外变量的情况下交换两个变量存储的值。
- en: Solution
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'The following block of code uses the `list()` language construct to reassign
    the values of the variables in place:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码块使用 `list()` 语言结构来直接在原地重新分配变量的值：
- en: '[PRE7]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'An even more concise version of the preceding solution is to use both the short
    list and short array syntaxes available since PHP 7.1 as follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 更简洁版本的前述解决方案是同时使用 PHP 7.1 提供的短列表和短数组语法，如下所示：
- en: '[PRE8]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Discussion
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: The `list` keyword in PHP doesn’t refer to a function, although it looks like
    one. It’s a *language construct* used to assign values to a list of variables
    rather than to one variable at a time. This enables developers to set multiple
    variables all at once from another list-like collection of values (like an array).
    It also permits the destructuring of arrays into individual variables.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: PHP 中的 `list` 关键字并不是指一个函数，虽然看起来像一个。它是一个*语言结构*，用于将值分配给一组变量而不是一次只给一个变量。这使开发人员可以一次性从另一个类似列表的值集合（如数组）中设置多个变量。它还允许将数组解构为单独的变量。
- en: Modern PHP leverages square brackets (`[` and `]`) for a short array syntax,
    allowing for more concise array literals. Writing `[1, 4, 5]` is functionally
    equivalent to `array(1, 4, 5)`, but is sometimes clearer depending on the context
    in which it is used.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现代 PHP 利用方括号（`[` 和 `]`）来简化数组语法，允许更简洁的数组字面量。写 `[1, 4, 5]` 在功能上等同于 `array(1, 4,
    5)`，但在使用的上下文中更清晰一些。
- en: Note
  id: totrans-86
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Like `list`, the `array` keyword refers to a language construct within PHP.
    Language constructs are hardcoded into the language and are the keywords that
    make the system work. Keywords like `if` and `else` or `echo` are easy to distinguish
    from userland code. Language constructs like `list` and `array` and `exit` look
    like functions, but like keyword-style constructs, they are built into the language
    and behave slightly differently than typical functions do. The [PHP Manual’s list
    of reserved keywords](https://oreil.ly/OJD13) better illustrates existing constructs
    and cross-references with how each is used in practice.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 像 `list` 一样，`array` 关键字在 PHP 中指的是一个语言结构。语言结构是硬编码到语言中的关键字，是使系统工作的关键字。像 `if`、`else`
    或 `echo` 这样的关键字很容易与用户代码区分开来。像 `list`、`array` 和 `exit` 这样的语言结构看起来像函数，但像关键字样的结构内建于语言中，与典型函数的行为稍有不同。[PHP
    手册的保留关键字列表](https://oreil.ly/OJD13)更好地说明了现有的结构，并交叉引用了每个关键字在实践中的使用方式。
- en: As of PHP 7.1, developers can use the same short square bracket syntax to replace
    the usage of `list()`, creating more concise and readable code. Given that a solution
    to this problem is to assign values from an array to an array of variables, using
    similar syntax on both sides of the assignment operator (`=`) both makes sense
    and clarifies your intent.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 自 PHP 7.1 起，开发人员可以使用相同的短方括号语法来替换 `list()` 的使用，创建更简洁和可读的代码。考虑到解决此问题的方案是将数组的值分配给一组变量数组，使用赋值运算符
    (`=`) 两边类似的语法是合理的并且可以澄清您的意图。
- en: The Solution example explicitly swaps the values stored in the variables `$green`
    and `$blue`. This is something that an engineer might do while deploying an application
    to switch from one version of an API to another. Rolling deployments often refer
    to the current live environment as the *green* deployment and a new, potential
    replacement as *blue*, instructing load balancers and other reliant applications
    to swap from green/blue and verify connectivity and functionality before confirming
    that the deployment is healthy.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案示例明确交换了变量`$green`和`$blue`中存储的值。这是工程师在部署应用程序时可能会做的事情，以从一个API版本切换到另一个版本。滚动部署通常将当前的生产环境称为*绿色*部署，将新的、潜在的替代环境称为*蓝色*，指示负载均衡器和其他依赖应用程序从绿色/蓝色切换并验证连接和功能，然后确认部署是否健康。
- en: In a more verbose example ([Example 1-4](#blue_green_cutover)), assume that
    the application consumes an API prefixed by the date of deployment. The application
    keeps track of which version of the API it is using (`$green`) and attempts to
    swap to a new environment to verify connectivity. If the connectivity check fails,
    the application will automatically switch back to the old environment.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个更详细的示例中（[示例 1-4](#blue_green_cutover)），假设应用程序消耗一个以部署日期为前缀的API。该应用程序跟踪正在使用的API版本（`$green`），并尝试切换到新环境以验证连接。如果连接检查失败，应用程序将自动切换回旧环境。
- en: Example 1-4\. Blue/green environment cutover
  id: totrans-91
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 1-4\. 蓝/绿环境切换
- en: '[PRE9]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `list()` construct can also be used to extract certain values from an arbitrary
    group of elements. [Example 1-5](#list_extraction) illustrates how an address,
    stored as an array, can be used in different contexts to extract just specific
    values as needed.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`list()`结构也可以用来从任意元素组中提取特定值。[示例 1-5](#list_extraction)说明了如何将作为数组存储的地址，在不同上下文中提取所需的特定值。'
- en: Example 1-5\. Using `list()` to extract elements of an array
  id: totrans-94
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 1-5\. 使用`list()`来提取数组元素
- en: '[PRE10]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Each extraction in the preceding example is independent and sets only the variables
    that are necessary.^([3](ch01.html#idm45875188698112)) For a trivial illustration
    such as this, there is no need to worry about extracting each element and setting
    a variable, but for more complex applications manipulating data that is significantly
    larger, setting unnecessary variables can lead to performance issues. While `list()`
    is a powerful tool for destructuring array-like collections, it is only appropriate
    for simple cases like those discussed in the preceding examples.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 前面示例中的每次提取都是独立的，只设置了必要的变量。^([3](ch01.html#idm45875188698112)) 对于像这样的简单示例，不需要担心提取每个元素并设置一个变量，但对于操作数据规模显著较大的更复杂应用程序，设置不必要的变量可能会导致性能问题。虽然`list()`是一个用于解构类似数组的集合的强大工具，但它只适用于前面示例中讨论的简单情况。
- en: See Also
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: Documentation on [`list()`](https://oreil.ly/bzO7i), [`array()`](https://oreil.ly/tq1Z_),
    and the PHP RFC on [short `list()` syntax](https://oreil.ly/Ou98z).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '[`list()`](https://oreil.ly/bzO7i)、[`array()`](https://oreil.ly/tq1Z_)的文档，以及PHP
    RFC关于[short `list()` syntax](https://oreil.ly/Ou98z)。'
- en: ^([1](ch01.html#idm45875192117424-marker)) Equality operators are covered in
    [Recipe 2.3](ch02.html#equality_operators), which provides both an example and
    a thorough discussion of equality checks.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch01.html#idm45875192117424-marker)) 相等运算符在[Recipe 2.3](ch02.html#equality_operators)中有所涵盖，其中提供了一个示例和对相等性检查的深入讨论。
- en: ^([2](ch01.html#idm45875192074384-marker)) Read more about classes and objects
    in [Chapter 8](ch08.html#chapter_classes).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch01.html#idm45875192074384-marker)) 在[第8章](ch08.html#chapter_classes)中了解更多关于类和对象的内容。
- en: ^([3](ch01.html#idm45875188698112-marker)) Recall in this chapter’s introduction
    the explanation that variable references not explicitly being set will evaluate
    as “empty.” This means you can set only the values and variables you need to use.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: ^([3](ch01.html#idm45875188698112-marker)) 在本章介绍中回顾一下，变量引用如果没有明确设置将会被评估为“空”。这意味着你只能设置你需要使用的值和变量。
