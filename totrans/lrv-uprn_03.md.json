["```php\n// routes/web.php\nRoute::get('/', function () {\n    return 'Hello, World!';\n});\n```", "```php\nRoute::get('/', function () {\n    return view('welcome');\n});\n\nRoute::get('about', function () {\n    return view('about');\n});\n\nRoute::get('products', function () {\n    return view('products');\n});\n\nRoute::get('services', function () {\n    return view('services');\n});\n```", "```php\n$router->get('/', function () {\n    return 'Hello, World!';\n});\n```", "```php\nRoute::get('/', function () {\n    return 'Hello, World!';\n});\n\nRoute::post('/', function () {\n    // Handle someone sending a POST request to this route\n});\n\nRoute::put('/', function () {\n    // Handle someone sending a PUT request to this route\n});\n\nRoute::delete('/', function () {\n    // Handle someone sending a DELETE request to this route\n});\n\nRoute::any('/', function () {\n    // Handle any verb request to this route\n});\n\nRoute::match(['get', 'post'], '/', function () {\n    // Handle GET or POST requests to this route\n});\n```", "```php\nuse App\\Http\\Controllers\\WelcomeController;\n\nRoute::get('/', [WelcomeController::class, 'index']);\n```", "```php\nRoute::get('users/{id}/friends', function ($id) {\n    //\n});\n```", "```php\nRoute::get('users/{id?}', function ($id = 'fallbackId') {\n    //\n});\n```", "```php\nRoute::get('users/{id}', function ($id) {\n    //\n})->where('id', '[0-9]+');\n\nRoute::get('users/{username}', function ($username) {\n    //\n})->where('username', '[A-Za-z]+');\n\nRoute::get('posts/{id}/{slug}', function ($id, $slug) {\n    //\n})->where(['id' => '[0-9]+', 'slug' => '[A-Za-z]+']);\n```", "```php\nRoute::get('users/{id}/friends/{friendname}', function ($id, $friendname) {\n    //\n})->whereNumber('id')->whereAlpha('friendname');\n\nRoute::get('users/{name}', function ($name) {\n    //\n})->whereAlphaNumeric('name');\n\nRoute::get('users/{id}', function ($id) {\n    //\n})->whereUuid('id');\n\nRoute::get('users/{id}', function ($id) {\n    //\n})->whereUlid('id');\n\nRoute::get('friends/types/{type}', function ($type) {\n    //\n})->whereIn('type', ['acquaintance', 'bestie', 'frenemy']);\n```", "```php\n<a href=\"<?php echo url('/'); ?>\">\n// Outputs <a href=\"http://myapp.com/\">\n```", "```php\n// Defining a route with name() in routes/web.php:\nRoute::get('members/{id}', [\\App\\Http\\Controller\\MemberController::class, 'show'])\n    ->name('members.show');\n\n// Linking the route in a view using the route() helper:\n<a href=\"<?php echo route('members.show', ['id' => 14]); ?>\">\n```", "```php\nRoute::group(function () {\n    Route::get('hello', function () {\n        return 'Hello';\n    });\n    Route::get('world', function () {\n        return 'World';\n    });\n});\n```", "```php\nRoute::middleware('auth')->group(function() {\n    Route::get('dashboard', function () {\n        return view('dashboard');\n    });\n    Route::get('account', function () {\n        return view('account');\n    });\n});\n```", "```php\nclass DashboardController extends Controller\n{\n    public function __construct()\n    {\n        $this->middleware('auth');\n\n        $this->middleware('admin-auth')\n            ->only('editUsers');\n\n        $this->middleware('team-member')\n            ->except('editUsers');\n    }\n}\n```", "```php\nRoute::prefix('dashboard')->group(function () {\n    Route::get('/', function () {\n        // Handles the path /dashboard\n    });\n    Route::get('users', function () {\n        // Handles the path /dashboard/users\n    });\n});\n```", "```php\nRoute::domain('api.myapp.com')->group(function () {\n    Route::get('/', function () {\n        //\n    });\n});\n```", "```php\nRoute::domain('{account}.myapp.com')->group(function () {\n    Route::get('/', function ($account) {\n        //\n    });\n    Route::get('users/{id}', function ($account, $id) {\n        //\n    });\n});\n```", "```php\nRoute::name('users.')->prefix('users')->group(function () {\n    Route::name('comments.')->prefix('comments')->group(function () {\n        Route::get('{id}', function () {\n            // ...\n        })->name('show'); // Route named 'users.comments.show'\n\n        Route::destroy('{id}', function () {})->name('destroy');\n    });\n});\n```", "```php\nuse App\\Http\\Controllers\\UserController;\n\nRoute::controller(UserController::class)->group(function () {\n    Route::get('/', 'index');\n    Route::get('{id}', 'show');\n});\n```", "```php\nRoute::fallback(function () {\n    //\n});\n```", "```php\nRoute::get('invitations/{invitation}/{answer}', InvitationController::class)\n    ->name('invitations');\n```", "```php\n// Generate a normal link\nURL::route('invitations', ['invitation' => 12345, 'answer' => 'yes']);\n\n// Generate a signed link\nURL::signedRoute('invitations', ['invitation' => 12345, 'answer' => 'yes']);\n\n// Generate an expiring (temporary) signed link\nURL::temporarySignedRoute(\n    'invitations',\n    now()->addHours(4),\n    ['invitation' => 12345, 'answer' => 'yes']\n);\n```", "```php\nRoute::get('invitations/{invitation}/{answer}', InvitationController::class)\n    ->name('invitations')\n    ->middleware('signed');\n```", "```php\nclass InvitationController\n{\n    public function __invoke(Invitation $invitation, $answer, Request $request)\n    {\n        if (! $request->hasValidSignature()) {\n            abort(403);\n        }\n\n        //\n    }\n}\n```", "```php\nRoute::get('/', function () {\n   return view('home');\n});\n```", "```php\nRoute::get('tasks', function () {\n    return view('tasks.index')\n        ->with('tasks', Task::all());\n});\n```", "```php\n// Returns resources/views/welcome.blade.php\nRoute::view('/', 'welcome');\n\n// Passing simple data to Route::view()\nRoute::view('/', 'welcome', ['User' => 'Michael']);\n```", "```php\nview()->share('variableName', 'variableValue');\n```", "```php\nphp artisan make:controller TaskController\n```", "```php\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\n\nclass TaskController extends Controller\n{\n    //\n}\n```", "```php\n<?php\n\nnamespace App\\Http\\Controllers;\n\nclass TaskController extends Controller\n{\n    public function index()\n    {\n        return 'Hello, World!';\n    }\n}\n```", "```php\n// routes/web.php\n<?php\n\nuse Illuminate\\Support\\Facades\\Route;\nuse App\\Http\\Controllers\\TaskController;\n\nRoute::get('/', [TaskController::class, 'index']);\n```", "```php\n// TaskController.php\n...\npublic function index()\n{\n    return view('tasks.index')\n        ->with('tasks', Task::all());\n}\n```", "```php\nphp artisan make:controller TaskController --resource\n```", "```php\n// routes/web.php\nRoute::get('tasks/create', [TaskController::class, 'create']);\nRoute::post('tasks', [TaskController::class, 'store']);\n```", "```php\n// TaskController.php\n...\npublic function store()\n{\n    Task::create(request()->only(['title', 'description']));\n\n    return redirect('tasks');\n}\n```", "```php\nrequest()->only(['title', 'description']);\n// returns:\n[\n    'title' => 'Whatever title the user typed on the previous page',\n    'description' => 'Whatever description the user typed on the previous page',\n]\n```", "```php\nTask::create([\n    'title' => 'Buy milk',\n    'description' => 'Remember to check the expiration date this time, Norbert!',\n]);\n```", "```php\npublic function __construct(Logger $logger) {}\n```", "```php\n// TaskController.php\n...\npublic function store(\\Illuminate\\Http\\Request $request)\n{\n    Task::create($request->only(['title', 'description']));\n\n    return redirect('tasks');\n}\n```", "```php\nphp artisan make:controller MySampleResourceController --resource\n```", "```php\n// routes/web.php\nRoute::resource('tasks', TaskController::class);\n```", "```php\nphp artisan make:controller MySampleResourceController --api\n```", "```php\n// routes/web.php\nRoute::apiResource('tasks', TaskController::class);\n```", "```php\n// \\App\\Http\\Controllers\\UpdateUserAvatar.php\npublic function __invoke(User $user)\n{\n    // Update the user's avatar image\n}\n\n// routes/web.php\nRoute::post('users/{user}/update-avatar', UpdateUserAvatar::class);\n```", "```php\nRoute::get('conferences/{id}', function ($id) {\n    $conference = Conference::findOrFail($id);\n});\n```", "```php\nRoute::get('conferences/{conference}', function (Conference $conference) {\n    return view('conferences.show')->with('conference', $conference);\n});\n```", "```php\npublic function getRouteKeyName()\n{\n    return 'slug';\n}\n```", "```php\nRoute::get(\n    'conferences/{conference:slug}',\n    function (Conference $conference) {\n        return view('conferences.show')\n            ->with('conference', $conference);\n    });\n```", "```php\nuse App\\Models\\Conference;\nuse App\\Models\\Organizer;\n\nRoute::get(\n    'organizers/{organizer}/conferences/{conference:slug}',\n    function (Organizer $organizer, Conference $conference) {\n        return $conference;\n    });\n```", "```php\n    public function boot()\n    {\n        // Perform the binding\n        Route::model('event', Conference::class);\n    }\n```", "```php\nRoute::get('events/{event}', function (Conference $event) {\n    return view('events.show')->with('event', $event);\n});\n```", "```php\n<form action=\"/tasks/5\" method=\"POST\">\n    <input type=\"hidden\" name=\"_method\" value=\"DELETE\">\n    <!-- or: -->\n    @method('DELETE')\n</form>\n```", "```php\n<form action=\"/tasks/5\" method=\"POST\">\n    @csrf\n</form>\n```", "```php\n<meta name=\"csrf-token\" content=\"<?php echo csrf_token(); ?>\">\n```", "```php\n// In jQuery:\n$.ajaxSetup({\n    headers: {\n        'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')\n    }\n});\n\n// With Axios: it automatically retrieves it from a cookie. Nothing to do!\n```", "```php\n// Using the global helper to generate a redirect response\nRoute::get('redirect-with-helper', function () {\n    return redirect()->to('login');\n});\n\n// Using the global helper shortcut\nRoute::get('redirect-with-helper-shortcut', function () {\n    return redirect('login');\n});\n\n// Using the facade to generate a redirect response\nRoute::get('redirect-with-facade', function () {\n    return Redirect::to('login');\n});\n\n// Using the Route::redirect shortcut\nRoute::redirect('redirect-by-route', 'login');\n```", "```php\nfunction to($to = null, $status = 302, $headers = [], $secure = null)\n```", "```php\nRoute::get('redirect', function () {\n    return redirect()->to('home');\n\n    // Or same, using the shortcut:\n\n    return redirect('home');\n});\n```", "```php\nRoute::get('redirect', function () {\n    return redirect()->route('conferences.index');\n});\n```", "```php\nfunction route($to = null, $parameters = [], $status = 302, $headers = [])\n```", "```php\nRoute::get('redirect', function () {\n    return to_route('conferences.show', [\n        'conference' => 99,\n    ];\n});\n```", "```php\nRoute::get('redirect', function () {\n    return to_route('conferences.show', ['conference' => 99]);\n});\n```", "```php\nRoute::get('redirect-with-key-value', function () {\n    return redirect('dashboard')\n        ->with('error', true);\n});\n\nRoute::get('redirect-with-array', function () {\n    return redirect('dashboard')\n        ->with(['error' => true, 'message' => 'Whoops!']);\n});\n```", "```php\nRoute::get('form', function () {\n    return view('form');\n});\n\nRoute::post('form', function () {\n    return redirect('form')\n        ->withInput()\n        ->with(['error' => true, 'message' => 'Whoops!']);\n});\n```", "```php\n<input name=\"username\" value=\"<?=\n old('username', 'Default username instructions here');\n?>\">\n```", "```php\nRoute::post('form', function (Illuminate\\Http\\Request $request) {\n    $validator = Validator::make($request->all(), $this->validationRules);\n\n    if ($validator->fails()) {\n        return back()\n            ->withErrors($validator)\n            ->withInput();\n    }\n});\n```", "```php\nRoute::post('something-you-cant-do', function (Illuminate\\Http\\Request $request) {\n    abort(403, 'You cannot do that!');\n    abort_unless($request->has('magicToken'), 403);\n    abort_if($request->user()->isBanned, 403);\n});\n```", "```php\nreturn response()->streamDownload(function () {\n    echo DocumentService::file('myFile')->getContent();\n}, 'myFile.pdf');\n```", "```php\n// tests/Feature/AssignmentTest.php\npublic function test_post_creates_new_assignment()\n{\n    $this->post('/assignments', [\n        'title' => 'My great assignment',\n    ]);\n\n    $this->assertDatabaseHas('assignments', [\n        'title' => 'My great assignment',\n    ]);\n}\n```", "```php\n// AssignmentTest.php\npublic function test_list_page_shows_all_assignments()\n{\n    $assignment = Assignment::create([\n        'title' => 'My great assignment',\n    ]);\n\n    $this->get('/assignments')\n        ->assertSee('My great assignment');\n}\n```"]