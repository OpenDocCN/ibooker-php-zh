["```php\nSchema::create('users', function (Blueprint $table) {\n    $table->id();\n    $table->string('name');\n    $table->string('email')->unique();\n    $table->timestamp('email_verified_at')->nullable();\n    $table->string('password');\n    $table->rememberToken();\n    $table->timestamps();\n});\n```", "```php\n<?php\n// App\\User\n\nnamespace App\\Models;\n\n// use Illuminate\\Contracts\\Auth\\MustVerifyEmail;\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\nuse Illuminate\\Foundation\\Auth\\User as Authenticatable;\nuse Illuminate\\Notifications\\Notifiable;\nuse Laravel\\Sanctum\\HasApiTokens;\n\nclass User extends Authenticatable\n{\n    use HasApiTokens, HasFactory, Notifiable;\n\n    /**\n * The attributes that are mass assignable.\n *\n * @var array<int, string>\n */\n    protected $fillable = [\n        'name',\n        'email',\n        'password',\n    ];\n\n    /**\n * The attributes that should be hidden for serialization.\n *\n * @var array<int, string>\n */\n    protected $hidden = [\n        'password',\n        'remember_token',\n    ];\n\n    /**\n * The attributes that should be cast.\n *\n * @var array<string, string>\n */\n    protected $casts = [\n        'email_verified_at' => 'datetime',\n    ];\n}\n```", "```php\n<?php\n// Illuminate\\Foundation\\Auth\\User\n\nnamespace Illuminate\\Foundation\\Auth;\n\nuse Illuminate\\Auth\\Authenticatable;\nuse Illuminate\\Auth\\MustVerifyEmail;\nuse Illuminate\\Auth\\Passwords\\CanResetPassword;\nuse Illuminate\\Contracts\\Auth\\Access\\Authorizable as AuthorizableContract;\nuse Illuminate\\Contracts\\Auth\\Authenticatable as AuthenticatableContract;\nuse Illuminate\\Contracts\\Auth\\CanResetPassword as CanResetPasswordContract;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Foundation\\Auth\\Access\\Authorizable;\n\nclass User extends Model implements\n    AuthenticatableContract,\n    AuthorizableContract,\n    CanResetPasswordContract\n{\n    use Authenticatable, Authorizable, CanResetPassword, MustVerifyEmail;\n}\n```", "```php\npublic function dashboard()\n{\n    if (auth()->guest()) {\n        return redirect('sign-up');\n    }\n\n    return view('dashboard')\n        ->with('user', auth()->user());\n}\n```", "```php\nRoute::middleware('guest')->group(function () {\n    Route::get('register', [RegisteredUserController::class, 'create'])\n                ->name('register');\n\n    Route::post('register', [RegisteredUserController::class, 'store']);\n\n    Route::get('login', [AuthenticatedSessionController::class, 'create'])\n                ->name('login');\n\n    Route::post('login', [AuthenticatedSessionController::class, 'store']);\n\n    Route::get('forgot-password', [PasswordResetLinkController::class, 'create'])\n                ->name('password.request');\n\n    Route::post('forgot-password', [PasswordResetLinkController::class, 'store'])\n                ->name('password.email');\n\n    Route::get('reset-password/{token}', [NewPasswordController::class, 'create'])\n                ->name('password.reset');\n\n    Route::post('reset-password', [NewPasswordController::class, 'store'])\n                ->name('password.store');\n});\n```", "```php\napp/Actions/Fortify/CreateNewUser.php\napp/Actions/Fortify/PasswordValidationRules.php\napp/Actions/Fortify/ResetUserPassword.php\napp/Actions/Fortify/UpdateUserPassword.php\napp/Actions/Fortify/UpdateUserProfileInformation.php\napp/Actions/Jetstream/DeleteUser.php\n```", "```php\nif (auth()->attempt([\n    'email' => request()->input('email'),\n    'password' => request()->input('password'),\n])) {\n    // Handle the successful login\n}\n```", "```php\nif (auth()->attempt([\n    'email' => request()->input('email'),\n    'password' => request()->input('password'),\n], request()->filled('remember'))) {\n    // Handle the successful login\n}\n```", "```php\nauth()->loginUsingId(5);\n```", "```php\nauth()->login($user);\n```", "```php\nauth()->once(['username' => 'mattstauffer']);\n// or\nauth()->onceUsingId(5);\n```", "```php\nauth()->once([\n    'last_name' => 'Stauffer',\n    'zip_code' => 90210,\n])\n```", "```php\nauth()->logout();\n```", "```php\nauth()->logoutOtherDevices($password);\n```", "```php\nprotected $middlewareAliases = [\n    'auth' => \\App\\Http\\Middleware\\Authenticate::class,\n    'auth.basic' => \\Illuminate\\Auth\\Middleware\\AuthenticateWithBasicAuth::class,\n    'auth.session' => \\Illuminate\\Session\\Middleware\\AuthenticateSession::class,\n    'cache.headers' => \\Illuminate\\Http\\Middleware\\SetCacheHeaders::class,\n    'can' => \\Illuminate\\Auth\\Middleware\\Authorize::class,\n    'guest' => \\App\\Http\\Middleware\\RedirectIfAuthenticated::class,\n    'password.confirm' => \\Illuminate\\Auth\\Middleware\\RequirePassword::class,\n    'signed' => \\App\\Http\\Middleware\\ValidateSignature::class,\n    'throttle' => \\Illuminate\\Routing\\Middleware\\ThrottleRequests::class,\n    'verified' => \\Illuminate\\Auth\\Middleware\\EnsureEmailIsVerified::class,\n];\n```", "```php\nRoute::middleware('auth')->group(function () {\n    Route::get('account', [AccountController::class, 'dashboard']);\n});\n\nRoute::get('login', [LoginController::class, 'getLogin'])->middleware('guest');\n```", "```php\nclass User extends Authenticatable implements MustVerifyEmail\n{\n    use Notifiable;\n\n    // ...\n}\n```", "```php\nAuth::routes(['verify' => true]);\n```", "```php\nRoute::get('posts/create', function () {\n    // Only verified users may enter...\n})->middleware('verified');\n```", "```php\nprotected $redirectTo = '/profile';\n```", "```php\n@auth\n    // The user is authenticated\n@endauth\n\n@guest\n    // The user is not authenticated\n@endguest\n```", "```php\n@auth('trainees')\n    // The user is authenticated\n@endauth\n\n@guest('trainees')\n    // The user is not authenticated\n@endguest\n```", "```php\n'defaults' => [\n    'guard' => 'web', // Change the default here\n    'passwords' => 'users',\n],\n```", "```php\n$apiUser = auth()->guard('api')->user();\n```", "```php\n'guards' => [\n    'trainees' => [\n        'driver' => 'session',\n        'provider' => 'trainees',\n    ],\n],\n```", "```php\npublic function boot(): void\n{\n    Auth::viaRequest('token-hash', function ($request) {\n        return User::where('token-hash', $request->token)->first();\n    });\n}\n```", "```php\n'providers' => [\n    'users' => [\n        'driver' => 'eloquent',\n        'model' => App\\User::class,\n    ],\n\n    'trainees' => [\n        'driver' => 'eloquent',\n        'model' => App\\Trainee::class,\n    ],\n],\n```", "```php\nRoute::middleware('auth:trainees')->group(function () {\n    // Trainee-only routes here\n});\n```", "```php\nauth()->provider('riak', function ($app, array $config) {\n    // Return an instance of Illuminate\\Contracts\\Auth\\UserProvider...\n    return new RiakUserProvider($app['riak.connection']);\n});\n```", "```php\nprotected $listen = [\n    'Illuminate\\Auth\\Events\\Attempting' => [],\n    'Illuminate\\Auth\\Events\\Authenticated' => [],\n    'Illuminate\\Auth\\Events\\CurrentDeviceLogout' => [],\n    'Illuminate\\Auth\\Events\\Failed' => [],\n    'Illuminate\\Auth\\Events\\Lockout' => [],\n    'Illuminate\\Auth\\Events\\Login' => [],\n    'Illuminate\\Auth\\Events\\Logout' => [],\n    'Illuminate\\Auth\\Events\\OtherDeviceLogout' => [],\n    'Illuminate\\Auth\\Events\\PasswordReset' => [],\n    'Illuminate\\Auth\\Events\\Registered' => [],\n    'Illuminate\\Auth\\Events\\Validated' => [],\n    'Illuminate\\Auth\\Events\\Verified' => [],\n];\n```", "```php\nif (Gate::denies('edit-contact', $contact)) {\n    abort(403);\n}\n\nif (! Gate::allows('create-contact', Contact::class)) {\n    abort(403);\n}\n```", "```php\nclass AuthServiceProvider extends ServiceProvider\n{\n    public function boot(): void\n    {\n        Gate::define('update-contact', function ($user, $contact) {\n            return $user->id == $contact->user_id;\n        });\n    }\n}\n```", "```php\n$gate->define('update-contact', 'ContactACLChecker@updateContact');\n```", "```php\nif (Gate::allows('update-contact', $contact)) {\n    // Update contact\n}\n\n// or\nif (Gate::denies('update-contact', $contact)) {\n    abort(403);\n}\n```", "```php\n// Definition\nGate::define('add-contact-to-group', function ($user, $contact, $group) {\n    return $user->id == $contact->user_id && $user->id == $group->user_id;\n});\n\n// Usage\nif (Gate::denies('add-contact-to-group', [$contact, $group])) {\n    abort(403);\n}\n```", "```php\nif (Gate::forUser($user)->denies('create-contact')) {\n    abort(403);\n}\n```", "```php\nGate::resource('photos', 'App\\Policies\\PhotoPolicy');\n```", "```php\nGate::define('photos.view', 'App\\Policies\\PhotoPolicy@view');\nGate::define('photos.create', 'App\\Policies\\PhotoPolicy@create');\nGate::define('photos.update', 'App\\Policies\\PhotoPolicy@update');\nGate::define('photos.delete', 'App\\Policies\\PhotoPolicy@delete');\n```", "```php\nRoute::get('people/create', function () {\n    // Create a person\n})->middleware('can:create-person');\n\nRoute::get('people/{person}/edit', function () {\n    // Edit person\n})->middleware('can:edit,person');\n```", "```php\nRoute::post('people', function () {\n    // Create a person\n})->middleware('can:create,App\\Person');\n```", "```php\n// From this:\npublic function edit(Contact $contact)\n{\n    if (Gate::cannot('update-contact', $contact)) {\n        abort(403);\n    }\n\n    return view('contacts.edit', ['contact' => $contact]);\n}\n\n// To this:\npublic function edit(Contact $contact)\n{\n    $this->authorize('update-contact', $contact);\n\n    return view('contacts.edit', ['contact' => $contact]);\n}\n```", "```php\n$this->authorizeForUser($user, 'update-contact', $contact);\n```", "```php\n...\nclass ContactController extends Controller\n{\n    public function __construct()\n    {\n        // This call does everything you see in the methods below.\n        // If you put this here, you can remove all authorize()\n        // calls in the individual resource methods here.\n        $this->authorizeResource(Contact::class);\n    }\n\n    public function index()\n    {\n        $this->authorize('viewAny', Contact::class);\n    }\n\n    public function create()\n    {\n        $this->authorize('create', Contact::class);\n    }\n\n    public function store(Request $request)\n    {\n        $this->authorize('create', Contact::class);\n    }\n\n    public function show(Contact $contact)\n    {\n        $this->authorize('view', $contact);\n    }\n\n    public function edit(Contact $contact)\n    {\n        $this->authorize('update', $contact);\n    }\n\n    public function update(Request $request, Contact $contact)\n    {\n        $this->authorize('update', $contact);\n    }\n\n    public function destroy(Contact $contact)\n    {\n        $this->authorize('delete', $contact);\n    }\n}\n```", "```php\n$user = User::find(1);\n\nif ($user->can('create-contact')) {\n    // Do something\n}\n```", "```php\n<nav>\n    <a href=\"/\">Home</a>\n    @can('edit-contact', $contact)\n        <a href=\"{{ route('contacts.edit', [$contact->id]) }}\">Edit This Contact</a>\n    @endcan\n</nav>\n```", "```php\n<h1>{{ $contact->name }}</h1>\n@cannot('edit-contact', $contact)\n    LOCKED\n@endcannot\n```", "```php\nGate::before(function ($user, $ability) {\n    if ($user->isOwner()) {\n        return true;\n    }\n});\n```", "```php\nphp artisan make:policy ContactPolicy\n```", "```php\nclass AuthServiceProvider extends ServiceProvider\n{\n    protected $policies = [\n        Contact::class => ContactPolicy::class,\n    ];\n```", "```php\n<?php\n\nnamespace App\\Policies;\n\nclass ContactPolicy\n{\n    public function update($user, $contact)\n    {\n        return $user->id == $contact->user_id;\n    }\n}\n```", "```php\n...\nclass ContactPolicy\n{\n    public function create($user)\n    {\n        return $user->canCreateContacts();\n    }\n```", "```php\n// Gate\nif (Gate::denies('update', $contact)) {\n    abort(403);\n}\n\n// Gate if you don't have an explicit instance\nif (! Gate::check('create', Contact::class)) {\n    abort(403);\n}\n\n// User\nif ($user->can('update', $contact)) {\n    // Do stuff\n}\n\n// Blade\n@can('update', $contact)\n    // Show stuff\n@endcan\n```", "```php\nif (policy($contact)->update($user, $contact)) {\n    // Do stuff\n}\n```", "```php\npublic function before($user, $ability)\n{\n    if ($user->isAdmin()) {\n        return true;\n    }\n}\n```", "```php\npublic function test_it_creates_a_new_contact()\n{\n    $user = User::factory()->create();\n    $this->be($user);\n\n    $this->post('contacts', [\n        'email' => 'my@email.com',\n    ]);\n\n    $this->assertDatabaseHas('contacts', [\n        'email' => 'my@email.com',\n        'user_id' => $user->id,\n    ]);\n}\n```", "```php\npublic function test_it_creates_a_new_contact()\n{\n    $user = User::factory()->create();\n\n    $this->actingAs($user)->post('contacts', [\n        'email' => 'my@email.com',\n    ]);\n\n    $this->assertDatabaseHas('contacts', [\n        'email' => 'my@email.com',\n        'user_id' => $user->id,\n    ]);\n}\n```", "```php\npublic function test_non_admins_cant_create_users()\n{\n    $user = User::factory()->create([\n        'admin' => false,\n    ]);\n    $this->be($user);\n\n    $this->post('users', ['email' => 'my@email.com']);\n\n    $this->assertDatabaseMissing('users', [\n        'email' => 'my@email.com',\n    ]);\n}\n```", "```php\npublic function test_non_admins_cant_create_users()\n{\n    $user = User::factory()->create([\n        'admin' => false,\n    ]);\n    $this->be($user);\n\n    $response = $this->post('users', ['email' => 'my@email.com']);\n\n    $response->assertStatus(403);\n}\n```", "```php\npublic function test_users_can_register()\n{\n    $this->post('register', [\n        'name' => 'Sal Leibowitz',\n        'email' => 'sal@leibs.net',\n        'password' => 'abcdefg123',\n        'password_confirmation' => 'abcdefg123',\n    ]);\n\n    $this->assertDatabaseHas('users', [\n        'name' => 'Sal Leibowitz',\n        'email' => 'sal@leibs.net',\n    ]);\n}\n\npublic function test_users_can_log_in()\n{\n    $user = User::factory()->create([\n        'password' => Hash::make('abcdefg123')\n    ]);\n\n    $this->post('login', [\n        'email' => $user->email,\n        'password' => 'abcdefg123',\n    ]);\n\n    $this->assertTrue(auth()->check());\n    $this->assertTrue($user->is(auth()->user()));\n}\n```"]