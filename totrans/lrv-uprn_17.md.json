["```php\n$people = [\n    [\n        'email' => 'm@me.com',\n        'name' => 'Malcolm Me'\n    ],\n    [\n        'email' => 'j@jo.com',\n        'name' => 'James Jo'\n    ],\n];\n\n $value = Arr::first($people, function ($person, $key) {\n     return $person['email'] == 'j@jo.com';\n });\n```", "```php\n$array = ['owner' => ['address' => ['line1' => '123 Main St.']]];\n\n$line1 = Arr::get($array, 'owner.address.line1', 'No address');\n$line2 = Arr::get($array, 'owner.address.line2');\n```", "```php\n$array = ['owner' => ['address' => ['line1' => '123 Main St.']]];\n\nif (Arr::has($array, 'owner.address.line2')) {\n    // Do stuff\n}\n```", "```php\n$array = ['owner' => ['address' => ['line1' => '123 Main St.']]];\n\nif (Arr::hasAny($array, ['owner.address', 'default.address'])) {\n    // Do stuff\n}\n```", "```php\n$array = [\n    ['owner' => ['id' => 4, 'name' => 'Tricia']],\n    ['owner' => ['id' => 7, 'name' => 'Kimberly']],\n];\n\n$array = Arr::pluck($array, 'owner.name');\n\n// Returns ['Tricia', 'Kimberly'];\n```", "```php\n$array = Arr::pluck($array, 'owner.name', 'owner.id');\n\n// Returns [4 => 'Tricia', 7 => 'Kimberly'];\n```", "```php\n$array = [\n    ['owner' => ['id' => 4, 'name' => 'Tricia']],\n    ['owner' => ['id' => 7, 'name' => 'Kimberly']],\n];\n\n$randomOwner = Arr::random($array);\n```", "```php\n$array = ['Malcolm', 'James', 'Tricia', 'Kimberly'];\n\nArr::join($array, ', ');\n// Malcolm, James, Tricia, Kimberly\n\nArr::join($array, ', ', ', and');\n// Malcolm, James, Tricia, and Kimberly\n```", "```php\ne('<script>do something nefarious</script>');\n\n// Returns &lt;script&gt;do something nefarious&lt;/script&gt;\n```", "```php\nstr('http') === Str::of('http');\n// true\n```", "```php\nif (Str::startsWith($url, 'https')) {\n    // Do something\n}\n\nif (Str::endsWith($abstract, '...')) {\n    // Do something\n}\n\nif (Str::contains($description, '1337 h4x0r')) {\n    // Run away\n}\n```", "```php\n$abstract = Str::limit($loremIpsum, 30);\n// Returns \"Lorem ipsum dolor sit amet, co...\"\n\n$abstract = Str::limit($loremIpsum, 30, \"&hellip;\");\n// Returns \"Lorem ipsum dolor sit amet, co&hellip;\"\n```", "```php\n$abstract = Str::words($loremIpsum, 3);\n// Returns \"Lorem ipsum dolor...\"\n\n$abstract = Str::words($loremIpsum, 5, \" &hellip;\");\n// Returns \"Lorem ipsum dolor sit amet, &hellip;\"\n```", "```php\nStr::before('Nice to meet you!', 'meet you');\n// Returns \"Nice to \"\n\nStr::after('Nice to meet you!', 'Nice');\n// Returns \" to meet you!\"\n\nStr::beforeLast('App\\Notifications\\WelcomeNotification', '\\\\');\n// Returns \"App\\Notifications\"\n\nStr::afterLast('App\\Notifications\\WelcomeNotification', '\\\\');\n// Returns \"WelcomeNotification\"\n```", "```php\nStr::is('*.dev', 'myapp.dev');       // true\nStr::is('*.dev', 'myapp.dev.co.uk'); // false\nStr::is('*dev*', 'myapp.dev');       // true\nStr::is('*myapp*', 'www.myapp.dev'); // true\nStr::is('my*app', 'myfantasticapp'); // true\nStr::is('my*app', 'myapp');          // true\n```", "```php\npublic function is($pattern, $value)\n{\n    if ($pattern == $value) return true;\n\n    $pattern = preg_quote($pattern, '#');\n    $pattern = Str::replace('\\*', '.*', $pattern);\n    if (preg_match('#^'.$pattern.'\\z#u', $value) === 1) {\n        return true;\n    }\n\n    return false;\n}\n```", "```php\nStr::isUuid('33f6115c-1c98-49f3-9158-a4a4376dfbe1'); // Returns true\nStr::isUuid('laravel-up-and-running'); // Returns false\n```", "```php\n$hash = Str::random(64);\n// Sample: J40uNWAvY60wE4BPEWxu7BZFQEmxEHmGiLmQncj0ThMGJK7O5Kfgptyb9ul wspmh\n```", "```php\nStr::slug('How to Win Friends and Influence People');\n// Returns 'how-to-win-friends-and-influence-people'\n```", "```php\nStr::plural('book');\n// Returns books\n\nStr::plural('person');\n// Returns people\n\nStr::plural('person', 1);\n// Returns person\n```", "```php\necho __('Welcome to your dashboard');\n\necho __('messages.welcome');\n```", "```php\napp_path();\n// Returns /home/forge/myapp.com/app\n```", "```php\nbase_path();\n// Returns /home/forge/myapp.com\n```", "```php\nconfig_path();\n// Returns /home/forge/myapp.com/config\n```", "```php\ndatabase_path();\n// Returns /home/forge/myapp.com/database\n```", "```php\nstorage_path();\n// Returns /home/forge/myapp.com/storage\n```", "```php\nlang_path();\n// Returns /home/forge/myapp.com/resources/lang\n```", "```php\n<a href=\"{{ action('PersonController@index') }}\">See all People</a>\n// Or, using tuple notation:\n<a href=\"{{ action(\n [App\\Http\\Controllers\\PersonController::class, 'index']\n ) }}\">\n    See all People\n</a>\n\n// Returns <a href=\"http://myapp.com/people\">See all People</a>\n```", "```php\n<a href=\"{{ action(\n 'PersonController@show',\n ['id => 3]\n ) }}\">See Person #3</a>\n// or\n<a href=\"{{ action(\n 'PersonController@show',\n [3]\n ) }}\">See Person #3</a\n\n// Returns <a href=\"http://myapp.com/people/3\">See Person #3</a>\n```", "```php\n// routes/web.php\nRoute::get('people', [PersonController::class, 'index'])\n    ->name('people.index');\n\n// A view somewhere\n<a href=\"{{ route('people.index') }}\">See all People</a>\n\n// Returns <a href=\"http://myapp.com/people\">See all People</a>\n```", "```php\n<a href=\"{{ route('people.show', ['id' => 3]) }}\">See Person #3</a>\n// or\n<a href=\"{{ route('people.show', [3]) }}\">See Person #3</a>\n\n// Returns <a href=\"http://myapp.com/people/3\">See Person #3</a>\n```", "```php\nurl('people/3');\n\n// Returns http://myapp.com/people/3\n```", "```php\nurl()->current();\n// Returns http://myapp.com/abc\n\nurl()->full();\n// Returns http://myapp.com/abc?order=reverse\n\nurl()->previous();\n// Returns http://myapp.com/login\n\n// And many more methods available on the UrlGenerator...\n```", "```php\npublic function controllerMethod(Request $request)\n{\n    abort(403, 'You shall not pass');\n    abort_unless(request()->filled('magicToken'), 403);\n    abort_if(request()->user()->isBanned, 403);\n}\n```", "```php\n$user = auth()->user();\n$userId = auth()->id();\n\nif (auth()->check()) {\n   // Do something\n}\n```", "```php\nRoute::get('post', function () {\n    // ...\n\n    if ($condition) {\n        return back();\n    }\n});\n```", "```php\n$collection = collect(['Rachel', 'Hototo']);\n```", "```php\n$defaultDbConnection = config('database.default');\n```", "```php\n<form>\n    {{ csrf_field() }}\n</form>\n\n// or\n\n<form>\n    <input type=\"hidden\" name=\"_token\" value=\"{{ csrf_token() }}\">\n</form>\n```", "```php\n// ...\ndump($var1, $var2); // Check the output...\n// ...\ndd($var1, $var2, $state); // Why is this not working???\n```", "```php\n$key = env('API_KEY', '');\n```", "```php\ndispatch(new EmailAdminAboutNewUser($user));\n```", "```php\nevent(new ContactAdded($contact));\n```", "```php\n<input name=\"name\" value=\"{{ old('value', 'Your name here') }}\"\n```", "```php\nRoute::get('post', function () {\n    // ...\n\n    return redirect('home');\n});\n```", "```php\nreturn response('OK', 200, ['X-Header-Greatness' => 'Super great']);\n\nreturn response()->json(['status' => 'success']);\n```", "```php\nreturn tap(Contact::first(), function ($contact) {\n    $contact->name = 'Aheahe';\n    $contact->save();\n});\n```", "```php\nRoute::get('home', function () {\n    return view('home'); // Gets /resources/views/home.blade.php\n});\n```", "```php\n@for($i = 0; $i <= 4; $i++)\n    <td>Purchased by {{ fake()->unique()->name() }}</td>\n@endfor\n```", "```php\n$users = [...];\n\n$admins = [];\n\nforeach ($users as $user) {\n    if ($user['status'] == 'admin') {\n        $user['name'] = $user['first'] . ' ' . $user['last'];\n        $admins[] = $user;\n    }\n}\n\nreturn $admins;\n```", "```php\n$users = [...];\n\nreturn array_map(function ($user) {\n    $user['name'] = $user['first'] . ' ' . $user['last'];\n    return $user;\n}, array_filter($users, function ($user) {\n    return $user['status'] == 'admin';\n}));\n```", "```php\n$users = collect([...]);\n\nreturn $users->filter(function ($user) {\n    return $user['status'] == 'admin';\n})->map(function ($user) {\n    $user['name'] = $user['first'] . ' ' . $user['last'];\n    return $user;\n});\n```", "```php\n$users = [...]\n$countAdmins = collect($users)->filter(function ($user) {\n    return $user['status'] == 'admin';\n})->count();\n```", "```php\n$users = [...];\n$greenTeamPoints = collect($users)->filter(function ($user) {\n    return $user['team'] == 'green';\n})->sum('points');\n```", "```php\n$users = User::all();\n\n$users->toArray();\n\n/* Returns\n [\n ['id' => '1', 'name' => 'Agouhanna'],\n ...\n ]\n*/\n\n$users->all();\n\n/* Returns\n [\n Eloquent object { id : 1, name: 'Agouhanna' },\n ...\n ]\n*/\n```", "```php\n$users = collect([...]);\n$admins = $users->filter(function ($user) {\n    return $user->isAdmin;\n});\n\n$paidUsers = $user->reject(function ($user) {\n    return $user->isTrial;\n});\n```", "```php\n$users = collect([...]);\n$admins = $users->where('role', 'admin');\n```", "```php\n$users = collect([...]);\n$active = $users->whereNull('deleted_at');\n$deleted = $users->whereNotNull('deleted_at');\n```", "```php\n$users = collect([...]);\n$owner = $users->first(function ($user) {\n    return $user->isOwner;\n});\n\n$firstUser = $users->first();\n$lastUser = $users->last();\n```", "```php\n$users = collect([...]);\n$users->each(function ($user) {\n    EmailUserAThing::dispatch($user);\n});\n```", "```php\n$users = collect([...]);\n$users = $users->map(function ($user) {\n    return [\n        'name' => $user['first'] . ' ' . $user['last'],\n        'email' => $user['email'],\n    ];\n});\n```", "```php\n$users = collect([...]);\n\n$points = $users->reduce(function ($carry, $user) {\n    return $carry + $user['points'];\n}, 0); // Start with a carry of 0\n```", "```php\n$users = collect([...]);\n\n$emails = $users->pluck('email')->toArray();\n```", "```php\n$users = collect([...]);\n\n$rowsOfUsers = $users->chunk(3); // Separates into groups of 3\n\n$topThree = $users->take(3); // Pulls the first 3\n```", "```php\n$items = collect([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n\n$subset = $items->takeUntil(function ($item) {\n    return $item >= 5;\n})->toArray();\n// [1, 2, 3, 4]\n\n$subset = $items->takeWhile(function ($item) {\n    return $item < 4;\n})->toArray();\n// [1, 2, 3]\n```", "```php\n$users = collect([...]);\n\n$usersByRole = $users->groupBy('role');\n\n/* Returns:\n [\n 'member' => [...],\n 'admin' => [...],\n ]\n*/\n```", "```php\n$heroes = collect([...]);\n\n$heroesByAbilityType = $heroes->groupBy(function ($hero) {\n    if ($hero->canFly() && $hero->isInvulnerable()) {\n        return 'Kryptonian';\n    }\n\n    if ($hero->bitByARadioactiveSpider()) {\n        return 'Spidermanesque';\n    }\n\n    if ($hero->color === 'green' && $hero->likesSmashing()) {\n        return 'Hulk-like';\n    }\n\n    return 'Generic';\n});\n```", "```php\n$numbers = collect([1, 2, 3]);\n\n$numbers->reverse()->toArray(); // [3, 2, 1]\n$numbers->shuffle()->toArray(); // [2, 3, 1]\n```", "```php\n$numbers = collect([1, 2, 3, 4, 5]);\n\n$numbers->skip(3)->values(); // [4, 5]\n```", "```php\n$numbers = collect([1, 2, 3, 4, 5]);\n\n$numbers->skipUntil(function ($item) {\n    return $item > 3;\n})->values();\n// [4, 5]\n\n$numbers->skipUntil(3)->values();\n// [3, 4, 5]\n```", "```php\n$numbers = collect([1, 2, 3, 4, 5]);\n\n$numbers->skipWhile(function ($item) {\n    return $item <= 3;\n})->toArray();\n// [4, 5]\n```", "```php\n$sortedNumbers = collect([1, 7, 6])->sort()->toArray(); // [1, 6, 7]\n```", "```php\n$users = collect([...]);\n\n// Sort an array of users by their 'email' property\n$users->sort('email');\n\n// Sort an array of users by their 'email' property\n$users->sortBy(function ($user, $key) {\n    return $user['email'];\n});\n```", "```php\n$collection = collect([10, 10, 20, 20, 20, 30]);\n\n$collection->countBy()->all();\n\n// [10 => 2, 20 => 3, 30 => 1]\n```", "```php\n$collection = collect(['laravel.com', 'tighten.co']);\n\n$collection->countBy(function ($address) {\n    return Str::after($address, '.');\n})->all();\n\n// all: [\"com\" => 1, \"co\" => 1]\n```", "```php\n$numbers = collect([1, 2, 3]);\n\n$numbers->count();   // 3\n$numbers->isEmpty(); // false\n$numbers->isNotEmpty() // true\n```", "```php\ncollect([1, 2, 3])->sum(); // 6\ncollect([1, 2, 3])->avg(); // 2\n```", "```php\n$users = collect([...]);\n\n$sumPoints = $users->sum('points');\n$avgPoints = $users->avg('points');\n```", "```php\n$collection = collect(['a', 'b', 'c', 'd', 'e']);\n$collection->join(', ', ', and ');\n\n// 'a, b, c, d, and e'\n```"]