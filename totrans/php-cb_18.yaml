- en: Chapter 18\. PHP Command Line
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 18 章 PHP 命令行
- en: Developers come to PHP from all sorts of backgrounds and with various levels
    of experience in software development. Regardless of whether you are a new computer
    science graduate, a seasoned developer, or someone from a noncoding field looking
    to learn a new skill, the forgiving nature of the language makes it easy to get
    started. That being said, the largest stumbling block for these noncoder beginners
    may be PHP’s command-line interface.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者们来自各种背景，具有不同水平的软件开发经验，他们选择 PHP。无论你是一名新的计算机科学毕业生，一名经验丰富的开发者，还是来自非编程领域并希望学习新技能的人，这种语言的宽容性使得入门变得容易。话虽如此，对于这些非编程初学者来说，最大的障碍可能是
    PHP 的命令行界面。
- en: Noncoder beginners are likely to be comfortable with using a graphical user
    interface and navigating with a mouse and a graphical display. Give the same user
    a command-line terminal, and they might struggle with or be intimidated by the
    interface.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 非编程初学者可能习惯于使用图形用户界面，并通过鼠标和图形显示器进行导航。给这样的用户一个命令行终端，他们可能会对界面感到困惑或者感到害怕。
- en: As a backend language, PHP is frequently manipulated at the command line. This
    potentially makes it an intimidating language for developers not accustomed to
    text-based interfaces. Fortunately, PHP-based command-line applications are relatively
    straightforward to build and immensely powerful to use.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 作为后端语言，PHP 经常在命令行中操作。这可能使得对于不习惯基于文本的界面的开发者来说，这是一种令人生畏的语言。幸运的是，基于 PHP 的命令行应用相对简单构建，使用起来非常强大。
- en: An application might expose a command palette similar to its default RESTful
    interface, thus making interactions from a terminal similar to those over a browser
    or through an API. Yet another application might bury its administrative tooling
    in the CLI, protecting less technical end users from accidentally damaging the
    application.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 一个应用程序可能会暴露一个类似于其默认 RESTful 接口的命令面板，从而使得从终端进行交互类似于通过浏览器或通过 API 进行交互。另一个应用程序可能会将其管理工具隐藏在
    CLI 中，以防止不太技术的最终用户意外损坏应用程序。
- en: 'One of the most popular PHP applications in the market today is [WordPress](https://wordpress.org),
    the open source blogging and web platform. Most users interact with the platform
    through its graphical web interface, but the WordPress community also maintains
    a rich command-line interface for the platform: [WP-CLI](https://wp-cli.org).
    This tool allows a user to manage everything already exposed by the graphical
    tool but through a scriptable, text-based terminal interface. It also exposes
    commands for managing user roles, system configuration, the state of the database,
    and even the system cache. None of these capabilities exist within the stock web
    interface!'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 当今市场上最流行的 PHP 应用之一是[WordPress](https://wordpress.org)，这是一个开源的博客和网络平台。大多数用户通过其图形化网络界面与平台互动，但
    WordPress 社区还维护着一个丰富的命令行界面：[WP-CLI](https://wp-cli.org)。这个工具允许用户通过可脚本化的文本终端界面管理图形工具已经暴露的一切。它还提供了用于管理用户角色、系统配置、数据库状态甚至系统缓存的命令。所有这些功能都不存在于默认的网络界面中！
- en: Any developer building a PHP application today can and should understand the
    capabilities of the command line, both in terms of what you can do with PHP itself
    and how your application can expose its functionality through the same interface.
    A truly rich web application will at some point live on a server that might not
    expose any sort of graphical interface, so being able to control your application
    from the terminal is not just a power move—it’s a necessity.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 今天构建 PHP 应用程序的任何开发者都可以并且应该了解命令行的功能，无论是关于 PHP 本身的功能，还是关于您的应用程序如何通过相同的界面暴露其功能。一个真正丰富的
    Web 应用程序最终将在可能不会暴露任何图形界面的服务器上运行，因此能够从终端控制应用程序不仅仅是一种强大的举措，而且是一种必要性。
- en: The following recipes demystify the intricacies of argument parsing, managing
    input and output, and even leveraging extensions to build full applications that
    run in the console.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例揭示了参数解析、管理输入和输出的复杂性，甚至利用扩展构建在控制台中运行的完整应用程序。
- en: 18.1 Parsing Program Arguments
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 18.1 解析程序参数
- en: Problem
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want a user to pass an argument when they invoke your script so it can be
    parsed from within the application.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户调用您的脚本时，您希望用户传递一个参数，以便在应用程序内部解析。
- en: Solution
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'Use the `$argc` integer and the `$argv` array to retrieve the value of an argument
    directly in the script. For example:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `$argc` 整数和 `$argv` 数组直接在脚本中检索参数的值。例如：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Discussion
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: 'Assuming you named the script in the Solution example *script.php*, it would
    be invoked in a terminal session with the following command:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 假设在示例解决方案中将脚本命名为 *script.php*，则可以通过以下命令在终端会话中调用它：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Internally, the `$argc` variable contains a count of the number of parameters
    passed to PHP when executing the script. In the Solution example, there are exactly
    two parameters:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在内部，`$argc` 变量包含了执行 PHP 脚本时传递的参数数量计数。在示例解决方案中，确切地有两个参数：
- en: The name of the script itself (*script.php*)
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 脚本本身的名称（*script.php*）
- en: Whatever string value you passed after the name of the script
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无论你在脚本名称后传递了什么字符串值
- en: Note
  id: totrans-20
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Both `$argc` and `$argv` can be disabled at runtime by setting the [`reg⁠ister_argc_argv`
    flag](https://oreil.ly/ZKulH) to `false` in your *php.ini* file. If enabled, these
    parameters will contain either the arguments passed to a script or information
    about a GET request forwarded from a web server.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过在 *php.ini* 文件中将 [`reg⁠ister_argc_argv` 标志](https://oreil.ly/ZKulH) 设置为
    `false` 来在运行时禁用 `$argc` 和 `$argv`。如果启用了这些参数，它们将包含传递给脚本的参数或者从 Web 服务器转发的 GET 请求的信息。
- en: 'The first argument will *always* be the name of the script or file being executed.
    All other arguments are delimited by spaces beyond that. Should you need to pass
    a compound argument (like a string with spaces), wrap that argument in double
    quotes. For example:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数将*始终*是正在执行的脚本或文件的名称。除此之外的所有参数都是通过空格分隔的。如果需要传递复合参数（例如带有空格的字符串），请用双引号括起来。例如：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: More complicated implementations might leverage PHP’s `getopt()` function rather
    than manipulating the argument variables directly. This function will parse both
    short and long options and pass their contents into arrays your application can
    then leverage.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 更复杂的实现可能会利用 PHP 的 `getopt()` 函数而不是直接操作参数变量。此函数将解析短选项和长选项，并将它们的内容传递给你的应用程序可以利用的数组中。
- en: Short options are each single characters represented at the command line with
    a single dash—for example, `-v`. Each option could either merely be present (as
    in a flag) or be followed by data (as in an option).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 短选项是在命令行上用单个破折号表示的每个单字符选项，例如 `-v`。每个选项可以仅仅是存在（作为标志）或者后面跟着数据（作为选项）。
- en: Long options are prefixed with double dashes but otherwise act the same way
    as their short relatives. You can assume either or both styles of options are
    present and use them however you want in your application.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 长选项以双破折号开头，但在其他方面与它们的短选项同样有效。你可以假设应用程序中存在任何一种或两种样式的选项，并根据需要使用它们。
- en: Note
  id: totrans-27
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Often, a command-line application will provide both a long option and a single-character
    shortcut for the same thing. For example, `-v` and `--verbose` are frequently
    used to control the level of output of a script. With `getopt()`, you can easily
    have both, but PHP won’t link them together. If you support two different methods
    for providing the same option value or flag, you’ll need to reconcile them within
    your script manually.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，命令行应用程序将为同一功能提供长选项和单字符快捷方式。例如，`-v` 和 `--verbose` 经常用于控制脚本的输出级别。使用 `getopt()`，你可以轻松获取两者，但
    PHP 不会将它们关联起来。如果你支持两种不同的方法来提供相同的选项值或标志，你需要在脚本中手动协调它们。
- en: 'The `getopt()` function takes three parameters and returns an array representing
    the options the PHP interpreter has parsed:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`getopt()` 函数接受三个参数，并返回表示 PHP 解释器已解析的选项的数组：'
- en: The first argument is a single string in which each character represents a short
    option or flag.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个参数是一个单个字符串，在其中每个字符表示一个短选项或标志。
- en: The second argument is an array of strings, and each string is a long option
    name.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个参数是一个字符串数组，每个字符串是一个长选项名称。
- en: The final argument, *which is passed by reference*, is an integer representing
    the index in `$argv` where parsing has stopped when PHP encounters a non-option.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后一个参数，*这个参数是通过引用传递的*，是一个整数，表示在 PHP 遇到非选项时停止解析的 `$argv` 索引。
- en: Both short and long options also accept modifiers. If you pass an option by
    itself, PHP will not accept a value for that option but will treat it as a flag.
    If you append a colon to an option, PHP will *require* a value. If you append
    two colons, PHP will treat the value as optional.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 短选项和长选项都接受修饰符。如果仅传递一个选项，PHP 将不接受该选项的值，但会将其视为标志。如果在选项后添加一个冒号，PHP 将*要求*一个值。如果添加两个冒号，PHP
    将将值视为可选的。
- en: As an illustration, [Table 18-1](#getopt_arguments) lists out various ways both
    short and long options can leverage these additional elements.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 作为例子，[Table 18-1](#getopt_arguments) 列出了短选项和长选项如何利用这些附加元素。
- en: Table 18-1\. PHP `getopt()` arguments
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 表 18-1\. PHP `getopt()` 参数
- en: '| Argument | Argument type | Description |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 参数类型 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `a` | Short option | A single flag with no value: `-a` |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| `a` | 短选项 | 无值的单个标志：`-a` |'
- en: '| `b:` | Short option | A single flag with a required value: `-b value` |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| `b:` | 短选项 | 需要值的单个标志：`-b value` |'
- en: '| `c::` | Short option | A single flag with an optional value: `-c value` or
    just `-c` |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| `c::` | 短选项 | 可选值的单个标志：`-c value` 或 `-c` |'
- en: '| `ab:c` | Short option | Composite three flags where `a` and `c` have no value
    but `b` requires a value: `-a -b value -c` |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| `ab:c` | 短选项 | 组合三个标志，其中 `a` 和 `c` 没有值，但 `b` 需要一个值：`-a -b value -c` |'
- en: '| `verbose` | Long option | Option string with no value: `--verbose` |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| `verbose` | 长选项 | 无值的选项字符串：`--verbose` |'
- en: '| `name:` | Long option | Option string with a required value: `--name Alice`
    |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| `name:` | 长选项 | 带有必需值的选项字符串：`--name Alice` |'
- en: '| `output::` | Long option | Option string with an optional value: `--output
    file.txt` or just `--output` |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| `output::` | 长选项 | 带有可选值的选项字符串：`--output file.txt` 或 `--output` |'
- en: 'To illustrate the utility of option parsing, define a program as in [Example 18-1](#getopt_walkthrough)
    that exposes both short and long options but also leverages free-form (non-option)
    input after the flags. The following script will expect the following:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明选项解析的实用性，定义一个程序，如[Example 18-1](#getopt_walkthrough)，它暴露了短选项和长选项，但也利用了标志后的自由形式（非选项）输入。以下脚本将期望如下：
- en: A flag to control whether output should be capitalized (`-c`)
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制输出是否大写的标志（`-c`）
- en: A username (`--name`)
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户名（`--name`）
- en: Some extra, arbitrary text after the options
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些额外的、随意的文本选项后
- en: Example 18-1\. Direct illustration of `getopt()` with multiple options
  id: totrans-49
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 18-1\. 直接演示`getopt()`与多个选项的情况
- en: '[PRE3]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[![1](assets/1.png)](#co_php_command_line_CO1-1)'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_php_command_line_CO1-1)'
- en: Use `getopt()` to define both the short and long options your script expects.
    The third, optional parameter is passed by reference and will be overwritten by
    the index at which the interpreter runs out of options to parse.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `getopt()` 定义脚本期望的短选项和长选项。第三个可选参数通过引用传递，并将被解析器用于解析选项的索引。
- en: '[![2](assets/2.png)](#co_php_command_line_CO1-2)'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_php_command_line_CO1-2)'
- en: Options with values are easy to extract from the resultant associative array.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 有值的选项可以轻松从结果关联数组中提取。
- en: '[![3](assets/3.png)](#co_php_command_line_CO1-3)'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_php_command_line_CO1-3)'
- en: The resultant index from `getopt()` can be used to quickly extract any additional
    data from the command by pulling unparsed values out of the `$argv` array.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`getopt()` 的结果索引可用于通过从 `$argv` 数组中提取未解析值来快速提取任何附加数据。'
- en: '[![4](assets/4.png)](#co_php_command_line_CO1-4)'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_php_command_line_CO1-4)'
- en: Options without values will still set a key in the associative array, but the
    value will be a Boolean `false`. Check that the key exists, but don’t rely on
    its value because of the counterintuitive nature of the result.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 无值的选项仍会在关联数组中设置一个键，但其值将是布尔值 `false`。检查键是否存在，但不要依赖其值，因为结果的直观性质可能会产生误导。
- en: 'Assuming you name the script defined by [Example 18-1](#getopt_walkthrough)
    *getopt.php*, you can expect to see a result like the following:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您将脚本命名为[Example 18-1](#getopt_walkthrough)定义的 *getopt.php*，您可以期望看到如下结果：
- en: '[PRE4]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: See Also
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: Documentation on [`$argc`](https://oreil.ly/BXdSI), [`$argv`](https://oreil.ly/ODRwK),
    and the [`getopt()` function](https://oreil.ly/ZfqTP).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 关于[`$argc`](https://oreil.ly/BXdSI)，[`$argv`](https://oreil.ly/ODRwK)，以及[`getopt()`
    函数](https://oreil.ly/ZfqTP)的文档。
- en: 18.2 Reading Interactive User Input
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 18.2 读取交互式用户输入
- en: Problem
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to prompt the user for input and read their response into a variable.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望提示用户输入并将其响应读入变量。
- en: Solution
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'Read data from the standard input stream by using the `STDIN` file handle constant.
    For example:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `STDIN` 文件句柄常量从标准输入流中读取数据。例如：
- en: '[PRE5]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Discussion
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: The standard input stream makes it easy for you to read any data that comes
    in with a request. Reading data directly from the stream in a program using `fgets()`
    will pause the execution of your program until the end user provides that input
    to you.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 标准输入流使您可以轻松地读取请求中提供的任何数据。在程序中使用 `fgets()` 直接从流中读取数据将暂停程序的执行，直到最终用户向您提供该输入为止。
- en: The Solution example leverages the shorthand constant `STDIN` to reference the
    input stream. You could just as easily use the stream’s fully qualified name (along
    with an explicit `fopen()`), as demonstrated in [Example 18-2](#php_stdin_user_input).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案示例利用了简写常量`STDIN`来引用输入流。您也可以像在[Example 18-2](#php_stdin_user_input)中演示的那样，使用流的完全限定名称（以及显式的`fopen()`）。
- en: Example 18-2\. Reading user input from `stdin`
  id: totrans-72
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: Example 18-2\. 从`stdin`读取用户输入
- en: '[PRE6]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note
  id: totrans-74
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: The special `STDIN` and `STDOUT` shorthand names are only accessible in an application.
    If using the interactive terminal REPL as in [Recipe 18.5](#recipe_php_repl),
    these constants will not be defined nor will they be accessible.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 特殊的`STDIN`和`STDOUT`简称仅在应用程序中可访问。如果像[Recipe 18.5](#recipe_php_repl)中使用交互式终端 REPL，这些常量将不会被定义或者无法访问。
- en: An alternative approach is to use the [GNU Readline extension](https://oreil.ly/eRhJw)
    with PHP, which may or may not be available in your installation. This extension
    wraps much of the manual work to prompt for, retrieve, and trim user input. The
    entire Solution example could be rewritten as shown in [Example 18-3](#php_readline_integration).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是在PHP中使用[GNU Readline扩展](https://oreil.ly/eRhJw)，这在您的安装中可能有也可能没有。这个扩展包装了许多手动提示、检索和修剪用户输入的工作。整个解决方案示例可以重写为[Example 18-3](#php_readline_integration)中所示。
- en: Example 18-3\. Reading input from the GNU Readline extension
  id: totrans-77
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: Example 18-3\. 从GNU Readline扩展读取输入
- en: '[PRE7]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Additional functions provided by the Readline extension, like [`readline_add_​history()`](https://oreil.ly/J5do3),
    allow for efficient manipulation of the system’s command-line history. If the
    extension is available, it’s a powerful way to work with user input.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Readline扩展提供的其他函数，如[`readline_add_​history()`](https://oreil.ly/J5do3)，允许高效地操作系统命令行历史。如果该扩展可用，这是处理用户输入的强大方式。
- en: Note
  id: totrans-80
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Some distributions of PHP, like those for Windows, will come with Readline support
    enabled by default. In other situations, you might need to compile PHP explicitly
    to include this support. For more on native PHP extensions, review [Recipe 15.4](ch15.html#native_php_extensions).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: PHP的某些发行版（如Windows版）默认启用了Readline支持。在其他情况下，您可能需要显式编译PHP以包含此支持。有关原生PHP扩展的更多信息，请查看[Recipe
    15.4](ch15.html#native_php_extensions)。
- en: See Also
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: Further discussion of standard input in [Recipe 11.2](ch11.html#recipe_input_stream).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 进一步讨论标准输入，请参阅[Recipe 11.2](ch11.html#recipe_input_stream)。
- en: 18.3 Colorizing Console Output
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 18.3 给控制台输出着色
- en: Problem
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to display text in the console in different colors.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望在控制台中以不同颜色显示文本。
- en: Solution
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'Use properly escaped console color codes. For example, print the string `Happy
    Independence Day` in blue text on a red background as follows:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 使用正确转义的控制台颜色代码。例如，以以下方式在红色背景上以蓝色文本打印字符串`Happy Independence Day`：
- en: '[PRE8]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Discussion
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: 'Unix-like terminals support ANSI escape sequences that grant programs fine-grained
    control over things like cursor location and font styling. In particular, you
    can define the color used by the terminal for all following text with this escape
    sequence:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 类Unix终端支持ANSI转义序列，这些序列允许程序对诸如光标位置和字体样式之类的细节进行精细控制。特别是，您可以使用这个转义序列为终端后续的所有文本定义颜色：
- en: '[PRE9]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Foreground colors come in two variants—regular and bold (determined by an extra
    Boolean flag in the color definition). Background colors lack this differentiation.
    All of the colors are identified by these codes in [Table 18-2](#ansi_color_codes).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 前景色有两种变体——普通和粗体（由颜色定义中的额外布尔标志确定）。背景色缺乏这种区分。所有颜色都由[Table 18-2](#ansi_color_codes)中的这些代码标识。
- en: Table 18-2\. ANSI color codes
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Table 18-2\. ANSI颜色代码
- en: '| Color | Normal foreground | Bright foreground | Background |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| 颜色 | 普通前景色 | 亮前景色 | 背景色 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| Black | `0;30` | `1;30` | `40` |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| 黑色 | `0;30` | `1;30` | `40` |'
- en: '| Red | `0;31` | `1;31` | `41` |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| 红色 | `0;31` | `1;31` | `41` |'
- en: '| Green | `0;32` | `1;32` | `42` |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| 绿色 | `0;32` | `1;32` | `42` |'
- en: '| Yellow | `0;33` | `1;33` | `43` |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| 黄色 | `0;33` | `1;33` | `43` |'
- en: '| Blue | `0;34` | `1;34` | `44` |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| 蓝色 | `0;34` | `1;34` | `44` |'
- en: '| Magenta | `0;35` | `1;35` | `45` |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| 洋红色 | `0;35` | `1;35` | `45` |'
- en: '| Cyan | `0;36` | `1;36` | `46` |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| 青色 | `0;36` | `1;36` | `46` |'
- en: '| White | `0;37` (really light gray) | `1;37` | `47` |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| 白色 | `0;37`（真正的浅灰色） | `1;37` | `47` |'
- en: To reset the terminal colors back to normal, use a simple `0` in place of any
    color definitions. The code `\e[0m` will reset all attributes.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 要将终端颜色重置为正常状态，请在任何颜色定义的位置使用简单的`0`。代码`\e[0m`将重置所有属性。
- en: See Also
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: Wikipedia coverage of [ANSI escape codes](https://oreil.ly/y02cf).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: Wikipedia涵盖了[ANSI转义码](https://oreil.ly/y02cf)。
- en: 18.4 Creating a Command-Line Application with Symfony Console
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 18.4 使用Symfony Console创建命令行应用程序
- en: Problem
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to create a full command-line application without manually writing
    all of the argument parsing and handling code yourself.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 想要创建一个完整的命令行应用程序，而不必手动编写所有的参数解析和处理代码。
- en: Solution
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use the Symfony Console component to define your application and its commands.
    [Example 18-4](#basic_hello_world_command), for example, defines a Symfony command
    for greeting a user by name with `Hello world` at the console. [Example 18-5](#actual_console_application)
    then uses that command object to create an application that greets the user within
    the terminal.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Symfony Console组件定义你的应用程序及其命令。例如，[示例 18-4](#basic_hello_world_command)定义了一个Symfony命令，用于在控制台上向用户打招呼。然后，[示例 18-5](#actual_console_application)使用该命令对象创建一个在终端中向用户打招呼的应用程序。
- en: Example 18-4\. A basic hello world command
  id: totrans-113
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 18-4\. 一个基本的hello world命令
- en: '[PRE10]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Example 18-5\. Creating the actual console application
  id: totrans-115
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 18-5\. 创建实际的控制台应用程序
- en: '[PRE11]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Then run the command as follows:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 然后按如下命令运行：
- en: '[PRE12]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Discussion
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: The [Symfony project](https://symfony.com) provides a robust collection of reusable
    components for PHP. It acts as a framework to simplify and greatly increase the
    speed of development for web applications as well. It’s remarkably well documented,
    powerful, and best of all, free and entirely open source.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '[Symfony项目](https://symfony.com)为PHP提供一套强大的可重复使用组件集合。它作为一个框架简化了Web应用程序的开发，并显著提高了开发速度。它文档详尽、功能强大，最重要的是完全免费和开源。'
- en: Note
  id: totrans-121
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: The open source [Laravel framework](https://laravel.com), the data modules of
    which were covered in [Recipe 16.9](ch16.html#recipe_eloquent_orm), is itself
    a meta package of individual Symfony components. Its own [Artisan console tool](https://oreil.ly/uY4QL)
    is built atop the Symfony Console component. It provides rich command-line control
    over Laravel projects, their configuration, and even their runtime environments.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 开源的[Laravel框架](https://laravel.com)，其数据模块被涵盖在[Recipe 16.9](ch16.html#recipe_eloquent_orm)中，本身是Symfony组件的一个元包。它自己的[Artisan控制台工具](https://oreil.ly/uY4QL)建立在Symfony
    Console组件之上，为Laravel项目提供丰富的命令行控制，包括其配置和运行环境。
- en: 'Like any other PHP extension, Symfony components are installed via Composer.^([1](ch18.html#idm45875132854256))
    The Console component itself can be installed as follows:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 与任何其他PHP扩展一样，Symfony组件通过Composer安装。^([1](ch18.html#idm45875132854256)) Console组件本身可以如下安装：
- en: '[PRE13]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The preceding `require` command will update your project’s *composer.json* file
    to include the Console component, and it also installs this component (and its
    dependencies) in your project’s *vendor/* directory.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 前置命令`require`将更新你项目的*composer.json*文件，包括Console组件，并将其（及其依赖项）安装在你项目的*vendor/*目录中。
- en: Note
  id: totrans-126
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: If your project is not already using Composer, installing any package will create
    a new *composer.json* file for you automatically. You should take time to update
    it to autoload any classes or files your project requires so everything works
    together seamlessly. For more on Composer, extensions, and autoloading, review
    [Chapter 15](ch15.html#chapter_extensions).
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的项目还没有使用Composer，安装任何包将自动为你创建一个新的*composer.json*文件。你应该花些时间更新它，以便自动加载项目所需的所有类或文件，以确保一切无缝协作。有关Composer、扩展和自动加载的更多信息，请参阅[第15章](ch15.html#chapter_extensions)。
- en: Once you have the library installed, you can start leveraging it immediately.
    Business logic for various commands can live elsewhere within your application
    (e.g., behind a RESTful API) but can also be imported into and exposed via the
    command-line interface.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完库之后，你可以立即开始利用它。各种命令的业务逻辑可以存在于应用程序的其他位置（例如，在RESTful API后面），但也可以通过命令行界面导入并公开。
- en: By default, every class that descends from `Command` gives you the ability to
    work with user-provided arguments and to display content back to the terminal.
    Options and arguments are created with the `addArgument()` and `addOption()` methods
    on the class and can be manipulated within its `configure()` method directly.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，每个继承自`Command`的类都可以处理用户提供的参数，并将内容显示回终端。选项和参数通过该类的`addArgument()`和`addOption()`方法创建，并可以直接在其`configure()`方法中进行操作。
- en: Output is highly flexible. You can print content directly to the screen with
    any of the methods of the `ConsoleOutputInterface` class listed in [Table 18-3](#symfony_output_methods).
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 输出非常灵活。你可以使用`ConsoleOutputInterface`类中列出的任何方法直接将内容打印到屏幕上，详见[表 18-3](#symfony_output_methods)。
- en: Table 18-3\. Symfony console output methods
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 表格18-3\. Symfony控制台输出方法
- en: '| Method | Description |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 描述 |'
- en: '| --- | --- |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `writeln()` | Writes a single line to the console. Equivalent to using `echo`
    on some text followed by an explicit `PHP_EOL` newline. |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| `writeln()` | 将单行文本写入控制台。相当于在某些文本后面使用`echo`，然后显式使用`PHP_EOL`换行符。'
- en: '| `write()` | Writes text to the console without appending a newline character.
    |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| `write()` | 在控制台中写入文本，不添加换行符。 |'
- en: '| `section()` | Creates a new output section that can be atomically controlled
    as if it were an independent output buffer. |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| `section()` | 创建一个新的输出区域，可以像独立的输出缓冲区一样进行原子控制。'
- en: '| `overwrite()` | Only valid on a section—overwrites content in a section with
    the given content. |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| `overwrite()` | 仅对部分有效——使用给定内容覆盖部分中的内容。 |'
- en: '| `clear()` | Only valid on a section—clears all contents of a section. |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| `clear()` | 仅对部分有效——清除部分的所有内容。 |'
- en: In addition to the text methods introduced in [Table 18-3](#symfony_output_methods),
    Symfony Console empowers you to create dynamic tables in the terminal. Every `Table`
    instance is bound to an output interface and can have as many rows, columns, and
    separators as you need. [Example 18-6](#console_table_rendering) demonstrates
    how a simple table can be built and populated with content from an array before
    itself being rendered to the console.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 除了在[表格18-3](#symfony_output_methods)中介绍的文本方法之外，Symfony Console还可以在控制台中创建动态表格。每个`Table`实例都绑定到一个输出接口，可以具有所需的任意行数、列数和分隔符。[示例18-6](#console_table_rendering)演示了如何在从数组中提取内容填充之前构建一个简单的表格，并将其渲染到控制台。
- en: Example 18-6\. Rendering tables in the console with Symfony
  id: totrans-140
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 18-6\. 使用Symfony在控制台中渲染表格
- en: '[PRE14]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Symfony Console automatically parses the content passed into a `Table` object
    and renders the table for you complete with grid lines. The preceding command
    produces the following output in the console:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: Symfony Console自动解析传递到`Table`对象的内容，并为您渲染包含网格线的表格。前面的命令在控制台中生成以下输出：
- en: '[PRE15]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Further modules within the component aid in the control and rendering of dynamic
    [progress bars](https://oreil.ly/TszPm) and interactive [user prompts and questions](https://oreil.ly/8i5Hx).
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 组件内进一步模块帮助控制和渲染动态的[进度条](https://oreil.ly/TszPm)和交互式的[用户提示和问题](https://oreil.ly/8i5Hx)。
- en: The Console component even [aids in coloring terminal output directly](https://oreil.ly/arrtr).
    Unlike the complicated ANSI escape sequences discussed in [Recipe 18.3](#recipe_colorized_console),
    Console allows you to use named tags and styles directly to control content.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 控制台组件甚至可以直接帮助[着色终端输出](https://oreil.ly/arrtr)。与[18.3节](#recipe_colorized_console)讨论的复杂ANSI转义序列不同，Console允许您直接使用命名标签和样式来控制内容。
- en: Warning
  id: totrans-146
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: At the time of this writing, the Console component disables output coloring
    on Windows systems by default. There are various, free terminal applications (like
    [Cmder](https://oreil.ly/gs5e6)) available for Windows as alternatives to the
    standard terminal that do support output coloring.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，Console组件默认在Windows系统上禁用输出着色。有各种免费的终端应用程序（如[Cmder](https://oreil.ly/gs5e6)）可供Windows作为标准终端的替代品，支持输出着色。
- en: The terminal is an incredibly powerful interface for your users. Symfony Console
    makes it easy to target this interface within your application without resorting
    to hand-parsing arguments or manually crafting rich output.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 终端是您的用户非常强大的界面。Symfony Console使得在应用程序中定位这个界面变得容易，无需手动解析参数或手工制作丰富的输出。
- en: See Also
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: Full documentation of [Symfony’s Console component](https://oreil.ly/vm8Qx).
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: Symfony Console组件的[完整文档](https://oreil.ly/vm8Qx)。
- en: 18.5 Using PHP’s Native Read-Eval-Print-Loop
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 18.5 使用PHP的本地读取-评估-打印循环
- en: Problem
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to test some PHP logic without creating a full application to house
    it.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望测试一些PHP逻辑，而不需要创建完整的应用程序来托管它。
- en: Solution
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'Leverage PHP’s interactive shell as follows:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 利用PHP的交互式shell如下：
- en: '[PRE16]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Discussion
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: The PHP interactive shell provides a read-eval-print loop (REPL) that effectively
    tests single statements in PHP and, where possible, prints directly to the terminal.
    Within the shell, you can define functions and classes or even directly execute
    imperative code without creating a script file on disk.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: PHP交互式shell提供了一个读取-评估-打印循环（REPL），可以有效地测试PHP中的单个语句，并在可能的情况下直接打印到终端。在shell中，您可以定义函数和类，甚至直接执行命令式代码，而无需创建磁盘上的脚本文件。
- en: This shell is an efficient way to test a particular line of code or piece of
    logic outside the context of a full application.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 shell 是在完整应用程序的上下文之外测试特定行代码或逻辑的有效方法。
- en: The interactive shell also enables full tab-completion for all PHP functions
    or variables as well as any functions or variables that you have defined while
    the shell session is running. Merely type the first few characters of an otherwise
    long name, press Tab, and the shell will automatically complete the name for you.
    If there are multiple possible completions, press the Tab key twice to see a list
    of all possibilities.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 交互式 shell 还允许在 shell 会话运行时对所有 PHP 函数或变量以及您定义的任何函数或变量进行全面的 Tab 补全。只需键入名称的前几个字符，按
    Tab 键，shell 将自动为您完成名称。如果存在多个可能的完成项，请按两次 Tab 键查看所有可能性的列表。
- en: 'You can control two particular settings for the shell in your *php.ini* configuration
    file: `cli.pager` allows for an external program to handle output rather than
    displaying directly to the console, and `cli.prompt` allows you to control the
    default `php >` prompt.'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 *php.ini* 配置文件中控制 shell 的两个特定设置：`cli.pager` 允许外部程序处理输出而不是直接显示到控制台，并且 `cli.prompt`
    允许您控制默认的 `php >` 提示符。
- en: 'For example, you can replace the prompt itself by passing an arbitrary string
    to `#cli.prompt` within the shell session as follows:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，您可以通过在 shell 会话中将任意字符串传递给 `#cli.prompt` 来替换提示符本身：
- en: '[PRE17]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[![1](assets/1.png)](#co_php_command_line_CO2-1)'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_php_command_line_CO2-1)'
- en: The initial invocation of PHP launches the interactive shell.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 初始调用 PHP 启动交互式 shell。
- en: '[![2](assets/2.png)](#co_php_command_line_CO2-2)'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_php_command_line_CO2-2)'
- en: Setting the `cli.prompt` configuration directly will override the default until
    this session closes.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 直接设置 `cli.prompt` 配置将覆盖默认配置，直到会话关闭。
- en: '[![3](assets/3.png)](#co_php_command_line_CO2-3)'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_php_command_line_CO2-3)'
- en: Once you’ve overridden the default prompt, you will see your new version until
    you exit.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您覆盖了默认提示符，您将看到新版本直到退出。
- en: Warning
  id: totrans-170
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: Backticks can be used to execute arbitrary PHP code within the prompt itself.
    [Some examples in the PHP documentation](https://oreil.ly/o6NU6) use this method
    to prepend the current time to the prompt. However, this might not work consistently
    between systems and could introduce unnecessary instability when executing your
    PHP code.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 使用反引号可以在提示符本身内执行任意 PHP 代码。[PHP 文档中的一些示例](https://oreil.ly/o6NU6)使用这种方法在提示符前添加当前时间。然而，在不同系统之间，这可能不会始终正常工作，并且可能在执行
    PHP 代码时引入不必要的不稳定性。
- en: You can even colorize your output by using the ANSI escape sequences defined
    in [Table 18-2](#ansi_color_codes). This presents a more pleasant interface in
    many situations and empowers you to provide additional information if desired.
    The CLI prompt itself introduces four additional escape sequences, as defined
    in [Table 18-4](#cli_escape_sequences).
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用在 [Table 18-2](#ansi_color_codes) 中定义的 ANSI 转义序列为输出添加颜色。在许多情况下，这提供了更愉快的界面，并且允许您在需要时提供附加信息。CLI
    提示符本身引入了四个额外的转义序列，如 [Table 18-4](#cli_escape_sequences) 中定义的那样。
- en: Table 18-4\. CLI prompt escape sequences
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 表 18-4\. CLI 提示符转义序列
- en: '| Sequence | Description |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| Sequence | Description |'
- en: '| --- | --- |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `\e` | Adds colors to the prompt by using the ANSI codes introduced in [Recipe
    18.3](#recipe_colorized_console). |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| `\e` | 使用在 [Recipe 18.3](#recipe_colorized_console) 中引入的 ANSI 代码为提示符添加颜色。
    |'
- en: '| `\v` | Prints the PHP version. |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| `\v` | 打印 PHP 的版本。 |'
- en: '| `\b` | Indicates which logical block contains the interpreter. By default,
    this will be `php` but could be `/*` to represent a multiline comment. |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| `\b` | 指示包含解释器的逻辑块。默认情况下，这将是 `php`，但可能是 `/*` 表示多行注释。 |'
- en: '| `\>` | Represents the prompt character, which is `>` by default. When the
    interpreter is inside another unterminated block or string, this will change to
    indicate where the shell is. Possible characters are `'' " { ( >`. |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| `\>` | 表示默认情况下为 `>` 的提示字符。当解释器位于另一个未终止的块或字符串内时，此字符将更改以指示 shell 的位置。可能的字符包括
    `'' " { ( >`。 |'
- en: 'By using both ANSI escape sequences to define colors and the special sequences
    defined for the prompt itself, you can define a prompt that exposes the version
    of PHP and the location of the interpreter and that uses a friendly foreground
    color as follows:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 通过同时使用 ANSI 转义序列定义颜色和为提示符本身定义的特殊序列，您可以定义一个提示符，以显示 PHP 的版本和解释器的位置，并使用友好的前景色，如下所示：
- en: '[PRE18]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The preceding setting results in the display in [Figure 18-1](#colorized_php_output).
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 上述设置导致在 [Figure 18-1](#colorized_php_output) 中显示。
- en: '![The PHP console updated with colorization](assets/phpc_1801.png)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![使用着色更新的 PHP 控制台](assets/phpc_1801.png)'
- en: Figure 18-1\. The PHP console updated with colorization
  id: totrans-184
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 18-1\. 使用着色更新的 PHP 控制台
- en: Warning
  id: totrans-185
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: Not every console will support colorization via ANSI control sequences. If this
    is a pattern you intend to use, take care to test your sequences thoroughly prior
    to asking anyone else to use the system. While a properly rendered console is
    attractive and easy to use, unrendered escape sequences can make a console nearly
    impossible to work with.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有控制台都支持通过 ANSI 控制序列进行着色。如果这是您打算使用的模式，请务必在要求其他人使用系统之前彻底测试您的序列。虽然正确渲染的控制台既吸引人又易于使用，但未渲染的转义序列可能使控制台几乎无法使用。
- en: See Also
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: Documentation on [PHP’s interactive command shell](https://oreil.ly/HrCV-).
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '[PHP 交互命令行](https://oreil.ly/HrCV-)的文档。'
- en: ^([1](ch18.html#idm45875132854256-marker)) For more on Composer, review [Recipe
    15.3](ch15.html#installing_composer_packages).
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch18.html#idm45875132854256-marker)) 要了解更多关于 Composer 的信息，请参阅 [Recipe
    15.3](ch15.html#installing_composer_packages)。
