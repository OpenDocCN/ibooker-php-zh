["```php\n$someValue = *`function_name`*( [ *`parameter``,` `...`* ] );\n```", "```php\n// strlen() is a PHP built-in function that returns the length of a string\n$length = strlen(\"PHP\"); // $length is now 3\n// sin() and asin() are the sine and arcsine math functions\n$result = sin(asin(1)); // $result is the sine of arcsin(1), or 1.0\n\n// unlink() deletes a file\n$result = unlink(\"functions.txt\");\n// $result = true or false depending on success or failure\n```", "```php\n$result = unlink(\"functions.txt\") or die(\"Operation failed!\");\n```", "```php\nfunction [&] *`function_name`*([*`parameter`*[, ...]])\n{\n *`statement` `list`*\n}\n```", "```php\n<?php function column()\n{ ?>\n </td><td>\n<?php }\n```", "```php\nfunction strcat($left, $right)\n{\n $combinedString = $left . $right;\n\n return $combinedString;\n}\n```", "```php\nfunction strcat($left, $right)\n{\n return $left . $right;\n}\n```", "```php\n<?php\nfunction strcat($left, $right)\n{\n return $left . $right;\n}\n$first = \"This is a \";\n$second = \" complete sentence!\";\n\necho strcat($first, $second);\n```", "```php\nfunction doubler($value)\n{\n return $value << 1;\n}\n```", "```php\n<?php echo \"A pair of 13s is \" . doubler(13); ?>\n```", "```php\nfunction outer ($a)\n{\n function inner ($b)\n {\n echo \"there $b\";\n }\n\n echo \"$a, hello \";\n}\n\n// outputs \"well, hello there reader\"\nouter(\"well\");\ninner(\"reader\");\n```", "```php\n$a = 3;\n\nfunction foo()\n{\n $a += 2;\n}\n\nfoo();\necho $a;\n```", "```php\nglobal *`var1`*, *`var2`*, ... ;\n```", "```php\n$a = 3;\n\nfunction foo()\n{\n global $a;\n\n $a += 2;\n}\n\nfoo();\necho $a;\n```", "```php\nglobal $var;\n$var = & $GLOBALS['var'];\n```", "```php\nstatic *`var`* [= *`value`*][, ... ];\n```", "```php\n<?php\nfunction counter()\n{\n static $count = 0;\n\n return $count++;\n}\n\nfor ($i = 1; $i <= 5; $i++) {\n print counter();\n}\n```", "```php\n<?php\nfunction doubler(&$value)\n{\n $value = $value << 1;\n}\n\n$a = 3;\ndoubler($a);\n\necho $a;\n```", "```php\nfunction getPreferences($whichPreference = 'all')\n{\n // if $whichPreference is \"all\", return all prefs;\n // otherwise, get the specific preference requested...\n}\n```", "```php\nfunction getPreferences()\n{\n // some code\n}\n```", "```php\n$array = func_get_args();\n$count = func_num_args();\n$value = func_get_arg(*`argument_number`*);\n```", "```php\n<?php\nfunction countList()\n{\n if (func_num_args() == 0) {\n return false;\n }\n else {\n $count = 0;\n\n for ($i = 0; $i < func_num_args(); $i++) {\n $count += func_get_arg($i);\n }\n\n return $count;\n }\n}\n\necho countList(1, 5, 9); // outputs \"15\"\n```", "```php\nfoo(func_num_args());\n```", "```php\n$count = func_num_args();\nfoo($count);\n```", "```php\nfunction takesTwo($a, $b)\n{\n if (isset($a)) {\n echo \" a is set\\n\";\n }\n\n if (isset($b)) {\n echo \" b is set\\n\";\n }\n}\n\n echo \"With two arguments:\\n\";\ntakesTwo(1, 2);\n\necho \"With one argument:\\n\";\ntakesTwo(1);\n`With` `two` `arguments``:`\n `a` `is` `set`\n `b` `is` `set`\n`With` `one` `argument``:`\n`Warning``:` `Missing` `argument` `2` `for` `takes_two``()`\n `in` `/``path``/``to``/``script``.``php` `on` `line` `6`\n`a` `is` `set`\n```", "```php\nclass Entertainment {}\n\nclass Clown extends Entertainment {}\n\nclass Job {}\n\nfunction handleEntertainment(Entertainment $a, callable $callback = NULL)\n{\n echo \"Handling \" . get_class($a) . \" fun\\n\";\n\n if ($callback !== NULL) {\n $callback();\n }\n}\n\n$callback = function()\n{\n // do something\n};\n\nhandleEntertainment(new Clown); // works\nhandleEntertainment(new Job, $callback); // runtime error\n```", "```php\nfunction returnOne()\n{\n return 42;\n}\n```", "```php\nfunction returnTwo()\n{\n return array(\"Fred\", 35);\n}\n```", "```php\n`function` *`someMath`*($var1, $var2): *`int`*\n{\n `return` $var1 * $var2;\n}\n\n`echo` *`someMath`*(10, 5);\n```", "```php\n$names = array(\"Fred\", \"Barney\", \"Wilma\", \"Betty\");\n\nfunction &findOne($n) {\n global $names;\n\n return $names[$n];\n}\n\n$person =& findOne(1); // Barney\n$person = \"Barnetta\"; // changes $names[1]\n```", "```php\nswitch ($which) {\n case 'first':\n first();\n break;\n\n case 'second':\n second();\n break;\n\n case 'third':\n third();\n break;\n}\n```", "```php\n$which(); // if $which is \"first\", the function first() is called, etc...\n```", "```php\n$yesOrNo = function_exists(*`function_name`*);\n```", "```php\nif (function_exists($which)) {\n $which(); // if $which is \"first\", the function first() is called, etc...\n}\n```", "```php\n$which = \"echo\";\n$which(\"hello, world\"); // does not work\n```", "```php\n$array = array(\"really long string here, boy\", \"this\", \"middling length\", \"larger\");\n\nusort($array, function($a, $b) {\n return strlen($a) – strlen($b);\n});\n\nprint_r($array);\n```", "```php\n$array = array(\"really long string here, boy\", \"this\", \"middling length\", \n\"larger\");\n$sortOption = 'random';\n\nusort($array, function($a, $b) use ($sortOption)\n{\n if ($sortOption == 'random') {\n // sort randomly by returning (-1, 0, 1) at random\n return rand(0, 2) - 1;\n }\n else {\n return strlen($a) - strlen($b);\n }\n});\n\nprint_r($array);\n```", "```php\n$array = array(\"really long string here, boy\", \"this\", \"middling length\", \n\"larger\");\n$sortOption = \"random\";\n\nfunction sortNonrandom($array)\n{\n $sortOption = false;\n\n usort($array, function($a, $b) use ($sortOption)\n {\n if ($sortOption == \"random\") {\n // sort randomly by returning (-1, 0, 1) at random\n return rand(0, 2) - 1;\n }\n else {\n return strlen($a) - strlen($b);\n }\n });\n\n print_r($array);\n}\n\nprint_r(sortNonrandom($array));\n```"]