["```php\n<?php\n\nclass UserMailer\n{\n    protected $mailer;\n\n    public function __construct(Mailer $mailer)\n    {\n        $this->mailer = $mailer;\n    }\n\n    public function welcome($user)\n    {\n        return $this->mailer->mail($user->email, 'Welcome!');\n    }\n}\n```", "```php\n$mailer = new MailgunMailer($mailgunKey, $mailgunSecret, $mailgunOptions);\n$userMailer = new UserMailer($mailer);\n\n$userMailer->welcome($user);\n```", "```php\n$mailer = new MailgunMailer($mailgunKey, $mailgunSecret, $mailgunOptions);\n$logger = new Logger($logPath, $minimumLogLevel);\n$slack = new Slack($slackKey, $slackSecret, $channelName, $channelIcon);\n$userMailer = new UserMailer($mailer, $logger, $slack);\n\n$userMailer->welcome($user);\n```", "```php\n$logger = app(Logger::class);\n```", "```php\nclass Bar\n{\n    public function __construct() {}\n}\n\nclass Baz\n{\n    public function __construct() {}\n}\n\nclass Foo\n{\n    public function __construct(Bar $bar, Baz $baz) {}\n}\n\n$foo = app(Foo::class);\n```", "```php\n// In any service provider (maybe LoggerServiceProvider)\npublic function register(): void\n{\n    $this->app->bind(Logger::class, function ($app) {\n        return new Logger('\\log\\path\\here', 'error');\n    });\n}\n```", "```php\n// Note that this binding is not doing anything technically useful, since this\n// could all be provided by the container's autowiring already.\n$this->app->bind(UserMailer::class, function ($app) {\n    return new UserMailer(\n        $app->make(Mailer::class),\n        $app->make(Logger::class),\n        $app->make(Slack::class)\n    );\n});\n```", "```php\npublic function register(): void\n{\n    $this->app->singleton(Logger::class, function () {\n        return new Logger('\\log\\path\\here', 'error');\n    });\n}\n```", "```php\npublic function register(): void\n{\n    $logger = new Logger('\\log\\path\\here', 'error');\n    $this->app->instance(Logger::class, $logger);\n}\n```", "```php\n// Asked for Logger, give FirstLogger\n$this->app->bind(Logger::class, FirstLogger::class);\n\n// Asked for log, give FirstLogger\n$this->app->bind('log', FirstLogger::class);\n\n// Asked for log, give FirstLogger\n$this->app->alias(FirstLogger::class, 'log');\n```", "```php\n...\nuse Interfaces\\Mailer as MailerInterface;\n\nclass UserMailer\n{\n    protected $mailer;\n\n    public function __construct(MailerInterface $mailer)\n    {\n        $this->mailer = $mailer;\n    }\n}\n```", "```php\n// Service provider\npublic function register(): void\n{\n    $this->app->bind(\\Interfaces\\Mailer::class, function () {\n        return new MailgunMailer(...);\n    });\n}\n```", "```php\n// In a service provider\npublic function register(): void\n{\n    $this->app->when(FileWrangler::class)\n        ->needs(Interfaces\\Logger::class)\n        ->give(Loggers\\Syslog::class);\n\n    $this->app->when(Jobs\\SendWelcomeEmail::class)\n        ->needs(Interfaces\\Logger::class)\n        ->give(Loggers\\PaperTrail::class);\n}\n```", "```php\n...\nclass MyController extends Controller\n{\n    protected $logger;\n\n    public function __construct(Logger $logger)\n    {\n        $this->logger = $logger;\n    }\n\n    public function index()\n    {\n        // Do something\n        $this->logger->error('Something happened');\n    }\n}\n```", "```php\n...\nclass MyController extends Controller\n{\n    // Method dependencies can come after or before route parameters.\n    public function show(Logger $logger, $id)\n    {\n        // Do something\n        $logger->error('Something happened');\n    }\n}\n```", "```php\nclass Foo\n{\n    public function bar($parameter1) {}\n}\n\n// Calls the 'bar' method on 'Foo' with a first parameter of 'value'\napp()->call('Foo@bar', ['parameter1' => 'value']);\n```", "```php\nLog::alert('Something has gone wrong!');\n```", "```php\n$logger = app('log');\n$logger->alert('Something has gone wrong!');\n```", "```php\n...\nuse Illuminate\\Support\\Facades\\Log;\n\nclass Controller extends Controller\n{\n    public function index()\n    {\n        // ...\n        Log::error('Something went wrong!');\n    }\n```", "```php\n<?php\n\nnamespace Illuminate\\Support\\Facades;\n\nclass Cache extends Facade\n{\n    protected static function getFacadeAccessor()\n    {\n        return 'cache';\n    }\n}\n```", "```php\nCache::get('key');\n\n// Is the same as...\n\napp('cache')->get('key');\n```", "```php\nnamespace App;\n\nclass Charts\n{\n    public function burndown()\n    {\n        // ...\n    }\n}\n```", "```php\n<h2>Burndown Chart</h2>\n{{ Facades\\App\\Charts::burndown() }}\n```", "```php\npublic function test_it_does_something()\n{\n    app()->bind(Interfaces\\Logger, function () {\n        return new DevNullLogger;\n    });\n\n    // Do stuff\n}\n```", "```php\nclass TestCase extends \\Illuminate\\Foundation\\Testing\\TestCase\n{\n    public function setUp()\n    {\n        parent::setUp();\n\n        app()->bind('whatever', 'whatever else');\n    }\n}\n```"]