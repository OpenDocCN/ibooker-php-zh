["```php\nclass Database extends SQLite3\n{\n    public function __construct(string $databasePath)\n    {\n        $this->open($databasePath);\n    }\n\n    public function __destruct()\n    {\n        $this->close();\n    }\n}\n```", "```php\n$db = new Database('example.sqlite');\n\n$create_query = <<<SQL\nCREATE TABLE IF NOT EXISTS users (\n user_id INTEGER PRIMARY KEY,\n first_name TEXT NOT NULL,\n last_name TEXT NOT NULL,\n email TEXT NOT NULL UNIQUE\n);\nSQL;\n\n$db->exec($create_query);\n\n$insert_query = <<<SQL\nINSERT INTO users (first_name, last_name, email)\nVALUES ('Eric', 'Mann', 'eric@phpcookbook.local')\nON CONFLICT(email) DO NOTHING;\nSQL;\n\n$db->exec($insert_query);\n\n$results = $db->query('SELECT * from users;');\nwhile ($row = $results->fetchArray()) {\n    var_dump($row);\n}\n```", "```php\nclass Database extends PDO\n{\n    public function __construct($config = 'database.ini')\n    {\n        $settings = parse_ini_file($config, true);\n\n        if (!$settings) {\n            throw new RuntimeException(\"Error reading config: `{$config}`.\");\n        } else if (!array_key_exists('database', $settings)) {\n            throw new RuntimeException(\"Invalid config: `{$config}`.\");\n        }\n\n        $db = $settings['database'];\n        $port = $db['port'] ?? 3306;\n        $driver = $db['driver'] ?? 'mysql';\n        $host = $db['host'] ?? '';\n        $schema = $db['schema'] ?? '';\n        $username = $db['username'] ?? null;\n        $password = $db['password'] ?? null;\n\n        $port = empty($port) ? '' : \";port={$port}\";\n        $dsn = \"{$driver}:host={$host}{$port};dbname={$schema}\";\n\n        parent::__construct($dsn, $username, $password);\n    }\n}\n```", "```php\n[database]\ndriver = mysql\nhost = 127.0.0.1\nport = 3306\nschema = cookbook\nusername = root\npassword = toor\n```", "```php\n$db = new Database();\n\n$create_query = <<<SQL\nCREATE TABLE IF NOT EXISTS users (\n user_id int NOT NULL AUTO_INCREMENT,\n first_name varchar(255) NOT NULL,\n last_name varchar(255) NOT NULL,\n email varchar(255) NOT NULL UNIQUE,\n PRIMARY KEY (user_id)\n);\nSQL;\n\n$db->exec($create_query);\n\n$insert_query = <<<SQL\nINSERT IGNORE INTO users (first_name, last_name, email)\nVALUES ('Eric', 'Mann', 'eric@phpcookbook.local');\nSQL;\n\n$db->exec($insert_query);\n\nforeach($db->query('SELECT * from users;') as $row) {\n    var_dump($row);\n}\n```", "```php\n$ docker run --name db -e MYSQL_ROOT_PASSWORD=toor -p 0.0.0.0:3306:3306 -d mysql\n```", "```php\n$ mysql --host 127.0.0.1 --user root --password=toor ![1](assets/1.png)\n\nmysql> create database `cookbook`; ![2](assets/2.png)\nmysql> exit ![3](assets/3.png)\n```", "```php\n$ docker exec -it db bash ![1](assets/1.png)\n\n$ mysql --user root --password=toor ![2](assets/2.png)\n\nmysql> create database `cookbook`; ![3](assets/3.png)\nmysql> exit\n\n$ exit ![4](assets/4.png)\n```", "```php\n$db = new Database();\n\n$insert_query = <<<SQL\nINSERT IGNORE INTO users (first_name, last_name, email)\nVALUES (:first_name, :last_name, :email);\nSQL;\n\n$statement = $db->prepare($insert_query);\n\n$statement->execute([\n    'first_name' => $_POST['first'],\n    'last_name'  => $_POST['last'],\n    'email'      => $_POST['email']\n]);\n\nforeach($db->query('SELECT * from users;') as $row) {\n    var_dump($row);\n}\n```", "```php\nSELECT * FROM users WHERE email = ?;\n```", "```php\n$db = new Database();\n\n$statement = \"SELECT * FROM users WHERE email = '{$_POST['email']}';\";\n\n$results = $db->query($statement);\nvar_dump($results);\n```", "```php\n$db = new Database();\n\n$query = \"SELECT * FROM users WHERE email = :email;\";\n$statement = $db->prepare($query);\n\n$statement->execute(['email' => $_POST['email']]);\n\n$results = $statement->fetch();\nvar_dump($results);\n```", "```php\ninterface BookRepository\n{\n    public function getById(int $bookId): Book;\n    public function list(): array;\n    public function add(Book $book): Book;\n    public function delete(Book $book): void;\n    public function save(Book $book): Book;\n}\n```", "```php\nclass MockRepository implements BookRepository\n{\n    private array $books;\n\n    public function __construct()\n    {\n        $this->books = [\n            new Book(id: 0),\n            new Book(id: 1),\n            new Book(id: 2)\n        ];\n    }\n\n    public function getById(int $bookId): Book\n    {\n        return $this->books[$bookId];\n    }\n\n    public function list(): array\n    {\n        return $this->books;\n    }\n\n    public function add(Book $book): Book\n    {\n        $book->id = end(array_keys($this->books)) + 1;\n        $this->books[] = $book;\n\n        return $book;\n    }\n\n    public function delete(Book $book): void\n    {\n        unset($this->books[$book->id]);\n    }\n\n    public function save(Book $book): Book\n    {\n        $this->books[$book->id] = $book;\n    }\n}\n```", "```php\nclass DatabaseRepository implements BookRepository\n{\n    private PDO $dbh;\n\n    public function __construct($config = 'database.ini')\n    {\n        $settings = parse_ini_file($config, true);\n\n        if (!$settings) {\n            throw new RuntimeException(\"Error reading config: `{$config}`.\");\n        } else if (!array_key_exists('database', $settings)) {\n            throw new RuntimeException(\"Invalid config: `{$config}`.\");\n        }\n\n        $db = $settings['database'];\n        $port = $db['port'] ?? 3306;\n        $driver = $db['driver'] ?? 'mysql';\n        $host = $db['host'] ?? '';\n        $schema = $db['schema'] ?? '';\n        $username = $db['username'] ?? null;\n        $password = $db['password'] ?? null;\n\n        $port = empty($port) ? '' : \";port={$port}\";\n        $dsn = \"{$driver}:host={$host}{$port};dbname={$schema}\";\n\n        $this->dbh = new PDO($dsn, $username, $password);\n    }\n\n    public function getById(int $bookId): Book\n    {\n        $query = 'Select * from books where id = :id;';\n\n        $statement = $this->dbh->prepare($query);\n        $statement->execute(['id' => $bookId]);\n\n        $record = $statement->fetch();\n        if ($record) {\n            return Book::fromRecord($record);\n        }\n\n        throw new Exception('Book not found');\n    }\n\n    public function list(): array\n    {\n        $books = [];\n\n        $records = $this->dbh->query('select * from books;');\n        foreach($record as $book) {\n            $books[] = Book::fromRecord($book);\n        }\n\n        return $books;\n    }\n\n    public function add(Book $book): Book\n    {\n        $query = 'insert into books (title, author) values (:title, :author);';\n\n        $this->dbh->beginTransaction();\n        $statement = $this->dbh->prepare($query);\n        $statement->execute([\n            'title'  => $book->title,\n            'author' => $book->author,\n        ]);\n        $this->dbh->commit();\n\n        $book->id = $this->dbh->lastInsertId();\n\n        return $book;\n    }\n\n    public function delete(Book $book): void\n    {\n        $query = 'delete from books where id = :id';\n\n        $this->dbh->beginTransaction();\n        $statement = $this->dbh->prepare($query);\n        $statement->execute(['id' => $book->id]);\n        $this->dbh->commit();\n    }\n\n    public function save(Book $book): Book\n    {\n        $query =\n            'update books set title = :title, author = :author where id = :id;';\n\n        $this->dbh->beginTransaction();\n        $statement = $this->dbh->prepare($query);\n        $statement->execute([\n            'title' => $book->title,\n            'author' => $book->author,\n            'id' => $book->id\n        ]);\n        $this->dbh->commit();\n\n        return $book;\n    }\n}\n```", "```php\nclass BookController extends AbstractController\n{\n    #[Route('/book/{id}', name: 'book_show')]\n    public function show(int $id, BookRepository $repo): Response\n    {\n        $book = $repo->getById($id);\n\n        // ...\n    }\n}\n```", "```php\nSchema::create('books', function (Blueprint $table) {\n    $table->id();\n    $table->string('title');\n    $table->string('author');\n});\n```", "```php\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Book extends Model\n{\n    use HasFactory;\n\n    public $timestamps = false;\n}\n```", "```php\nclass Book\n{\n    public int    $id;\n    public string $title;\n    public string $author;\n}\n```", "```php\n$book = new Book;\n$book->title = 'PHP Cookbook';\n$book->author = 'Eric Mann';\n\n$book->save();\n```", "```php\nBook::where('author', 'Eric Mann')\n    ->update(['author', 'Eric A Mann']);\n```"]