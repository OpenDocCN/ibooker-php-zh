["```php\n$now = date('r');\n```", "```php\nWed, 09 Nov 2022 14:15:12 -0800\n```", "```php\n$now = date('r');\n\n$now = (new DateTime())->format('r');\n```", "```php\nprint (new DateTime())->format('l') . PHP_EOL;\n\nprint getdate()['weekday'] . PHP_EOL;\n```", "```php\n$birthday = new DateTime('2017-08-01');\n\nprint $birthday->format('l, F j, Y') . PHP_EOL; ![1](assets/1.png)\nprint $birthday->format('n/j/y') . PHP_EOL; ![2](assets/2.png)\nprint $birthday->format(DateTime::RSS) . PHP_EOL; ![3](assets/3.png)\n```", "```php\n$date = '2023-11-09T13:15:00-0700';\n$dateObj = new DateTime($date);\n\necho $dateObj->format('U');\n// 1699560900\n```", "```php\n$timestamp = '1648241792';\n$dateObj = DateTime::createFromFormat('U', $timestamp);\n\necho $dateObj->format(DateTime::ISO8601);\n// 2022-03-25T20:56:32+0000\n```", "```php\n$timestamp = '2023-07-23';\n$dateObj = DateTime::createFromFormat('U', $timestamp);\n\necho gettype($dateObj); // false\n```", "```php\n$date = new DateTime('2023-07-04T12:00:00');\n$timestamp = $date->format('U'); ![1](assets/1.png)\n\n$timestamp = mktime(month: 7, day: 4, year: 2023, hour: 12); ![2](assets/2.png)\n```", "```php\n$date = 1688472300;\n$time_parts = getdate($date);\n\nprint $time_parts['weekday'] . PHP_EOL; // Tuesday\nprint $time_parts['hours'] . PHP_EOL;   // 12\n```", "```php\n$date = '1688472300';\n\n$parsed = new DateTime(\"@{$date}\");\nprint $parsed->format('l') . PHP_EOL;\nprint $parsed->format('g') . PHP_EOL;\n\n$parsed2 = DateTime::createFromFormat('U', $date);\nprint $parsed2->format('l') . PHP_EOL;\nprint $parsed2->format('g') . PHP_EOL;\n```", "```php\n$firstDate = new DateTime('2002-06-14');\n$secondDate = new DateTime('2022-11-09');\n\n$interval = $secondDate->diff($firstDate);\n\nprint $interval->format('%y years %d days %m months');\n// 20 years 25 days 4 months\n```", "```php\n$entry = strtotime('last Wednesday');\n$parsed = new DateTime(\"@{$entry}\");\n\n$entry = strtotime('now + 2 days');\n$parsed = new DateTime(\"@{$entry}\");\n\n$entry = strtotime('June 23, 2023');\n$parsed = new DateTime(\"@{$entry}\");\n```", "```php\n$date = strtotime('2 days from now');\n\nif ($date === false) {\n    throw new InvalidArgumentException('Error parsing the string!');\n}\n```", "```php\n$first = date_parse('January 4, 2022'); ![1](assets/1.png)\n\n$second = date_parse('Feb 14'); ![2](assets/2.png)\n\n$third = date_parse('2022-11-12 5:00PM'); ![3](assets/3.png)\n\n$fourth = date_parse('1-1-2001 + 12 years'); ![4](assets/4.png)\n```", "```php\n$date = date_parse('2 days from now');\n\nif ($date['error_count'] > 0) {\n    foreach ($date['errors'] as $error) {\n        print $error . PHP_EOL;\n    }\n}\n```", "```php\n$entry = 'November 31, 2022';\n$parsed = date_parse($entry);\n\nif (!checkdate($parsed['month'], $parsed['day'], $parsed['year'])) {\n    throw new InvalidArgumentException('Specified date is invalid!');\n}\n```", "```php\n$valid = checkdate(2, 29, 2024); // true\n\n$invalid = checkdate(2, 29, 2023); // false\n```", "```php\n$date = new DateTime('December 25, 2023');\n\n// When do the 12 days of Christmas end?\n$twelve_days = new DateInterval('P12D');\n$date->add($twelve_days);\n\nprint 'The holidays end on ' . $date->format('F j, Y');\n\n// The holidays end on January 6, 2024\n```", "```php\n$date = new DateTime('December 25, 2023');\n$christmas = new DateTimeImmutable('December 25, 2023');\n\n// When do the 12 days of Christmas end? $twelve_days = new DateInterval('P12D');\n$date->add($twelve_days); ![1](assets/1.png)\n$end = $christmas->add($twelve_days); ![2](assets/2.png)\n\nprint 'The holidays end on ' . $date->format('F j, Y') . PHP_EOL;\nprint 'The holidays end on ' . $end->format('F j, Y') . PHP_EOL;\n\n// When is next Christmas? $next_year = new DateInterval('P1Y');\n$date->add($next_year);\n$next_christmas = $christmas->add($next_year);\n\nprint 'Next Christmas is on ' . $date->format('F j, Y') . PHP_EOL;\nprint 'Next Christmas is on ' . $next_christmas->format('F j, Y') . PHP_EOL; ![3](assets/3.png)\n\nprint 'This Christmas is on ' . $christmas->format('F j, Y') . PHP_EOL; ![4](assets/4.png)\n```", "```php\nfunction findThanksgiving(int $year): DateTime\n{\n    $november = new DateTime(\"November 1, {$year}\");\n    $november->modify('fourth Thursday');\n\n    return $november;\n}\n```", "```php\nfunction findThanksgiving(int $year): DateTimeImmutable\n{\n    $november = new DateTimeImmutable(\"November 1, {$year}\");\n    return $november->modify('fourth Thursday');\n}\n```", "```php\n$now = new DateTime();\n$now->setTimezone(new DateTimeZone('America/Los_Angeles'));\n\nprint $now->format(DATE_RSS) . PHP_EOL;\n\n$now->setTimezone(new DateTimeZone('Europe/Paris'));\n\nprint $now->format(DATE_RSS) . PHP_EOL;\n```", "```php\n$date = new DateTime('2022-12-15T17:35:53', new DateTimeZone('Asia/Tokyo'));\n\necho $date->format(DateTime::ATOM);\n// 2022-12-15T17:35:53+09:00\n```"]