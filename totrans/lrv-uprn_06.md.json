["```php\nlaravel new myProject\ncd myProject\ncomposer require laravel/breeze --dev\n```", "```php\nphp artisan breeze:install\n```", "```php\nphp artisan migrate\nnpm install\nnpm run dev\n```", "```php\nlaravel new myProject\ncd myProject\ncomposer require laravel/jetstream\n```", "```php\nphp artisan jetstream:install livewire\n```", "```php\nphp artisan jetstream:install livewire --teams\n```", "```php\nphp artisan migrate\nnpm install\nnpm run dev\n```", "```php\nimport { defineConfig } from 'vite';\nimport laravel from 'laravel-vite-plugin';\n\nexport default defineConfig({\n    plugins: [\n        laravel({\n            input: ['resources/css/app.css', 'resources/js/app.js'],\n            refresh: true,\n        }),\n    ],\n});\n```", "```php\n<html>\n<head>\n    @vite(['resources/css/app.css', 'resources/js/app.js'])\n```", "```php\n// ...\nexport default defineConfig({\n    plugins: [\n        laravel({\n            // ...\n            valetTls: 'name-of_my-app-here.test',\n        }),\n    ],\n});\n```", "```php\n@vite(['resources/css/app.css', 'resources/js/app.js'])\n```", "```php\n<link rel=\"preload\" as=\"style\"\n    href=\"http://my-app.test/build/assets/app-1c09da7e.css\" />\n<link rel=\"modulepreload\"\n    href=\"http://my-app.test/build/assets/app-ea0e9592.js\" />\n<link rel=\"stylesheet\"\n    href=\"http://my-app.test/build/assets/app-1c09da7e.css\" />\n<script type=\"module\"\n    src=\"http://my-app.test/build/assets/app-ea0e9592.js\"></script>\n```", "```php\n<script type=\"module\" src=\"http://127.0.0.1:5173/@vite/client\"></script>\n<link rel=\"stylesheet\" href=\"http://127.0.0.1:5173/resources/css/app.css\" />\n<script type=\"module\" src=\"http://127.0.0.1:5173/resources/js/app.js\"></script>\n```", "```php\n<!-- Ignored by Vite -->\n<img src=\"/resources/images/soccer.jpg\">\n<!-- Processed by Vite -->\n<img src=\"../resources/images/soccer.jpg\">\n```", "```php\n<img src=\"{{ Vite::asset('resources/images/soccer.jpg') }}\">\n```", "```php\nimport.meta.glob([\n  // Imports all the files in /resources/images/\n  '../images/**',\n]);\n```", "```php\nnpm install --save-dev @vitejs/plugin-vue\n```", "```php\nimport { defineConfig } from 'vite';\nimport laravel from 'laravel-vite-plugin';\nimport vue from '@vitejs/plugin-vue';\n\nexport default defineConfig({\n  plugins: [\n    laravel(['resources/js/app.js']),\n    vue({\n      template: {\n        transformAssetUrls: {\n          base: null,\n          includeAbsolute: false,\n        },\n      },\n    }),\n  ],\n});\n```", "```php\nnpm install --save-dev @vitejs/plugin-react\n```", "```php\nimport { defineConfig } from 'vite';\nimport laravel from 'laravel-vite-plugin';\nimport react from '@vitejs/plugin-react';\n\nexport default defineConfig({\n  plugins: [\n    laravel(['resources/js/app.js']),\n    react(),\n  ],\n});\n```", "```php\n@viteReactRefresh\n@vite('resources/js/app.jsx')\n```", "```php\nimport { createApp, h } from 'vue'\nimport { createInertiaApp } from '@inertiajs/vue3'\n\ncreateInertiaApp({\n  resolve: name => {\n    const pages = import.meta.glob('./Pages/**/*.vue', { eager: true })\n    return pages[`./Pages/${name}.vue`]\n  },\n  setup({ el, App, props, plugin }) {\n    createApp({ render: () => h(App, props) })\n      .use(plugin)\n      .mount(el)\n  },\n})\n```", "```php\nimport './bootstrap';\nimport '../css/app.css';\n```", "```php\n// .env\nVITE_BASE_URL=http://local-development-url.test\n```", "```php\n// resources/js/app.js\nconst baseUrl = import.meta.env.VITE_BASE_URL;\n```", "```php\n// PostController\npublic function index()\n{\n   return view('posts.index', ['posts' => DB::table('posts')->paginate(20)]);\n}\n```", "```php\n// posts/index.blade.php\n<table>\n@foreach ($posts as $post)\n    <tr><td>{{ $post->title }}</td></tr>\n@endforeach\n</table>\n\n{{ $posts->links() }}\n\n// By default, $posts->links() will output something like this:\n<div class=\"...\">\n    <div>\n        <p class=\"...\">\n            Showing\n            <span class=\"...\">1</span>\n            to\n            <span class=\"...\">2</span>\n            of\n            <span class=\"...\">5</span>\n            results\n        </p>\n    </div>\n    <div>\n        <span class=\"...\">\n            <span aria-disabled=\"true\" aria-label=\"&amp;laquo; Previous\">\n                <!-- SVG here for the ... ellipsis -->\n            </span>\n            <span class=\"...\">1</span>\n            <a href=\"http://myapp.com/posts?page=2\" class=\"...\" aria-label=\"...\">\n                2\n            </a>\n            <a href=\"http://myapp.com/posts?page=3\" class=\"...\" aria-label=\"...\">\n                3\n            </a>\n            <a href=\"http://myapp.com/posts?page=2\" class=\"...\"\n                rel=\"next\" aria-label=\"Next &amp;raquo;\">\n                <!-- SVG here for the ... ellipsis -->\n            </a>\n        </span>\n    </div>\n</div>\n```", "```php\nuse Illuminate\\Pagination\\Paginator;\n\npublic function boot(): void\n{\n    Paginator::useBootstrap();\n}\n```", "```php\nDB::table('posts')->paginate(10)->onEachSide(3);\n\n// Outputs:\n// 5 6 7 [8] 9 10 11\n```", "```php\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Pagination\\Paginator;\n\nRoute::get('people', function (Request $request) {\n    $people = [...]; // huge list of people\n\n    $perPage = 15;\n    $offsetPages = $request->input('page', 1) - 1;\n\n    // The Paginator will not slice your array for you\n    $people = array_slice(\n        $people,\n        $offsetPages * $perPage,\n        $perPage\n    );\n\n    return new Paginator(\n        $people,\n        $perPage\n    );\n});\n```", "```php\n$messages = [\n    'errors' => [\n        'Something went wrong with edit 1!',\n    ],\n    'messages' => [\n        'Edit 2 was successful.',\n    ],\n];\n$messagebag = new \\Illuminate\\Support\\MessageBag($messages);\n\n// Check for errors; if there are any, decorate and echo\nif ($messagebag->has('errors')) {\n    echo '<ul id=\"errors\">';\n    foreach ($messagebag->get('errors', '<li><b>:message</b></li>') as $error) {\n        echo $error;\n    }\n    echo '</ul>';\n}\n```", "```php\n// partials/errors.blade.php\n@if ($errors->any())\n    <div class=\"alert alert-danger\">\n        <ul>\n        @foreach ($errors as $error)\n            <li>{{ $error }}</li>\n        @endforeach\n        </ul>\n    </div>\n@endif\n```", "```php\n// Normal PHP\n<?php echo __('navigation.back'); ?>\n```", "```php\n// Blade\n{{ __('navigation.back') }}\n\n// Blade directive\n@lang('navigation.back')\n```", "```php\nphp artisan lang:publish\n```", "```php\n<?php\n\nreturn [\n    'back' => 'Return to dashboard',\n];\n```", "```php\n<?php\n\nreturn [\n    'back' => 'Volver al panel',\n];\n```", "```php\n// routes/web.php\nRoute::get('/es/contacts/show/{id}', function () {\n    // Set the locale manually, for this example, instead of in a service provider\n    App::setLocale('es');\n    return view('contacts.show');\n});\n\n// resources/views/contacts/show.blade.php\n<a href=\"/contacts\">{{ __('navigation.back') }}</a>\n```", "```php\n// lang/en/navigation.php\nreturn [\n    'back' => 'Back to :section dashboard',\n];\n\n// resources/views/contacts/show.blade.php\n{{ __('navigation.back', ['section' => 'contacts']) }}\n```", "```php\n// lang/en/messages.php\nreturn [\n    'task-deletion' => 'You have deleted a task|You have successfully deleted tasks',\n];\n\n// resources/views/dashboard.blade.php\n@if ($numTasksDeleted > 0)\n    {{ trans_choice('messages.task-deletion', $numTasksDeleted) }}\n@endif\n```", "```php\n// lang/es/messages.php\nreturn [\n    'task-deletion' => \"{0} You didn't manage to delete any tasks.|\" .\n        \"[1,4] You deleted a few tasks.|\" .\n        \"[5,Inf] You deleted a whole ton of tasks.\",\n];\n```", "```php\n// In Blade\n{{ __('View friends list') }}\n```", "```php\n// lang/es.json\n{\n  'View friends list': 'Ver lista de amigos'\n}\n```", "```php\npublic function test_missing_email_field_errors()\n{\n    $this->post('person/create', ['name' => 'Japheth']);\n    $this->assertSessionHasErrors(['email']);\n}\n```", "```php\npublic function test_it_runs_without_vite()\n{\n    $this->withoutVite();\n\n    // Test stuff\n}\n```"]