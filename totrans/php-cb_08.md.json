["```php\nclass Foo\n{\n    const SOME_CONSTANT = 42;\n\n    public string $hello = 'hello';\n\n    public function __construct(public string $world = 'world') {}\n\n    public function greet(): void\n    {\n        echo sprintf('%s %s', $this->hello, $this->world);\n    }\n}\n```", "```php\n$first = new Foo; ![1](assets/1.png)\n$second = new Foo('universe'); ![2](assets/2.png)\n\n$first->greet(); ![3](assets/3.png)\n$second->greet(); ![4](assets/4.png)\n\necho Foo::SOME_CONSTANT; ![5](assets/5.png)\n```", "```php\nabstract class Vehicle\n{\n    abstract public function go(): void;\n\n    abstract public function stop(): void;\n\n    abstract public function turn(Direction $direction): void;\n}\n\nclass Car extends Vehicle\n{\n    public int $wheels = 4;\n    public string $driveType = 'gas';\n\n    public function __construct(public Color $color) {}\n\n    public function go(): void\n    {\n        // ...\n    }\n\n    public function stop(): void\n    {\n        // ...\n    }\n\n    public function turn(Direction $direction): void\n    {\n        // ...\n    }\n}\n\nclass Bus extends Vehicle\n{\n    public int $wheels = 4;\n    public string $driveType = 'diesel';\n\n    public function __construct(public Color $color) {}\n\n    public function go(): void\n    {\n        // ...\n    }\n\n    public function stop(): void\n    {\n        // ...\n    }\n\n    public function turn(Direction $direction): void\n    {\n        // ...\n    }\n}\n\nclass Bicycle extends Vehicle\n{\n    public int $wheels = 2;\n    public string $driveType = 'direct';\n\n    public function __construct(public Color $color) {}\n\n    public function go(): void\n    {\n        // ...\n    }\n\n    public function stop(): void\n    {\n        // ...\n    }\n\n    public function turn(Direction $direction): void\n    {\n        // ...\n    }\n}\n```", "```php\nfunction commute(Vehicle $vehicle) ![1](assets/1.png)\n{\n    // ... }\n\nfunction exercise(Bicycle $vehicle) ![2](assets/2.png)\n{\n    // ... }\n```", "```php\nclass A\n{\n    public    string $name  = 'Bob';\n    public    string $city  = 'Portland';\n    protected int    $year  = 2023;\n    private   float  $value = 42.9;\n\n    function hello(): string\n    {\n        return 'hello';\n    }\n\n    public function world(): string\n    {\n        return 'world';\n    }\n\n    protected function universe(): string\n    {\n        return 'universe';\n    }\n\n    private function abyss(): string\n    {\n        return 'the void';\n    }\n}\n\nclass B extends A\n{\n    public function getName(): string\n    {\n        return $this->name;\n    }\n\n    public function getCity(): string\n    {\n        return $this->city;\n    }\n\n    public function getYear(): int\n    {\n        return $this->year;\n    }\n\n    public function getValue(): float\n    {\n        return $this->value;\n    }\n}\n\n$first = new B;\necho $first->getName() . PHP_EOL; ![1](assets/1.png)\necho $first->getCity() . PHP_EOL; ![2](assets/2.png)\necho $first->getYear() . PHP_EOL; ![3](assets/3.png)\necho $first->getValue() . PHP_EOL; ![4](assets/4.png)\n\n$second = new A;\necho $second->hello() . PHP_EOL; ![5](assets/5.png)\necho $second->world() . PHP_EOL; ![6](assets/6.png)\necho $second->universe() . PHP_EOL; ![7](assets/7.png)\necho $second->abyss() . PHP_EOL; ![8](assets/8.png)\n```", "```php\nclass Pet\n{\n    public string $name;\n    public string $species;\n    public int $happiness = 0;\n\n    public function __construct(string $name, string $species)\n    {\n        $this->name = $name;\n        $this->species = $species;\n    }\n\n    public function pet()\n    {\n        $this->happiness += 1;\n    }\n}\n\n$dog = new Pet('Fido', 'golden retriever');\n$dog->pet();\n```", "```php\nclass Pet\n{\n    public int $happiness = 0;\n\n    public function __construct(\n        public string $name,\n        public string $species\n    ) {}\n\n    public function pet()\n    {\n        $this->happiness += 1;\n    }\n}\n\n$dog = new Pet('Fido', 'golden retriever');\n$dog->pet();\n```", "```php\nclass Example\n{\n    public function __construct(\n        public string $someString = 'default',\n        public int    $someNumber = 5\n    ) {}\n}\n\n$first = new Example;\n$second = new Example('overridden');\n$third = new Example('hitchhiker', 42);\n$fourth = new Example(someNumber: 10);\n```", "```php\nclass Example\n{\n    public string $someString;\n    public int $someNumber;\n\n    public function __construct(\n        string $someString = 'default',\n        int    $someNumber = 5\n    )\n    {\n        $this->someString = $someString;\n        $this->someNumber = $someNumber;\n    }\n}\n```", "```php\nclass Example\n{\n    public string $someString = 'default';\n    public int $someNumber = 5;\n}\n\n$test = new Example;\n$test->someString = 'overridden';\n$test->someNumber = 42;\n```", "```php\nclass Book\n{\n    public readonly string $title;\n\n    public function __construct(string $title)\n    {\n        $this->title = $title;\n    }\n}\n\n$book = new Book('PHP Cookbook');\n```", "```php\nclass Book\n{\n    public function __construct(public readonly string $title) {}\n}\n\n$book = new Book('PHP Cookbook');\n```", "```php\nclass Example\n{\n    public readonly string $prop;\n}\n\nclass Second\n{\n    public function __construct(public readonly int $count = 0) {}\n}\n\n$first = new Example; ![1](assets/1.png)\n$first->prop = 'test'; ![2](assets/2.png)\n\n$test = new Second;\n$test->count += 1; ![3](assets/3.png)\n$test->count++; ![4](assets/4.png)\n++$test->count; ![5](assets/5.png)\nunset($test->count); ![6](assets/6.png)\n```", "```php\nclass First\n{\n    public function __construct(public readonly Second $inner) {}\n}\n\nclass Second\n{\n    public function __construct(public int $counter = 0) {}\n}\n\n$test = new First(new Second);\n$test->inner->counter += 1; ![1](assets/1.png)\n\n$test->inner = new Second; ![2](assets/2.png)\n```", "```php\nclass DatabaseHandler\n{\n    // ...\n\n    public function __destruct()\n    {\n        dbo_close($this->dbh);\n    }\n}\n```", "```php\nclass TempLogger\n{\n    private string $filename;\n    private mixed  $handle;\n\n    public function __construct(string $name)\n    {\n        $this->filename = sprintf('tmp_%s_%s.tmp', $name, time());\n        $this->handle = fopen($this->filename, 'w');\n    }\n\n    public function writeLog(string $line): void\n    {\n        fwrite($this->handle, $line . PHP_EOL);\n    }\n\n    public function getLogs(): Generator\n    {\n        $handle = fopen($this->filename, 'r');\n        while(($buffer = fgets($handle, 4096)) !== false) {\n            yield $buffer;\n        }\n        fclose($handle);\n    }\n\n    public function __destruct()\n    {\n        fclose($this->handle);\n        unlink($this->filename);\n    }\n}\n\n$logger = new TempLogger('test'); ![1](assets/1.png)\n$logger->writeLog('This is a test'); ![2](assets/2.png)\n$logger->writeLog('And another');\n\nforeach($logger->getLogs() as $log) { ![3](assets/3.png)\n    echo $log;\n}\n\nunset($logger); ![4](assets/4.png)\n```", "```php\nclass Magical\n{\n    private array $_data = [];\n\n    public function __get(string $name): mixed\n    {\n        if (isset($this->_data[$name])) {\n            return $this->_data[$name];\n        }\n\n        throw new Error(sprintf('Property `%s` is not defined', $name));\n    }\n\n    public function __set(string $name, mixed $value)\n    {\n        $this->_data[$name] = $value;\n    }\n}\n\n$first = new Magical;\n$first->custom = 'hello';\n$first->another = 'world';\n\necho $first->custom . ' ' . $first->another . PHP_EOL;\n\necho $first->unknown; // Error\n```", "```php\nclass Basic\n{\n    public function __construct(\n        public string $word,\n        public int $number\n    ) {}\n}\n\nclass Magic\n{\n    private array $_data = [];\n\n    public function __get(string $name): mixed\n    {\n        if (isset($this->_data[$name])) {\n            return $this->_data[$name];\n        }\n\n        throw new Error(sprintf('Property `%s` is not defined', $name));\n    }\n\n    public function __set(string $name, mixed $value)\n    {\n        $this->_data[$name] = $value;\n    }\n\n    public function __isset(string $name): bool\n    {\n        return array_key_exists($name, $this->_data);\n    }\n\n    public function __unset(string $name): void\n    {\n        unset($this->_data[$name]);\n    }\n}\n\n$basic = new Basic('test', 22);\n\n$magic = new Magic;\n$magic->word = 'test';\n$magic->number = 22;\n```", "```php\nclass A\n{\n    public function hello(): string\n    {\n        return 'hello';\n    }\n}\n\nclass B extends A\n{\n    public function world(): string\n    {\n        return 'world';\n    }\n}\n\n$instance = new B();\necho \"{$instance->hello()} {$instance->world()}\";\n```", "```php\nclass A\n{\n    public function greet(string $name): string\n    {\n        return 'Good morning, ' . $name;\n    }\n}\n\nclass B extends A\n{\n    public function greet(string $name): string\n    {\n        return 'Howdy, ' . $name;\n    }\n}\n\n$first = new A();\necho $first->greet('Alice'); ![1](assets/1.png)\n\n$second = new B();\necho $second->greet('Bob'); ![2](assets/2.png)\n```", "```php\nclass A\n{\n    public function hello(): string\n    {\n        return 'hello';\n    }\n}\n\nclass B extends A\n{\n    public function hello(): string\n    {\n        return parent::hello() . ' world';\n    }\n}\n\n$instance = new B();\necho $instance->hello();\n```", "```php\ninterface ArtifactRepository\n{\n    public function create(Artifact $artifact): bool;\n    public function get(int $artifactId): ?Artifact;\n    public function getAll(): array;\n    public function update(Artifact $artifact): bool;\n    public function delete(int $artifactId): bool;\n}\n\nclass Museum\n{\n    public function __construct(\n        protected ArtifactRepository $repository\n    ) {}\n\n    public function enumerateArtifacts(): Generator\n    {\n        foreach($this->repository->getAll() as $artifact) {\n            yield $artifact;\n        }\n    }\n}\n```", "```php\nclass MemoryRepository implements ArtifactRepository\n{\n    private array $_collection = [];\n\n    private function nextKey(): int\n    {\n        $keys = array_keys($this->_collection);\n        $max = array_reduce($keys, function($c, $i) {\n            return max($c, $i);\n        }, 0);\n\n        return $max + 1;\n    }\n\n    public function create(Artifact $artifact): bool\n    {\n        if ($artifact->id === null) {\n            $artifact->id = $this->nextKey();\n        }\n\n        if (array_key_exists($artifact->id, $this->_collection)) {\n            return false;\n        }\n\n        $this->_collection[$artifact->id] = $artifact;\n        return true;\n    }\n    public function get(int $artifactId): ?Artifact\n    {\n        return $this->_collection[$artifactId] ?? null;\n    }\n    public function getAll(): array\n    {\n        return array_values($this->_collection);\n    }\n    public function update(Artifact $artifact): bool\n    {\n        if (array_key_exists($artifact->id, $this->_collection)) {\n            $this->_collection[$artifact->id] = $artifact;\n            return true;\n        }\n\n        return false;\n    }\n    public function delete(int $artifactId): bool\n    {\n        if (array_key_exists($artifactId, $this->_collection)) {\n            unset($this->_collection[$artifactId]);\n            return true;\n        }\n\n        return false;\n    }\n}\n```", "```php\ninterface A\n{\n    public function foo(): int;\n}\n\ninterface B\n{\n    public function foo(): int;\n}\n\ninterface C\n{\n    public function foo(): string;\n}\n\nclass First implements A, B\n{\n    public function foo(): int ![1](assets/1.png)\n    {\n        return 1;\n    }\n}\n\nclass Second implements A, C\n{\n    public function foo(): int|string ![2](assets/2.png)\n    {\n        return 'nope';\n    }\n}\n```", "```php\ninterface A ![1](assets/1.png)\n{\n    public function foo(): void;\n}\n\ninterface B extends A ![2](assets/2.png)\n{\n    public function bar(): void;\n}\n\nclass C implements B\n{\n    public function foo(): void\n    {\n        // ... actual implementation\n    }\n\n    public function bar(): void\n    {\n        // ... actual implementation\n    }\n}\n```", "```php\nabstract class Base\n{\n    abstract public function getData(): string;\n\n    public function printData(): void\n    {\n        echo $this->getData();\n    }\n}\n\nclass Concrete extends Base\n{\n    public function getData(): string\n    {\n        return bin2hex(random_bytes(16));\n    }\n}\n\n$instance = new Concrete;\n$instance->printData(); ![1](assets/1.png)\n```", "```php\nabstract class A\n{\n    private string $data = 'this is a secret'; ![1](assets/1.png)\n\n    abstract public function viewData(): void;\n\n    public function getData(): string\n    {\n        return $this->data; ![2](assets/2.png)\n    }\n}\n\nclass B extends A\n{\n    public function viewData(): void\n    {\n        echo $this->getData() . PHP_EOL; ![3](assets/3.png)\n    }\n}\n\n$instance = new B();\n$instance->viewData(); ![4](assets/4.png)\n```", "```php\nfinal class Immutable\n{\n    // Class definition\n}\n```", "```php\nclass Mutable\n{\n    final public function fixed(): void\n    {\n        // Method definition\n    }\n}\n```", "```php\nclass Base\n{\n    public function safe()\n    {\n        echo 'safe() inside Base class' . PHP_EOL;\n    }\n\n    final public function unsafe()\n    {\n        echo 'unsafe() inside Base class' . PHP_EOL;\n    }\n}\n\nclass Child extends Base\n{\n    public function safe()\n    {\n        echo 'safe() inside Child class' . PHP_EOL;\n    }\n\n    public function unsafe()\n    {\n        echo 'unsafe() inside Child class' . PHP_EOL;\n    }\n}\n```", "```php\nfinal class Base\n{\n    public function safe()\n    {\n        echo 'safe() inside Base class' . PHP_EOL;\n    }\n\n    public function unsafe()\n    {\n        echo 'unsafe() inside Base class' . PHP_EOL;\n    }\n}\n```", "```php\ninterface DataAbstraction ![1](assets/1.png)\n{\n    public function save();\n}\n\nfinal class DBImplementation implements DataAbstraction ![2](assets/2.png)\n{\n    public function __construct(string $databaseConnection)\n    {\n        // Connect to a database\n    }\n\n    public function save()\n    {\n        // Save some data\n    }\n}\n\nfinal class FileImplementation implements DataAbstraction ![3](assets/3.png)\n{\n    public function __construct(string $filename)\n    {\n        // Open a file for writing\n    }\n\n    public function save()\n    {\n        // Write to the file\n    }\n}\n\nclass Application\n{\n    public function __construct(\n        protected DataAbstraction $datalayer ![4](assets/4.png)\n    ) {}\n}\n```", "```php\nclass Note\n{\n    public function publish()\n    {\n        // Publish the note's data to Twitter ...\n    }\n}\n\nclass StaticNote extends Note\n{\n    public function publish()\n    {\n        parent::publish();\n\n        // Also produce a static PDF of the note's data ...\n    }\n}\n\n$note = new StaticNote(); ![1](assets/1.png)\n$note->publish(); ![2](assets/2.png)\n```", "```php\nfinal class Note\n{\n    public function publish()\n    {\n        // Publish the note's data to Twitter ...\n    }\n}\n\nfinal class StaticNote\n{\n    public function __construct(private Note $note) {}\n\n    public function publish()\n    {\n        $this->note->publish();\n\n        // Also produce a static PDF of the note's data ...\n    }\n}\n\n$note = new StaticNote(new Note()); ![1](assets/1.png)\n$note->publish(); ![2](assets/2.png)\n```", "```php\n$dolly = clone $roslin;\n```", "```php\n$obj1 = (object) [ ![1](assets/1.png)\n    'propertyOne' => 'some',\n    'propertyTwo' => 'data',\n];\n$obj2 = $obj1; ![2](assets/2.png)\n\n$obj2->propertyTwo = 'changed'; ![3](assets/3.png)\n\nvar_dump($obj1); ![4](assets/4.png)\nvar_dump($obj2);\n```", "```php\n$obj1 = (object) [\n    'propertyOne' => 'some',\n    'propertyTwo' => 'data',\n];\n$obj2 = clone $obj1; ![1](assets/1.png)\n\n$obj2->propertyTwo = 'changed'; ![2](assets/2.png)\n\nvar_dump($obj1); ![3](assets/3.png)\nvar_dump($obj2); ![4](assets/4.png)\n```", "```php\n$child = (object) [\n    'name' => 'child',\n];\n$parent = (object) [\n    'name'  => 'parent',\n    'child' => $child\n];\n\n$clone = clone $parent;\n\nif ($parent === $clone) { ![1](assets/1.png)\n    echo 'The parent and clone are the same object!' . PHP_EOL;\n}\n\nif ($parent == $clone) { ![2](assets/2.png)\n    echo 'The parent and clone have the same data!' . PHP_EOL;\n}\n\nif ($parent->child === $clone->child) { ![3](assets/3.png)\n    echo 'The parent and the clone have the same child!' . PHP_EOL;\n}\n```", "```php\n$parent = new class {\n    public string $name = 'parent';\n    public stdClass $child;\n\n    public function __clone()\n    {\n        $this->child = clone $this->child;\n    }\n};\n$parent->child = (object) [\n    'name' => 'child'\n];\n\n$clone = clone $parent;\n\nif ($parent === $clone) { ![1](assets/1.png)\n    echo 'The parent and clone are the same object!' . PHP_EOL;\n}\n\nif ($parent == $clone) { ![2](assets/2.png)\n    echo 'The parent and clone have the same data!' . PHP_EOL;\n}\n\nif ($parent->child === $clone->child) { ![3](assets/3.png)\n    echo 'The parent and the clone have the same child!' . PHP_EOL;\n}\n\nif ($parent->child == $clone->child) { ![4](assets/4.png)\n    echo 'The parent and the clone have the same child data!' . PHP_EOL;\n}\n```", "```php\nclass Foo\n{\n    public static int $counter = 0;\n\n    public static function increment(): void\n    {\n        self::$counter += 1;\n    }\n}\n```", "```php\nclass Foo\n{\n    public static string $name = 'Foo';\n}\n\n$bar = 'Bar';\n\nfunction demonstration()\n{\n    global $bar; ![1](assets/1.png)\n\n    echo Foo::$name . $bar; ![2](assets/2.png)\n}\n```", "```php\nclass BinaryString\n{\n    private function __construct(private string $bits) {} ![1](assets/1.png)\n\n    public static function fromHex(string $hex): self\n    {\n        return new self(hex2bin($hex)); ![2](assets/2.png)\n    }\n\n    public static function fromBase64(string $b64): self\n    {\n        return new self(base64_decode($b64));\n    }\n\n    public function __toString(): string ![3](assets/3.png)\n    {\n        return bin2hex($this->bits);\n    }\n}\n\n$rawData = '48656c6c6f20776f726c6421';\n$binary = BinaryString::fromHex($rawData); ![4](assets/4.png)\n```", "```php\n$reflected = new ReflectionClass('SuperSecretClass');\n\n$methods = $reflected->getMethods(); ![1](assets/1.png)\n$properties = $reflected->getProperties(); ![2](assets/2.png)\n```", "```php\nclass Foo\n{\n    private int $counter = 0; ![1](assets/1.png)\n\n    public function increment(): void\n    {\n        $this->counter += 1;\n    }\n\n    public function getCount(): int\n    {\n        return $this->counter;\n    }\n}\n\n$instance = new Foo;\n$instance->increment(); ![2](assets/2.png)\n$instance->increment(); ![3](assets/3.png)\n\necho $instance->getCount() . PHP_EOL; ![4](assets/4.png)\n\n$instance->counter = 0; ![5](assets/5.png)\n\n$reflectionClass = new ReflectionClass('Foo');\n$reflectionClass->getProperty('counter')->setValue($instance, 0); ![6](assets/6.png)\n\necho $instance->getCount() . PHP_EOL; ![7](assets/7.png)\n```", "```php\ntrait Logger\n{\n    public function log(string $message): void\n    {\n        error_log($message);\n    }\n}\n\nclass Account\n{\n    use Logger; ![1](assets/1.png)\n\n    public function __construct(public int $accountNumber)\n    {\n        $this->log(\"Created account {$accountNumber}.\");\n    }\n}\n\nclass User extends Person\n{\n    use Logger; ![2](assets/2.png)\n\n    public function authenticate(): bool\n    {\n        // ...\n        $this->log(\"User {$userId} logged in.\");\n        // ...\n    }\n}\n```", "```php\ntrait Foo\n{\n    public function bar()\n    {\n        echo 'Hello World!';\n    }\n}\n\nclass A\n{\n    use Foo { bar as protected; } ![1](assets/1.png)\n}\n\nclass B\n{\n    use Foo { bar as private; } ![2](assets/2.png)\n}\n```", "```php\ntrait Foo\n{\n    public function bar(): string\n    {\n        return 'FooBar';\n    }\n}\n\nclass Bar\n{\n    use Foo;\n    public function bar(): string\n    {\n        return 'BarFoo';\n    }\n}\n\n$instance = new Bar;\necho $instance->bar(); // BarFoo\n```", "```php\ntrait A\n{\n    public function hello(): string\n    {\n        return 'Hello';\n    }\n\n    public function world(): string\n    {\n        return 'Universe';\n    }\n}\n\ntrait B\n{\n    public function world(): string\n    {\n        return 'World';\n    }\n}\n\nclass Demonstration\n{\n    use A, B {\n        B::world insteadof A;\n    }\n}\n\n$instance = new Demonstration;\necho \"{$instance->hello()} {$instance->world()}!\"; // Hello World!\n```"]