- en: Chapter 14\. Exploring JavaScript
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 14 章\. 探索 JavaScript
- en: JavaScript brings a dynamic functionality to your websites. Every time you see
    something pop up when you mouse over an item in the browser, or see new text,
    colors, or images appear on the page in front of your eyes, or grab an object
    on the page and drag it to a new location—these things are generally done through
    JavaScript (although CSS is getting more and more powerful and can do many of
    these things too). It offers effects that are not otherwise possible, because
    it runs inside the browser and has direct access to all the elements in a web
    document.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 为您的网站带来了动态功能。每当您在浏览器中鼠标悬停在某个项目上时看到弹出的内容，或者看到页面上出现新的文本、颜色或图片时，或者在页面上抓取一个对象并将其拖动到新位置时——这些通常是通过
    JavaScript 完成的（尽管 CSS 越来越强大，也可以完成许多这些功能）。它提供了否则无法实现的效果，因为它在浏览器内运行，并直接访问 Web 文档中的所有元素。
- en: JavaScript first appeared in the Netscape Navigator browser in 1995, coinciding
    with the addition of support for Java technology in the browser. Because of the
    initial incorrect impression that JavaScript was a spin-off of Java, there has
    been some long-term confusion over their relationship. However, the naming was
    just a marketing ploy to help the new scripting language benefit from the popularity
    of the Java programming language.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 最早出现在 Netscape Navigator 浏览器中，与浏览器中的 Java 技术支持同时推出。由于最初错误地认为 JavaScript
    是 Java 的衍生物，长期以来有关它们关系的混淆。然而，命名只是一种营销策略，旨在借助 Java 编程语言的流行来推广新的脚本语言。
- en: JavaScript gained new power when the HTML elements of the web page got a more
    formal, structured definition in what is called the *Document Object Model* (DOM).
    The DOM makes it relatively easy to add a new paragraph or focus on a piece of
    text and change it.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 当网页的 HTML 元素在所谓的*文档对象模型*（DOM）中得到更正式、结构化的定义时，JavaScript 获得了新的力量。DOM 使得添加新段落或关注文本的一部分并更改它变得相对容易。
- en: Because both JavaScript and PHP support much of the structured programming syntax
    used by the C programming language, they look very similar to each other. They
    are both fairly high-level languages, too. Also, they are weakly typed, so it’s
    easy to change a variable to a new type just by using it in a new context.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 JavaScript 和 PHP 都支持 C 编程语言中使用的大部分结构化编程语法，它们在语法上看起来非常相似。它们也都是相当高级的语言。此外，它们都是弱类型语言，因此通过在新的上下文中使用它，很容易将变量更改为新类型。
- en: Now that you have learned PHP, you should find JavaScript even easier. And you’ll
    be glad you did, because it’s at the heart of the asynchronous communication technology
    that provides the fluid web frontends that (along with HTML5 features) savvy web
    users expect these days.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经学会了 PHP，您应该会发现 JavaScript 更容易。您会感到高兴，因为它是提供流畅 Web 前端的异步通信技术的核心（与 HTML5
    功能一起），这是精明的 Web 用户现在期望的。
- en: JavaScript and HTML Text
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaScript 和 HTML 文本
- en: JavaScript  is a client-side scripting language that runs entirely inside the
    web browser or under *Node.js*. To call it up, you place it between opening `<script>`
    and closing `</script>` HTML tags. A typical “Hello World” document using JavaScript
    might look like [Example 14-1](#quotation_markhello_worldquotation_mark).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 是一种客户端脚本语言，完全运行在 Web 浏览器内或*Node.js*下。要调用它，您需要将其放置在开启 `<script>` 和闭合
    `</script>` HTML 标签之间。一个典型的使用 JavaScript 的“Hello World” 文档可能看起来像 [示例 14-1](#quotation_markhello_worldquotation_mark)。
- en: Example 14-1\. “Hello World” displayed using JavaScript
  id: totrans-8
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 14-1\. 使用 JavaScript 显示“Hello World”
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-10
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: You may have seen web pages that use the HTML tag `<script` `language="javascript">`,
    but that usage has now been deprecated. This example uses the more recent and
    preferred `<script type="text/javascript">`, or you can just use `<script>` on
    its own if you like.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经看到使用 HTML 标签 `<script` `language="javascript">` 的网页，但这种用法现在已经不推荐使用了。本示例使用了更新和更受欢迎的
    `<script type="text/javascript">`，或者您也可以只使用 `<script>`。
- en: Within the `<script>` tags is a single line of JavaScript code that uses its
    equivalent of the PHP `echo` or `print` commands, `document.write`. As you’d expect,
    it simply outputs the supplied string to the current document, where it is displayed.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `<script>` 标签内是一行 JavaScript 代码，它使用其类似于 PHP `echo` 或 `print` 命令的 `document.write`。正如您所预期的那样，它只是将提供的字符串输出到当前文档中，然后在其中显示。
- en: You may also have noticed that, unlike with PHP, there is no trailing semicolon
    (`;`). This is because a newline serves the same purpose as a semicolon in JavaScript.
    However, if you wish to have more than one statement on a single line, you do
    need to place a semicolon after each command except the last one. Of course, if
    you wish, you can add a semicolon to the end of every statement, and your JavaScript
    will work fine. My personal preference is to leave out the semicolon because it’s
    superfluous, and I therefore also steer clear of practices that could cause issues.
    At the end of the day, though, the choice  may come down to the team you work
    in, which more often than not may require semicolons, just to be sure. So, if
    in doubt, just add the semicolons.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能还注意到，与 PHP 不同的是，JavaScript 中没有分号 (`;`)。这是因为换行在 JavaScript 中起到了分号的作用。然而，如果你希望在一行上有多个语句，除了最后一个外，每个命令都需要加上分号。当然，如果你愿意，你可以在每个语句的末尾加上分号，你的
    JavaScript 也会正常工作。我个人的偏好是省略分号，因为它是多余的，因此我也避免可能会引起问题的做法。不过，最终，选择可能取决于你所在的团队，大多数情况下可能会要求使用分号，以确保安全。所以，如果有疑问，就加上分号吧。
- en: The other thing to note in this example is the `<noscript>` and `</noscript>`
    pair of tags. These are used when you wish to offer alternative HTML to users
    whose browsers do not support JavaScript or who have it disabled. Using these
    tags is up to you, as they are not required, but you really ought to use them
    because it’s usually not that difficult to provide static HTML alternatives to
    the operations you provide using JavaScript. However, the remaining examples in
    this book will omit `<noscript>` tags, because we’re focusing on what you can
    do with JavaScript, not what you can do without it.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中还要注意的是 `<noscript>` 和 `</noscript>` 标签对。当你希望为不支持 JavaScript 或禁用 JavaScript
    的用户提供替代的静态 HTML 时，可以使用这些标签。是否使用这些标签取决于你，因为它们并不是必需的，但通常情况下应该使用它们，因为为使用 JavaScript
    提供的操作提供静态 HTML 替代通常并不困难。然而，本书的其余示例将省略 `<noscript>` 标签，因为我们专注于 JavaScript 的用法，而不是不使用
    JavaScript 的情况。
- en: 'When [Example 14-1](#quotation_markhello_worldquotation_mark) is loaded, a
    web browser with JavaScript enabled will output the following (see [Figure 14-1](#javascriptcomma_enabled_and_working)):'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 当加载 [示例 14-1](#quotation_markhello_worldquotation_mark) 时，启用 JavaScript 的 Web
    浏览器将输出以下内容（见 [图 14-1](#javascriptcomma_enabled_and_working)）：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![JavaScript, enabled and working](Images/pmj6_1401.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![JavaScript，已启用并正常工作](Images/pmj6_1401.png)'
- en: Figure 14-1\. JavaScript, enabled and working
  id: totrans-18
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 14-1\. JavaScript，已启用并正常工作
- en: 'A browser with JavaScript disabled will display this message (see [Figure 14-2](#javascript_has_been_disabled)):'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器禁用 JavaScript 将显示此消息（见 [图 14-2](#javascript_has_been_disabled)）：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![JavaScript has been disabled](Images/pmj6_1402.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![JavaScript 已禁用](Images/pmj6_1402.png)'
- en: Figure 14-2\. JavaScript, disabled
  id: totrans-22
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 14-2\. JavaScript，禁用
- en: Using Scripts Within a Document Head
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在文档头部使用脚本
- en: In addition to placing a script within the body of a document, you can put it
    in the `<head>` section, which is the ideal place if you wish to execute a script
    when a page loads. If you place critical code and functions there, you can also
    ensure that they are ready to use immediately by any other script sections in
    the document that rely on them.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 除了将脚本放在文档主体中之外，还可以将其放在 `<head>` 部分，这是在页面加载时执行脚本的理想位置。如果在那里放置关键代码和函数，还可以确保它们能够立即被文档中依赖它们的任何其他脚本部分使用。
- en: Another reason for placing a script in the document head is to enable JavaScript
    to write things such as meta tags into the `<head>` section, because the location
    of your script is the part of the document it writes to by default.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 将脚本放在文档头部的另一个原因是为了使 JavaScript 能够将诸如 meta 标签之类的东西写入 `<head>` 部分，因为你的脚本位置默认会写入文档的那部分。
- en: Older and Nonstandard Browsers
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 旧版和非标准浏览器
- en: If you need to support browsers that do not offer scripting (very unlikely in
    this day and age), you will need to use the HTML comment tags (`<!--` and `-->`)
    to prevent them from encountering script code that they should not see. [Example 14-2](#quotation_markhello_worldquotation_m)
    shows how you add them to your script code.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要支持不支持脚本的浏览器（在今天几乎是不可能的），你需要使用 HTML 注释标签 (`<!--` 和 `-->`) 来防止它们遇到不应看到的脚本代码。[示例
    14-2](#quotation_markhello_worldquotation_m) 显示了如何将它们添加到你的脚本代码中。
- en: Example 14-2\. The “Hello World” example modified for non-JavaScript browsers
  id: totrans-28
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 14-2\. 针对非 JavaScript 浏览器修改的“Hello World”示例
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here an opening HTML comment tag (`<!--`) has been added directly after the
    opening `<script>` statement, and a closing comment tag (`// -->`) has been added
    directly before the script is closed with `</script>`.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这里在 `<script>` 开始语句之后直接添加了一个开放的 HTML 注释标签 (`<!--`)，并在用 `</script>` 关闭脚本之前直接添加了一个关闭注释标签
    (`// -->`)。
- en: The double forward slash (`//`) is used by JavaScript to indicate that the rest
    of the line is a comment. It is there so that browsers that *do* support JavaScript
    will ignore the following `-->`, but non-JavaScript browsers will ignore the preceding
    `//` and act on the `-->` by closing the HTML comment.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 双斜杠 (`//`) 用于 JavaScript 表示该行剩余部分是注释。它存在的目的是让支持 JavaScript 的浏览器忽略后面的 `-->`，但非
    JavaScript 浏览器将忽略前面的 `//` 并执行 `-->` 以关闭 HTML 注释。
- en: 'Although the solution is a little convoluted, all you really need to remember
    is to use the two following lines to enclose your JavaScript when you wish to
    support very old or nonstandard browsers:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管解决方案有点复杂，但你真正需要记住的只是在希望支持非常旧或非标准浏览器时使用以下两行来包含你的 JavaScript：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: However, the use of these comments is unnecessary for any browser released over
    the past several years, but you do need to be aware of this, just in case.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这些注释的使用对于过去几年中发布的任何浏览器都是不必要的，但是你需要注意这一点，以防万一。
- en: Including JavaScript Files
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 包含 JavaScript 文件
- en: 'In addition to writing JavaScript code directly in HTML documents, you can
    include files of JavaScript code either from your website or from anywhere on
    the internet. The syntax for this is as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 除了直接在 HTML 文档中编写 JavaScript 代码外，您还可以包含来自您的网站或互联网任何地方的 JavaScript 代码文件。其语法如下：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Or, to pull a file in from the internet, use this (here without the `type="text/javascript"`
    as it is optional):'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 要从互联网中引入文件，请使用此方法（这里不包括 `type="text/javascript"`，因为这是可选的）：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'As for the script files themselves, they must *not* include any `<script>`
    or `</script>` tags, because they are unnecessary: the browser already knows that
    a JavaScript file is being loaded. Putting them in the JavaScript files will cause
    an error.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 至于脚本文件本身，它们必须 *不* 包含任何 `<script>` 或 `</script>` 标签，因为这些标签是不必要的：浏览器已经知道正在加载 JavaScript
    文件。如果将它们放入 JavaScript 文件中，将会导致错误。
- en: Including script files is the preferred way for you to use third-party JavaScript
    files on your website.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 包含脚本文件是您在网站上使用第三方 JavaScript 文件的首选方法。
- en: Note
  id: totrans-42
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: It is possible to leave out the `type="text/javascript"` parameter; all modern
    browsers default to assuming that the script contains JavaScript.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 可以省略 `type="text/javascript"` 参数；所有现代浏览器默认假定脚本包含 JavaScript。
- en: Debugging JavaScript Errors
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调试 JavaScript 错误
- en: When you’re learning JavaScript, it’s important to be able to track typing or
    other coding errors. Unlike PHP, which displays error messages in the browser,
    JavaScript handles error messages in a way that changes according to the browser
    used. [Table 14-1](#accessing_javascript_error_messages_in_d) lists how to access
    JavaScript error messages in the most commonly used browsers.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当你学习 JavaScript 时，能够跟踪打字或其他编码错误非常重要。与 PHP 不同，它在浏览器中显示错误消息，JavaScript 处理错误消息的方式会根据所使用的浏览器而改变。[Table 14-1](#accessing_javascript_error_messages_in_d)
    列出了如何访问最常用浏览器中的 JavaScript 错误消息。
- en: Table 14-1\. Accessing JavaScript error messages in different browsers
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 表 14-1\. 在不同浏览器中访问 JavaScript 错误消息
- en: '| Browser | How to access JavaScript error messages |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| 浏览器 | 如何访问 JavaScript 错误消息 |'
- en: '| --- | --- |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Apple Safari | Open Safari and choose Safari > Preferences > Advanced. Then
    select Show Develop menu in menu bar. Choose Develop > Show Error Console. |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| Apple Safari | 打开 Safari 并选择 Safari > Preferences > Advanced。然后选择在菜单栏中显示“开发”菜单。选择
    Develop > Show Error Console。 |'
- en: '| Google Chrome, Microsoft Edge, Mozilla Firefox, & Opera | Press Ctrl-Shift-J
    on a PC or Command-Shift-J on a Mac. |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| Google Chrome, Microsoft Edge, Mozilla Firefox, & Opera | 在 PC 上按 Ctrl-Shift-J
    或在 Mac 上按 Command-Shift-J。 |'
- en: Please refer to the browser developers’ documentation on their websites for
    full details on using them.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅浏览器开发者网站上的完整详细信息。
- en: Using Comments
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用注释
- en: 'Because of their shared inheritance from the C programming language, PHP and
    JavaScript have many similarities, one of which is commenting. First, there’s
    the single-line comment, like this:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 由于它们共同继承自C编程语言，PHP 和 JavaScript 有许多相似之处，其中之一是注释。首先是单行注释，如下所示：
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This style uses a pair of forward slash characters (`//`) to inform JavaScript
    that everything that follows is to be ignored. You also have multiline comments,
    like this:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这种风格使用一对斜杠字符(`//`)告知JavaScript忽略后续所有内容。您也可以使用多行注释，就像这样：
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: You start a multiline comment with the sequence `/*` and end it with `*/`. Just
    remember that you cannot nest multiline comments, so make sure that you don’t
    comment out large sections of code that already contain multiline comments.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用序列`/*`开启多行注释，并用`*/`结束它。请记住，不能嵌套多行注释，因此请确保不要注释掉已包含多行注释的大代码段。
- en: Semicolons
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分号
- en: 'Unlike PHP, JavaScript generally does not require semicolons if you have only
    one statement on a line. Therefore, the following is valid:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 与PHP不同，如果一行上只有一个语句，JavaScript通常不需要分号。因此，以下写法是有效的：
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'However, when you wish to place more than one statement on a line, you must
    separate them with semicolons, like this:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，当你希望在一行上放置多个语句时，必须用分号分隔它们，就像这样：
- en: '[PRE10]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: You can normally leave the final semicolon off, because the newline terminates
    the final statement.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 通常可以省略最后一个分号，因为换行符会终止最后一个语句。
- en: Warning
  id: totrans-64
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: There are exceptions to the semicolon rule. If you write JavaScript bookmarklets,
    or end a statement with a variable or function reference, *and* the first character
    of the line below is a left parenthesis or bracket, you *must* remember to append
    a semicolon or the JavaScript will fail. So, when in doubt, use a semicolon.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 分号规则有例外情况。如果您编写JavaScript书签工具，或在语句结尾处有变量或函数引用，并且下一行的第一个字符是左括号或左方括号，*必须*记住追加分号，否则JavaScript将失败。因此，当有疑问时，请使用分号。
- en: Variables
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 变量
- en: 'No particular character identifies a variable in JavaScript as the dollar sign
    does in PHP. Instead, variables use the following naming rules:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中，没有像PHP中的美元符号那样特殊标识变量。相反，变量使用以下命名规则：
- en: A variable may include only the letters `a–z`, `A–Z`, `0–9`, the `$` symbol,
    and the underscore (`_`).
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量可以包含字母`a–z`、`A–Z`、`0–9`、`$`符号和下划线(`_`)。
- en: No other characters, such as spaces or punctuation, are allowed in a variable
    name.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量名中不允许包含除了`a–z`、`A–Z`、`0–9`、`$`和下划线(`_`)以外的任何字符。
- en: The first character of a variable name can be only `a–z`, `A–Z`, `$`, or `_`
    (no numbers).
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量名的第一个字符只能是`a–z`、`A–Z`、`$`或`_`（不能是数字）。
- en: Names are case-sensitive. `Count`, `count`, and `COUNT` are all different variables.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量名区分大小写。`Count`、`count`和`COUNT`都是不同的变量。
- en: There is no set limit on variable name lengths.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量名长度没有固定限制。
- en: 'And yes, you’re right: a `$` is there in that list of allowed characters. It
    *is* allowed by JavaScript and *may* be the first character of a variable or function
    name. Although I don’t recommend keeping the `$` characters, this rule lets you
    port a lot of PHP code more quickly to JavaScript.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，你没错：在允许的字符列表中包含`$`。JavaScript允许这样，并且`$`可能是变量或函数名的第一个字符。虽然我不建议保留`$`字符，但这条规则允许您更快地将大量PHP代码移植到JavaScript中。
- en: String Variables
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字符串变量
- en: 'JavaScript string variables should be enclosed in either single or double quotation
    marks, like this:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript字符串变量应该用单引号或双引号括起来，像这样：
- en: '[PRE11]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'You may include a single quote within a double-quoted string or a double quote
    within a single-quoted string. But you must escape a quote of the same type by
    using the backslash character, like this:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在双引号字符串或单引号字符串中可以包含单引号或双引号。但必须使用反斜杠字符来转义相同类型的引号，例如：
- en: '[PRE12]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'To read from a string variable, you can assign it to another one, like this:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 要从字符串变量中读取数据，可以将其赋值给另一个变量，例如：
- en: '[PRE13]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'or you can use it in a function, like this:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 或者你可以在函数中使用它，就像这样：
- en: '[PRE14]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Numeric Variables
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数值变量
- en: 'Creating a numeric variable is as simple as assigning a value, like these examples:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 创建数值变量就像简单地赋值一样，例如：
- en: '[PRE15]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Like strings, numeric variables can be read from and used in expressions and
    functions.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 像字符串一样，数值变量可以被读取并用于表达式和函数中。
- en: Arrays
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数组
- en: 'JavaScript arrays are also very similar to those in PHP, in that an array can
    contain string or numeric data, as well as other arrays. To assign values to an
    array, use the following syntax (which in this case creates an array of strings):'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript数组与PHP中的数组非常相似，因为数组可以包含字符串或数值数据，以及其他数组。要为数组分配值，请使用以下语法（在这种情况下创建一个字符串数组）：
- en: '[PRE16]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'To create a multidimensional array, nest smaller arrays within a larger one.
    So, to create a two-dimensional array containing the colors of a single face of
    a scrambled Rubik’s Cube (where the colors red, green, orange, yellow, blue, and
    white are represented by their capitalized initial letters), you could use the
    following code:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建多维数组，可以将较小的数组嵌套在较大的数组中。因此，要创建一个二维数组，包含魔方的一个面的颜色（红、绿、橙、黄、蓝和白，分别用其大写的首字母表示），可以使用以下代码：
- en: '[PRE17]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The previous example has been formatted to make it obvious what is going on,
    but it could also be written like this:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的示例已经格式化，以便明确显示正在进行的操作，但也可以这样写：
- en: '[PRE18]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'or even like this:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 或者像这样：
- en: '[PRE19]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'To access the element two down and three along in this matrix, you would use
    the following (because array elements start at position 0):'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问此矩阵中从下到上第二个位置和从左到右第三个位置的元素，您将使用以下方法（因为数组元素从位置0开始）：
- en: '[PRE20]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This statement will output the letter `O` for *orange*.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 此语句将输出字母`O`来表示*橙色*。
- en: Note
  id: totrans-99
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注
- en: JavaScript arrays are powerful storage structures, so [Chapter 16](ch16.xhtml#javascript_functionscomma_objectscomma_a)
    discusses them in much greater depth.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 数组是强大的存储结构，因此[第16章](ch16.xhtml#javascript_functionscomma_objectscomma_a)更深入地讨论了它们。
- en: Operators
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运算符
- en: 'Operators in JavaScript, as in PHP, can involve mathematics, changes to strings,
    and comparison and logical operations (`and`, `or`, etc.). JavaScript mathematical
    operators look a lot like plain arithmetic—for instance, the following statement
    outputs `15`:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JavaScript 中，就像在 PHP 中一样，运算符可能涉及数学运算、对字符串的更改以及比较和逻辑运算（`and`、`or`等）。JavaScript
    数学运算符看起来非常像普通算术运算，例如，以下语句输出`15`：
- en: '[PRE21]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The following sections teach you about the various operators.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 以下各节将教你各种运算符。
- en: Arithmetic Operators
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 算术运算符
- en: '*Arithmetic operators* are used to perform mathematics. You can use them for
    the main four operations (addition, subtraction, multiplication, and division)
    as well as to find the modulus (the remainder after a division) and to increment
    or decrement a value (see [Table 14-2](#arithmetic_operators-id00042)).'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '*算术运算符* 用于进行数学计算。您可以使用它们进行四种主要操作（加法、减法、乘法和除法），以及找到模数（除法后的余数），以及增加或减少一个值（见[表14-2](#arithmetic_operators-id00042)）。'
- en: Table 14-2\. Arithmetic operators
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 表14-2\. 算术运算符
- en: '| Operator | Description | Example |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| 运算符 | 描述 | 示例 |'
- en: '| --- | --- | --- |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `+` | Addition | `` `j` **`+`** `12` `` |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| `+` | 加法 | `` `j` **`+`** `12` `` |'
- en: '| `–` | Subtraction | `` `j` **`–`** `22` `` |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| `–` | 减法 | `` `j` **`–`** `22` `` |'
- en: '| `*` | Multiplication | `` `j` **`*`** `7` `` |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| `*` | 乘法 | `` `j` **`*`** `7` `` |'
- en: '| `/` | Division | `` `j` **`/`** `3.13` `` |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| `/` | 除法 | `` `j` **`/`** `3.13` `` |'
- en: '| `%` | Modulus (division remainder) | `` `j` **`%`** `6` `` |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| `%` | 取模（除法余数）| `` `j` **`%`** `6` `` |'
- en: '| `++` | Increment | `` **`++`**`j` `` |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| `++` | 递增 | `` **`++`**`j` `` |'
- en: '| `--` | Decrement | `` **`--`**`j` `` |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| `--` | 递减 | `` **`--`**`j` `` |'
- en: Assignment Operators
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 赋值运算符
- en: 'The *assignment* *operators* are used to assign values to variables. They start
    with the very simple `=` and move on to `+=`, `–=`, and so on. The operator `+=`
    adds the value on the right side to the variable on the left, instead of totally
    replacing the value on the left. Thus, if `count` starts with the value `6`, the
    statement:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '*分配运算符* 用于将值分配给变量。它们从非常简单的`=`开始，然后移到`+=`、`–=`等。运算符`+=`将右侧的值添加到左侧的变量中，而不是完全替换左侧的值。因此，如果`count`从值`6`开始，该语句：'
- en: '[PRE22]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'sets `count` to `7`, just like the more familiar assignment statement:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 将`count`设置为`7`，就像更常见的赋值语句一样：
- en: '[PRE23]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[Table 14-3](#assignment_operators-id00044) lists the various assignment operators
    available.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '[表14-3](#assignment_operators-id00044)列出了各种可用的赋值运算符。'
- en: Table 14-3\. Assignment operators
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 表14-3\. 赋值运算符
- en: '| Operator | Example | Equivalent to |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| 运算符 | 示例 | 相当于 |'
- en: '| --- | --- | --- |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `=` | ``j **`=`** 99`` | `j = 99` |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| `=` | ``j **`=`** 99`` | `j = 99` |'
- en: '| `+=` | ``j **`+=`** 2`` | `j = j + 2` |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| `+=` | ``j **`+=`** 2`` | `j = j + 2` |'
- en: '| `+=` | `j **+=** ''string''` | `j = j + ''string''` |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| `+=` | `j **+=** ''string''` | `j = j + ''string''` |'
- en: '| `–=` | ``j **`–=`** 12`` | `j = j – 12` |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| `–=` | ``j **`–=`** 12`` | `j = j – 12` |'
- en: '| `*=` | ``j **`*=`** 2`` | `j = j * 2` |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| `*=` | ``j **`*=`** 2`` | `j = j * 2` |'
- en: '| `/=` | ``j **`/=`** 6`` | `j = j / 6` |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| `/=` | ``j **`/=`** 6`` | `j = j / 6` |'
- en: '| `%=` | ``j **`%=`** 7`` | `j = j % 7` |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| `%=` | ``j **`%=`** 7`` | `j = j % 7` |'
- en: Comparison Operators
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 比较运算符
- en: '*Comparison operators* are generally used inside a construct such as an `if`
    statement, where you need to compare two items. For example, you may wish to know
    whether a variable you have been incrementing has reached a specific value, or
    whether another variable is less than a set value, and so on (see [Table 14-4](#comparison_operators-id00046)).'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '*比较运算符*通常用于诸如 `if` 语句之类的结构中，用于比较两个项。例如，您可能希望知道您正在递增的变量是否达到了特定值，或者另一个变量是否小于设定值等（参见[表 14-4](#comparison_operators-id00046)）。'
- en: Table 14-4\. Comparison operators
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 表 14-4\. 比较运算符
- en: '| Operator | Description | Example |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| 运算符 | 描述 | 示例 |'
- en: '| --- | --- | --- |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `==` | Is *equal* to | `j **==** 42` |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| `==` | 是*等于* | `j **==** 42` |'
- en: '| `!=` | Is *not equal* to | ``j **`!=`** 17`` |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| `!=` | 不等于 | ``j **`!=`** 17`` |'
- en: '| `>` | Is *greater than* | ``j **`>`** 0`` |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '| `>` | 是*大于* | ``j **`>`** 0`` |'
- en: '| `<` | Is *less than* | ``j **`<`** 100`` |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| `<` | 是*小于* | ``j **`<`** 100`` |'
- en: '| `>=` | Is *greater than or equal* to | ``j **`>=`** 23`` |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| `>=` | 是*大于或等于* | ``j **`>=`** 23`` |'
- en: '| `<=` | Is *less than or equal* to | ``j **`<=`** 13`` |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '| `<=` | 是*小于或等于* | ``j **`<=`** 13`` |'
- en: '| `===` | Is *equal* to (and of the same type) | `j **===** 56` |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| `===` | 等于（且类型相同） | `j **===** 56` |'
- en: '| `!==` | Is *not equal* to (and of the same type) | ``j **`!==`** ''1''``
    |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| `!==` | 不等于（且类型相同） | ``j **`!==`** ''1''`` |'
- en: Logical Operators
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 逻辑运算符
- en: Unlike PHP, JavaScript’s *logical* *operators* do not include `and` and `or`
    equivalents to `&&` and `||`, and there is no `xor` operator (see [Table 14-5](#logical_operators-id00048)).
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 与 PHP 不同，JavaScript 的*逻辑* *运算符* 不包括 `and` 和 `or` 的等价物 `&&` 和 `||`，也没有 `xor`
    运算符（参见[表 14-5](#logical_operators-id00048)）。
- en: Table 14-5\. Logical operators
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 表 14-5\. 逻辑运算符
- en: '| Operator | Description | Example |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| 运算符 | 描述 | 示例 |'
- en: '| --- | --- | --- |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `&&` | And | `j == 1 **&&** k == 2` |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| `&&` | 与 | `j == 1 **&&** k == 2` |'
- en: '| `&#124;&#124;` | Or | `j < 100 **&#124;&#124;** j > 0` |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| `&#124;&#124;` | 或 | `j < 100 **&#124;&#124;** j > 0` |'
- en: '| `!` | Not | ``**`!`** (j == k)`` |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| `!` | 非 | ``**`!`** (j == k)`` |'
- en: Incrementing, Decrementing, and Shorthand Assignment
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 增减和简写赋值
- en: 'The following forms of post- and pre-incrementing and decrementing that you
    learned to use in PHP are also supported by JavaScript, as are shorthand assignment
    operators:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 您学会在 PHP 中使用的后增和前增减形式及简写赋值运算符，在 JavaScript 中也受支持：
- en: '[PRE24]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: String Concatenation
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字符串连接
- en: 'JavaScript handles string concatenation slightly differently from PHP. Instead
    of the `.` (period) operator, it uses the plus sign (`+`), like this:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 处理字符串连接的方式与 PHP 稍有不同。它使用加号 (`+`) 而不是点号 (`.`) 运算符，例如：
- en: '[PRE25]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Assuming that the variable `messages` is set to the value `3`, the output from
    this line of code will be as follows:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 假设变量 `messages` 的值设定为 `3`，则此行代码的输出如下：
- en: '[PRE26]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Just as you can add a value to a numeric variable with the `+=` operator, you
    can also append one string to another the same way:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您可以使用 `+=` 运算符将值添加到数值变量中一样，您也可以使用相同方式将一个字符串附加到另一个字符串上：
- en: '[PRE27]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Escape Characters
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 转义字符
- en: 'Escape characters, which you’ve seen used to insert quotation marks in strings,
    can also be used to insert various special characters such as tabs, newlines,
    and carriage returns. Here is an example using tabs to lay out a heading—it is
    included here merely to illustrate escapes, because in web pages, there are better
    ways to do layout:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 转义字符，您已经看到它们用于在字符串中插入引号，也可以用于插入各种特殊字符，例如制表符、换行符和回车符。以下是一个使用制表符布局标题的示例——这仅用于说明转义字符的用法，在网页中，有更好的布局方式：
- en: '[PRE28]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[Table 14-6](#javascriptapostrophes_escape_characters) details the escape characters
    available.'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '[表 14-6](#javascriptapostrophes_escape_characters) 详细描述了可用的转义字符。'
- en: Table 14-6\. JavaScript’s escape characters
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 表 14-6\. JavaScript 的转义字符
- en: '| Character | Meaning |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| 字符 | 含义 |'
- en: '| --- | --- |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `\b` | Backspace |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| `\b` | 退格 |'
- en: '| `\f` | Form feed |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| `\f` | 换页符 |'
- en: '| `\n` | Newline |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| `\n` | 换行符 |'
- en: '| `\r` | Carriage return |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| `\r` | 回车符 |'
- en: '| `\t` | Tab |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| `\t` | 制表符 |'
- en: '| `\''` | Single quote (or apostrophe) |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| `\''` | 单引号（或撇号） |'
- en: '| `\"` | Double quote |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| `\"` | 双引号 |'
- en: '| `\\` | Backslash |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| `\\` | 反斜杠 |'
- en: '| ``\*`XXX`*`` | An octal number between `000` and `377` that represents the
    Latin-1 character equivalent (such as `\251` for the © symbol) |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| ``\*`XXX`*`` | 介于 `000` 和 `377` 之间的八进制数，表示与拉丁-1字符等效的字符（例如 `\251` 表示 © 符号）
    |'
- en: '| ``\x*`XX`*`` | A hexadecimal number between `00` and `FF` that represents
    the Latin-1 character equivalent (such as `\xA9` for the © symbol) |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| ``\x*`XX`*`` | 介于 `00` 和 `FF` 之间的十六进制数，表示与拉丁-1字符等效的字符（例如 `\xA9` 表示 © 符号）
    |'
- en: '| ``\u*`XXXX`*`` | A hexadecimal number between `0000` and `FFFF` that represents
    the Unicode character equivalent (such as `\u00A9` for the © symbol) |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| ``\u*`XXXX`*`` | 介于`0000`和`FFFF`之间的十六进制数字，表示相应的Unicode字符（例如`\u00A9`表示©符号）
    |'
- en: Variable Typing
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 变量类型
- en: Like PHP, JavaScript is a very loosely typed language; the *type* of a variable
    is determined only when a value is assigned and can change as the variable appears
    in different contexts. Usually, you don’t have to worry about the type; JavaScript
    figures out what you want and just does it.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于PHP，JavaScript是一种非常宽松的类型语言；变量的*类型*仅在赋值时确定，并且随着变量在不同上下文中的出现而变化。通常情况下，您不必担心类型；JavaScript会弄清楚您想要的并直接执行。
- en: 'Take a look at [Example 14-3](#setting_a_variableapostrophes_type_by_as), in
    which:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 查看[示例 14-3](#setting_a_variableapostrophes_type_by_as)，其中：
- en: The variable `n` is assigned the string value `'838102050'`. The next line prints
    out its value, and the `typeof` operator is used to look up the type.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 变量`n`被赋予字符串值`'838102050'`。下一行打印出它的值，并使用`typeof`运算符查找类型。
- en: '`n` is given the value returned when the numbers `12345` and `67890` are multiplied
    together. This value is also `838102050`, but it is a number, not a string. The
    type of the variable is then looked up and displayed.'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当数字`12345`和`67890`相乘时，`n`被赋予的值是返回的值。这个值也是`838102050`，但它是一个数字，而不是字符串。然后查找并显示变量的类型。
- en: Some text is appended to the number `n` and the result is displayed.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一些文本被附加到数字`n`上，并显示结果。
- en: Example 14-3\. Setting a variable’s type by assignment
  id: totrans-188
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 14-3\. 通过赋值设置变量类型
- en: '[PRE29]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The output from this script looks like this:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 此脚本的输出如下所示：
- en: '[PRE30]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'If there is ever any doubt about the type of a variable, or you need to ensure
    that a variable has a particular type, you can force it to that type by using
    statements such as the following (which, respectively, turn a string into a number
    and a number into a string):'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 如果对变量的类型存有任何疑问，或者需要确保变量具有特定类型，可以通过使用以下语句（分别将字符串转换为数字和将数字转换为字符串）来强制执行它：
- en: '[PRE31]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Or you can use  the following functions in the same way:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 或者您可以以同样的方式使用以下函数：
- en: '[PRE32]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: You can read more about type conversion in JavaScript [online.](https://javascript.info/type-conversions).
    And you can always look up a variable’s type by using the `typeof` operator.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在JavaScript [在线阅读更多有关类型转换](https://javascript.info/type-conversions)。并且您可以通过使用`typeof`运算符随时查找变量的类型。
- en: Functions
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 函数
- en: As with PHP, JavaScript functions are used to separate out sections of code
    that perform a particular task. To create a function, declare it in the manner
    shown in [Example 14-4](#simple_function_declaration-id00054).
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 与PHP类似，JavaScript函数用于将执行特定任务的代码段分离出来。要创建函数，请按照[示例 14-4](#simple_function_declaration-id00054)中所示的方式声明。
- en: Example 14-4\. A simple function declaration
  id: totrans-199
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 14-4\. 简单函数声明
- en: '[PRE33]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: This function takes the two parameters passed, multiplies them together, and
    returns the product.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数获取传递的两个参数，将它们相乘，并返回乘积。
- en: Global Variables
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 全局变量
- en: '*Global* variables are ones defined outside of any functions (or defined within
    functions but without the `var` keyword). They can be defined in the following
    ways:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '*全局*变量是指在任何函数之外定义的变量（或在函数内部定义但没有使用`var`关键字）。它们可以以下列方式定义：'
- en: '[PRE34]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Regardless of whether you are using the `var` keyword, as long as a variable
    is defined outside of a function, it is global in scope. This means that every
    part of a script can have access to it.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您是否使用了`var`关键字，只要变量在函数之外定义，它就具有全局作用域。这意味着脚本的每个部分都可以访问它。
- en: Local Variables
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 局部变量
- en: Parameters passed to a function automatically have *local* scope, that is, they
    can be referenced only from within that function. However, there is one exception.
    Arrays are passed to a function by reference, so if you modify any elements in
    an array parameter, the elements of the original array will be modified.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 自动传递给函数的参数具有*局部*作用域，即只能在该函数内部引用。但是，也有一个例外。数组是通过引用传递给函数的，因此如果修改数组参数中的任何元素，则会修改原始数组的元素。
- en: To define a local variable that has scope only within the current function,
    and has not been passed as a parameter, use the `var` keyword. [Example 14-5](#function_creating_variables_with_globa)
    shows a function that creates one variable with global scope and two with local
    scope.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 要定义仅在当前函数中具有作用域且未作为参数传递的局部变量，请使用`var`关键字。[示例 14-5](#function_creating_variables_with_globa)展示了一个创建一个具有全局作用域和两个局部作用域的变量的函数。
- en: Example 14-5\. A function creating variables with global and local scope
  id: totrans-209
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例14-5。创建具有全局和局部作用域变量的函数
- en: '[PRE35]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: To test whether scope setting has worked in PHP, we can use the `isset` function.
    But in JavaScript there is no such function, so [Example 14-6](#checking_the_scope_of_the_variables_defi)
    makes use of the `typeof` operator, which returns the string `undefined` when
    a variable is not defined.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试PHP中作用域设置是否有效，可以使用`isset`函数。但在JavaScript中没有这样的函数，因此[示例14-6](#checking_the_scope_of_the_variables_defi)使用`typeof`运算符，当变量未定义时返回字符串`undefined`。
- en: Example 14-6\. Checking the scope of the variables defined in the function test
  id: totrans-212
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例14-6。检查在函数测试中定义的变量的作用域
- en: '[PRE36]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The output from this script is the following single line:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 此脚本的输出是以下单行：
- en: '[PRE37]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: This shows that only the variable `a` was given global scope, which is exactly
    what we would expect, since the variables `b` and `c` were given local scope by
    being prefaced with the `var` keyword.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 这表明只有变量`a`被赋予了全局作用域，这正是我们期望的，因为变量`b`和`c`通过使用`var`关键字赋予了局部作用域。
- en: If your browser issues a warning about `b` being undefined, the warning is correct
    but can be ignored.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的浏览器发出关于`b`未定义的警告，该警告是正确的，但可以忽略。
- en: Using let and const
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用let和const
- en: 'JavaScript now offers two new keywords: `let` and `const`. The `let` keyword
    is pretty much a swap-in for `var`, but it has the advantage that you cannot redeclare
    a variable once you have done so with `let`, although you can with `var`.'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript现在提供了两个新关键字：`let`和`const`。`let`关键字基本上可以替代`var`，但它有一个优势，一旦用`let`声明过变量，就不能重新声明变量，尽管使用`var`可以。
- en: 'You see, the fact that you could redeclare variables using `var` was leading
    to obscure bugs, such as the following:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 你看，使用`var`可以重新声明变量的事实导致了一些难以调试的bug，例如下面的情况：
- en: '[PRE38]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Can you see the problem? Because `counter` is greater than 0 (since we initialized
    it to 1), the string `hello` is redefined as “How are you?” which is then displayed
    in the document.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 看出问题了吗？因为`counter`大于0（因为我们将其初始化为1），字符串`hello`被重新定义为“你好吗？”然后显示在文档中。
- en: 'Now, if you replace the `var` with `let` (as follows), the second declaration
    is ignored, and the original string “Hello there” will be displayed:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您用`let`替换`var`（如下所示），第二个声明将被忽略，原始字符串“你好”将被显示：
- en: '[PRE39]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: The `var` keyword is either globally scoped (if outside of any blocks or functions)
    or *function* scoped, and variables declared with it are initialized with `undefined`,
    but the `let` keyword is either globally or *block* scoped, and variables are
    not initialized.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '`var`关键字可以是全局作用域（如果在任何块或函数之外）或*函数*作用域，用它声明的变量初始化为`undefined`，但`let`关键字可以是全局或*块*作用域，变量不会被初始化。'
- en: 'Any variable assigned using `let` has scope either within the entire document
    if declared outside of any block, or, if declared within a block bounded by `{}` (which
    includes functions), its scope is limited to that block (and any nested sub-blocks).
    If you declare a variable within a block but try to access it from outside that
    block, an error will be returned, as with the following, which will fail at the
    `document.write` because `hello` will have no value:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`let`分配的任何变量的作用域要么在整个文档中声明（如果在任何块之外），要么在由`{}`界定的块内（包括函数），其作用域仅限于该块（及其任何嵌套的子块）。如果在块内声明变量，但试图从该块外部访问它，将返回错误，如下面的示例，`document.write`将失败，因为`hello`将没有值：
- en: '[PRE40]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: You can use `let` to declare variables of the same name as previously declared
    ones, as long as it is within a new scope, in which case any previous value assigned
    to a variable of the same name in the previous scope will become inaccessible
    to the new scope, because the new variable of the same name is treated as totally
    different from the previous one. It only has scope within the current block, or
    any sub-blocks (unless another `let` is used to declare yet another variable of
    the same name in a sub-block).
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`let`声明与先前声明的同名变量，只要它在新的作用域内，这种情况下，前一个作用域中同名变量的任何先前赋值将对新作用域不可访问，因为同名的新变量被视为与先前的完全不同。它仅在当前块或任何子块中具有作用域（除非使用另一个`let`声明在子块中声明同名的另一个变量）。
- en: It is good practice to try avoiding the reuse of meaningful variable names,
    or you risk causing confusion. However, loop or index variables such as `i` (or
    other short and simple names) can generally be reused in new scopes without causing
    any confusion.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 尽量避免重用有意义的变量名称是个好习惯，否则你可能会引起混淆。不过，循环或索引变量如`i`（或其他简短简单的名称）通常可以在新的作用域中重复使用而不会引起混淆。
- en: You can further increase your control over scope by declaring a variable to
    have a constant value, that is, one that cannot be changed. This is beneficial
    where you have created a variable that you are treating as a constant but had
    declared it only using `var` or `let`, because you might have instances in your
    code where you try to change that value, which would be allowed but would be a
    bug.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 通过声明一个变量具有常量值（即不能更改的值），你可以进一步增加对作用域的控制。这在你创建一个视为常量的变量但只使用`var`或`let`声明时很有用，因为你可能在代码中的某些地方尝试更改该值，这是允许的但可能是一个错误。
- en: 'However, if you use the `const` keyword to declare the variable and assign
    its value, any attempt to change the value later will be disallowed, and your
    code will halt with an error message in the console similar to:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果你使用`const`关键字声明变量并分配其值，稍后尝试更改该值将被禁止，并且你的代码将在控制台中显示类似于以下的错误消息：
- en: '[PRE41]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The following code will cause just that error:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码将导致该错误：
- en: '[PRE42]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Just like `let`, `const` declarations are also block scoped (within `{}` sections
    and any sub-blocks), meaning that you can have constant variables of the same
    name but have different values in different scopes of a piece of code. However,
    I strongly recommend you try to avoid duplication of names and keep any constant
    name for one single value throughout each program, using a new constant name wherever
    you need a new constant.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 就像`let`一样，`const`声明也是块作用域的（在`{}`和任何子块内部），这意味着你可以在代码片段的不同作用域中有相同名称的常量变量但具有不同的值。然而，我强烈建议你尽量避免名称重复，并且在每个程序中为一个唯一值使用一个新的常量名称。
- en: In summary: `var` has global or function scope, and `let` and `const` have global
    or block scope. Both `var` and `let` can be declared without being initialized,
    while `const` must be initialized during declaration. The `var` keyword can be
    reused to re-declare a `var` variable, but `let` and `const` cannot. Finally, `const` can
    neither be redeclared nor reassigned.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 总结：`var`具有全局或函数作用域，而`let`和`const`具有全局或块作用域。`var`和`let`都可以在声明时不初始化，而`const`在声明时必须初始化。`var`关键字可以重新声明`var`变量，但`let`和`const`不能。最后，`const`既不能重新声明也不能重新赋值。
- en: Note
  id: totrans-237
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: You may prefer to use a developer console with tests such as these (and elsewhere
    in this book) as previously explained in [“Debugging JavaScript Errors”](#debugging_javascript_errors),
    in which case you can replace `document.write` with `console.log`, and the output
    will be shown in the console instead of within the browser. This is also a better
    option for JavaScript that will run once a document has fully loaded, because
    at that time `document.write` would replace the current document, rather than
    append to it, which is probably not what you might intend.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能更喜欢使用开发者控制台进行测试，比如这些（以及本书其他地方），正如之前在[“调试JavaScript错误”](#debugging_javascript_errors)中所解释的那样，在这种情况下，你可以将`document.write`替换为`console.log`，输出将显示在控制台而不是浏览器中。这也是在文档完全加载后运行的JavaScript的更好选择，因为此时`document.write`会替换当前文档而不是附加到其上，这可能不是您的意图。
- en: The Document Object Model
  id: totrans-239
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文档对象模型
- en: The design of JavaScript is very smart. Rather than just creating yet another
    scripting language (which would have still been a pretty good improvement at the
    time), there was a vision to build it around the already-existing HTML Document
    Object Model. This breaks down the parts of an HTML document into discrete *objects*,
    each with its own *properties* and *methods* and each subject to JavaScript’s
    control.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript的设计非常聪明。与其只是创建另一种脚本语言（这在当时仍然是一个相当大的改进），更好的做法是围绕已经存在的HTML文档对象模型构建它。这将HTML文档的各个部分分解为离散的*对象*，每个对象都有自己的*属性*和*方法*，并且受JavaScript控制。
- en: 'JavaScript separates objects, properties, and methods by using a period (one
    good reason why `+` is the string concatenation operator in JavaScript, rather
    than the period). For example, let’s consider a business card as an object we’ll
    call `card`. This object contains properties such as a name, address, phone number,
    and so on. In the syntax of JavaScript, these properties would look like this:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 使用句点（一个很好的理由是 `+` 是 JavaScript 中的字符串连接运算符，而不是句点）来分隔对象、属性和方法。例如，我们可以把名片看作一个名为
    `card` 的对象。该对象包含诸如姓名、地址、电话号码等属性。在 JavaScript 的语法中，这些属性看起来像这样：
- en: '[PRE43]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Its methods are functions that retrieve, change, and otherwise act on the properties.
    For instance, to invoke a method that displays the properties of the object `card`,
    you might use syntax such as this:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 它的方法是检索、更改和其他操作属性的函数。例如，要调用一个显示 `card` 对象属性的方法，你可以使用这样的语法：
- en: '[PRE44]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Have a look at some of the earlier examples in this chapter and notice where
    the statement `document.write` is used. Now that you understand how JavaScript
    is based around objects, you will see that `write` is actually a method of the
    `document` object.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看本章早些示例中的一些例子，并注意 `document.write` 语句的使用位置。现在您了解了 JavaScript 基于对象的原理，您将看到
    `write` 实际上是 `document` 对象的一个方法。
- en: Within JavaScript, there is a hierarchy of parent and child objects, which is
    what is known as the Document Object Model (DOM; see [Figure 14-3](#example_of_dom_object_hierarchy)).
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JavaScript 中，存在一种父子对象的层次结构，这就是所谓的文档对象模型（DOM；见 [图 14-3](#example_of_dom_object_hierarchy)）。
- en: '![Example of DOM object hierarchy](Images/pmj6_1403.png)'
  id: totrans-247
  prefs: []
  type: TYPE_IMG
  zh: '![DOM 对象层次结构示例](Images/pmj6_1403.png)'
- en: Figure 14-3\. Example of DOM object hierarchy
  id: totrans-248
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 14-3\. DOM 对象层次结构示例
- en: 'The figure uses HTML tags that you are already familiar with to illustrate
    the parent/child relationship between the various objects in a document. For example,
    a URL within a link is part of the body of an HTML document. In JavaScript, it
    is referenced like this:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 该图使用您已经熟悉的 HTML 标签来说明文档中各种对象之间的父子关系。例如，链接内的 URL 是 HTML 文档的一部分。在 JavaScript 中，它可以这样引用：
- en: '[PRE45]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Notice how this follows the central column down. The first part, `document`,
    refers to the `<html>` and `<body>` tags; `links.linkname` refers to the `<a>`
    tag, and `href` to the `href` attribute.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意这如何沿着中心列向下进行。第一部分 `document` 指的是 `<html>` 和 `<body>` 标签；`links.linkname`
    指的是 `<a>` 标签，`href` 指的是 `href` 属性。
- en: Let’s turn this into some HTML and a script to read a link’s properties. Type
    [Example 14-7](#reading_a_link_url_with_javascript) and save it as *linktest.html*;
    then call it up in your browser.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将其转换为一些 HTML 和一个脚本来读取链接的属性。键入 [示例 14-7](#reading_a_link_url_with_javascript)，将其保存为
    *linktest.html*，然后在浏览器中调用它。
- en: Example 14-7\. Reading a link URL with JavaScript
  id: totrans-253
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 14-7\. 使用 JavaScript 读取链接 URL
- en: '[PRE46]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Note the short form of the `<script>` tags, where I have omitted the parameter
    `type="text/JavaScript"` to save you some typing. If you wish, just for the purposes
    of testing this (and other examples), you could also omit everything outside of
    the `<script>` and `</script>` tags. The output from this example is as follows:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 注意 `<script>` 标签的简写形式，我省略了参数 `type="text/JavaScript"`，以节省您的输入时间。如果您愿意，仅为测试此（以及其他示例）的目的，您也可以省略
    `<script>` 和 `</script>` 标签外的所有内容。该示例的输出如下所示：
- en: '[PRE47]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: The second line of output comes from the `document.write` method. Notice how
    the code follows the document tree down from `document` to `links` to `mylink`
    (the `id` given to the link) to `href` (the URL destination value).
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 输出的第二行来自于 `document.write` 方法。请注意代码是如何从 `document` 开始按照文档树向下移动到 `links`、`mylink`（链接的
    `id`）和 `href`（URL 目标值）的。
- en: 'There is also a short form that works equally well, which starts with the value
    in the `id` attribute: `mylink.href`. So, you can replace this:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 也有一种同样有效的简写形式，它以 `id` 属性的值作为起点：`mylink.href`。因此，您可以将其替换为
- en: '[PRE48]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'with the following:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是具体内容：
- en: '[PRE49]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Another Use for the $ Symbol
  id: totrans-262
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`$` 符号的另一种用法'
- en: 'As mentioned earlier, the `$` symbol is allowed in JavaScript variable and
    function names. Because of this, you may sometimes encounter strange-looking code
    like this:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面提到的，JavaScript 变量和函数名称中允许使用 `$` 符号。因此，有时您可能会遇到像这样看起来奇怪的代码：
- en: '[PRE50]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Some enterprising programmers have decided that the `getElementById` function
    is so prevalent in JavaScript that they have written a function to replace it
    called `$`, like in jQuery (although jQuery uses the `$` for much more than that—see
    [Chapter 22](ch22.xhtml#introduction_to_jquery)), as shown in [Example 14-8](#replacement_function_for_the_getelemen).
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 一些富有创造力的程序员决定 `getElementById` 函数在 JavaScript 中非常普遍，因此编写了一个名为 `$` 的函数来替换它，就像
    jQuery 中使用 `$` 一样（尽管 jQuery 将 `$` 用于更多用途——请参见[第22章](ch22.xhtml#introduction_to_jquery)）。如示例
    [14-8](#replacement_function_for_the_getelemen) 所示。
- en: Example 14-8\. A replacement function for the `getElementById` method
  id: totrans-266
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 14-8\. 一个替代 `getElementById` 方法的函数
- en: '[PRE51]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Therefore, as long as you have included the `$` function in your code, syntax
    such as this:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，只要您在代码中包含了 `$` 函数，就可以使用如下的语法：
- en: '[PRE52]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'can replace code such as this:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 可以替换如下代码：
- en: '[PRE53]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Using the DOM
  id: totrans-272
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 DOM
- en: 'The `links` object is actually an array of URLs, so the `mylink` URL in [Example 14-7](#reading_a_link_url_with_javascript)
    can also be safely referred to in all browsers in the following way (because it’s
    the first, and only, link):'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '`links` 对象实际上是一个 URL 数组，因此在所有浏览器中可以安全地像 [示例 14-7](#reading_a_link_url_with_javascript)
    中的 `mylink` URL 一样进行引用（因为它是第一个也是唯一的链接）：'
- en: '[PRE54]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'If you want to know how many links there are in an entire document, you can
    query the `length` property of the `links` object like this:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想知道整个文档中有多少链接，可以像这样查询 `links` 对象的 `length` 属性：
- en: '[PRE55]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'You can extract and display all links in a document like this:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以这样提取并显示文档中的所有链接：
- en: '[PRE56]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'The `length` of something is a property of every array, and many objects as
    well. For example, the number of items in your browser’s web history can be queried
    like this:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 某物的 `length` 是每个数组以及许多对象的属性。例如，您可以这样查询浏览器的浏览历史记录中的项目数量：
- en: '[PRE57]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'To stop websites from snooping on your browsing history, the `history` object
    stores only the number of sites in the array: you cannot read from or write to
    these values. But you can replace the current page with one from the history,
    if you know what position it has within the history. This can be very useful in
    cases in which you know that certain pages in the history came from your site,
    or you simply wish to send the browser back one or more pages, which you do with
    the `go` method of the `history` object. For example, to send the browser back
    three pages, issue the following command:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防止网站窥探您的浏览历史，`history` 对象仅存储数组中的站点数量：您无法从中读取或写入这些值。但是，如果您知道页面在历史记录中的位置，可以用另一页面替换当前页面。在某些情况下，这非常有用，例如您知道历史记录中某些页面来自您的站点，或者您只是希望将浏览器退回一些页面，您可以使用
    `history` 对象的 `go` 方法。例如，要将浏览器退回三页，可以执行以下命令：
- en: '[PRE58]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'You can also use the following methods to move back or forward a page at a
    time:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用以下方法逐页向后或向前移动一页：
- en: '[PRE59]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'In a similar manner, you can replace the currently loaded URL with one of your
    choosing, like this:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，您可以像这样替换当前加载的 URL 为您选择的 URL：
- en: '[PRE60]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Of course, there’s a whole lot more to the DOM than reading and modifying links.
    As you progress through the following chapters on JavaScript, you’ll become quite
    familiar with the DOM and how to access it.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，DOM 的内容远不止于阅读和修改链接。随着您在 JavaScript 的以下章节中的进展，您将对 DOM 及其访问方式非常熟悉。
- en: About document.write
  id: totrans-288
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于 document.write
- en: When teaching programming, it’s necessary to have a quick and easy way to display
    the results of expressions. In PHP (for example) there are the `echo` and `print`
    statements, which simply send text to the browser, so that’s easy. In JavaScript,
    though, there are the following alternatives.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 在教授编程时，有必要有一种快速简便的方法来显示表达式的结果。例如，在 PHP 中有 `echo` 和 `print` 语句，它们只是将文本发送到浏览器，因此很简单。但是在
    JavaScript 中，有以下替代方法。
- en: Using console.log
  id: totrans-290
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 console.log
- en: The `console.log` function will output the result of any value or expression
    passed to it in the console of the current browser. This is a special mode with
    a frame or window separate from the browser window, and in which errors and other
    messages can be made to display. While great for experienced programmers, it is
    not ideal for beginners because the output is not near the web content in the
    browser.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '`console.log` 函数将输出传递给它的任何值或表达式的结果到当前浏览器的控制台中。这是一个特殊模式，具有与浏览器窗口分离的帧或窗口，可以在其中显示错误和其他消息。虽然对经验丰富的程序员来说很好，但对初学者来说并不理想，因为输出不靠近浏览器中的网页内容。'
- en: Using alert
  id: totrans-292
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 alert
- en: The `alert` function displays values or expressions passed to it in a pop-up
    window, which requires you to click a button to close. Clearly this can become
    quite irritating very quickly, and it has the downside of displaying only the
    current message—previous ones are erased.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '`alert` 函数在弹出窗口中显示传递给它的值或表达式，需要点击按钮才能关闭。显然，这可能会非常迅速地变得相当恼人，并且它的缺点是只显示当前消息——之前的消息都会被擦除。'
- en: Writing into Elements
  id: totrans-294
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 写入元素中
- en: It is possible to write directly into the text of an HTML element, which is
    a fairly elegant solution (and the best one for production websites)—except that
    for this book every example would require such an element to be created, and some
    lines of code to access it. This gets in the way of teaching the core of an example
    and would make the code look overly cumbersome and confusing.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 可以直接编写到 HTML 元素的文本中，这是一个相当优雅的解决方案（也是生产网站的最佳方案）——但是，对于这本书中的每个示例，都需要创建这样一个元素，并编写一些代码行来访问它。这样做会妨碍教授示例的核心内容，并使代码看起来过于笨重和混乱。
- en: Using document.write
  id: totrans-296
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 `document.write`
- en: The `document.write` function writes a value or expression at the current browser
    location and is therefore the perfect choice for quickly displaying results. It
    keeps all the examples short and sweet, by placing the output right there in the
    browser next to the web content and code.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '`document.write` 函数在当前浏览器位置写入一个值或表达式，因此非常适合快速显示结果。通过将输出放置在浏览器中的网页内容和代码旁边，可以使所有示例保持简洁明了。'
- en: 'You may, however, have heard that this function is regarded as unsafe by some
    developers, because when you call it after a web page is fully loaded, it will
    overwrite the current document. While this is correct, it doesn’t apply to any
    of the examples in this book, because they all use `document.write` the way it
    was originally intended: as part of the page creation process, calling it only
    before the page has completed loading and displaying.'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，你可能听说过这个函数被一些开发人员视为不安全，因为当你在网页完全加载后调用它时，它会覆盖当前文档。尽管这是正确的，但它并不适用于本书中的任何示例，因为它们都是按照
    `document.write` 最初预期的方式使用的：作为页面创建过程的一部分，在页面完成加载和显示之前仅调用它。
- en: However, although I use `document.write` in this way for simple examples, I
    never use it in production code (except in the very rarest of circumstances where
    it actually is necessary). Instead, I almost always use the preceding option of
    writing directly into a specially prepared element, per the more complex examples
    in [Chapter 18](ch18.xhtml#using_ajax) onward (which access the `innerHTML` property
    of elements for program output).
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，尽管我在简单示例中以这种方式使用 `document.write`，但我从不在生产代码中使用它（除非在确实必要的非常罕见情况下）。相反，我几乎总是使用前面介绍的方法，即直接编写到专门准备好的元素中，根据第
    18 章以后的更复杂示例（访问元素的 `innerHTML` 属性进行程序输出）。
- en: So, please remember that where you see `document.write` being called in this
    book, it is there only to simplify an example, and I recommend that you also use
    the function only in this same way—for obtaining quick test results.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，请记住，在本书中看到 `document.write` 被调用时，它只是为了简化一个示例，我建议你也仅在同样的方式下使用该函数——用于获取快速的测试结果。
- en: With that caveat explained, in the following chapter we’ll continue our exploration
    of JavaScript by looking at how to control program flow and write expressions.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 在解释了这一注意事项后，在接下来的章节中，我们将继续探讨 JavaScript 的控制程序流和编写表达式的方法。
- en: Questions
  id: totrans-302
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Which tags do you use to enclose JavaScript code?
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用什么标签来包含 JavaScript 代码？
- en: By default, to which part of a document will JavaScript code output?
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 默认情况下，JavaScript 代码会将输出写入文档的哪个部分？
- en: How can you include JavaScript code from another source in your documents?
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何在文档中包含来自另一个来源的 JavaScript 代码？
- en: Which JavaScript function is the equivalent of `echo` or `print` in PHP?
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个 JavaScript 函数相当于 PHP 中的 `echo` 或 `print`？
- en: How can you create a comment in JavaScript?
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何在 JavaScript 中创建注释？
- en: What is the JavaScript string concatenation operator?
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: JavaScript 字符串连接运算符是什么？
- en: Which keyword can you use within a JavaScript function to define a variable
    that has local scope?
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 JavaScript 函数中，你可以使用哪个关键字来定义具有局部作用域的变量？
- en: Give two cross-browser methods to display the URL assigned to the link with
    an `id` of `thislink`.
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给出两种跨浏览器的方法来显示分配给具有 `id` 为 `thislink` 的链接的 URL。
- en: Which two JavaScript commands will make the browser load the previous page in
    its history array?
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪两个 JavaScript 命令会使浏览器加载其历史数组中的前一页？
- en: What JavaScript command would you use to replace the current document with the
    main page at the *oreilly.com* website?
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你会用什么JavaScript命令来替换当前文档为*oreilly.com*网站的主页面？
- en: See [“Chapter 14 Answers”](app01_split_013.xhtml#chapter_14_answers) in the
    [Appendix A](app01_split_000.xhtml#solutions_to_the_chapter_questions) for the
    answers to these questions.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 查看[“第14章答案”](app01_split_013.xhtml#chapter_14_answers)在[附录 A](app01_split_000.xhtml#solutions_to_the_chapter_questions)中这些问题的答案。
