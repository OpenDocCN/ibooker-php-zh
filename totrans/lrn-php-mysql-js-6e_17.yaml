- en: Chapter 14\. Exploring JavaScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JavaScript brings a dynamic functionality to your websites. Every time you see
    something pop up when you mouse over an item in the browser, or see new text,
    colors, or images appear on the page in front of your eyes, or grab an object
    on the page and drag it to a new location—these things are generally done through
    JavaScript (although CSS is getting more and more powerful and can do many of
    these things too). It offers effects that are not otherwise possible, because
    it runs inside the browser and has direct access to all the elements in a web
    document.
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript first appeared in the Netscape Navigator browser in 1995, coinciding
    with the addition of support for Java technology in the browser. Because of the
    initial incorrect impression that JavaScript was a spin-off of Java, there has
    been some long-term confusion over their relationship. However, the naming was
    just a marketing ploy to help the new scripting language benefit from the popularity
    of the Java programming language.
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript gained new power when the HTML elements of the web page got a more
    formal, structured definition in what is called the *Document Object Model* (DOM).
    The DOM makes it relatively easy to add a new paragraph or focus on a piece of
    text and change it.
  prefs: []
  type: TYPE_NORMAL
- en: Because both JavaScript and PHP support much of the structured programming syntax
    used by the C programming language, they look very similar to each other. They
    are both fairly high-level languages, too. Also, they are weakly typed, so it’s
    easy to change a variable to a new type just by using it in a new context.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have learned PHP, you should find JavaScript even easier. And you’ll
    be glad you did, because it’s at the heart of the asynchronous communication technology
    that provides the fluid web frontends that (along with HTML5 features) savvy web
    users expect these days.
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript and HTML Text
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JavaScript  is a client-side scripting language that runs entirely inside the
    web browser or under *Node.js*. To call it up, you place it between opening `<script>`
    and closing `</script>` HTML tags. A typical “Hello World” document using JavaScript
    might look like [Example 14-1](#quotation_markhello_worldquotation_mark).
  prefs: []
  type: TYPE_NORMAL
- en: Example 14-1\. “Hello World” displayed using JavaScript
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: You may have seen web pages that use the HTML tag `<script` `language="javascript">`,
    but that usage has now been deprecated. This example uses the more recent and
    preferred `<script type="text/javascript">`, or you can just use `<script>` on
    its own if you like.
  prefs: []
  type: TYPE_NORMAL
- en: Within the `<script>` tags is a single line of JavaScript code that uses its
    equivalent of the PHP `echo` or `print` commands, `document.write`. As you’d expect,
    it simply outputs the supplied string to the current document, where it is displayed.
  prefs: []
  type: TYPE_NORMAL
- en: You may also have noticed that, unlike with PHP, there is no trailing semicolon
    (`;`). This is because a newline serves the same purpose as a semicolon in JavaScript.
    However, if you wish to have more than one statement on a single line, you do
    need to place a semicolon after each command except the last one. Of course, if
    you wish, you can add a semicolon to the end of every statement, and your JavaScript
    will work fine. My personal preference is to leave out the semicolon because it’s
    superfluous, and I therefore also steer clear of practices that could cause issues.
    At the end of the day, though, the choice  may come down to the team you work
    in, which more often than not may require semicolons, just to be sure. So, if
    in doubt, just add the semicolons.
  prefs: []
  type: TYPE_NORMAL
- en: The other thing to note in this example is the `<noscript>` and `</noscript>`
    pair of tags. These are used when you wish to offer alternative HTML to users
    whose browsers do not support JavaScript or who have it disabled. Using these
    tags is up to you, as they are not required, but you really ought to use them
    because it’s usually not that difficult to provide static HTML alternatives to
    the operations you provide using JavaScript. However, the remaining examples in
    this book will omit `<noscript>` tags, because we’re focusing on what you can
    do with JavaScript, not what you can do without it.
  prefs: []
  type: TYPE_NORMAL
- en: 'When [Example 14-1](#quotation_markhello_worldquotation_mark) is loaded, a
    web browser with JavaScript enabled will output the following (see [Figure 14-1](#javascriptcomma_enabled_and_working)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![JavaScript, enabled and working](Images/pmj6_1401.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14-1\. JavaScript, enabled and working
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'A browser with JavaScript disabled will display this message (see [Figure 14-2](#javascript_has_been_disabled)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![JavaScript has been disabled](Images/pmj6_1402.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14-2\. JavaScript, disabled
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Using Scripts Within a Document Head
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In addition to placing a script within the body of a document, you can put it
    in the `<head>` section, which is the ideal place if you wish to execute a script
    when a page loads. If you place critical code and functions there, you can also
    ensure that they are ready to use immediately by any other script sections in
    the document that rely on them.
  prefs: []
  type: TYPE_NORMAL
- en: Another reason for placing a script in the document head is to enable JavaScript
    to write things such as meta tags into the `<head>` section, because the location
    of your script is the part of the document it writes to by default.
  prefs: []
  type: TYPE_NORMAL
- en: Older and Nonstandard Browsers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you need to support browsers that do not offer scripting (very unlikely in
    this day and age), you will need to use the HTML comment tags (`<!--` and `-->`)
    to prevent them from encountering script code that they should not see. [Example 14-2](#quotation_markhello_worldquotation_m)
    shows how you add them to your script code.
  prefs: []
  type: TYPE_NORMAL
- en: Example 14-2\. The “Hello World” example modified for non-JavaScript browsers
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Here an opening HTML comment tag (`<!--`) has been added directly after the
    opening `<script>` statement, and a closing comment tag (`// -->`) has been added
    directly before the script is closed with `</script>`.
  prefs: []
  type: TYPE_NORMAL
- en: The double forward slash (`//`) is used by JavaScript to indicate that the rest
    of the line is a comment. It is there so that browsers that *do* support JavaScript
    will ignore the following `-->`, but non-JavaScript browsers will ignore the preceding
    `//` and act on the `-->` by closing the HTML comment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Although the solution is a little convoluted, all you really need to remember
    is to use the two following lines to enclose your JavaScript when you wish to
    support very old or nonstandard browsers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: However, the use of these comments is unnecessary for any browser released over
    the past several years, but you do need to be aware of this, just in case.
  prefs: []
  type: TYPE_NORMAL
- en: Including JavaScript Files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In addition to writing JavaScript code directly in HTML documents, you can
    include files of JavaScript code either from your website or from anywhere on
    the internet. The syntax for this is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Or, to pull a file in from the internet, use this (here without the `type="text/javascript"`
    as it is optional):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'As for the script files themselves, they must *not* include any `<script>`
    or `</script>` tags, because they are unnecessary: the browser already knows that
    a JavaScript file is being loaded. Putting them in the JavaScript files will cause
    an error.'
  prefs: []
  type: TYPE_NORMAL
- en: Including script files is the preferred way for you to use third-party JavaScript
    files on your website.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: It is possible to leave out the `type="text/javascript"` parameter; all modern
    browsers default to assuming that the script contains JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging JavaScript Errors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you’re learning JavaScript, it’s important to be able to track typing or
    other coding errors. Unlike PHP, which displays error messages in the browser,
    JavaScript handles error messages in a way that changes according to the browser
    used. [Table 14-1](#accessing_javascript_error_messages_in_d) lists how to access
    JavaScript error messages in the most commonly used browsers.
  prefs: []
  type: TYPE_NORMAL
- en: Table 14-1\. Accessing JavaScript error messages in different browsers
  prefs: []
  type: TYPE_NORMAL
- en: '| Browser | How to access JavaScript error messages |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Apple Safari | Open Safari and choose Safari > Preferences > Advanced. Then
    select Show Develop menu in menu bar. Choose Develop > Show Error Console. |'
  prefs: []
  type: TYPE_TB
- en: '| Google Chrome, Microsoft Edge, Mozilla Firefox, & Opera | Press Ctrl-Shift-J
    on a PC or Command-Shift-J on a Mac. |'
  prefs: []
  type: TYPE_TB
- en: Please refer to the browser developers’ documentation on their websites for
    full details on using them.
  prefs: []
  type: TYPE_NORMAL
- en: Using Comments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Because of their shared inheritance from the C programming language, PHP and
    JavaScript have many similarities, one of which is commenting. First, there’s
    the single-line comment, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'This style uses a pair of forward slash characters (`//`) to inform JavaScript
    that everything that follows is to be ignored. You also have multiline comments,
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: You start a multiline comment with the sequence `/*` and end it with `*/`. Just
    remember that you cannot nest multiline comments, so make sure that you don’t
    comment out large sections of code that already contain multiline comments.
  prefs: []
  type: TYPE_NORMAL
- en: Semicolons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Unlike PHP, JavaScript generally does not require semicolons if you have only
    one statement on a line. Therefore, the following is valid:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'However, when you wish to place more than one statement on a line, you must
    separate them with semicolons, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: You can normally leave the final semicolon off, because the newline terminates
    the final statement.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: There are exceptions to the semicolon rule. If you write JavaScript bookmarklets,
    or end a statement with a variable or function reference, *and* the first character
    of the line below is a left parenthesis or bracket, you *must* remember to append
    a semicolon or the JavaScript will fail. So, when in doubt, use a semicolon.
  prefs: []
  type: TYPE_NORMAL
- en: Variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'No particular character identifies a variable in JavaScript as the dollar sign
    does in PHP. Instead, variables use the following naming rules:'
  prefs: []
  type: TYPE_NORMAL
- en: A variable may include only the letters `a–z`, `A–Z`, `0–9`, the `$` symbol,
    and the underscore (`_`).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No other characters, such as spaces or punctuation, are allowed in a variable
    name.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first character of a variable name can be only `a–z`, `A–Z`, `$`, or `_`
    (no numbers).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Names are case-sensitive. `Count`, `count`, and `COUNT` are all different variables.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is no set limit on variable name lengths.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'And yes, you’re right: a `$` is there in that list of allowed characters. It
    *is* allowed by JavaScript and *may* be the first character of a variable or function
    name. Although I don’t recommend keeping the `$` characters, this rule lets you
    port a lot of PHP code more quickly to JavaScript.'
  prefs: []
  type: TYPE_NORMAL
- en: String Variables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'JavaScript string variables should be enclosed in either single or double quotation
    marks, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'You may include a single quote within a double-quoted string or a double quote
    within a single-quoted string. But you must escape a quote of the same type by
    using the backslash character, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'To read from a string variable, you can assign it to another one, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'or you can use it in a function, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Numeric Variables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Creating a numeric variable is as simple as assigning a value, like these examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Like strings, numeric variables can be read from and used in expressions and
    functions.
  prefs: []
  type: TYPE_NORMAL
- en: Arrays
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'JavaScript arrays are also very similar to those in PHP, in that an array can
    contain string or numeric data, as well as other arrays. To assign values to an
    array, use the following syntax (which in this case creates an array of strings):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'To create a multidimensional array, nest smaller arrays within a larger one.
    So, to create a two-dimensional array containing the colors of a single face of
    a scrambled Rubik’s Cube (where the colors red, green, orange, yellow, blue, and
    white are represented by their capitalized initial letters), you could use the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous example has been formatted to make it obvious what is going on,
    but it could also be written like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'or even like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'To access the element two down and three along in this matrix, you would use
    the following (because array elements start at position 0):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: This statement will output the letter `O` for *orange*.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: JavaScript arrays are powerful storage structures, so [Chapter 16](ch16.xhtml#javascript_functionscomma_objectscomma_a)
    discusses them in much greater depth.
  prefs: []
  type: TYPE_NORMAL
- en: Operators
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Operators in JavaScript, as in PHP, can involve mathematics, changes to strings,
    and comparison and logical operations (`and`, `or`, etc.). JavaScript mathematical
    operators look a lot like plain arithmetic—for instance, the following statement
    outputs `15`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The following sections teach you about the various operators.
  prefs: []
  type: TYPE_NORMAL
- en: Arithmetic Operators
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Arithmetic operators* are used to perform mathematics. You can use them for
    the main four operations (addition, subtraction, multiplication, and division)
    as well as to find the modulus (the remainder after a division) and to increment
    or decrement a value (see [Table 14-2](#arithmetic_operators-id00042)).'
  prefs: []
  type: TYPE_NORMAL
- en: Table 14-2\. Arithmetic operators
  prefs: []
  type: TYPE_NORMAL
- en: '| Operator | Description | Example |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `+` | Addition | `` `j` **`+`** `12` `` |'
  prefs: []
  type: TYPE_TB
- en: '| `–` | Subtraction | `` `j` **`–`** `22` `` |'
  prefs: []
  type: TYPE_TB
- en: '| `*` | Multiplication | `` `j` **`*`** `7` `` |'
  prefs: []
  type: TYPE_TB
- en: '| `/` | Division | `` `j` **`/`** `3.13` `` |'
  prefs: []
  type: TYPE_TB
- en: '| `%` | Modulus (division remainder) | `` `j` **`%`** `6` `` |'
  prefs: []
  type: TYPE_TB
- en: '| `++` | Increment | `` **`++`**`j` `` |'
  prefs: []
  type: TYPE_TB
- en: '| `--` | Decrement | `` **`--`**`j` `` |'
  prefs: []
  type: TYPE_TB
- en: Assignment Operators
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The *assignment* *operators* are used to assign values to variables. They start
    with the very simple `=` and move on to `+=`, `–=`, and so on. The operator `+=`
    adds the value on the right side to the variable on the left, instead of totally
    replacing the value on the left. Thus, if `count` starts with the value `6`, the
    statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'sets `count` to `7`, just like the more familiar assignment statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '[Table 14-3](#assignment_operators-id00044) lists the various assignment operators
    available.'
  prefs: []
  type: TYPE_NORMAL
- en: Table 14-3\. Assignment operators
  prefs: []
  type: TYPE_NORMAL
- en: '| Operator | Example | Equivalent to |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `=` | ``j **`=`** 99`` | `j = 99` |'
  prefs: []
  type: TYPE_TB
- en: '| `+=` | ``j **`+=`** 2`` | `j = j + 2` |'
  prefs: []
  type: TYPE_TB
- en: '| `+=` | `j **+=** ''string''` | `j = j + ''string''` |'
  prefs: []
  type: TYPE_TB
- en: '| `–=` | ``j **`–=`** 12`` | `j = j – 12` |'
  prefs: []
  type: TYPE_TB
- en: '| `*=` | ``j **`*=`** 2`` | `j = j * 2` |'
  prefs: []
  type: TYPE_TB
- en: '| `/=` | ``j **`/=`** 6`` | `j = j / 6` |'
  prefs: []
  type: TYPE_TB
- en: '| `%=` | ``j **`%=`** 7`` | `j = j % 7` |'
  prefs: []
  type: TYPE_TB
- en: Comparison Operators
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Comparison operators* are generally used inside a construct such as an `if`
    statement, where you need to compare two items. For example, you may wish to know
    whether a variable you have been incrementing has reached a specific value, or
    whether another variable is less than a set value, and so on (see [Table 14-4](#comparison_operators-id00046)).'
  prefs: []
  type: TYPE_NORMAL
- en: Table 14-4\. Comparison operators
  prefs: []
  type: TYPE_NORMAL
- en: '| Operator | Description | Example |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `==` | Is *equal* to | `j **==** 42` |'
  prefs: []
  type: TYPE_TB
- en: '| `!=` | Is *not equal* to | ``j **`!=`** 17`` |'
  prefs: []
  type: TYPE_TB
- en: '| `>` | Is *greater than* | ``j **`>`** 0`` |'
  prefs: []
  type: TYPE_TB
- en: '| `<` | Is *less than* | ``j **`<`** 100`` |'
  prefs: []
  type: TYPE_TB
- en: '| `>=` | Is *greater than or equal* to | ``j **`>=`** 23`` |'
  prefs: []
  type: TYPE_TB
- en: '| `<=` | Is *less than or equal* to | ``j **`<=`** 13`` |'
  prefs: []
  type: TYPE_TB
- en: '| `===` | Is *equal* to (and of the same type) | `j **===** 56` |'
  prefs: []
  type: TYPE_TB
- en: '| `!==` | Is *not equal* to (and of the same type) | ``j **`!==`** ''1''``
    |'
  prefs: []
  type: TYPE_TB
- en: Logical Operators
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Unlike PHP, JavaScript’s *logical* *operators* do not include `and` and `or`
    equivalents to `&&` and `||`, and there is no `xor` operator (see [Table 14-5](#logical_operators-id00048)).
  prefs: []
  type: TYPE_NORMAL
- en: Table 14-5\. Logical operators
  prefs: []
  type: TYPE_NORMAL
- en: '| Operator | Description | Example |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `&&` | And | `j == 1 **&&** k == 2` |'
  prefs: []
  type: TYPE_TB
- en: '| `&#124;&#124;` | Or | `j < 100 **&#124;&#124;** j > 0` |'
  prefs: []
  type: TYPE_TB
- en: '| `!` | Not | ``**`!`** (j == k)`` |'
  prefs: []
  type: TYPE_TB
- en: Incrementing, Decrementing, and Shorthand Assignment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following forms of post- and pre-incrementing and decrementing that you
    learned to use in PHP are also supported by JavaScript, as are shorthand assignment
    operators:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: String Concatenation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'JavaScript handles string concatenation slightly differently from PHP. Instead
    of the `.` (period) operator, it uses the plus sign (`+`), like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Assuming that the variable `messages` is set to the value `3`, the output from
    this line of code will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Just as you can add a value to a numeric variable with the `+=` operator, you
    can also append one string to another the same way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Escape Characters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Escape characters, which you’ve seen used to insert quotation marks in strings,
    can also be used to insert various special characters such as tabs, newlines,
    and carriage returns. Here is an example using tabs to lay out a heading—it is
    included here merely to illustrate escapes, because in web pages, there are better
    ways to do layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[Table 14-6](#javascriptapostrophes_escape_characters) details the escape characters
    available.'
  prefs: []
  type: TYPE_NORMAL
- en: Table 14-6\. JavaScript’s escape characters
  prefs: []
  type: TYPE_NORMAL
- en: '| Character | Meaning |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `\b` | Backspace |'
  prefs: []
  type: TYPE_TB
- en: '| `\f` | Form feed |'
  prefs: []
  type: TYPE_TB
- en: '| `\n` | Newline |'
  prefs: []
  type: TYPE_TB
- en: '| `\r` | Carriage return |'
  prefs: []
  type: TYPE_TB
- en: '| `\t` | Tab |'
  prefs: []
  type: TYPE_TB
- en: '| `\''` | Single quote (or apostrophe) |'
  prefs: []
  type: TYPE_TB
- en: '| `\"` | Double quote |'
  prefs: []
  type: TYPE_TB
- en: '| `\\` | Backslash |'
  prefs: []
  type: TYPE_TB
- en: '| ``\*`XXX`*`` | An octal number between `000` and `377` that represents the
    Latin-1 character equivalent (such as `\251` for the © symbol) |'
  prefs: []
  type: TYPE_TB
- en: '| ``\x*`XX`*`` | A hexadecimal number between `00` and `FF` that represents
    the Latin-1 character equivalent (such as `\xA9` for the © symbol) |'
  prefs: []
  type: TYPE_TB
- en: '| ``\u*`XXXX`*`` | A hexadecimal number between `0000` and `FFFF` that represents
    the Unicode character equivalent (such as `\u00A9` for the © symbol) |'
  prefs: []
  type: TYPE_TB
- en: Variable Typing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Like PHP, JavaScript is a very loosely typed language; the *type* of a variable
    is determined only when a value is assigned and can change as the variable appears
    in different contexts. Usually, you don’t have to worry about the type; JavaScript
    figures out what you want and just does it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at [Example 14-3](#setting_a_variableapostrophes_type_by_as), in
    which:'
  prefs: []
  type: TYPE_NORMAL
- en: The variable `n` is assigned the string value `'838102050'`. The next line prints
    out its value, and the `typeof` operator is used to look up the type.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`n` is given the value returned when the numbers `12345` and `67890` are multiplied
    together. This value is also `838102050`, but it is a number, not a string. The
    type of the variable is then looked up and displayed.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Some text is appended to the number `n` and the result is displayed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Example 14-3\. Setting a variable’s type by assignment
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The output from this script looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'If there is ever any doubt about the type of a variable, or you need to ensure
    that a variable has a particular type, you can force it to that type by using
    statements such as the following (which, respectively, turn a string into a number
    and a number into a string):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Or you can use  the following functions in the same way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: You can read more about type conversion in JavaScript [online.](https://javascript.info/type-conversions).
    And you can always look up a variable’s type by using the `typeof` operator.
  prefs: []
  type: TYPE_NORMAL
- en: Functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As with PHP, JavaScript functions are used to separate out sections of code
    that perform a particular task. To create a function, declare it in the manner
    shown in [Example 14-4](#simple_function_declaration-id00054).
  prefs: []
  type: TYPE_NORMAL
- en: Example 14-4\. A simple function declaration
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: This function takes the two parameters passed, multiplies them together, and
    returns the product.
  prefs: []
  type: TYPE_NORMAL
- en: Global Variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Global* variables are ones defined outside of any functions (or defined within
    functions but without the `var` keyword). They can be defined in the following
    ways:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Regardless of whether you are using the `var` keyword, as long as a variable
    is defined outside of a function, it is global in scope. This means that every
    part of a script can have access to it.
  prefs: []
  type: TYPE_NORMAL
- en: Local Variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Parameters passed to a function automatically have *local* scope, that is, they
    can be referenced only from within that function. However, there is one exception.
    Arrays are passed to a function by reference, so if you modify any elements in
    an array parameter, the elements of the original array will be modified.
  prefs: []
  type: TYPE_NORMAL
- en: To define a local variable that has scope only within the current function,
    and has not been passed as a parameter, use the `var` keyword. [Example 14-5](#function_creating_variables_with_globa)
    shows a function that creates one variable with global scope and two with local
    scope.
  prefs: []
  type: TYPE_NORMAL
- en: Example 14-5\. A function creating variables with global and local scope
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: To test whether scope setting has worked in PHP, we can use the `isset` function.
    But in JavaScript there is no such function, so [Example 14-6](#checking_the_scope_of_the_variables_defi)
    makes use of the `typeof` operator, which returns the string `undefined` when
    a variable is not defined.
  prefs: []
  type: TYPE_NORMAL
- en: Example 14-6\. Checking the scope of the variables defined in the function test
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'The output from this script is the following single line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: This shows that only the variable `a` was given global scope, which is exactly
    what we would expect, since the variables `b` and `c` were given local scope by
    being prefaced with the `var` keyword.
  prefs: []
  type: TYPE_NORMAL
- en: If your browser issues a warning about `b` being undefined, the warning is correct
    but can be ignored.
  prefs: []
  type: TYPE_NORMAL
- en: Using let and const
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'JavaScript now offers two new keywords: `let` and `const`. The `let` keyword
    is pretty much a swap-in for `var`, but it has the advantage that you cannot redeclare
    a variable once you have done so with `let`, although you can with `var`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You see, the fact that you could redeclare variables using `var` was leading
    to obscure bugs, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Can you see the problem? Because `counter` is greater than 0 (since we initialized
    it to 1), the string `hello` is redefined as “How are you?” which is then displayed
    in the document.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, if you replace the `var` with `let` (as follows), the second declaration
    is ignored, and the original string “Hello there” will be displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: The `var` keyword is either globally scoped (if outside of any blocks or functions)
    or *function* scoped, and variables declared with it are initialized with `undefined`,
    but the `let` keyword is either globally or *block* scoped, and variables are
    not initialized.
  prefs: []
  type: TYPE_NORMAL
- en: 'Any variable assigned using `let` has scope either within the entire document
    if declared outside of any block, or, if declared within a block bounded by `{}` (which
    includes functions), its scope is limited to that block (and any nested sub-blocks).
    If you declare a variable within a block but try to access it from outside that
    block, an error will be returned, as with the following, which will fail at the
    `document.write` because `hello` will have no value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: You can use `let` to declare variables of the same name as previously declared
    ones, as long as it is within a new scope, in which case any previous value assigned
    to a variable of the same name in the previous scope will become inaccessible
    to the new scope, because the new variable of the same name is treated as totally
    different from the previous one. It only has scope within the current block, or
    any sub-blocks (unless another `let` is used to declare yet another variable of
    the same name in a sub-block).
  prefs: []
  type: TYPE_NORMAL
- en: It is good practice to try avoiding the reuse of meaningful variable names,
    or you risk causing confusion. However, loop or index variables such as `i` (or
    other short and simple names) can generally be reused in new scopes without causing
    any confusion.
  prefs: []
  type: TYPE_NORMAL
- en: You can further increase your control over scope by declaring a variable to
    have a constant value, that is, one that cannot be changed. This is beneficial
    where you have created a variable that you are treating as a constant but had
    declared it only using `var` or `let`, because you might have instances in your
    code where you try to change that value, which would be allowed but would be a
    bug.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, if you use the `const` keyword to declare the variable and assign
    its value, any attempt to change the value later will be disallowed, and your
    code will halt with an error message in the console similar to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'The following code will cause just that error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Just like `let`, `const` declarations are also block scoped (within `{}` sections
    and any sub-blocks), meaning that you can have constant variables of the same
    name but have different values in different scopes of a piece of code. However,
    I strongly recommend you try to avoid duplication of names and keep any constant
    name for one single value throughout each program, using a new constant name wherever
    you need a new constant.
  prefs: []
  type: TYPE_NORMAL
- en: In summary: `var` has global or function scope, and `let` and `const` have global
    or block scope. Both `var` and `let` can be declared without being initialized,
    while `const` must be initialized during declaration. The `var` keyword can be
    reused to re-declare a `var` variable, but `let` and `const` cannot. Finally, `const` can
    neither be redeclared nor reassigned.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: You may prefer to use a developer console with tests such as these (and elsewhere
    in this book) as previously explained in [“Debugging JavaScript Errors”](#debugging_javascript_errors),
    in which case you can replace `document.write` with `console.log`, and the output
    will be shown in the console instead of within the browser. This is also a better
    option for JavaScript that will run once a document has fully loaded, because
    at that time `document.write` would replace the current document, rather than
    append to it, which is probably not what you might intend.
  prefs: []
  type: TYPE_NORMAL
- en: The Document Object Model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The design of JavaScript is very smart. Rather than just creating yet another
    scripting language (which would have still been a pretty good improvement at the
    time), there was a vision to build it around the already-existing HTML Document
    Object Model. This breaks down the parts of an HTML document into discrete *objects*,
    each with its own *properties* and *methods* and each subject to JavaScript’s
    control.
  prefs: []
  type: TYPE_NORMAL
- en: 'JavaScript separates objects, properties, and methods by using a period (one
    good reason why `+` is the string concatenation operator in JavaScript, rather
    than the period). For example, let’s consider a business card as an object we’ll
    call `card`. This object contains properties such as a name, address, phone number,
    and so on. In the syntax of JavaScript, these properties would look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Its methods are functions that retrieve, change, and otherwise act on the properties.
    For instance, to invoke a method that displays the properties of the object `card`,
    you might use syntax such as this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Have a look at some of the earlier examples in this chapter and notice where
    the statement `document.write` is used. Now that you understand how JavaScript
    is based around objects, you will see that `write` is actually a method of the
    `document` object.
  prefs: []
  type: TYPE_NORMAL
- en: Within JavaScript, there is a hierarchy of parent and child objects, which is
    what is known as the Document Object Model (DOM; see [Figure 14-3](#example_of_dom_object_hierarchy)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Example of DOM object hierarchy](Images/pmj6_1403.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14-3\. Example of DOM object hierarchy
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'The figure uses HTML tags that you are already familiar with to illustrate
    the parent/child relationship between the various objects in a document. For example,
    a URL within a link is part of the body of an HTML document. In JavaScript, it
    is referenced like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Notice how this follows the central column down. The first part, `document`,
    refers to the `<html>` and `<body>` tags; `links.linkname` refers to the `<a>`
    tag, and `href` to the `href` attribute.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s turn this into some HTML and a script to read a link’s properties. Type
    [Example 14-7](#reading_a_link_url_with_javascript) and save it as *linktest.html*;
    then call it up in your browser.
  prefs: []
  type: TYPE_NORMAL
- en: Example 14-7\. Reading a link URL with JavaScript
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Note the short form of the `<script>` tags, where I have omitted the parameter
    `type="text/JavaScript"` to save you some typing. If you wish, just for the purposes
    of testing this (and other examples), you could also omit everything outside of
    the `<script>` and `</script>` tags. The output from this example is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: The second line of output comes from the `document.write` method. Notice how
    the code follows the document tree down from `document` to `links` to `mylink`
    (the `id` given to the link) to `href` (the URL destination value).
  prefs: []
  type: TYPE_NORMAL
- en: 'There is also a short form that works equally well, which starts with the value
    in the `id` attribute: `mylink.href`. So, you can replace this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Another Use for the $ Symbol
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As mentioned earlier, the `$` symbol is allowed in JavaScript variable and
    function names. Because of this, you may sometimes encounter strange-looking code
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Some enterprising programmers have decided that the `getElementById` function
    is so prevalent in JavaScript that they have written a function to replace it
    called `$`, like in jQuery (although jQuery uses the `$` for much more than that—see
    [Chapter 22](ch22.xhtml#introduction_to_jquery)), as shown in [Example 14-8](#replacement_function_for_the_getelemen).
  prefs: []
  type: TYPE_NORMAL
- en: Example 14-8\. A replacement function for the `getElementById` method
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Therefore, as long as you have included the `$` function in your code, syntax
    such as this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'can replace code such as this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Using the DOM
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `links` object is actually an array of URLs, so the `mylink` URL in [Example 14-7](#reading_a_link_url_with_javascript)
    can also be safely referred to in all browsers in the following way (because it’s
    the first, and only, link):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to know how many links there are in an entire document, you can
    query the `length` property of the `links` object like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'You can extract and display all links in a document like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'The `length` of something is a property of every array, and many objects as
    well. For example, the number of items in your browser’s web history can be queried
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'To stop websites from snooping on your browsing history, the `history` object
    stores only the number of sites in the array: you cannot read from or write to
    these values. But you can replace the current page with one from the history,
    if you know what position it has within the history. This can be very useful in
    cases in which you know that certain pages in the history came from your site,
    or you simply wish to send the browser back one or more pages, which you do with
    the `go` method of the `history` object. For example, to send the browser back
    three pages, issue the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also use the following methods to move back or forward a page at a
    time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'In a similar manner, you can replace the currently loaded URL with one of your
    choosing, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Of course, there’s a whole lot more to the DOM than reading and modifying links.
    As you progress through the following chapters on JavaScript, you’ll become quite
    familiar with the DOM and how to access it.
  prefs: []
  type: TYPE_NORMAL
- en: About document.write
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When teaching programming, it’s necessary to have a quick and easy way to display
    the results of expressions. In PHP (for example) there are the `echo` and `print`
    statements, which simply send text to the browser, so that’s easy. In JavaScript,
    though, there are the following alternatives.
  prefs: []
  type: TYPE_NORMAL
- en: Using console.log
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `console.log` function will output the result of any value or expression
    passed to it in the console of the current browser. This is a special mode with
    a frame or window separate from the browser window, and in which errors and other
    messages can be made to display. While great for experienced programmers, it is
    not ideal for beginners because the output is not near the web content in the
    browser.
  prefs: []
  type: TYPE_NORMAL
- en: Using alert
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `alert` function displays values or expressions passed to it in a pop-up
    window, which requires you to click a button to close. Clearly this can become
    quite irritating very quickly, and it has the downside of displaying only the
    current message—previous ones are erased.
  prefs: []
  type: TYPE_NORMAL
- en: Writing into Elements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is possible to write directly into the text of an HTML element, which is
    a fairly elegant solution (and the best one for production websites)—except that
    for this book every example would require such an element to be created, and some
    lines of code to access it. This gets in the way of teaching the core of an example
    and would make the code look overly cumbersome and confusing.
  prefs: []
  type: TYPE_NORMAL
- en: Using document.write
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `document.write` function writes a value or expression at the current browser
    location and is therefore the perfect choice for quickly displaying results. It
    keeps all the examples short and sweet, by placing the output right there in the
    browser next to the web content and code.
  prefs: []
  type: TYPE_NORMAL
- en: 'You may, however, have heard that this function is regarded as unsafe by some
    developers, because when you call it after a web page is fully loaded, it will
    overwrite the current document. While this is correct, it doesn’t apply to any
    of the examples in this book, because they all use `document.write` the way it
    was originally intended: as part of the page creation process, calling it only
    before the page has completed loading and displaying.'
  prefs: []
  type: TYPE_NORMAL
- en: However, although I use `document.write` in this way for simple examples, I
    never use it in production code (except in the very rarest of circumstances where
    it actually is necessary). Instead, I almost always use the preceding option of
    writing directly into a specially prepared element, per the more complex examples
    in [Chapter 18](ch18.xhtml#using_ajax) onward (which access the `innerHTML` property
    of elements for program output).
  prefs: []
  type: TYPE_NORMAL
- en: So, please remember that where you see `document.write` being called in this
    book, it is there only to simplify an example, and I recommend that you also use
    the function only in this same way—for obtaining quick test results.
  prefs: []
  type: TYPE_NORMAL
- en: With that caveat explained, in the following chapter we’ll continue our exploration
    of JavaScript by looking at how to control program flow and write expressions.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which tags do you use to enclose JavaScript code?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By default, to which part of a document will JavaScript code output?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can you include JavaScript code from another source in your documents?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which JavaScript function is the equivalent of `echo` or `print` in PHP?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can you create a comment in JavaScript?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the JavaScript string concatenation operator?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which keyword can you use within a JavaScript function to define a variable
    that has local scope?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Give two cross-browser methods to display the URL assigned to the link with
    an `id` of `thislink`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which two JavaScript commands will make the browser load the previous page in
    its history array?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What JavaScript command would you use to replace the current document with the
    main page at the *oreilly.com* website?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: See [“Chapter 14 Answers”](app01_split_013.xhtml#chapter_14_answers) in the
    [Appendix A](app01_split_000.xhtml#solutions_to_the_chapter_questions) for the
    answers to these questions.
  prefs: []
  type: TYPE_NORMAL
