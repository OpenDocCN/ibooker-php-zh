- en: Chapter 27\. HTML5 Audio and Video
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the biggest driving forces behind the growth of the internet has been
    the insatiable demand from users for ever more multimedia in the form of audio
    and video. Initially, bandwidth was so precious that there was no such thing as
    live streaming, and it could take minutes or even hours to download an audio track,
    let alone a video.
  prefs: []
  type: TYPE_NORMAL
- en: The high cost of bandwidth and limited availability of fast modems drove the
    development of faster and more efficient compression algorithms, such as MP3 audio
    and MPEG video, but even then the only way to download files in any reasonable
    length of time was to drastically reduce their quality.
  prefs: []
  type: TYPE_NORMAL
- en: One of my earlier internet projects, back in 1997, was the UK’s first online
    radio station licensed by the music authorities. Actually, it was more of a podcast
    (before the term was coined) because we made a daily half-hour show and then compressed
    it down to 8-bit, 11 KHz mono using an algorithm originally developed for telephony,
    and it sounded like phone quality, or worse. Still, we quickly gained thousands
    of listeners who would download the show and then listen to it as they surfed
    to the sites discussed in it by means of a pop-up browser window containing a
    plug-in.
  prefs: []
  type: TYPE_NORMAL
- en: Thankfully for us, and everyone publishing multimedia, it soon became possible
    to offer greater audio and video quality, but still only by asking the user to
    download and install a plug-in player. Flash became the most popular of these
    players, after beating rivals such as RealAudio, but it gained a bad reputation
    as the cause of many a browser crash and constantly required upgrading when new
    versions were released.
  prefs: []
  type: TYPE_NORMAL
- en: So, it was generally agreed that the way ahead was to come up with some web
    standards for supporting multimedia directly within the browser. Of course, browser
    developers such as Microsoft and Google had differing visions of what these standards
    should look like, but when the dust settled, they had agreed on a subset of file
    types that all browsers should play natively, and these were introduced into the
    HTML5 specification.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, it is possible (as long as you encode your audio and video in a few
    different formats) to upload multimedia to a web server, place a couple of HTML
    tags in a web page, and play the media on any major desktop browser, smartphone,
    or tablet device, without the user having to download a plug-in or make any other
    changes.
  prefs: []
  type: TYPE_NORMAL
- en: About Codecs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The term *codec* stands for en*co*der/*dec*oder. It describes the functionality
    provided by software that encodes and decodes media such as audio and video. In
    HTML5 there are a number of different sets of codecs available, depending on the
    browser used.
  prefs: []
  type: TYPE_NORMAL
- en: One complication around audio and video, which rarely applies to graphics and
    other traditional web content, is the licensing carried by the formats and codecs.
    Many formats and codecs are provided for a fee, because they were developed by
    a single company or consortium of companies that chose a proprietary license.
    Some free and open source browsers don’t support the most popular formats and
    codecs because it is unfeasible to pay for them, or because the developers oppose
    proprietary licenses in principle. Because copyright laws vary from country to
    country and because licenses are hard to enforce, the codecs can usually be found
    on the web for no cost, but they might technically be illegal to use where you
    live.
  prefs: []
  type: TYPE_NORMAL
- en: 'Following are the codecs supported by the HTML5 `<audio>` tag (and also when
    audio is attached to HTML5 video):'
  prefs: []
  type: TYPE_NORMAL
- en: <dfn class="keep-together">AAC</dfn>
  prefs: []
  type: TYPE_NORMAL
- en: This audio codec, which stands for Advanced Audio Encoding, is a proprietary
    patented technology that generally uses the *.aac* file extension. Its MIME type
    is `audio/aac`.
  prefs: []
  type: TYPE_NORMAL
- en: <dfn class="keep-together">FLAC</dfn>
  prefs: []
  type: TYPE_NORMAL
- en: This audio codec, which stands for Free Lossless Audio Codec, was developed
    by the Xiph.Org Foundation. It uses the *.flac* extension, and its Mime type is
    `audio/flac`.
  prefs: []
  type: TYPE_NORMAL
- en: <dfn class="keep-together">MP3</dfn>
  prefs: []
  type: TYPE_NORMAL
- en: This audio codec, which stands for MPEG Audio Layer 3, has been available for
    many years. Although the term is often (incorrectly) used to refer to any type
    of digital audio, it is a proprietary patented technology that uses the *.mp3* extension.
    Its Mime type is `audio/mpeg`.
  prefs: []
  type: TYPE_NORMAL
- en: <dfn class="keep-together">PCM</dfn>
  prefs: []
  type: TYPE_NORMAL
- en: This audio codec, which stands for Pulse Coded Modulation, stores the full data
    as encoded by an analog-to-digital converter and is the format used for storing
    data on audio CDs. Because it does not use compression, it is called a *lossless*
    codec, and its files are generally many times larger than AAC or MP3 files. It
    usually has the extension *.wav*. Its MIME type is `audio/wav`, but you may also
    see `audio/wave`.
  prefs: []
  type: TYPE_NORMAL
- en: <dfn class="keep-together">Vorbis</dfn>
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes referred to as Ogg Vorbis—because it generally uses the *.ogg* file
    extension—this audio codec is unencumbered by patents and free of royalty payments.
    Its MIME type is `audio/ogg`, or the WebM container uses `audio/webm`.
  prefs: []
  type: TYPE_NORMAL
- en: 'As of mid 2021, all of AAC, MP3, PCM, and Vorbis are generally supported by
    most operating systems and browsers (not including Microsoft’s discontinued Internet
    Explorer), with the following Safari-related exceptions:'
  prefs: []
  type: TYPE_NORMAL
- en: Vorbis `audio/ogg`
  prefs: []
  type: TYPE_NORMAL
- en: MacOS 10.11 and earlier Safari requires Xiph Quicktime
  prefs: []
  type: TYPE_NORMAL
- en: Vorbis `audio/webm`
  prefs: []
  type: TYPE_NORMAL
- en: Not supported on Safari
  prefs: []
  type: TYPE_NORMAL
- en: FLAC `audio/ogg`
  prefs: []
  type: TYPE_NORMAL
- en: Not supported on Safari (although `audio/flac` is)
  prefs: []
  type: TYPE_NORMAL
- en: Consequently, unless you really have a reason to use Vorbis, it is nowadays
    safe to just stick with either AAC or MP3 for compressed lossy audio, FLAC for
    compressed lossless, or PCM for uncompressed audio.
  prefs: []
  type: TYPE_NORMAL
- en: The <audio> Element
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To cater for various platforms, you can record or convert your content using
    multiple codecs and then list them all within `<audio>` and `</audio>` tags, as
    in [Example 27-1](#embedding_three_different_types_of_audio). The nested `<source>`
    tags then contain the various media you wish to offer to a browser. Because the
    `controls` attribute is supplied, the result looks like [Figure 27-1](#playing_an_audio_file).
  prefs: []
  type: TYPE_NORMAL
- en: Example 27-1\. Embedding three different types of audio files
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![Playing an audio file](Images/pmj6_2701.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 27-1\. Playing an audio file
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In this example I included three different audio types, because that’s perfectly
    acceptable and can be a good idea if you wish to ensure that each browser can
    locate its preferred format rather than just one it knows how to handle. However,
    you can drop either (but not both) of the MP3 or the AAC files and still be confident
    that the example will play on all platforms.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `<audio>` element and its partner `<source>` tag support several attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: <dfn class="keep-together">`autoplay`</dfn>
  prefs: []
  type: TYPE_NORMAL
- en: Causes the audio to start playing as soon as it is ready
  prefs: []
  type: TYPE_NORMAL
- en: <dfn class="keep-together">`controls`</dfn>
  prefs: []
  type: TYPE_NORMAL
- en: Causes the control panel to be displayed
  prefs: []
  type: TYPE_NORMAL
- en: <dfn class="keep-together">`loop`</dfn>
  prefs: []
  type: TYPE_NORMAL
- en: Sets the audio to play over and over
  prefs: []
  type: TYPE_NORMAL
- en: <dfn class="keep-together">`preload`</dfn>
  prefs: []
  type: TYPE_NORMAL
- en: Causes the audio to begin loading even before the user selects Play
  prefs: []
  type: TYPE_NORMAL
- en: <dfn class="keep-together">`src`</dfn>
  prefs: []
  type: TYPE_NORMAL
- en: Specifies the source location of an audio file
  prefs: []
  type: TYPE_NORMAL
- en: <dfn class="keep-together">`type`</dfn>
  prefs: []
  type: TYPE_NORMAL
- en: Specifies the codec used in creating the audio
  prefs: []
  type: TYPE_NORMAL
- en: If you don’t supply the `controls` attribute to the `<audio>` tag, and don’t
    use the `autoplay` attribute either, the sound will not play, and there won’t
    be a Play button for the user to click to start playback. This would leave you
    no option other than to offer this functionality in JavaScript, as in [Example 27-2](#playing_audio_using_javascript)
    (with the additional code required highlighted in bold), which provides the ability
    to play and pause the audio, as shown in [Figure 27-2](#html5_audio_can_be_controlled_with_javas).
  prefs: []
  type: TYPE_NORMAL
- en: Example 27-2\. Playing audio using JavaScript
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![HTML5 audio can be controlled with JavaScript](Images/pmj6_2702.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 27-2\. HTML5 audio can be controlled with JavaScript
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This works by calling the `play` or `pause` methods of the `myaudio` element
    when the buttons are clicked.
  prefs: []
  type: TYPE_NORMAL
- en: The <video> Element
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Playing video in HTML5 is quite similar to audio; you just use the `<video>`
    tag and provide `<source>` elements for the media you are offering. [Example 27-3](#playing_html5_video)
    shows how to do this with three different video codec types, as displayed in [Figure 27-3](#playing-html5-video-2).
  prefs: []
  type: TYPE_NORMAL
- en: Example 27-3\. Playing HTML5 video
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](Images/pmj6_2703.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 27-3\. Playing HTML5 video
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The Video Codecs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As with audio, there are a number of video codecs available, with differing
    support across multiple browsers. These codecs come in different containers, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: <dfn class="keep-together">MP4</dfn>
  prefs: []
  type: TYPE_NORMAL
- en: A license-encumbered, multimedia container format standard specified as a part
    of MPEG-4\. Its MIME type is `video/mp4`.
  prefs: []
  type: TYPE_NORMAL
- en: <dfn class="keep-together">Ogg</dfn>
  prefs: []
  type: TYPE_NORMAL
- en: A free, open container format maintained by the Xiph.Org Foundation. The creators
    of the Ogg format state that it is unrestricted by software patents. Its MIME
    type is `video/ogg`.
  prefs: []
  type: TYPE_NORMAL
- en: <dfn class="keep-together">WebM</dfn>
  prefs: []
  type: TYPE_NORMAL
- en: An audio-video format designed to provide a royalty-free, open video compression
    format for use with HTML5 video. Its MIME type is `video/webm`.
  prefs: []
  type: TYPE_NORMAL
- en: 'These may then contain one of the following video codecs:'
  prefs: []
  type: TYPE_NORMAL
- en: <dfn class="keep-together">H.264 & H.265</dfn>
  prefs: []
  type: TYPE_NORMAL
- en: Patented, proprietary video codecs that can be played back for free by the end
    user but that may incur royalty fees for all parts of the encoding and transmission
    process. H.265 supports almost double the compression of H.264 for the same quality
    output.
  prefs: []
  type: TYPE_NORMAL
- en: <dfn class="keep-together">Theora</dfn>
  prefs: []
  type: TYPE_NORMAL
- en: A video codec that is unencumbered by patents and free of royalty payments at
    all levels of encoding, transmission, and playback.
  prefs: []
  type: TYPE_NORMAL
- en: <dfn class="keep-together">VP8</dfn>
  prefs: []
  type: TYPE_NORMAL
- en: A video codec that is similar to Theora but is owned by Google, which has published
    it as open source, making it royalty-free.
  prefs: []
  type: TYPE_NORMAL
- en: <dfn class="keep-together">VP9</dfn>
  prefs: []
  type: TYPE_NORMAL
- en: The same as VP8 but more powerful, using half the bitrate.
  prefs: []
  type: TYPE_NORMAL
- en: Nowadays you can be sure that pretty much all modern browsers support all of
    these, with the exceptions that Theora `video/ogg` is not supported on iOS, and
    macOS earlier than 10.11 requires Xiph QuickTime.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore you may wish to steer clear of Ogg if iOS is one of your target platforms (which
    will usually be the case), as you can safely rely on either MP4 or WebM on all
    platforms and forget about other formats for the time being. However, in [Example 27-3](#playing_html5_video)
    I have shown how you can add all the three main video types if you like, as the
    browser will then choose the format it prefers.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `<video>` element and accompanying `<source>` tag support the following
    attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: <dfn class="keep-together">`autoplay`</dfn>
  prefs: []
  type: TYPE_NORMAL
- en: Causes the video to start playing as soon as it is ready
  prefs: []
  type: TYPE_NORMAL
- en: <dfn class="keep-together">`controls`</dfn>
  prefs: []
  type: TYPE_NORMAL
- en: Causes the control panel to be displayed
  prefs: []
  type: TYPE_NORMAL
- en: <dfn class="keep-together">`height`</dfn>
  prefs: []
  type: TYPE_NORMAL
- en: Specifies the height at which to display the video
  prefs: []
  type: TYPE_NORMAL
- en: <dfn class="keep-together">`loop`</dfn>
  prefs: []
  type: TYPE_NORMAL
- en: Sets the video to play over and over
  prefs: []
  type: TYPE_NORMAL
- en: <dfn class="keep-together">`muted`</dfn>
  prefs: []
  type: TYPE_NORMAL
- en: Mutes the audio output
  prefs: []
  type: TYPE_NORMAL
- en: <dfn class="keep-together">`poster`</dfn>
  prefs: []
  type: TYPE_NORMAL
- en: Lets you choose an image to display where the video will play
  prefs: []
  type: TYPE_NORMAL
- en: <dfn class="keep-together">`preload`</dfn>
  prefs: []
  type: TYPE_NORMAL
- en: Causes the video to begin loading before the user selects Play
  prefs: []
  type: TYPE_NORMAL
- en: <dfn class="keep-together">`src`</dfn>
  prefs: []
  type: TYPE_NORMAL
- en: Specifies the source location of a video file
  prefs: []
  type: TYPE_NORMAL
- en: <dfn class="keep-together">`type`</dfn>
  prefs: []
  type: TYPE_NORMAL
- en: Specifies the codec used in creating the video
  prefs: []
  type: TYPE_NORMAL
- en: <dfn class="keep-together">`width`</dfn>
  prefs: []
  type: TYPE_NORMAL
- en: Specifies the width at which to display the video
  prefs: []
  type: TYPE_NORMAL
- en: If you wish to control video playback from JavaScript, you can do so using code
    such as that in [Example 27-4](#controlling_video_playback_from_javascri) (with
    the additional code required highlighted in bold), with the results shown in [Figure 27-4](#video-with-buttons).
  prefs: []
  type: TYPE_NORMAL
- en: Example 27-4\. Controlling video playback from JavaScript
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This code is just like that for controlling audio from JavaScript. Simply call
    the `play` and/or `pause` methods of the `myvideo` object to play and pause the
    video.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/pmj6_2704.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 27-4\. JavaScript is being used to control the video
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Using the information in this chapter, you will be able to embed any audio and
    video you like on almost all browsers and platforms without worrying about whether
    users may or may not be able to play it.
  prefs: []
  type: TYPE_NORMAL
- en: In the following chapter, I’ll demonstrate the use of a number of other HTML5
    features, including geolocation and local storage.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which two HTML element tags are used to insert audio and video into an HTML5
    document?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which two compressed, lossy audio codecs should you offer (or choose between)
    to guarantee playability on all major platforms?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which methods can you call to play and pause HTML5 media playback?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What type of format is FLAC?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which two video codecs should you choose between (or offer) to guarantee playability
    on all major platforms?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: See [“Chapter 27 Answers”](app01_split_026.xhtml#chapter_27_answers) in the
    [Appendix A](app01_split_000.xhtml#solutions_to_the_chapter_questions) for the
    answers to these questions.
  prefs: []
  type: TYPE_NORMAL
