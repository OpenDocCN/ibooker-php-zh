- en: Chapter 29\. Bringing It All Together
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第29章 统筹全局
- en: Now that you’ve reached the end of this book, your first milestone along the
    path of the hows, whys, and wherefores of dynamic web programming, I want to leave
    you with a real example that you can sink your teeth into. In fact, it’s a collection
    of examples, because I’ve put together a simple social networking project comprising
    all the main features you’d expect from such a site, or more to the point, such
    a web app.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经读到了本书的末尾，在动态网页编程的各种方法、原理和应用的道路上迈出了第一个里程碑，我想给你留下一个真实的例子，让你能够深入理解。事实上，它是一个例子的集合，因为我组建了一个简单的社交网络项目，包括所有你期望在这样一个站点上看到的主要功能，更重要的是，这样一个Web应用程序。
- en: Across the various files, there are examples of MySQL table creation and database
    access, CSS, file inclusion, session control, DOM access, asynchronous calls,
    event and error handling, file uploading, image manipulation, the HTML5 canvas,
    and a whole lot more.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在各种文件中，有MySQL表的创建和数据库访问、CSS、文件包含、会话控制、DOM访问、异步调用、事件和错误处理、文件上传、图像处理、HTML5画布等示例。
- en: Each example file is complete and self-contained yet works with all the others
    to build a fully working social networking site, even including a stylesheet you
    can modify to completely change the look and feel of the project. Being small
    and light, the end product is particularly usable on mobile platforms such as
    a smartphone or tablet but will run equally well on a full-size desktop computer.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 每个示例文件都是完整的、独立的，但与其他文件一起工作，构建一个完全可用的社交网络站点，甚至包括一个可以修改以完全改变项目外观和感觉的样式表。由于体积小巧，最终产品特别适用于智能手机或平板电脑等移动平台，但同样可以在全尺寸桌面计算机上运行良好。
- en: And you should find that, by utilizing the power of both jQuery and jQuery Mobile,
    the code runs fast, is easy to use, adapts itself well to all environments, and
    looks good. As an exercise, you may wish to adapt the code further, perhaps including
    utilizing React in some way.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 并且你会发现，通过充分利用jQuery和jQuery Mobile的强大功能，代码运行速度快，易于使用，适应所有环境，并且外观优美。作为练习，你可能希望进一步调整代码，也许包括某种方式使用React。
- en: That said, I have tried to keep this code as slimmed-down as possible to keep
    it easy to follow. Consequently, there’s a great deal of improvement that could
    be made to it, such as enhancing security by storing hashes (the fixed-length
    output of irreversible one-way functions) instead of unencrypted passwords, and
    smoother handling of some of the transitions between being logged on and off—but
    let’s leave those as the proverbial exercises for the reader, particularly since
    there are no questions at the end of this chapter. (Well, just the one!)
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，我已尽可能简化这段代码，以便易于理解。因此，它有很大的改进空间，例如通过存储哈希（不可逆单向函数的固定长度输出）来增强安全性，而不是未加密的密码，并且更顺畅地处理登录和注销之间的过渡——但让我们将这些留给读者作为传说中的练习，尤其是本章末尾没有问题。（嗯，就一个！）
- en: I leave it up to you to take any pieces of this code you think you can use and
    expand on them for your own purposes. Perhaps you may even wish to build on these
    files to create a social networking site of your own.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我将这段代码的任何部分留给你，你认为可以使用并扩展为自己的目的。也许你甚至希望在这些文件的基础上创建一个属于自己的社交网络站点。
- en: Designing a Social Networking App
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计社交网络应用程序
- en: 'Before writing any code, I sat down and came up with several things that I
    decided were essential to such an app. These included the following:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写任何代码之前，我坐下来并想出了几个我认为对这样一个应用程序至关重要的事物。这些包括以下内容：
- en: A signup process
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注册流程
- en: A login form
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 登录表单
- en: A logout facility
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注销设施
- en: Session control
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 会话控制
- en: User profiles with uploaded thumbnails
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户配置文件及其上传的缩略图
- en: A member directory
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 成员目录
- en: Adding members as friends
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加成员作为好友
- en: Public and private messaging between members
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 成员之间的公共和私人消息传递
- en: Styling the project
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目样式化
- en: I decided to name the project *Robin’s Nest*; if you use this code, you will
    need to modify the name and logo in the *index.php* and *header.php* files.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我决定将项目命名为*Robin's Nest*；如果你使用这段代码，你需要在*index.php*和*header.php*文件中修改名称和标志。
- en: On the Website
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在网站上
- en: All the examples in this chapter can be found in [my GitHub repository](https://github.com/RobinNixon/lpmj6), where
    you can download an archive file, which you should extract to a suitable location
    on your computer.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的所有示例都可以在[我的GitHub存储库](https://github.com/RobinNixon/lpmj6)中找到，您可以下载一个存档文件，应将其解压到计算机上适当的位置。
- en: Of particular interest to this chapter, within the *ZIP* file, you’ll find a
    folder called *robinsnest*, in which all the following examples have been saved
    with the correct filenames required by this sample application. This means you
    can easily copy them all to your web development folder to try them out.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: functions.php
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s jump right into the project, starting with [Example 29-1](#functionsdotphp-id00132),
    *functions.php*, the include file for the main functions. This file contains a
    little more than just the functions, though, because I have added the database
    login details here instead of using yet another separate file. The first four
    lines of code define the host and name of the database to use, as well as the
    username and password.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, in this file the MySQL username is set to *robinsnest*, and the
    database used by the program is also called *robinsnest*. [Chapter 8](ch08.xhtml#introduction_to_mysql)
    provides detailed instructions on how to create a new user and/or database, but
    to recap, first create a new database called *robinsnest* by entering a MySQL
    command prompt and typing this:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then you can create a user called *robinsnest* capable of accessing this database
    like this:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Obviously you would use a much more secure password for this user than *password*,
    but for the sake of simplicity, this is the password used in these examples—just
    make sure you change it if you use any of this code on a production site.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: The Functions
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The project uses five main functions:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: <dfn class="keep-together">`createTable`</dfn>
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: Checks whether a table already exists and, if not, creates it
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: <dfn class="keep-together">`queryMysql`</dfn>
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: Issues a query to MySQL, outputting an error message if it fails
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: <dfn class="keep-together">`destroySession`</dfn>
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: Destroys a PHP session and clears its data to log users out
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: <dfn class="keep-together">`sanitizeString`</dfn>
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: Removes potentially malicious code or tags from user input
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: <dfn class="keep-together">`showProfile`</dfn>
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: Displays the user’s image and “about me” message if they have one
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: The behavior of all of these should be obvious to you by now, with the possible
    exception of `showProfile`, which looks for an image of the name *<user.jpg>*
    (where *<user>* is the username of the current user) and, if it finds it, displays
    it. It also displays any “about me” text the user may have saved.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: I have ensured that error handling is in place for all the functions that need
    it so that they can catch any typographical or other errors you may introduce
    and generate error messages. However, if you use any of this code on a production
    server, you will want to provide your own error-handling routines to make the
    code more user-friendly.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: So, type in [Example 29-1](#functionsdotphp-id00132) and save it as *functions.php*
    (or download it from the companion website), and you’ll be ready to move on to
    the next section.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: Example 29-1\. functions.php
  id: totrans-44
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note
  id: totrans-46
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: If you’ve read previous editions of this book, in which these examples used
    the old `mysql` extension, and later on `mysqli`, you will see I have now moved
    on again to the best solution so far, which is `PDO`.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您曾阅读本书的早期版本，在这些示例中使用了旧的`mysql`扩展名，后来改为`mysqli`，您现在将看到我再次转向到目前为止最好的解决方案，即`PDO`。
- en: To reference the MySQL database using `PDO`, you must apply the `global` keyword
    in the `queryMysql` and `sanitizeString` functions, to allow them to use the value
    in `$PDO`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用`PDO`引用MySQL数据库，必须在`queryMysql`和`sanitizeString`函数中应用`global`关键字，以允许它们使用`$PDO`的值。
- en: header.php
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[头文件](#headerdotphp-id00133)'
- en: For uniformity, each page of the project needs to have access to the same set
    of features. Therefore, I placed these things in [Example 29-2](#headerdotphp-id00133),
    *header.php*. This is the file that is actually included by the other files. It
    includes *functions.php*. This means that only a single `require_once` is needed
    in each file.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持项目的统一性，项目的每个页面都需要访问相同的功能集。因此，我将这些内容放在了*header.php*（[示例 29-2](#headerdotphp-id00133)）中。这个文件实际上是其他文件所包含的文件。它包含了*functions.php*。这意味着每个文件只需要一次`require_once`。
- en: '*header.php* starts by calling the function `session_start`. As you’ll recall
    from [Chapter 13](ch13.xhtml#cookiescomma_sessionscomma_and_authentic), this sets
    up a session that will remember certain values we want stored across different
    PHP files. In other words, it represents a visit by a user to the site, and it
    can time out if the user ignores the site for a period of time.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '*header.php*从调用`session_start`函数开始。正如您在[第13章](ch13.xhtml#cookiescomma_sessionscomma_and_authentic)中回忆的那样，这将设置一个会话，它将记住我们希望跨不同PHP文件存储的某些值。换句话说，它代表用户对站点的访问，并且如果用户在一段时间内忽略站点，则会超时。'
- en: With the session started, the program then outputs the HTML needed to set up
    each web page, including loading stylesheets and the various JavaScript libraries
    required. After this the file of functions (*functions.php*) is included, and
    the default string of “Welcome Guest” is assigned to `$userstr`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 会话开始后，程序输出所需的HTML来设置每个网页，包括加载样式表和各种所需的JavaScript库。在此之后，包含函数文件（*functions.php*）并将默认字符串“Welcome
    Guest”分配给`$userstr`。
- en: After this a random string value is assigned to the variable `$randstr`, used
    throughout the app for appending to URLs so that every single page loaded looks
    unique to the jQuery sliding interface. Without this, pages that look like they
    should not have changed to jQuery would be fetched from its cache, leading to
    the best performance possible. That’s fine on a set of pages with static information,
    but this is a dynamic app where information on the pages changes all the time,
    so we must ensure each new page request comes from the server and not the cache.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在此之后，随机字符串值被分配给变量`$randstr`，在整个应用程序中用于追加到URL上，以便每个加载的页面看起来对jQuery滑动界面都是唯一的。如果没有这样做，看起来不应该改变到jQuery的页面将从其缓存中获取，这将导致尽可能好的性能。在具有静态信息的一组页面上，这是可以接受的，但这是一个动态应用程序，页面信息随时会变化，因此我们必须确保每个新的页面请求来自服务器而不是缓存。
- en: Next the code checks whether the session variable `user` is currently assigned
    a value. If so, a user has already logged in, so the variable `$loggedin` is set
    to `TRUE` and the username is retrieved from the session variable `user` into
    the PHP variable `$user`, with `$userstr` updated appropriately. If the user has
    not yet logged in, then `$loggedin` is set to `FALSE`.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，代码检查会话变量`user`当前是否被赋值。如果是，表示用户已经登录，所以变量`$loggedin`被设置为`TRUE`，并且用户名从会话变量`user`中检索到PHP变量`$user`中，并相应地更新了`$userstr`。如果用户尚未登录，则`$loggedin`被设置为`FALSE`。
- en: Next, some HTML is output welcoming the user (or guest if not yet logged in),
    and the `<div>` elements required by jQuery Mobile for the page’s header and content
    sections are output.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，一些HTML输出欢迎用户（如果尚未登录则为访客），并输出jQuery Mobile页面头部和内容部分所需的`<div>`元素。
- en: After this, using the value of `$loggedin`, an `if` block displays one of two
    sets of menus. The non-logged-in set simply offers options of Home, Sign Up, and
    Log In, whereas the logged-in version offers full access to the app’s features.
    The buttons are styled using jQuery Mobile notation, such as `data-role='button'`
    to display an element as a button, `data-inline='true'` to display elements inline
    (like a `<span>` element), and `data-transition="slide"` to make new pages slide
    into view when clicked, as described in [Chapter 23](ch23.xhtml#introduction_to_jquery_mobile).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在此之后，根据`$loggedin`的值，`if`块将显示两套菜单中的一套。非登录集合仅提供主页、注册和登录选项，而登录版本则提供对应用程序功能的完全访问权限。按钮使用jQuery
    Mobile标记进行样式设置，例如`data-role='button'`用于将元素显示为按钮，`data-inline='true'`用于内联显示元素（类似于`<span>`元素），`data-transition="slide"`用于在单击时使新页面滑入视图中，详见[第
    23 章](ch23.xhtml#introduction_to_jquery_mobile)。
- en: You will notice the use of `r=$randstr` in these URLs, as previously described,
    to ensure every page is fetched from the server and not jQuery’s cache.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些URL中，您将注意到`r=$randstr`的使用，如前所述，以确保从服务器获取每个页面，而不是从jQuery的缓存中获取。
- en: The additional styling applied to this file is in the file *styles.css* ([Example 29-13](#stylesdotcss-id00145),
    detailed at the end of this chapter).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件应用的附加样式位于文件*styles.css*（详见[示例 29-13](#stylesdotcss-id00145)，本章末详述）中。
- en: Example 29-2\. header.php
  id: totrans-59
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 29-2\. header.php
- en: '[PRE3]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: setup.php
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: setup.php
- en: With the pair of included files written, it’s now time to set up the MySQL tables
    they will use. We do this with [Example 29-3](#setupdotphp-id00134), *setup.php*,
    which you should type and load into your browser before calling up any other files;
    otherwise, you’ll get numerous MySQL errors.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 随着编写的这对包含文件，现在是时候设置它们将使用的MySQL表格了。我们可以使用[示例 29-3](#setupdotphp-id00134)，*setup.php*来实现这一点，您应该在调用任何其他文件之前在浏览器中输入并加载它，否则将会出现大量的MySQL错误。
- en: 'The tables created are short and sweet, and have the following names and columns:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 创建的表格简洁明了，具有以下名称和列：
- en: '*members*'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '*members*'
- en: username *user* (indexed), password *pass*
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 用户名 *user*（已索引）、密码 *pass*
- en: '*messages*'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '*messages*'
- en: ID *id* (indexed), author *auth* (indexed), recipient *recip*, message type
    *pm*, message *message*
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: ID *id*（已索引）、作者 *auth*（已索引）、接收者 *recip*、消息类型 *pm*、消息 *message*
- en: '*friends*'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '*friends*'
- en: username *user* (indexed), friend’s username *friend*
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 用户名 *user*（已索引）、朋友的用户名 *friend*
- en: '*profiles*'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '*profiles*'
- en: username *user* (indexed), “about me” *text*
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 用户名 *user*（已索引）、“关于我” *text*
- en: Because the `createTable` function first checks whether a table already exists,
    this program can be safely called multiple times without generating any errors.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`createTable`函数首先检查表是否已经存在，因此可以安全地多次调用此程序而不会生成任何错误。
- en: It is very likely that you will need to add many more columns to these tables
    if you choose to expand this project. If so, bear in mind that you may need to
    issue a MySQL `DROP TABLE` command before re-creating a table.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您选择扩展此项目，则很可能需要向这些表格添加更多列。如果是这样，请记住在重新创建表格之前可能需要发出MySQL的`DROP TABLE`命令。
- en: Example 29-3\. setup.php
  id: totrans-74
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 29-3\. setup.php
- en: '[PRE4]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Warning
  id: totrans-76
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: For this example to work, you must first ensure that you have already created
    the database specified in the variable `$data` in [Example 29-1](#functionsdotphp-id00132)
    and also have granted access to it by the user given the name in `$user`, with
    the password in `$pass`.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 要使此示例有效，您必须首先确保已创建变量`$data`中指定的数据库，详情请参见[示例 29-1](#functionsdotphp-id00132)，并且已授予给定名称的用户（在`$user`中）及其密码（在`$pass`中）访问权限。
- en: index.php
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: index.php
- en: This file is trivial but necessary nonetheless to give the project a home page.
    All it does is display a simple welcome message. In a finished application, this
    would be where you sell the virtues of your site to encourage signups.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件虽然微不足道，但却是必不可少的，以便为项目提供一个首页。它所做的只是显示一个简单的欢迎消息。在完成的应用程序中，这将是您向用户推销站点优点以鼓励注册的地方。
- en: Incidentally, seeing as we have already set up all the MySQL tables and created
    the included files, you can now load [Example 29-4](#indexdotphp-id00135), *index.php*,
    into your browser to get your first peek at the new application. It should look
    like [Figure 29-1](#the-main-page-of-the-app).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便说一句，由于我们已经设置好了所有MySQL表格并创建了包含的文件，您现在可以加载[示例 29-4](#indexdotphp-id00135)，*index.php*，到您的浏览器中，以便首次查看新应用程序。它应该看起来像[图
    29-1](#the-main-page-of-the-app)。
- en: Example 29-4\. index.php
  id: totrans-81
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 29-4\. index.php
- en: '[PRE5]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![](Images/pmj6_2901.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/pmj6_2901.png)'
- en: Figure 29-1\. The main page of the app
  id: totrans-84
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 29-1\. 应用程序的主页
- en: signup.php
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: signup.php
- en: Now we need a module to enable users to join our new social network, and that’s
    [Example 29-5](#signupdotphp-id00137), *signup.php*. This is a slightly longer
    program, but you’ve seen all its parts before.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start by looking at the end block of HTML. This is a simple form that
    allows a username and password to be entered. But note the use of the empty `<div>`
    given the `id` of `used`. This will be the destination of the asynchronous call
    in this program that checks whether a desired username is available. See [Chapter 18](ch18.xhtml#using_ajax)
    for a complete description of how this works.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: Checking for Username Availability
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now go back to the program start and you’ll see a block of JavaScript that starts
    with the function `checkUser`. This is called by the JavaScript `onBlur` event
    when focus is removed from the `username` field of the form. First it sets the
    contents of the `<div>` I mentioned (with the `id` of `used`) to a nonblank space
    `&nbsp;`, which clears it in case it previously had a value.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: Next a request is made to the program *checkuser.php*, which reports whether
    the username in `user` is available. The returned result of the asynchronous call
    (performed using jQuery), a friendly message, is then placed in the `used` `<div>`.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: After the JavaScript section comes some PHP code that you should recognize from
    the discussion of form validation in [Chapter 17](ch17_split_000.xhtml#javascript_and_php_validation_and_error).
    This section also uses the `sanitizeString` function to remove potentially malicious
    characters before looking up the username in the database and, if it’s not already
    taken, inserting the new username `$user` and password `$pass`.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: Logging In
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Upon successfully signing up, the user is then prompted to log in. A more fluid
    response at this point might be to automatically log in a newly created user,
    but because I don’t want to overly complicate the code, I have kept the signup
    and login modules separate. You can easily implement this if you want to, however.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: This file uses the CSS class `fieldname` to arrange the form fields, aligning
    them neatly under each other in columns. When loaded into a browser (and in conjunction
    with *checkuser.php*, shown later), this program will look like [Figure 29-2](#the-signup-page),
    where you can see that the asynchronous call has identified that the username
    *Robin* is available. If you would like the password field to show only asterisks,
    change its type from `text` to `password`.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you must run *setup.php* before you can run any of these other
    PHP program files.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  id: totrans-96
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: On a production server, I wouldn’t recommend storing user passwords in the clear,
    as I’ve done here for reasons of space and simplicity. Instead, you should salt
    them and store them as one-way hash strings. See [Chapter 13](ch13.xhtml#cookiescomma_sessionscomma_and_authentic)
    for more details on how to do this.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/pmj6_2902.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
- en: Figure 29-2\. The signup page
  id: totrans-99
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Example 29-5\. signup.php
  id: totrans-100
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: checkuser.php
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To go with *signup.php*, here’s [Example 29-6](#checkuserdotphp-id00138), *checkuser.php*,
    which looks up a username in the database and returns a string indicating whether
    it has already been taken. Because it relies on the functions `sanitizeString`
    and `queryMysql`, the program first includes the file *functions.php*.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 配合*signup.php*，这里是[示例 29-6](#checkuserdotphp-id00138)，*checkuser.php*，它在数据库中查找用户名并返回指示它是否已经被使用的字符串。因为它依赖于`sanitizeString`和`queryMysql`函数，程序首先包含文件*functions.php*。
- en: Then, if the `$_POST` variable `user` has a value, the function looks it up
    in the database and, depending on whether it exists as a username, outputs either
    “Sorry, the username *‘user’* is taken” or “The username *‘user’* is available.”
    Just checking the value returned by the function call to `$result->rowCount` is
    sufficient for this, as it will return `0` if the name is not found or `1` if
    it is found.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，如果`$_POST`变量`user`有值，函数将在数据库中查找它，并根据它是否作为用户名存在输出“对不起，用户名*‘user’*已被使用”或“用户名*‘user’*可用”。只需检查函数调用返回的值`$result->rowCount`即可，如果未找到名称，则返回`0`，如果找到，则返回`1`。
- en: The HTML entities `&#x2718;` and `&#x2714;` are also used to preface the string
    with either a cross or a checkmark, and the string will be displayed in either
    red for the class `taken` or green for the class `available`, as defined in *styles.css*,
    shown later in this chapter.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: HTML实体`&#x2718;`和`&#x2714;`也用于在字符串前面加上红叉或绿勾，并且根据*styles.css*中定义的`taken`类显示红色或`available`类显示绿色，本章后面将显示。
- en: Example 29-6\. checkuser.php
  id: totrans-106
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 29-6\. checkuser.php
- en: '[PRE7]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: login.php
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: login.php
- en: With users now able to sign up on the site, [Example 29-7](#logindotphp-id00139),
    *login.php*, provides the code needed to let them log in. Like the signup page,
    it features a simple HTML form and some basic error checking, as well as uses
    `sanitizeString` before querying the MySQL database.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在用户可以在网站上注册了，[示例 29-7](#logindotphp-id00139)，*login.php*提供了让他们登录所需的代码。像注册页面一样，它具有简单的HTML表单和一些基本的错误检查，还使用`sanitizeString`在查询MySQL数据库之前。
- en: The main thing to note here is that, upon successful verification of the username
    and password, the session variables `user` and `pass` are given the username and
    password values. As long as the current session remains active, these variables
    will be accessible by all the programs in the project, allowing them to automatically
    provide access to logged-in users.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里需要注意的主要是，一旦验证用户名和密码成功，会话变量`user`和`pass`将分别被赋予用户名和密码的值。只要当前会话保持活动状态，这些变量将被项目中的所有程序访问，从而允许它们自动为已登录用户提供访问权限。
- en: You may be interested in the use of the `die` function upon successfully logging
    in. This is there because it combines an `echo` and an `exit` command in one,
    thus saving a line of code. For styling, this (like most of the files) applies
    the class `main` to indent the content from the left-hand edge.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果成功登录，您可能会对`die`函数的使用感兴趣。这是因为它将`echo`和`exit`命令合并在一起，从而节省了一行代码。为了样式化，这个文件（像大多数文件一样）将类`main`应用于内容，以使其从左侧边缘缩进。
- en: When you call this program up in your browser, it should look like [Figure 29-3](#the-login-page).
    Note how the input type of `password` has been used here to mask the password
    with asterisks to prevent it from being viewed by anyone looking over the user’s
    shoulder.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 当您在浏览器中调用此程序时，它应该看起来像[图29-3](#the-login-page)。注意在此处使用了`password`的输入类型，以用星号掩盖密码，防止任何人看到用户的密码。
- en: Example 29-7\. login.php
  id: totrans-113
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 29-7\. login.php
- en: '[PRE8]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![](Images/pmj6_2903.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/pmj6_2903.png)'
- en: Figure 29-3\. The login page
  id: totrans-116
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图29-3\. 登录页面
- en: profile.php
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: profile.php
- en: One of the first things that new users may want to do after signing up and logging
    in is to create a profile, which can be done via [Example 29-8](#profiledotphp-id00140),
    *profile.php*. I think you’ll find some interesting code here, such as routines
    to upload, resize, and sharpen images.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在注册并登录后，新用户可能希望做的第一件事之一是创建个人资料，这可以通过[示例 29-8](#profiledotphp-id00140)，*profile.php*完成。我认为您会在这里找到一些有趣的代码，比如用于上传、调整大小和锐化图像的例程。
- en: Let’s start by looking at the main HTML at the end of the code. This is like
    the forms you’ve just seen, but this time it has the parameter `enctype='multipart/form-data'`.
    This allows us to send more than one type of data at a time, enabling the posting
    of an image as well as some text. There’s also an input type of `file`, which
    creates a Browse button that a user can click to select a file to be uploaded.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从代码末尾的主要HTML开始。这与您刚刚看到的表单类似，但这次有一个参数`enctype='multipart/form-data'`。这使我们能够同时发送多种类型的数据，允许上传图片以及一些文本。还有一个`file`类型的输入，它创建一个“浏览”按钮，用户可以单击以选择要上传的文件。
- en: When the form is submitted, the code at the start of the program is executed.
    The first thing it does is ensure that a user is logged in before allowing program
    execution to proceed. Only then is the page heading displayed.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 当表单提交时，程序开始时执行的代码。它首先确保用户已登录，然后才允许程序执行继续。只有在这样做后才显示页面标题。
- en: Note
  id: totrans-121
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: As described in [Chapter 23](ch23.xhtml#introduction_to_jquery_mobile), due
    to the way that jQuery Mobile uses asynchronous communication, it is not possible
    to upload files from HTML using it, unless you disable that feature by adding
    an attribute to the `<form>` element of `data-ajax='false'`. This will allow HTML
    file upload to proceed as normal, but you will lose the ability to perform page
    change animations.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如[第23章](ch23.xhtml#introduction_to_jquery_mobile)所述，由于jQuery Mobile使用异步通信的方式，使用HTML上传文件是不可能的，除非您通过向`<form>`元素添加属性`data-ajax='false'`来禁用该功能。这将允许HTML文件上传正常进行，但您将失去执行页面更改动画的能力。
- en: Adding the “About Me” Text
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加“关于我”的文本
- en: Next, the `$_POST` variable `text` is checked to see whether some text was posted
    to the program. If so, it is sanitized, and all long whitespace sequences (including
    carriage returns and line feeds) are replaced with single spaces. This function
    incorporates a double security check, ensuring that the user actually exists in
    the database and that no attempt at hacking can succeed before inserting this
    text into the database, where it will become the user’s “about me” details.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，检查`$_POST`变量`text`，看看是否有文本发布到程序中。如果有，将对其进行过滤，并将所有长的空白序列（包括换行符和回车符）替换为单个空格。此函数包含了双重安全检查，确保用户实际存在于数据库中，并且在将此文本插入数据库中成为用户的“关于我”详情之前，没有任何黑客尝试能够成功。
- en: If no text was posted, the database is queried to see whether any text already
    exists in order to prepopulate the `<textarea>` for the user to edit it.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有发布文本，则查询数据库以查看是否已存在任何文本，以便预填充用户编辑的`<textarea>`。
- en: Adding a Profile Image
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加个人资料图片
- en: Next we move on to the section where the `$_FILES` system variable is checked
    to see whether an image has been uploaded. If so, a string variable called `$saveto`
    is created, based on the user’s username followed by the extension *.jpg*. For
    example, a user called *Jill* will cause `$saveto` to have the value *Jill.jpg*.
    This is the file where the uploaded image will be saved for use in the user’s
    profile.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们转到检查`$_FILES`系统变量是否已上传图像的部分。如果是，则创建一个名为`$saveto`的字符串变量，基于用户的用户名后跟扩展名*.jpg*。例如，名为*Jill*的用户将导致`$saveto`具有值*Jill.jpg*。这是保存上传图像以供用户个人资料使用的文件。
- en: Following this, the uploaded image type is examined and is accepted only if
    it is a *.jpeg*, *.png*, or *.gif* image. Upon success, the variable `$src` is
    populated with the uploaded image using one of the `imagecreatefrom` functions,
    according to the image type uploaded. The image is now in a raw format that PHP
    can process. If the image is not of an allowed type, the flag `$typeok` is set
    to `FALSE`, preventing the final section of image upload code from being processed.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，检查上传的图像类型，并仅在它是*.jpeg*、*.png*或*.gif*图像时接受。成功后，使用一个`imagecreatefrom`函数之一将上传的图像填充到变量`$src`中，根据上传的图像类型。现在，该图像以PHP可处理的原始格式存在。如果图像不是允许的类型，则将标志`$typeok`设置为`FALSE`，防止处理图像上传代码的最后部分。
- en: Processing the Image
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理图像
- en: 'First, we store the image’s dimensions in `$w` and `$h` using the following
    statement, which is a quick way of assigning values from an array to separate
    variables:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们使用以下语句将图像的尺寸存储在`$w`和`$h`中，这是将数组中的值快速分配给单独变量的一种方法：
- en: '[PRE9]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Then, using the value of `$max` (which is set to `100`), we calculate new dimensions
    that will result in a new image of the same ratio but with no dimension greater
    than 100 pixels. This results in giving the variables `$tw` and `$th` the new
    values needed. If you want smaller or larger thumbnails, simply change the value
    of `$max` accordingly.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: Next, the function `imagecreatetruecolor` is called to create a new, blank canvas
    `$tw` wide and `$th` high in `$tmp`. Then `imagecopyresampled` is called to resample
    the image from `$src` to the new `$tmp`. Sometimes resampling images can result
    in a slightly blurred copy, so the next piece of code uses the `imageconvolution`
    function to sharpen the image up a bit.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the image is saved as a *.jpeg* file in the location defined by the
    variable `$saveto`, after which we remove both the original and the resized image
    canvases from memory using the `imagedestroy` function, returning the memory that
    was used.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: Displaying the Current Profile
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Last but not least, so that the user can see what the current profile looks
    like before editing it, the `showProfile` function from *functions.php* is called
    prior to outputting the form HTML. If no profile exists yet, nothing will be displayed.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: When a profile image is displayed, CSS is applied to it to provide a border,
    a shadow, and a margin to its right, to separate the profile text from the image.
    The result of loading [Example 29-8](#profiledotphp-id00140) into a browser is
    shown in [Figure 29-4](#editing-a-user-profile), where you can see that the `<textarea>`
    has been prepopulated with the “about me” text.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: Example 29-8\. profile.php
  id: totrans-138
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![](Images/pmj6_2904.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
- en: Figure 29-4\. Editing a user profile
  id: totrans-141
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: members.php
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using [Example 29-9](#membersdotphp-id00141), *members.php*, your users will
    be able to find other members and choose to add them as friends (or drop them
    if they are already friends). This program has two modes. The first lists all
    members and their relationships to you, and the second shows a user’s profile.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: Viewing a User’s Profile
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The code for the latter mode comes first, where a test is made for the variable
    `view`, retrieved from the `$_GET` array. If it exists, a user wants to view someone’s
    profile, so the program does that using the `showProfile` function, along with
    providing a couple of links to the user’s friends and messages.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: Adding and Dropping Friends
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After that, the two `$_GET` variables `add` and `remove` are tested. If one
    or the other has a value, it will be the username of a user to either add or drop
    as a friend. We achieve this by looking up the user in the MySQL *friends* table
    and either inserting the username or removing it from the table.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: And, of course, every posted variable is first passed through `sanitizeString`
    to ensure that it is safe to use with MySQL.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: Listing All Members
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The final section of code issues an SQL query to list all usernames. The code
    places the number returned in the variable `$num` before outputting the page heading.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的最后部分发出SQL查询来列出所有用户名。代码在输出页面标题之前将返回的数字放入变量`$num`中。
- en: A `for` loop then iterates through each and every member, fetching their details
    and then looking them up in the *friends* table to see if they are either being
    followed by or following the user. If someone is both a follower and a followee,
    they are classed as a mutual friend.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，`for`循环遍历每个成员，获取其详细信息，然后在*friends*表中查找他们，看他们是被用户关注还是正在关注用户。如果某人既是粉丝又是关注者，则被归类为共同朋友。
- en: The variable `$t1` is nonzero when the user is following another member, and
    `$t2` is nonzero when another member is following the user. Depending on these
    values, text is displayed after each username, showing the relationship (if any)
    to the current user.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户关注另一个成员时，变量`$t1`为非零值；当另一个成员关注用户时，变量`$t2`为非零值。根据这些值，在每个用户名后显示文本，显示与当前用户的关系（如果有的话）。
- en: Icons are also displayed to show the relationships. A double-pointing arrow
    means that the users are mutual friends, a left-pointing arrow indicates the user
    is following another member, and a right-pointing arrow indicates that another
    member is following the user.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 还显示图标以展示这些关系。双向箭头表示用户是共同朋友，左箭头表示用户正在关注另一个成员，右箭头表示另一个成员正在关注用户。
- en: Finally, depending on whether the user is following another member, a link is
    provided to either add or drop that member as a friend.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，根据用户是否在关注另一个成员，提供链接以添加或取消该成员作为朋友。
- en: When you call [Example 29-9](#membersdotphp-id00141) up in a browser, it will
    look like [Figure 29-5](#using-the-members-module). Note how the user is invited
    to “follow” a nonfollowing member, but if the member is already following the
    user, a “recip” link to reciprocate the friendship is offered. In the case of
    a user already following another member, the user can select “drop” to end the
    following.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 当在浏览器中调用[示例 29-9](#membersdotphp-id00141)时，显示效果类似于[图 29-5](#using-the-members-module)。请注意用户被邀请“关注”一个未关注的成员，但如果成员已经在关注用户，则会提供一个“回礼”链接以回报友谊。如果用户已经在关注另一个成员，则用户可以选择“取消”来结束关注。
- en: '![](Images/pmj6_2905.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/pmj6_2905.png)'
- en: Figure 29-5\. Using the members module
  id: totrans-157
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图29-5\. 使用成员模块
- en: Note
  id: totrans-158
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: On a production server, there could be thousands or even hundreds of thousands
    of users, so you would substantially modify this program to include support for
    searching the “about me” text, paging the output a screen at a time, and so on.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在生产服务器上，可能会有数千甚至数十万的用户，因此您将大幅修改此程序，以支持搜索“关于我”文本、分页输出等。
- en: Example 29-9\. members.php
  id: totrans-160
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 29-9\. members.php
- en: '[PRE11]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: friends.php
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: friends.php
- en: The module that shows a user’s friends and followers is [Example 29-10](#friendsdotphp-id00142),
    *friends.php*. This interrogates the *friends* table just like the *members.php*
    program but only for a single user. It then shows all of that user’s mutual friends
    and followers along with the people they are following.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 显示用户的朋友和粉丝的模块是[示例 29-10](#friendsdotphp-id00142)，*friends.php*。这个程序像*members.php*一样查询*friends*表，但只针对单个用户。然后显示所有该用户的共同朋友和粉丝，以及他们正在关注的人。
- en: 'All the followers are saved into an array called `$followers`, and all the
    people being followed are placed in an array called `$following`. Then a neat
    piece of code is used to extract all of those who are both following and followed
    by the user, like this:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 所有粉丝都保存在名为`$followers`的数组中，所有正在关注的人都放在名为`$following`的数组中。然后使用一段整洁的代码来提取所有既是粉丝又被用户关注的人，如下所示：
- en: '[PRE12]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The `array_intersect` function extracts all members common to both arrays and
    returns a new array containing only those people. This array is then stored in
    `$mutual`. Now it’s possible to use the `array_diff` function for each of the
    `$followers` and `$following` arrays to keep only those people who are *not* mutual
    friends, like this:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 函数`array_intersect`提取两个数组中共同的所有成员，并返回一个新数组，其中仅包含这些人。然后可以使用`array_diff`函数来分别处理`$followers`和`$following`数组，只保留*不是*共同朋友的人，如下所示：
- en: '[PRE13]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This results in the array `$mutual` containing only mutual friends, `$followers`
    containing only followers (and no mutual friends), and `$following` containing
    only people being followed (and no mutual friends).
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 这导致数组`$mutual`仅包含共同的朋友，`$followers`仅包含粉丝（没有共同朋友），`$following`仅包含正在关注的人（没有共同朋友）。
- en: Now that we’re armed with these arrays, it’s a simple matter to separately display
    each category of members, as can be seen in [Figure 29-6](#displaying-a-users-followers).
    The PHP `sizeof` function returns the number of elements in an array; here I use
    it just to trigger code when the size is nonzero (that is, when friends of that
    type exist). Note how, by using the variables `$name1`, `$name2`, and `$name3`
    in the relevant places, the code can tell when you’re looking at your own friends
    list, using the words *Your* and *You are*, instead of simply displaying the username.
    The commented line can be uncommented if you wish to display the user’s profile
    information on this screen.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: Example 29-10\. friends.php
  id: totrans-170
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '![](Images/pmj6_2906.png)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
- en: Figure 29-6\. Displaying a user’s friends and followers
  id: totrans-173
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: messages.php
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The last of the main modules is [Example 29-11](#messagesdotphp-id00143), *messages.php*.
    The program starts by checking whether a message has been posted in the variable
    `text`. If so, it is inserted into the *messages* table. At the same time, the
    value of `pm` is also stored. This indicates whether a message is private or public.
    A `0` represents a public message, and `1` is private.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: Next, the user’s profile and a form for entering a message are displayed, along
    with radio buttons to choose between a private or public message. After this,
    all the messages are shown, depending on whether they are private or public. If
    they are public, all users can see them, but private messages are visible only
    to the sender and recipient. This is all handled by a couple of queries to the
    MySQL database. Additionally, when a message is private, it is introduced by the
    word *whispered* and shown in italic.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the program displays a couple of links to refresh the messages (in
    case another user has posted one in the meantime) and to view the user’s friends.
    The trick using the variables `$name1` and `$name2` is again used so that when
    you view your own profile, the word *Your* is displayed instead of the username.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: Example 29-11\. messages.php
  id: totrans-178
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: You can see the result of viewing this program with a browser in [Figure 29-7](#the-messaging-module).
    Note how users viewing their own messages are provided with links to erase any
    they don’t want to keep. Also of note is how jQuery Mobile’s styling of radio
    buttons has been implemented for selecting between sending a private or a public
    message. How this works is explained in [Chapter 23](ch23.xhtml#introduction_to_jquery_mobile).
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/pmj6_2907.png)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
- en: Figure 29-7\. The messaging module
  id: totrans-182
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: logout.php
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The final ingredient in our social networking recipe is [Example 29-12](#logoutdotphp-id00144),
    *logout.php*, the logout page that closes a session and deletes any associated
    data and cookies. The result of calling up this program is shown in [Figure 29-8](#the-logout-page),
    where the user is now asked to click a link that will take them to the not logged-in
    home page and remove the logged-in links from the top of the screen. Of course,
    you could write a JavaScript or PHP redirect to do this (probably a good idea
    if you wish to keep logout looking clean).
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/pmj6_2908.png)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
- en: Figure 29-8\. The logout page
  id: totrans-186
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Example 29-12\. logout.php
  id: totrans-187
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: styles.css
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The stylesheet used for this project is shown in [Example 29-13](#stylesdotcss-id00145).
    There are a number of sets of declarations, as follows:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: <dfn class="keep-together">`*`</dfn>
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: Sets the default font family and size for the project using the universal selector.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: <dfn class="keep-together">`body`</dfn>
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: Sets the width of the project window, centers it horizontally, specifies a background
    color, and gives it a border.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: <dfn class="keep-together">`html`</dfn>
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: Sets the background color of the HTML section.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: <dfn class="keep-together">`img`</dfn>
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: Gives all images a border, a shadow, and a right-hand margin.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: <dfn class="keep-together">`.username`</dfn>
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: Centers the username and chooses the font family, size, color, background, and
    padding with which to display it.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: <dfn class="keep-together">`.info`</dfn>
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: This class is used for displaying important information. It sets a background
    and foreground text color, applies a border and padding, and indents elements
    that employ it.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: <dfn class="keep-together">`.center`</dfn>
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: This class is used for centering the contents of a `<div>` element.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: <dfn class="keep-together">`.subhead`</dfn>
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: This class emphasizes sections of text.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: <dfn class="keep-together">`.taken`, `.available`, `.error`, and `.whisper`</dfn>
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: These declarations set the colors and font styles to be used for displaying
    different types of information.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: <dfn class="keep-together">`#logo`</dfn>
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: Styles the logo text as a fallback in case a non-HTML5 browser is in use and
    the canvas logo doesn’t get created.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: <dfn class="keep-together">`#robin`</dfn>
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: Aligns the image of the robin in the page title.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: <dfn class="keep-together">`#used`</dfn>
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: Ensures the element that is populated by the *checkuser.php* asynchronous call
    if a username is already taken is not too close to the field above it.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: Example 29-13\. styles.css
  id: totrans-215
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: javascript.js
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Finally, there’s the JavaScript file (see [Example 29-14](#javascriptdotjs-id00146)),
    which contains the `O`, `S`, and `C` functions used throughout this book.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: Example 29-14\. javascript.js
  id: totrans-219
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: And that, as they say, is that. If you write anything based on this code or
    any other examples in this book, or have gained in any other way from it, then
    I am glad to have been of help, and thank you for reading this book.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Have you enjoyed learning from this book?
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: See [“Chapter 29 Answers”](app01_split_028.xhtml#chapter_29_answers) in the
    [Appendix A](app01_split_000.xhtml#solutions_to_the_chapter_questions) for the
    answer to this question.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 查看[“第29章答案”](app01_split_028.xhtml#chapter_29_answers)，在[附录 A](app01_split_000.xhtml#solutions_to_the_chapter_questions)中找到这个问题的答案。
