["```php\n<book isbn=\"1-56592-610-2\">\n <title>Programming PHP</title>\n <authors>\n <author>Rasmus Lerdorf</author>\n <author>Kevin Tatroe</author>\n <author>Peter MacIntyre</author>\n </authors>\n</book>\n```", "```php\n<br>\n```", "```php\n<br />\n```", "```php\n<book><title>Programming PHP</title></book>\n```", "```php\n<book><title>Programming PHP</book></title>\n```", "```php\n<?xml version=\"1.0\" ?>\n```", "```php\n<?xml version=\"1.0\" ?>\n<library>\n <title>Programming PHP</title>\n <title>Programming Perl</title>\n <title>Programming C#</title>\n</library>\n```", "```php\n<?xml version=\"1.0\" ?>\n<title>Programming PHP</title>\n<title>Programming Perl</title>\n<title>Programming C#</title>\n```", "```php\n<!DOCTYPE rss PUBLIC 'My DTD Identifier' 'http://www.example.com/my.dtd'>\n```", "```php\necho '<?xml version=\"1.0\" encoding=\"ISO-8859-1\" ?>';\n```", "```php\n<?php\nheader('Content-Type: text/xml');\necho \"<?xml version=\\\"1.0\\\" encoding=\\\"ISO-8859-1\\\" ?>\";\n?>\n<!DOCTYPE rss PUBLIC \"-//Netscape Communications//DTD RSS 0.91//EN\"\n \"http://my.netscape.com/publish/formats/rss-0.91.dtd\">\n\n<rss version=\"0.91\">\n <channel>\n <?php\n // news items to produce RSS for\n $items = array(\n array(\n 'title' => \"Man Bites Dog\",\n 'link' => \"http://www.example.com/dog.php\",\n 'desc' => \"Ironic turnaround!\"\n ),\n array(\n 'title' => \"Medical Breakthrough!\",\n 'link' => \"http://www.example.com/doc.php\",\n 'desc' => \"Doctors announced a cure for me.\"\n )\n );\n\n foreach($items as $item) {\n echo \"<item>\\n\";\n echo \" <title>{$item['title']}</title>\\n\";\n echo \" <link>{$item['link']}</link>\\n\";\n echo \" <description>{$item['desc']}</description>\\n\";\n echo \" <language>en-us</language>\\n\";\n echo \"</item>\\n\\n\";\n } ?>\n </channel>\n</rss>\n```", "```php\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\" ?>\n<!DOCTYPE rss PUBLIC \"-//Netscape Communications//DTD RSS 0.91//EN\"\n \"http://my.netscape.com/publish/formats/rss-0.91.dtd\">\n<rss version=\"0.91\">\n <channel>\n<item>\n <title>Man Bites Dog</title>\n <link>http://www.example.com/dog.php</link>\n <description>Ironic turnaround!</description>\n <language>en-us</language>\n</item>\n\n<item>\n <title>Medical Breakthrough!</title>\n <link>http://www.example.com/doc.php</link>\n <description>Doctors announced a cure for me.</description>\n <language>en-us</language>\n</item>\n </channel>\n</rss>\n```", "```php\nxml_set_element_handler(*`parser`*, *`start_element`*, *`end_element`*);\n```", "```php\n*`startElementHandler`*(*`parser`*, *`element`*, *`&``attributes`*);\n```", "```php\nfunction startElement($parser, $name, $attributes) {\n $outputAttributes = array();\n\n if (count($attributes)) {\n foreach($attributes as $key => $value) {\n $outputAttributes[] = \"<font color=\\\"gray\\\">{$key}=\\\"{$value}\\\"</font>\";\n }\n }\n\n echo \"&lt;<b>{$name}</b> \" . join(' ', $outputAttributes) . '&gt;';\n}\n```", "```php\n*`endElementHandler`*(*`parser`*, *`element`*);\n```", "```php\nfunction endElement($parser, $name) {\n echo \"&lt;<b>/{$name}</b>&gt;\";\n}\n```", "```php\nxml_set_character_data_handler(*`parser`*, *`handler`*);\n```", "```php\n*`characterDataHandler`*(*`parser`*, *`cdata`*);\n```", "```php\nfunction characterData($parser, $data) {\n echo $data;\n}\n```", "```php\nxml_set_processing_instruction_handler(*`parser`*, *`handler`*);\n```", "```php\n<? *`target` `instructions`* ?>\n```", "```php\n*`processingInstructionHandler`*(*`parser`*, *`target`*, *`instructions`*);\n```", "```php\nfunction processing_instruction($parser, $target, $code) {\n if ($target === 'php') {\n eval($code);\n }\n}\n```", "```php\nxml_set_external_entity_ref_handler(*`parser`*, *`handler`*);\n```", "```php\n*`externalEntityHandler`*(*`parser`*, *`entity`*, *`base`*, *`system`*, *`public`*);\n```", "```php\nfunction externalEntityReference($parser, $names, $base, $systemID, $publicID) {\n if ($systemID) {\n if (!list ($parser, $fp) = createParser($systemID)) {\n echo \"Error opening external entity {$systemID}\\n\";\n\n return false;\n }\n\n return parse($parser, $fp);\n }\n\n return false;\n}\n```", "```php\n<!DOCTYPE doc [\n <!NOTATION jpeg SYSTEM \"image/jpeg\">\n <!ENTITY logo SYSTEM \"php-tiny.jpg\" NDATA jpeg>\n]>\n```", "```php\nxml_set_notation_decl_handler(*`parser`*, *`handler`*);\n```", "```php\n*`notationHandler`*(*`parser`*, *`notation`*, *`base`*, *`system`*, *`public`*);\n```", "```php\nxml_set_unparsed_entity_decl_handler(*`parser`*, *`handler`*);\n```", "```php\n*`unparsedEntityHandler`*(*`parser`*, *`entity`*, *`base`*, *`system`*, *`public`*, *`notation`*);\n```", "```php\nxml_set_default_handler(*`parser`*, *`handler`*);\n```", "```php\n*`defaultHandler`*(*`parser`*, *`text`*);\n```", "```php\nfunction default($parser, $data) {\n echo \"<font color=\\\"red\\\">XML: Default handler called with '{$data}'</font>\\n\";\n}\n```", "```php\nxml_parser_set_option(*`parser`*, *`option`*, *`value`*);\n```", "```php\n$value = xml_parser_get_option(*`parser`*, *`option`*);\n```", "```php\nxml_parser_set_option(XML_OPTION_CASE_FOLDING, false);\n```", "```php\nxml_parser_set_option(XML_OPTION_SKIP_WHITE, true);\n```", "```php\nxml_parser_set_option(XML_OPTION_SKIP_TAGSTART, 4);\n// <xsl:name> truncates to \"name\"\n\n```", "```php\n$parser = xml_parser_create([*`encoding`*]);\n```", "```php\n$success = xml_parse(*`parser`*, *`data`*[, *`final`* ]);\n```", "```php\nfunction createParser($filename) {\n $fh = fopen($filename, 'r');\n $parser = xml_parser_create();\n\n xml_set_element_handler($parser, \"startElement\", \"endElement\");\n xml_set_character_data_handler($parser, \"characterData\");\n xml_set_processing_instruction_handler($parser, \"processingInstruction\");\n xml_set_default_handler($parser, \"default\");\n\n return array($parser, $fh);\n}\n\nfunction parse($parser, $fh) {\n $blockSize = 4 * 1024; // read in 4 KB chunks\n\n while ($data = fread($fh, $blockSize)) {\n if (!xml_parse($parser, $data, feof($fh))) {\n // an error occurred; tell the user where\n echo 'Parse error: ' . xml_error_string($parser) . \" at line \" .\n xml_get_current_line_number($parser);\n\n return false;\n }\n }\n\n return true;\n}\n\nif (list ($parser, $fh) = createParser(\"test.xml\")) {\n parse($parser, $fh);\n fclose($fh);\n\n xml_parser_free($parser);\n}\n```", "```php\n$error = xml_get_error_code($parser);\n```", "```php\nXML_ERROR_NONE\nXML_ERROR_NO_MEMORY\nXML_ERROR_SYNTAX\nXML_ERROR_NO_ELEMENTS\nXML_ERROR_INVALID_TOKEN\nXML_ERROR_UNCLOSED_TOKEN\nXML_ERROR_PARTIAL_CHAR\nXML_ERROR_TAG_MISMATCH\nXML_ERROR_DUPLICATE_ATTRIBUTE\nXML_ERROR_JUNK_AFTER_DOC_ELEMENT\nXML_ERROR_PARAM_ENTITY_REF\nXML_ERROR_UNDEFINED_ENTITY\nXML_ERROR_RECURSIVE_ENTITY_REF\nXML_ERROR_ASYNC_ENTITY\nXML_ERROR_BAD_CHAR_REF\nXML_ERROR_BINARY_ENTITY_REF\nXML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF\nXML_ERROR_MISPLACED_XML_PI\nXML_ERROR_UNKNOWN_ENCODING\nXML_ERROR_INCORRECT_ENCODING\nXML_ERROR_UNCLOSED_CDATA_SECTION\nXML_ERROR_EXTERNAL_ENTITY_HANDLING\n```", "```php\n$message = xml_error_string(*`code`*);\n```", "```php\n$error = xml_get_error_code($parser);\n\nif ($error != XML_ERROR_NONE) {\n die(xml_error_string($error));\n}\n```", "```php\nxml_set_object(*`object`*);\n```", "```php\n<?xml version=\"1.0\" ?>\n<library>\n <book>\n <title>Programming PHP</title>\n <authors>\n <author>Rasmus Lerdorf</author>\n <author>Kevin Tatroe</author>\n <author>Peter MacIntyre</author>\n </authors>\n <isbn>1-56592-610-2</isbn>\n <comment>A great book!</comment>\n </book>\n <book>\n <title>PHP Pocket Reference</title>\n <authors>\n <author>Rasmus Lerdorf</author>\n </authors>\n <isbn>1-56592-769-9</isbn>\n <comment>It really does fit in your pocket</comment>\n </book>\n <book>\n <title>Perl Cookbook</title>\n <authors>\n <author>Tom Christiansen</author>\n <author whereabouts=\"fishing\">Nathan Torkington</author>\n </authors>\n <isbn>1-56592-243-3</isbn>\n <comment>Hundreds of useful techniques, most\n applicable to PHP as well as Perl</comment>\n </book>\n</library>\n```", "```php\n<html>\n <head>\n <title>My Library</title>\n </head>\n\n <body>\n <?php\n class BookList {\n const FIELD_TYPE_SINGLE = 1;\n const FIELD_TYPE_ARRAY = 2;\n const FIELD_TYPE_CONTAINER = 3;\n\n var $parser;\n var $record;\n var $currentField = '';\n var $fieldType;\n var $endsRecord;\n var $records;\n\n function __construct($filename) {\n $this->parser = xml_parser_create();\n xml_set_object($this->parser, $this);\n xml_set_element_handler($this->parser, \"elementStarted\", \"elementEnded\");\n xml_set_character_data_handler($this->parser, \"handleCdata\");\n\n $this->fieldType = array(\n 'title' => self::FIELD_TYPE_SINGLE,\n 'author' => self::FIELD_TYPE_ARRAY,\n 'isbn' => self::FIELD_TYPE_SINGLE,\n 'comment' => self::FIELD_TYPE_SINGLE,\n );\n\n $this->endsRecord = array('book' => true);\n\n $xml = join('', file($filename));\n xml_parse($this->parser, $xml);\n\n xml_parser_free($this->parser);\n }\n\n function elementStarted($parser, $element, &$attributes) {\n $element = strtolower($element);\n\n if ($this->fieldType[$element] != 0) {\n $this->currentField = $element;\n }\n else {\n $this->currentField = '';\n }\n }\n\n function elementEnded($parser, $element) {\n $element = strtolower($element);\n\n if ($this->endsRecord[$element]) {\n $this->records[] = $this->record;\n $this->record = array();\n }\n\n $this->currentField = '';\n }\n\n function handleCdata($parser, $text) {\n if ($this->fieldType[$this->currentField] == self::FIELD_TYPE_SINGLE) {\n $this->record[$this->currentField] .= $text;\n }\n else if ($this->fieldType[$this->currentField] == self::FIELD_TYPE_ARRAY) {\n $this->record[$this->currentField][] = $text;\n }\n }\n\n function showMenu() {\n echo \"<table>\\n\";\n\n foreach ($this->records as $book) {\n echo \"<tr>\";\n echo \"<th><a href=\\\"{$_SERVER['PHP_SELF']}?isbn={$book['isbn']}\\\">\";\n echo \"{$book['title']}</a></th>\";\n echo \"<td>\" . join(', ', $book['author']) . \"</td>\\n\";\n echo \"</tr>\\n\";\n }\n\n echo \"</table>\\n\";\n }\n\n function showBook($isbn) {\n foreach ($this->records as $book) {\n if ($book['isbn'] !== $isbn) {\n continue;\n }\n\n echo \"<p><b>{$book['title']}</b> by \" . join(', ', $book['author']) . \"<br />\";\n echo \"ISBN: {$book['isbn']}<br />\";\n echo \"Comment: {$book['comment']}</p>\\n\";\n }\n\n echo \"<p>Back to the <a href=\\\"{$_SERVER['PHP_SELF']}\\\">list of books</a>.</p>\";\n }\n }\n\n $library = new BookList(\"books.xml\");\n\n if (isset($_GET['isbn'])) {\n // return info on one book\n $library->showBook($_GET['isbn']);\n }\n else {\n // show menu of books\n $library->showMenu();\n } ?>\n </body>\n</html>\n```", "```php\n$parser = new DOMDocument();\n$parser->load(\"books.xml\");\nprocessNodes($parser->documentElement);\n\nfunction processNodes($node) {\n foreach ($node->childNodes as $child) {\n if ($child->nodeType == XML_TEXT_NODE) {\n echo $child->nodeValue;\n }\n else if ($child->nodeType == XML_ELEMENT_NODE) {\n processNodes($child);\n }\n }\n}\n```", "```php\n$document = simplexml_load_file(\"books.xml\");\n\nforeach ($document->book as $book) {\n echo $book->title . \"\\r\\n\";\n}\n```", "```php\n$document = simplexml_load_file(\"books.xml\");\n\nforeach ($document->book as $node) {\n foreach ($node->attributes() as $attribute) {\n echo \"{$attribute}\\n\";\n }\n}\n```", "```php\n$document = simplexml_load_file(\"books.xml\");\n\nforeach ($document->children() as $book) {\n $book->title = \"New Title\";\n}\n\nfile_put_contents(\"books.xml\", $document->asXml());\n```", "```php\n$processor = new XsltProcessor;\n```", "```php\n$xml = new DomDocument;\n$xml->load($filename);\n\n$xsl = new DomDocument;\n$xsl->load($filename);\n```", "```php\n$processor->importStyleSheet($xsl);\n```", "```php\n$result = $processor->transformToXml($xml);\n```", "```php\n<?xml version=\"1.0\" ?>\n\n<news xmlns:news=\"http://slashdot.org/backslash.dtd\">\n <story>\n <title>O'Reilly Publishes Programming PHP</title>\n <url>http://example.org/article.php?id=20020430/458566</url>\n <time>2002-04-30 09:04:23</time>\n <author>Rasmus and some others</author>\n </story>\n\n <story>\n <title>Transforming XML with PHP Simplified</title>\n <url>http://example.org/article.php?id=20020430/458566</url>\n <time>2002-04-30 09:04:23</time>\n <author>k.tatroe</author>\n <teaser>Check it out</teaser>\n </story>\n</news>\n```", "```php\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\n<xsl:output method=\"html\" indent=\"yes\" encoding=\"utf-8\" />\n\n<xsl:template match=\"/news\">\n <html>\n <head>\n <title>Current Stories</title>\n </head>\n <body bgcolor=\"white\" >\n <xsl:call-template name=\"stories\"/>\n </body>\n </html>\n</xsl:template>\n\n<xsl:template name=\"stories\">\n <xsl:for-each select=\"story\">\n <h1><xsl:value-of select=\"title\" /></h1>\n\n <p>\n <xsl:value-of select=\"author\"/> (<xsl:value-of select=\"time\"/>)<br />\n <xsl:value-of select=\"teaser\"/>\n [ <a href=\"{url}\">More</a> ]\n </p>\n\n <hr />\n </xsl:for-each>\n</xsl:template>\n\n</xsl:stylesheet>\n```", "```php\n<?php\n$processor = new XsltProcessor;\n\n$xsl = new DOMDocument;\n$xsl->load(\"rules.xsl\");\n$processor->importStyleSheet($xsl);\n\n$xml = new DomDocument;\n$xml->load(\"feed.xml\");\n$result = $processor->transformToXml($xml);\n\necho \"<pre>{$result}</pre>\";\n```"]