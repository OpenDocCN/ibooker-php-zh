["```php\n$*`object`* = new *`Class`*;\n```", "```php\n$moana = new Person;\n```", "```php\n$moana = new \"Person\"; // does not work\n```", "```php\n$object = new Person(\"Sina\", 35);\n```", "```php\n$class = \"Person\";\n$object = new $class;\n// is equivalent to\n$object = new Person;\n```", "```php\n$account = new Account;\n$object = \"account\";\n${$object}->init(50000, 1.10); // same as $account->init\n```", "```php\n*`$object`*->*`propertyname` `$object`*->*`methodname`*([*`arg`*, ... ])\n```", "```php\necho \"Moana is {$moana->age} years old.\\n\"; // property access\n$moana->birthday(); // method call\n$moana->setAge(21); // method call with arguments\n```", "```php\n$clan = $moana->family(\"extended\");\n```", "```php\n$prop = 'age';\necho $moana->$prop;\n```", "```php\nHTML::p(\"Hello, world\");\n```", "```php\n$f = new Person(\"Pua\", 75);\n\n$b = $f; // $b and $f point at same object $b->setName(\"Hei Hei\");\n\nprintf(\"%s and %s are best friends.\\n\", $b->getName(), $f->getName());\n`Hei` `Hei` `and` `Hei` `Hei` `are` `best` `friends``.`\n```", "```php\n$f = new Person(\"Pua\", 35);\n\n$b = clone $f; // make a copy $b->setName(\"Hei Hei\");// change the copy \nprintf(\"%s and %s are best friends.\\n\", $b->getName(), $f->getName());\n`Pua` `and` `Hei` `Hei` `are` `best` `friends``.`\n```", "```php\nclass classname [ extends baseclass ] [ implements interfacename ,\n [interfacename, ... ] ] {\n [ use traitname, [ traitname, ... ]; ]\n\n [ visibility $property [ = value ]; ... ]\n\n [ function functionname (args) [: type ] {\n // code\n }\n ...\n ]\n}\n```", "```php\nclass Person {\n public $name = '';\n\n function getName() {\n return $this->name;\n }\n\n function setName($newName) {\n $this->name = $newName;\n }\n}\n```", "```php\nclass HTMLStuff {\n static function startTable() {\n echo \"<table border=\\\"1\\\">\\n\";\n }\n\n static function endTable() {\n echo \"</table>\\n\";\n }\n}\n\nHTMLStuff::startTable();\n // print HTML table rows and columns\nHTMLStuff::endTable();\n```", "```php\nclass Person {\n public $name;\n\n final function getName() {\n return $this->name;\n }\n}\n\nclass Child extends Person {\n // syntax error\n function getName() {\n // do something\n }\n}\n```", "```php\nclass Person {\n public $age;\n\n public function __construct() {\n $this->age = 0;\n }\n\n public function incrementAge() {\n $this->age += 1;\n $this->ageChanged();\n }\n\n protected function decrementAge() {\n $this->age -= 1;\n $this->ageChanged();\n }\n\n private function ageChanged() {\n echo \"Age changed to {$this->age}\";\n }\n}\n\nclass SupernaturalPerson extends Person {\n public function incrementAge() {\n // ages in reverse\n $this->decrementAge();\n }\n}\n\n$person = new Person;\n$person->incrementAge();\n$person->decrementAge(); // not allowed\n$person->ageChanged(); // also not allowed\n\n$person = new SupernaturalPerson;\n$person->incrementAge(); // calls decrementAge under the hood\n```", "```php\nclass Person {\n function takeJob(Job $job) {\n echo \"Now employed as a {$job->title}\\n\";\n }\n}\n```", "```php\nclass Person {\n function bestJob(): Job {\n $job = Job(\"PHP developer\");\n\n return $job;\n }\n}\n```", "```php\nclass Person {\n function getName() {\n return $this->name;\n }\n\n function setName($newName) {\n $this->name = $newName;\n }\n}\n```", "```php\npublic $name = \"J Doe\"; // works\npublic $age = 0; // works\npublic $day = 60 * 60 * hoursInDay(); // doesn't work\n```", "```php\nclass Person {\n protected $rowId = 0;\n\n public $username = 'Anyone can see me';\n\n private $hidden = true;\n}\n```", "```php\nclass Person {\n static $global = 23;\n}\n\n$localCopy = Person::$global;\n```", "```php\nclass Person {\n public function __get($property) {\n if ($property === 'biography') {\n $biography = \"long text here...\"; // would retrieve from database\n\n return $biography;\n }\n }\n\n public function __set($property, $value) {\n if ($property === 'biography') {\n // set the value in the database\n }\n }\n}\n```", "```php\nclass PaymentMethod {\n public const TYPE_CREDITCARD = 0;\n public const TYPE_CASH = 1;\n}\n\necho PaymentMethod::TYPE_CREDITCARD;\n`0`\n```", "```php\nclass Person {\n protected const PROTECTED_CONST = false;\n public const DEFAULT_USERNAME = \"<unknown>\";\n private INTERNAL_KEY = \"ABC1234\";\n}\n```", "```php\nclass Person {\n public $name, $address, $age;\n}\n\nclass Employee extends Person {\n public $position, $salary;\n}\n```", "```php\nparent::birthday(); // call parent class's birthday() method\n```", "```php\nCreature::birthday(); // when Creature is the parent class\n```", "```php\nself::birthday(); // call this class's birthday() method\n```", "```php\nif ($object instanceof Animal) {\n // do something\n}\n```", "```php\ninterface *`interfacename`* {\n [ function *`functionname`*();\n ...\n ]\n}\n```", "```php\ninterface Printable {\n function printOutput();\n}\n\nclass ImageComponent implements Printable {\n function printOutput() {\n echo \"Printing an image...\";\n }\n}\n```", "```php\ntrait *`traitname`* [ extends *`baseclass`* ] {\n [ use *`traitname`*, [ *`traitname`*, ... ]; ]\n\n [ visibility $property [ = value ]; ... ]\n\n [ function *`functionname`* (*`args`*) {\n // *`code`*\n }\n ...\n ]\n}\n```", "```php\ntrait Logger {\n public function log($logString) {\n $className = __CLASS__;\n echo date(\"Y-m-d h:i:s\", time()) . \": [{$className}] {$logString}\";\n }\n}\n\nclass User {\n use Logger;\n\n public $name;\n\n function __construct($name = '') {\n $this->name = $name;\n $this->log(\"Created user '{$this->name}'\");\n }\n\n function __toString() {\n return $this->name;\n }\n}\n\nclass UserGroup {\n use Logger;\n\n public $users = array();\n\n public function addUser(User $user) {\n if (!in_array($this->users, $user)) {\n $this->users[] = $user;\n $this->log(\"Added user '{$user}' to group\");\n }\n }\n}\n\n$group = new UserGroup;\n$group->addUser(new User(\"Franklin\"));\n`2012``-``03``-``09` `07``:``12``:``58``:` `[``User``]` `Created` `user` `'Franklin'``2012``-``03``-``09` `07``:``12``:``58``:`\n`[``UserGroup``]` `Added` `user` `'Franklin'` `to` `group`\n```", "```php\ntrait First {\n public function doFirst( {\n echo \"first\\n\";\n }\n}\n\ntrait Second {\n public function doSecond() {\n echo \"second\\n\";\n }\n}\n\ntrait Third {\n use First, Second;\n\n public function doAll() {\n $this->doFirst();\n $this->doSecond();\n }\n}\n\nclass Combined {\n use Third;\n}\n\n$object = new Combined;\n$object->doAll();\n`firstsecond`\n```", "```php\ntrait Command {\n function run() {\n echo \"Executing a command\\n\";\n }\n}\n\ntrait Marathon {\n function run() {\n echo \"Running a marathon\\n\";\n }\n}\n\nclass Person {\n use Command, Marathon {\n Marathon::run insteadof Command;\n }\n}\n\n$person = new Person;\n$person->run();\n`Running` `a` `marathon`\n```", "```php\ntrait Command {\n function run() {\n echo \"Executing a command\";\n }\n}\n\ntrait Marathon {\n function run() {\n echo \"Running a marathon\";\n }\n}\n\nclass Person {\n use Command, Marathon {\n Command::run as runCommand;\n Marathon::run insteadof Command;\n }\n}\n\n$person = new Person;\n$person->run();\n$person->runCommand();\n`Running` `a` `marathonExecuting` `a` `command`\n```", "```php\nabstract class Component {\n abstract function printOutput();\n}\n\nclass ImageComponent extends Component {\n function printOutput() {\n echo \"Pretty picture\";\n }\n}\n```", "```php\ntrait Sortable {\n abstract function uniqueId();\n\n function compareById($object) {\n return ($object->uniqueId() < $this->uniqueId()) ? −1 : 1;\n }\n}\n\nclass Bird {\n use Sortable;\n\n function uniqueId() {\n return __CLASS__ . \":{$this->id}\";\n }\n}\n\n// this will not compile\nclass Car {\n use Sortable;\n}\n\n$bird = new Bird;\n$car = new Car;\n$comparison = $bird->compareById($car);\n```", "```php\n$person = new Person(\"Fred\", 35);\n```", "```php\nclass Person {\n function __construct($name, $age) {\n $this->name = $name;\n $this->age = $age;\n }\n}\n```", "```php\nclass Person {\n public $name, $address, $age;\n\n function __construct($name, $address, $age) {\n $this->name = $name;\n $this->address = $address;\n $this->age = $age;\n }\n}\n\nclass Employee extends Person {\n public $position, $salary;\n\n function __construct($name, $address, $age, $position, $salary) {\n parent::__construct($name, $address, $age);\n\n $this->position = $position;\n $this->salary = $salary;\n }\n}\n```", "```php\nclass Building {\n function __destruct() {\n echo \"A Building is being destroyed!\";\n }\n}\n```", "```php\nclass Person {\n public $name = ‘';\n\n function getName() {\n return $this->name;\n }\n}\n\n// return an anonymous implementation of Person\n$anonymous = new class() extends Person {\n public function getName() {\n // return static value for testing purposes\n return \"Moana\";\n }\n}; // note: requires closing semicolon, unlike nonanonymous class definitions\n```", "```php\n$doesClassExist = class_exists(*`classname`*);\n\n$classes = get_declared_classes();\n$doesClassExist = in_array(*`classname`*, $classes);\n```", "```php\n$methods = get_class_methods(*`classname`*);\n$properties = get_class_vars(*`classname`*);\n```", "```php\n$class = \"Person\";\n$methods = get_class_methods($class);\n$methods = get_class_methods(Person); // same\n$methods = get_class_methods(\"Person\"); // same\n```", "```php\n$superclass = get_parent_class(*`classname`*);\n```", "```php\nfunction displayClasses() {\n $classes = get_declared_classes();\n\n foreach ($classes as $class) {\n echo \"Showing information about {$class}<br />\";\n $reflection = new ReflectionClass($class);\n\n $isAnonymous = $reflection->isAnonymous() ? \"yes\" : \"no\";\n echo \"Is Anonymous: {$isAnonymous}<br />\";\n\n echo \"Class methods:<br />\";\n $methods = $reflection->getMethods(ReflectionMethod::IS_STATIC);\n\n if (!count($methods)) {\n echo \"<i>None</i><br />\";\n }\n else {\n foreach ($methods as $method) {\n echo \"<b>{$method}</b>()<br />\";\n }\n }\n\n echo \"Class properties:<br />\";\n\n $properties = $reflection->getProperties();\n\n if (!count($properties)) {\n echo \"<i>None</i><br />\";\n }\n else {\n foreach(array_keys($properties) as $property) {\n echo \"<b>\\${$property}</b><br />\";\n }\n }\n\n echo \"<hr />\";\n }\n}\n```", "```php\n$isObject = is_object(*`var`*);\n$classname = get_class(*`object`*);\n```", "```php\n$methodExists = method_exists(*`object`*, *`method`*);\n```", "```php\n$array = get_object_vars(*`object`*);\n```", "```php\nclass Person {\n public $name;\n public $age;\n}\n\n$fred = new Person;\n$fred->name = \"Fred\";\n$props = get_object_vars($fred); // array('name' => \"Fred\", 'age' => NULL);\n```", "```php\nclass A {}\nclass B extends A {}\n\n$obj = new B;\necho get_parent_class($obj);\necho get_parent_class(B);\n`AA`\n```", "```php\n// return an array of callable methods (include inherited methods)\nfunction getCallableMethods($object): Array {\n $reflection = new ReflectionClass($object);\n $methods = $reflection->getMethods();\n\n return $methods;\n}\n\n// return an array of superclasses\nfunction getLineage($object): Array {\n $reflection = new ReflectionClass($object);\n\n if ($reflection->getParentClass()) {\n $parent = $reflection->getParentClass();\n\n $lineage = getLineage($parent);\n $lineage[] = $reflection->getName();\n }\n else {\n $lineage = array($reflection->getName());\n }\n\n return $lineage;\n}\n\n// return an array of subclasses\nfunction getChildClasses($object): Array {\n $reflection = new ReflectionClass($object);\n\n $classes = get_declared_classes();\n\n $children = array();\n\n foreach ($classes as $class) {\n $checkedReflection = new ReflectionClass($class);\n\n if ($checkedReflection->isSubclassOf($reflection->getName())) {\n $children[] = $checkedReflection->getName();\n }\n }\n\n return $children;\n}\n\n// return an array of properties\nfunction getProperties($object): Array {\n $reflection = new ReflectionClass($object);\n\n return $reflection->getProperties();\n}\n\n// display information on an object\nfunction printObjectInfo($object) {\n $reflection = new ReflectionClass($object);\n echo \"<h2>Class</h2>\";\n echo \"<p>{$reflection->getName()}</p>\";\n\n echo \"<h2>Inheritance</h2>\";\n\n echo \"<h3>Parents</h3>\";\n $lineage = getLineage($object);\n array_pop($lineage);\n\n if (count($lineage) > 0) {\n echo \"<p>\" . join(\" -&gt; \", $lineage) . \"</p>\";\n }\n else {\n echo \"<i>None</i>\";\n }\n\n echo \"<h3>Children</h3>\";\n $children = getChildClasses($object);\n echo \"<p>\";\n\n if (count($children) > 0) {\n echo join(', ', $children);\n }\n else {\n echo \"<i>None</i>\";\n }\n\n echo \"</p>\";\n\n echo \"<h2>Methods</h2>\";\n $methods = getCallableMethods($object);\n\n if (!count($methods)) {\n echo \"<i>None</i><br />\";\n }\n else {\n foreach($methods as $method) {\n echo \"<b>{$method}</b>();<br />\";\n }\n }\n\n echo \"<h2>Properties</h2>\";\n $properties = getProperties($object);\n\n if (!count($properties)) {\n echo \"<i>None</i><br />\";\n }\n else {\n foreach(array_keys($properties) as $property) {\n echo \"<b>\\${$property}</b> = \" . $object->$property . \"<br />\";\n }\n }\n\n echo \"<hr />\";\n}\n```", "```php\nclass A {\n public $foo = \"foo\";\n public $bar = \"bar\";\n public $baz = 17.0;\n\n function firstFunction() { }\n\n function secondFunction() { }\n}\n\nclass B extends A {\n public $quux = false;\n\n function thirdFunction() { }\n}\n\nclass C extends B { }\n\n$a = new A();\n$a->foo = \"sylvie\";\n$a->bar = 23;\n\n$b = new B();\n$b->foo = \"bruno\";\n$b->quux = true;\n\n$c = new C();\n\nprintObjectInfo($a);\nprintObjectInfo($b);\nprintObjectInfo($c);\n```", "```php\n$encoded = serialize(*`something`*);\n$something = unserialize(*`encoded`*);\n```", "```php\ninclude \"object_definitions.php\"; // load object definitions\nsession_start(); // load persistent variables\n?>\n<html>...\n```", "```php\nclass Log {\n private $filename;\n private $fh;\n\n function __construct($filename) {\n $this->filename = $filename;\n $this->open();\n }\n\n function open() {\n $this->fh = fopen($this->filename, 'a') or die(\"Can't open {$this->filename}\");\n }\n\n function write($note) {\n fwrite($this->fh, \"{$note}\\n\");\n }\n\n function read() {\n return join('', file($this->filename));\n }\n\n function __wakeup(array $data): void {\n $this->filename = $data[\"filename\"];\n $this->open();\n }\n\n function __sleep() {\n // write information to the account file\n fclose($this->fh);\n\n return [\"filename\" => $this->filename];\n }\n}\n```", "```php\n<?php\ninclude_once \"Log.php\";\nsession_start();\n?>\n\n<html><head><title>Front Page</title></head>\n<body>\n\n<?php\n$now = strftime(\"%c\");\n\nif (!isset($_SESSION['logger'])) {\n $logger = new Log(\"/tmp/persistent_log\");\n $_SESSION['logger'] = $logger;\n $logger->write(\"Created $now\");\n\n echo(\"<p>Created session and persistent log object.</p>\");\n}\nelse {\n $logger = $_SESSION['logger'];\n}\n\n$logger->write(\"Viewed first page {$now}\");\n\necho \"<p>The log contains:</p>\";\necho nl2br($logger->read());\n?>\n\n<a href=\"next.php\">Move to the next page</a>\n\n</body></html>\n```", "```php\n<?php\ninclude_once \"Log.php\";\nsession_start();\n?>\n\n<html><head><title>Next Page</title></head>\n<body>\n\n<?php\n$now = strftime(\"%c\");\n$logger = $_SESSION['logger'];\n$logger->write(\"Viewed page 2 at {$now}\");\n\necho \"<p>The log contains:\";\necho nl2br($logger->read());\necho \"</p>\";\n?>\n\n</body></html>\n```"]