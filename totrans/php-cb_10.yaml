- en: Chapter 10\. File Handling
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 10 章\. 文件处理
- en: One of the most common design philosophies around Unix and Linux is that “everything
    is a file.” This means that, regardless of the resource with which you’re interacting,
    the operating system treats it as if it were a file locally on disk. This includes
    remote requests to other systems and handles on the output of processes running
    on the machine.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Unix 和 Linux 周围最常见的设计哲学之一是“一切皆文件”。这意味着，无论您正在交互的资源是什么，操作系统都会将其视为本地磁盘上的文件。这包括对其他系统的远程请求以及对正在运行的进程输出的处理。
- en: PHP treats requests, proceses, and resources similarly, but instead of considering
    everything to be a file, the language considers everything to be a stream resource.
    [Chapter 11](ch11.html#chapter_streams) covers streams at length, but the important
    point to know about streams for this chapter is the way PHP treats them in memory.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: PHP 将请求、进程和资源类似地处理，但语言不认为一切皆文件，而是将一切视为流资源。[第 11 章](ch11.html#chapter_streams)详细介绍了流，但对于本章重要的一点是
    PHP 在内存中如何处理流。
- en: When accessing a file, PHP doesn’t necessarily read the file’s entire data into
    memory. Instead, it creates a `resource` in memory that references the file’s
    location on disk and selectively buffers bytes from that file in memory. PHP then
    accesses or manipulates those buffered bytes directly as a stream. The fundamentals
    of streams, however, are not required knowledge for the recipes in this chapter.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在访问文件时，PHP 不一定会将文件的所有数据读入内存。相反，它会在内存中创建一个引用文件位置的 `resource`，并有选择地从文件中缓冲字节。然后
    PHP 直接访问或操作这些缓冲的字节作为流。然而，这章节的配方中并不需要了解流的基础知识。
- en: PHP’s file methods—`fopen()`, `file_get_contents()`, and the like—all leverage
    the `file://` stream wrapper under the hood. Remember, though, if everything in
    PHP is a stream, you can just as easily use other stream protocols as well, including
    `php://` and `http://`.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: PHP 的文件方法——`fopen()`、`file_get_contents()` 等——都在底层使用 `file://` 流包装器。但请记住，如果
    PHP 中的一切都是流，您同样可以轻松地使用其他流协议，包括 `php://` 和 `http://`。
- en: Windows Versus Unix
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Windows 与 Unix
- en: PHP is distributed for use on both Windows and Unix-style operating systems
    (including Linux and macOS). It’s important to understand that the underlying
    filesystem behind Windows is very different from a Unix-style system. Windows
    doesn’t consider “everything to be a file” and sometimes respects case sensitivity
    in both file and directory names in unexpected ways.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: PHP 可供在 Windows 和 Unix 风格的操作系统（包括 Linux 和 macOS）上使用。重要的是要理解，Windows 背后的底层文件系统与
    Unix 风格系统非常不同。Windows 并不认为“一切皆文件”，有时对文件和目录名称的大小写敏感性会以意想不到的方式起作用。
- en: As you’ll see in [Recipe 10.6](#file_locking), the differences between operating
    system paradigms also lead to minor differences in how functions behave. Specifically,
    file locking will work differently if your program is run on Windows because of
    differences in the underlying operating system calls.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如您将在[配方 10.6](#file_locking)中看到的那样，操作系统范式之间的差异也会导致函数行为上的细微差异。具体来说，如果您的程序在 Windows
    上运行，由于底层操作系统调用的差异，文件锁定将有所不同。
- en: The recipes that follow cover the most common filesystem operations you might
    experience in PHP, from opening and manipulating files to locking them from being
    touched by other processes.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的示例涵盖了在 PHP 中可能遇到的最常见的文件系统操作，从打开和操作文件到阻止其他进程触及它们。
- en: 10.1 Creating or Opening a Local File
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 10.1 创建或打开本地文件
- en: Problem
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You need to open a file for reading or writing on the local filesystem.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要在本地文件系统上打开文件进行读取或写入。
- en: Solution
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'Use `fopen()` to open the file and return a resource reference for further
    use:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `fopen()` 打开文件并返回一个资源引用，以供进一步使用：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Discussion
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: Internally, an open file is represented as a stream within PHP. You can read
    data from or write data to any position within the stream based on the position
    of the current file pointer. In the Solution example, you’ve opened a stream for
    reading only (attempting to write to this stream will fail) and positioned the
    pointer at the beginning of the file.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在 PHP 内部，打开的文件被表示为一个流。您可以根据当前文件指针的位置从流中读取数据或向流中写入数据。在解决方案示例中，您已经打开了一个只读流（尝试向该流写入将失败），并将指针定位在文件的开头。
- en: '[Example 10-1](#reading_from_a_buffer) shows how you can read as many bytes
    from the file as you want and then close the stream by passing its reference into
    `fclose()`.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 10-1](#reading_from_a_buffer) 展示了如何从文件中读取任意数量的字节，然后通过将其引用传递给 `fclose()`
    函数关闭流。'
- en: Example 10-1\. Reading bytes from a buffer
  id: totrans-18
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 10-1\. 从缓冲区中读取字节
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[![1](assets/1.png)](#co_file_handling_CO1-1)'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_file_handling_CO1-1)'
- en: The `fgets()` function reads one line from the specified resource, stopping
    either when it hits a newline character or when it has read the specified number
    of bytes (4,096) from the underlying stream. If there is no data to read, the
    function returns `false`.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`fgets()` 函数从指定的资源中读取一行，停止条件为遇到换行符或者已从底层流中读取了指定的字节数（4,096）。如果没有数据可读，则函数返回 `false`。'
- en: '[![2](assets/2.png)](#co_file_handling_CO1-2)'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_file_handling_CO1-2)'
- en: Once you have data buffered into a variable, you can do with it whatever you
    want. In this case, print that single line to the console.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦将数据缓冲到变量中，您可以随意处理它。在这种情况下，将该单行打印到控制台。
- en: '[![3](assets/3.png)](#co_file_handling_CO1-3)'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_file_handling_CO1-3)'
- en: After using a file’s contents, you should explicitly close and clean up the
    resource you’ve created.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 使用文件内容后，应显式关闭和清理您创建的资源。
- en: In addition to reading a file, `fopen()` allows for arbitrary writes, file appending,
    overwriting, or truncation. Each operation is determined by the mode passed as
    the second parameter—the Solution example passed `r` to indicate a read-only mode.
    Additional modes are described in [Table 10-1](#file_modes).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 除了读取文件外，`fopen()` 还允许任意写入、文件追加、覆盖或截断。每个操作由作为第二参数传递的模式确定——解决方案示例传递 `r` 以指示只读模式。附加模式在
    [表 10-1](#file_modes) 中描述。
- en: Table 10-1\. File modes available to `fopen()`
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 表 10-1\. `fopen()` 可用的文件模式
- en: '| Mode | Description |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| Mode | 描述 |'
- en: '| --- | --- |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `r` | Open for reading only; place the file pointer at the beginning of the
    file. |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| `r` | 仅用于读取；将文件指针放在文件开头。 |'
- en: '| `w` | Open for writing only; place the file pointer at the beginning of the
    file and truncate the file to 0 length. If the file does not exist, attempt to
    create it. |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| `w` | 仅用于写入；将文件指针放在文件开头并截断文件为0长度。如果文件不存在，则尝试创建。 |'
- en: '| `a` | Open for writing only; place the file pointer at the end of the file.
    If the file does not exist, attempt to create it. In this mode, `fseek()` has
    no effect, and writes are always appended. |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| `a` | 仅用于写入；将文件指针放在文件末尾。如果文件不存在，则尝试创建。在此模式下，`fseek()` 不起作用，写入总是追加的。 |'
- en: '| `x` | Create and open for writing only; place the file pointer at the beginning
    of the file. If the file already exists, the `fopen()` call will fail by returning
    `false` and generating an error of level `E_WARNING`. If the file does not exist,
    attempt to create it. |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| `x` | 创建并仅用于写入；将文件指针放在文件开头。如果文件已存在，则 `fopen()` 调用将失败并返回 `false`，生成 `E_WARNING`
    级别的错误。如果文件不存在，则尝试创建。 |'
- en: '| `c` | Open the file for writing only. If the file does not exist, it is created.
    If it exists, it is neither truncated (as opposed to `w`), nor does the call to
    this function fail (as is the case with `x`). The file pointer is placed at the
    beginning of the file. |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| `c` | 仅用于写入；打开文件。如果文件不存在，则创建。如果存在，则不截断（与 `w` 相反），并且调用此函数不会失败（与 `x` 相反）。文件指针放在文件开头。
    |'
- en: '| `e` | Set close-on-exec flag on the opened file descriptor. |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| `e` | 在打开的文件描述符上设置执行时关闭标志。 |'
- en: For all of the file modes documented in [Table 10-1](#file_modes) *except* for
    `e`, you can append a literal `+` sign to the mode to open a file for both reading
    *and* writing rather than one operation or the other.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 对于文档 [表 10-1](#file_modes) 中记录的所有文件模式 *除了* `e`，您可以在模式末尾添加字面上的 `+` 号以打开文件以进行读取
    *和* 写入，而不是单一操作。
- en: 'The `fopen()` function works with more than just local files. By default, the
    function assumes you want to work with the local filesystem, which is why you
    do not need to explicitly specify the `file://` protocol handler. However, you
    can just as easily reference remote files by using the `http://` or `ftp://` handlers,
    as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`fopen()` 函数不仅适用于本地文件。默认情况下，该函数假定您想要使用本地文件系统，因此不需要显式指定 `file://` 协议处理程序。但是，您也可以轻松地通过使用
    `http://` 或 `ftp://` 处理程序引用远程文件，如下所示：'
- en: '[PRE2]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note
  id: totrans-39
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: While remote file includes are possible, they can be dangerous in many situations,
    as you might not always have control over the contents returned by a remote filesystem.
    It’s often recommended to disable remote file access by toggling `allow_url_include`
    in your system configuration. Refer to the [PHP runtime configuration documents](https://oreil.ly/-gXR-)
    for instructions on implementing this change.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管可以包含远程文件，但在许多情况下可能存在风险，因为您可能无法始终控制远程文件系统返回的内容。通常建议通过切换系统配置中的 `allow_url_include`
    来禁用远程文件访问。请参阅[PHP运行时配置文档](https://oreil.ly/-gXR-)以了解如何实施此更改。
- en: An optional third parameter allows `fopen()` to search for a file in your [system
    include path](https://oreil.ly/3S1lo) if desired. By default, PHP will only search
    the local directory (or use an absolute path if specified). Loading files from
    the system include path encourages code reuse as you can specify individual classes
    or configuration files without replicating them throughout your project.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 可选的第三个参数允许 `fopen()` 在需要时在[系统包含路径](https://oreil.ly/3S1lo)中搜索文件。默认情况下，PHP仅在本地目录中搜索（或在指定时使用绝对路径）。从系统包含路径加载文件有助于代码重用，因为您可以指定单独的类或配置文件，而无需在整个项目中复制它们。
- en: See Also
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: Documentation on the [PHP filesystem](https://oreil.ly/oGJTp), particularly
    [`fopen()`](https://oreil.ly/7yQG-).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: PHP文件系统的文档，特别是 [`fopen()`](https://oreil.ly/7yQG-)。
- en: 10.2 Reading a File into a String
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 10.2 读取文件到字符串
- en: Problem
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to read an entire file into a variable for use elsewhere in your application.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望将整个文件读入变量，以便在应用程序的其他位置使用。
- en: Solution
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'Use `file_get_contents()` as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `file_get_contents()` 如下：
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Discussion
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: The `file_get_contents()` function opens a file for reading, reads the entire
    data of that file into a variable, and then closes the file and allows you to
    use that data as a string. This is functionally equivalent to reading a file into
    a string manually with `fread()`, as in [Example 10-2](#filegetcontents_from_scratch).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`file_get_contents()` 函数打开一个文件进行读取，将该文件的所有数据读入变量，然后关闭文件，允许您将该数据作为字符串使用。这在功能上等同于手动使用
    `fread()` 将文件读入字符串，如[示例 10-2](#filegetcontents_from_scratch)所示。'
- en: Example 10-2\. Implementing `file_get_contents()` manually with `fread()`
  id: totrans-52
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 10-2\. 使用 `fread()` 手动实现 `file_get_contents()`
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: While it’s possible to manually read a file into memory, as demonstrated in
    [Example 10-2](#filegetcontents_from_scratch), it’s a better idea to focus on
    writing simple programs and using the functions exposed by the language to handle
    complicated operations for you. The `file_get_contents()` function is implemented
    in C and provides a high level of performance for your application. It is binary-safe
    and leverages the memory-mapping functionality exposed by your operating system
    to achieve peak performance.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管可以手动将文件读入内存，如[示例 10-2](#filegetcontents_from_scratch)所示，但专注于编写简单程序并利用语言提供的函数处理复杂操作是一个更好的主意。
    `file_get_contents()` 函数是用C语言实现的，为您的应用程序提供了高性能。它是二进制安全的，并利用操作系统提供的内存映射功能来实现最佳性能。
- en: Like `fread()`, `file_get_contents()` can read both local and remote files into
    memory. It can also search for files in the system include path if you should
    set the optional second parameter to `true`.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 像 `fread()` 一样，`file_get_contents()` 可以将本地和远程文件读入内存。如果将可选的第二个参数设置为 `true`，它还可以在系统包含路径中搜索文件。
- en: 'Like `fread()`’s parallel `fwrite()` operation, there is an automatic write
    equivalent function called `file_put_contents()`. This function abstracts away
    the complexity of opening a file and overwriting its contents with string data
    from a variable. The following demonstrates how an object might be encoded to
    JSON and written out to a static file:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 像 `fread()` 的并行操作 `fwrite()` 一样，还有一个称为 `file_put_contents()` 的自动写入等效函数。此函数封装了打开文件并用变量中的字符串数据覆盖其内容的复杂性。以下示例演示了如何将对象编码为JSON并写入静态文件：
- en: '[PRE5]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: See Also
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: Documentation on [`file_​get_​contents()`](https://oreil.ly/5pRBt) and [`file_​put_​con⁠tents()`](https://oreil.ly/4W0rG).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '[`file_​get_​contents()`](https://oreil.ly/5pRBt) 和 [`file_​put_​con⁠tents()`](https://oreil.ly/4W0rG)
    的文档。'
- en: 10.3 Reading a Specific Slice of a File
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 10.3 读取文件的特定片段
- en: Problem
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to read a specific set of bytes from a particular position within a
    file.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望从文件中的特定位置读取一组特定字节。
- en: Solution
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'Use `fopen()` to create a resource, `fseek()` to reposition the pointer within
    the file, and `fread()` to read data from that position as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `fopen()` 创建资源，使用 `fseek()` 在文件中重新定位指针，并使用 `fread()` 从该位置读取数据如下：
- en: '[PRE6]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Discussion
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: By default, `fopen()` in read mode will open the file as a resource and place
    its pointer at the beginning of the file. When you start reading bytes from the
    file, the pointer will advance until it hits the end of the file. You can use
    `fseek()` to set the pointer to an arbitrary position within the resource, with
    the default being the beginning of the file.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，以读取模式打开的`fopen()`将文件作为资源打开，并将其指针放在文件开头。当你开始从文件中读取字节时，指针将向前移动，直到达到文件末尾。你可以使用`fseek()`来将指针设置到资源内的任意位置，默认情况是文件的开头。
- en: 'The third parameter—`SEEK_SET` in the Solution example—tells PHP where to add
    the offset. You have three options:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在解决方案示例中的第三个参数——`SEEK_SET`——告诉 PHP 在何处添加偏移量。你有三个选项：
- en: '`SEEK_SET` (the default) sets the pointer from the beginning of the file.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SEEK_SET`（默认）从文件开头设置指针。'
- en: '`SEEK_CUR` adds the offset to the current pointer position.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SEEK_CUR` 将偏移量添加到当前指针位置。'
- en: '`SEEK_END` adds the offset to the end of the file. This is useful for reading
    the last bytes in a file by setting a negative offset as the second parameter.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SEEK_END` 在文件末尾添加偏移量。这对于通过将负偏移量设置为第二个参数来读取文件中的最后几个字节非常有用。'
- en: 'Assume you want to read the last bytes in a long log file from within PHP.
    You would do so similarly to the way you read arbitrary bytes in the Solution
    example but with a negative offset, as follows:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想从 PHP 内部读取长日志文件的最后几个字节。你可以像解决方案示例中读取任意字节一样进行，但是使用负偏移量，如下所示：
- en: '[PRE7]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note that, even if the log file in the preceding snippet is less than 4,096
    bytes long, PHP will not read past the beginning of the file. The interpreter
    will instead place the pointer at the beginning of the file and start reading
    bytes from that position. Likewise, you cannot read past the end of the file regardless
    of how many bytes you specify in your call to `fread()`.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，即使在前面片段中的日志文件少于 4,096 字节长，PHP 也不会读取超出文件开头的部分。解释器将会把指针放在文件开头并从那个位置开始读取字节。同样地，无论你在调用`fread()`时指定多少字节，都不能超过文件末尾。
- en: See Also
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Recipe 10.1](#opening_a_file) for more on `fopen()`, and the documentation
    on [`fread()`](https://oreil.ly/Gb2m5) and [`fseek()`](https://oreil.ly/Tl6gs).'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '[Recipe 10.1](#opening_a_file)了解更多关于`fopen()`，以及关于[`fread()`](https://oreil.ly/Gb2m5)和[`fseek()`](https://oreil.ly/Tl6gs)的文档。'
- en: 10.4 Modifying a File in Place
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 10.4 修改文件
- en: Problem
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to modify a specific part of a file.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 你想要修改文件的特定部分。
- en: Solution
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'Open the file for reading and writing by using `fopen()`, then use `fseek()`
    to move the pointer to the position you wish to update and overwrite a certain
    number of bytes starting with that position. For example:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`fopen()`打开文件进行读取和写入，然后使用`fseek()`将指针移动到要更新的位置并覆盖从该位置开始的一定数量字节。例如：
- en: '[PRE8]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Discussion
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: As in [Recipe 10.3](#slicing_a_file), the `fseek()` function is leveraged to
    move the pointer to an arbitrary location within the file. From there, `fwrite()`
    is used to write a specific set of bytes to the file in that location before you
    close the resource.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如[Recipe 10.3](#slicing_a_file)中所示，`fseek()`函数被利用来将指针移动到文件中的任意位置。然后，使用`fwrite()`在关闭资源之前将特定的一组字节写入文件。
- en: The third parameter passed to `fwrite()` tells PHP how many bytes to write.
    By default, the system will write all of the data passed in the second parameter,
    but you can restrict the amount of data written out by specifying a byte count.
    In the Solution example, the write length is set equal to the data length, which
    is redundant. A more realistic example of this functionality would appear something
    like the following.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给`fwrite()`的第三个参数告诉 PHP 要写入多少字节。默认情况下，系统将写入第二个参数传递的所有数据，但你可以通过指定字节计数来限制写入的数据量。在解决方案示例中，写入长度设置为数据长度是多余的。这种功能的更现实的例子可能如下所示。
- en: '[PRE9]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Note also that the Solution example adds a plus sign to the typical read mode;
    this opens the file for reading *and* writing. Opening the file in other modes
    leads to very different behavior:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，Solution 示例中的解决方案会在典型的读取模式上添加一个加号；这会同时打开文件以进行读取*和*写入。以其他模式打开文件会导致非常不同的行为：
- en: '`w` (write mode), with or without the ability to read, will truncate the file
    before you do anything else with it!'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`w`（写入模式），无论是否具有读取能力，都会在你对文件进行其他任何操作之前截断文件！'
- en: '`a` (append mode), with or without the ability to read, will force the file
    pointer to the end of the file. Calls to `fseek()` will *not* move the file pointer
    as expected, and your new data will always be appended to the file.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`a`（追加模式），无论是否具有读取能力，都会将文件指针强制移到文件末尾。对 `fseek()` 的调用将*不*按预期移动文件指针，并且您的新数据将始终追加到文件中。'
- en: See Also
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '[Recipe 10.3](#slicing_a_file) for more information on random I/O with files
    in PHP.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '[配方 10.3](#slicing_a_file) 获取关于在 PHP 中使用文件进行随机 I/O 的更多信息。'
- en: 10.5 Writing to Many Files Simultaneously
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 10.5 同时向多个文件写入
- en: Problem
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to write data to multiple files at the same time. For example, you
    want to write both to the local filesystem and to the console.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望同时将数据写入多个文件。例如，您希望同时将数据写入本地文件系统和控制台。
- en: Solution
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'Open multiple resource references with `fopen()` and write to them all in a
    loop:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `fopen()` 打开多个资源引用并在循环中写入它们：
- en: '[PRE10]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Discussion
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: PHP is generally a single-threaded system that must perform operations one at
    a time.^([1](ch10.html#idm45875148413792)) While the Solution example will produce
    output for two file references, it will write first to one and then to the other.
    In practice, this will be fast enough to be acceptable but is not truly simultaneous.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: PHP 通常是一个单线程系统，必须逐个执行操作。^([1](ch10.html#idm45875148413792)) 虽然解决方案示例将为两个文件引用产生输出，但它将首先写入一个文件，然后再写入另一个文件。实际上，这足够快以被接受，但并非真正同时进行。
- en: 'Even with this limitation, knowing that you can write the same data to multiple
    files with ease makes it fairly straightforward to juggle multiple potential outputs.
    Rather than crafting a procedural approach with a finite number of files as in
    the Solution example, you could even abstract this kind of operation into a class,
    as shown in [Example 10-3](#multi_file_operations):'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 即使存在这种限制，知道您可以轻松地将相同的数据写入多个文件，使得同时处理多个潜在输出变得相对简单。与在解决方案示例中制定有限文件数量的过程化方法不同，您甚至可以将此类操作抽象成一个类，如
    [示例 10-3](#multi_file_operations) 所示：
- en: Example 10-3\. A simple class for abstracting multiple file operations
  id: totrans-101
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 10-3\. 用于抽象多个文件操作的简单类
- en: '[PRE11]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The class defined by [Example 10-3](#multi_file_operations) allows you to easily
    bind a write operation to multiple file handles and clean them up as necessary
    when you’re done. Rather than opening each file in turn and manually iterating
    over them, you simply instantiate the class, add your files, and go. For example:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 由 [示例 10-3](#multi_file_operations) 定义的类允许您轻松地将写操作绑定到多个文件句柄，并在需要时进行清理。与逐个打开每个文件并手动迭代它们不同，您只需实例化该类，添加您的文件，然后进行操作。例如：
- en: '[PRE12]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: PHP’s internal handling of resource pointers is highly efficient and empowers
    you to write to as many files or streams as necessary with minimal overhead. Abstractions
    like [Example 10-3](#multi_file_operations) similarly make it easy for you to
    focus on the business logic of your application, while PHP juggles the resource
    handles (and related memory allocation) for you.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: PHP 对资源指针的内部处理非常高效，并使您能够使用最小的开销写入任意数量的文件或流。像 [示例 10-3](#multi_file_operations)
    这样的抽象类似地使您能够专注于应用程序的业务逻辑，同时 PHP 为您处理资源句柄（及相关的内存分配）。
- en: See Also
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: Documentation on [PHP’s `stdout` stream](https://oreil.ly/i0kSI).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 [PHP 的 `stdout` 流](https://oreil.ly/i0kSI) 的文档。
- en: 10.6 Locking a File to Prevent Access or Modification by Another Process
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 10.6 锁定文件以防止其他进程访问或修改
- en: Problem
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to prevent another PHP process from manipulating a file while your
    script is running.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望在运行脚本时防止另一个 PHP 进程操作文件。
- en: Solution
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'Use `flock()` to lock the file as follows:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `flock()` 锁定文件如下：
- en: '[PRE13]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Discussion
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: Often, you need to open a file to read its data or write something to it, but
    with the assurance that no other script will manipulate the file while you’re
    working with it. The safest way to do this is by explicitly locking the file.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，您需要打开一个文件来读取其数据或向其写入内容，但要确保在您操作文件时没有其他脚本会操纵该文件。最安全的做法是显式锁定文件。
- en: Warning
  id: totrans-116
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: On Windows, PHP leverages *mandatory locking* that is enforced by the operating
    system itself. Once a file is locked, no other process is permitted to open that
    file. On Unix-based systems (including Linux and macOS), PHP instead uses *advisory
    locking*. In this mode, the operating system can choose to ignore locks between
    different processes. While multiple PHP scripts will usually respect the lock,
    other processes might ignore it entirely.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows上，PHP利用操作系统本身强制执行的*强制锁定*。一旦文件被锁定，其他进程就无法打开该文件。在基于Unix的系统上（包括Linux和macOS），PHP使用*咨询锁定*。在这种模式下，操作系统可以选择忽略不同进程之间的锁。虽然多个PHP脚本通常会尊重锁定，但其他进程可能完全忽略它。
- en: 'An explicit file lock prevents other processes from either reading or writing
    the same file, depending on the type of lock. PHP supports two kinds of locks:
    a shared lock (`LOCK_SH`) that still permits reads, and an exclusive lock (`LOCK_EX`)
    that prevents other processes from accessing the file at all.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 显式文件锁定会阻止其他进程读取或写入同一文件，具体取决于锁的类型。PHP支持两种锁定方式：共享锁(`LOCK_SH`)仍然允许读取，独占锁(`LOCK_EX`)则完全阻止其他进程访问文件。
- en: If you were to run the code in the Solution example twice on a machine (with
    a long-blocking operation like `sleep()` called before unlocking the file), the
    second process would pause and wait for the lock to be released before executing.
    A more concrete example is shown in [Example 10-4](#long_running_file_lock).
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在一台机器上运行解决方案示例代码两次（在解锁文件之前调用类似`sleep()`的长时间阻塞操作），第二个进程会暂停并等待锁释放后再执行。更具体的示例见[示例 10-4](#long_running_file_lock)。
- en: Example 10-4\. Illustration of a long-running file lock
  id: totrans-120
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 10-4\. 长时间运行的文件锁演示
- en: '[PRE14]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Running the preceding program in two separate terminals side by side illustrates
    how locking works, as shown in [Figure 10-1](#side_by_side_consoles). The first
    execution will acquire the file lock and continue operating as expected. The second
    will wait until the lock is available and, after it acquires the lock, continue
    merrily along.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在两个分开的终端中并排运行上述程序，可以说明锁定的工作原理，如[图 10-1](#side_by_side_consoles)所示。第一次执行将获取文件锁，并继续按预期操作。第二次将等待直到锁可用，并在获取锁之后继续操作。
- en: '![Two processes cannot acquire the same lock on a single file.](assets/phpc_1001.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![两个进程无法在单个文件上获取相同的锁。](assets/phpc_1001.png)'
- en: Figure 10-1\. Two processes cannot acquire the same lock on a single file
  id: totrans-124
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 10-1\. 两个进程无法在单个文件上获取相同的锁
- en: See Also
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: Documentation on [`flock()`](https://oreil.ly/BRBO5).
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '[`flock()`文档](https://oreil.ly/BRBO5)的文档。'
- en: ^([1](ch10.html#idm45875148413792-marker)) [Chapter 17](ch17.html#chapter_asynchronous)
    covers parallel and asynchronous operations at length to explain ways to break
    out of a single-threaded paradigm.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch10.html#idm45875148413792-marker)) [第17章](ch17.html#chapter_asynchronous)详细介绍了并行和异步操作，以解释如何打破单线程范式。
