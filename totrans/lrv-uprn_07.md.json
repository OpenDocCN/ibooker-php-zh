["```php\nRoute::post('form', function (Illuminate\\Http\\Request $request) {\n    // $request->etc()\n});\n```", "```php\n<!-- GET route form view at /get-route -->\n<form method=\"post\" action=\"/signup?utm=12345\">\n    @csrf\n    <input type=\"text\" name=\"first_name\">\n    <input type=\"submit\">\n</form>\n```", "```php\n// routes/web.php\nRoute::post('signup', function (Request $request) {\n    var_dump($request->all());\n});\n\n// Outputs:\n/**\n * [\n *     '_token' => 'CSRF token here',\n *     'first_name' => 'value',\n *     'utm' => 12345,\n * ]\n */\n```", "```php\nRoute::post('post-route', function (Request $request) {\n    var_dump($request->except('_token'));\n});\n\n// Outputs:\n/**\n * [\n *     'firstName' => 'value',\n *     'utm' => 12345\n * ]\n */\n```", "```php\nRoute::post('post-route', function (Request $request) {\n    var_dump($request->only(['firstName', 'utm']));\n});\n\n// Outputs:\n/**\n * [\n *     'firstName' => 'value',\n *     'utm' => 12345\n * ]\n */\n```", "```php\n// POST route at /post-route\nif ($request->has('utm')) {\n    // Do some analytics work\n}\n```", "```php\n// POST route at /post-route\n$utm = $request->whenHas('utm', function($utm) {\n    return $utm;\n}, function() {\n    return 'default';\n});\n```", "```php\n// POST route at /post-route\nif ($request->filled('utm')) {\n    // Do some analytics work\n}\n```", "```php\n// POST route at /post-route\n$utm = $request->whenFilled('utm', function ($utm) {\n    return $utm;\n}, function() {\n    return 'default';\n});\n```", "```php\n// POST route at /post-route\n$shouldSend = $request->mergeIfMissing('send_newsletter', 0);\n```", "```php\nRoute::post('post-route', function (Request $request) {\n    $userName = $request->input('name', 'Matt');\n});\n```", "```php\n$method = $request->method();\n\nif ($request->isMethod('patch')) {\n    // Do something if request method is PATCH\n}\n```", "```php\ndump(is_int($request->integer('some_integer'));\n// true\n\ndump(is_float($request->float('some_float'));\n// true\n\ndump(is_string($request->string('some_string'));\n// true\n\ndump($request->enum('subscription', SubscriptionStatusEnum::class));\n// 'active', assuming that's a valid status for the SubscriptionStatusEnum\n```", "```php\n// dumping the whole request\n$request->dump()\n$request->dd();\n\n// dumping just two fields\n$request->dump(['name', 'utm']);\n$request->dd(['name', 'utm']);\n```", "```php\n<!-- GET route form view at /employees/create -->\n<form method=\"post\" action=\"/employees/\">\n    @csrf\n    <input type=\"text\" name=\"employees[0][firstName]\">\n    <input type=\"text\" name=\"employees[0][lastName]\">\n    <input type=\"text\" name=\"employees[1][firstName]\">\n    <input type=\"text\" name=\"employees[1][lastName]\">\n    <input type=\"submit\">\n</form>\n```", "```php\n// POST route at /employees\nRoute::post('employees', function (Request $request) {\n    $employeeZeroFirstName = $request->input('employees.0.firstName');\n    $allLastNames = $request->input('employees.*.lastName');\n    $employeeOne = $request->input('employees.1');\n    var_dump($employeeZeroFirstname, $allLastNames, $employeeOne);\n});\n\n// If forms filled out as \"Jim\" \"Smith\" \"Bob\" \"Jones\":\n// $employeeZeroFirstName = 'Jim';\n// $allLastNames = ['Smith', 'Jones'];\n// $employeeOne = ['firstName' => 'Bob', 'lastName' => 'Jones'];\n```", "```php\nPOST /post-route HTTP/1.1\nContent-Type: application/json\n\n{\n    \"firstName\": \"Joe\",\n    \"lastName\": \"Schmoe\",\n    \"spouse\": {\n        \"firstName\": \"Jill\",\n        \"lastName\":\"Schmoe\"\n    }\n}\n```", "```php\n// Post-route\nRoute::post('post-route', function (Request $request) {\n    $firstName = $request->input('firstName');\n    $spouseFirstname = $request->input('spouse.firstName');\n});\n```", "```php\n// routes/web.php\nRoute::get('users/{id}', function ($id) {\n    // If the user visits myapp.com/users/15/, $id will equal 15\n});\n```", "```php\n<form method=\"post\" enctype=\"multipart/form-data\">\n    @csrf\n    <input type=\"text\" name=\"name\">\n    <input type=\"file\" name=\"profile_picture\">\n    <input type=\"submit\">\n</form>\n```", "```php\nRoute::post('form', function (Request $request) {\n    var_dump($request->all());\n});\n\n// Output:\n// [\n//     \"_token\" => \"token here\",\n//     \"name\" => \"asdf\",\n//     \"profile_picture\" => UploadedFile {},\n// ]\n\nRoute::post('form', function (Request $request) {\n    if ($request->hasFile('profile_picture')) {\n        var_dump($request->file('profile_picture'));\n    }\n});\n\n// Output:\n// UploadedFile (details)\n```", "```php\nif ($request->hasFile('profile_picture')) {\n    $path = $request->profile_picture->store('profiles', 's3');\n    auth()->user()->profile_picture = $path;\n    auth()->user()->save();\n}\n```", "```php\n<form method=\"post\" enctype=\"multipart/form-data\">\n```", "```php\n// routes/web.php\nRoute::get('recipes/create', [RecipeController::class, 'create']);\nRoute::post('recipes', [RecipeController::class, 'store']);\n```", "```php\n// app/Http/Controllers/RecipeController.php\nclass RecipeController extends Controller\n{\n    public function create()\n    {\n        return view('recipes.create');\n    }\n\n    public function store(Request $request)\n    {\n        $request->validate([\n            'title' => 'required|unique:recipes|max:125',\n            'body' => 'required'\n        ]);\n\n        // Recipe is valid; proceed to save it\n    }\n}\n```", "```php\n$request->validate([\n    'user.name' => 'required',\n    'user.email' => 'required|email',\n]);\n```", "```php\n'name' => 'exists:App\\Models\\Contact,name',\n'phone' => 'unique:App\\Models\\Contact,phone',\n```", "```php\nRoute::get('recipes/create', function () {\n    return view('recipes.create');\n});\n\nRoute::post('recipes', function (Illuminate\\Http\\Request $request) {\n    $validator = Validator::make($request->all(), [\n        'title' => 'required|unique:recipes|max:125',\n        'body' => 'required'\n    ]);\n\n    if ($validator->fails()) {\n        return redirect('recipes/create')\n            ->withErrors($validator)\n            ->withInput();\n    }\n\n    // Recipe is valid; proceed to save it\n});\n```", "```php\n// Both return an array of validated user input\n$validated = $request->validated();\n$validated = $validator->validated();\n```", "```php\n$validated = $request->safe()->only(['name', 'email']);\n\n$validated = $request->safe()->except(['password']);\n\n$validated = $request->safe()->all();\n```", "```php\nclass AllowedEmailDomain implements ValidationRule\n{\n    public function validate(string $attribute, mixed $value, Closure $fail): void\n    {\n        if(! in_array(Str::after($value, '@'), ['tighten.co'])){\n            $fail('The :attribute field is not from an allowed email provider.');\n        }\n    }\n}\n```", "```php\n$request->validate([\n    'email' => new AllowedEmailDomain,\n]);\n```", "```php\n@if ($errors->any())\n    <ul id=\"errors\">\n        @foreach ($errors->all() as $error)\n            <li>{{ $error }}</li>\n        @endforeach\n    </ul>\n@endif\n```", "```php\n@error('first_name')\n    <span>{{ $message }}</span>\n@enderror\n```", "```php\nphp artisan make:request CreateCommentRequest\n```", "```php\n<?php\n\nnamespace App\\Http\\Requests;\n\nuse App\\BlogPost;\nuse Illuminate\\Foundation\\Http\\FormRequest;\n\nclass CreateCommentRequest extends FormRequest\n{\n    public function authorize(): bool\n    {\n        $blogPostId = $this->route('blogPost');\n\n        return auth()->check() && BlogPost::where('id', $blogPostId)\n            ->where('user_id', auth()->id())->exists();\n    }\n\n    public function rules(): array\n    {\n        return [\n            'body' => 'required|max:1000',\n        ];\n    }\n}\n```", "```php\nRoute::post('comments', function (App\\Http\\Requests\\CreateCommentRequest $request) {\n    // Store comment\n});\n```", "```php\nRoute::post('posts', function (Request $request) {\n    $newPost = Post::create($request->all());\n});\n```", "```php\n<?php\n\nnamespace App;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Post extends Model\n{\n    // Disable mass assignment on the author_id field\n    protected $guarded = ['author_id'];\n}\n```", "```php\nRoute::post('posts', function (Request $request) {\n    $newPost = Post::create($request->only([\n        'title',\n        'body',\n    ]));\n});\n```", "```php\npublic function test_input_missing_a_title_is_rejected()\n{\n    $response = $this->post('posts', ['body' => 'This is the body of my post']);\n    $response->assertRedirect();\n    $response->assertSessionHasErrors();\n}\n```", "```php\npublic function test_valid_input_should_create_a_post_in_the_database()\n{\n    $this->post('posts', ['title' => 'Post Title', 'body' => 'This is the body']);\n    $this->assertDatabaseHas('posts', ['title' => 'Post Title']);\n}\n```"]