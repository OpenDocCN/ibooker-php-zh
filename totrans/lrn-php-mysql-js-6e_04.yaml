- en: Chapter 1\. Introduction to Dynamic Web Content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The World Wide Web is a constantly evolving network that has already traveled
    far beyond its conception in the early 1990s, when it was created to solve a specific
    problem. State-of-the-art experiments at CERN (the European Laboratory for Particle
    Physics, now best known as the operator of the Large Hadron Collider) were producing
    incredible amounts of data—so much that the data was proving unwieldy to distribute
    to the participating scientists, who were spread out across the world.
  prefs: []
  type: TYPE_NORMAL
- en: At this time, the internet was already in place, connecting several hundred
    thousand computers, so Tim Berners-Lee (a CERN fellow) devised a method of navigating
    between them using a hyperlinking framework, which came to be known as Hypertext
    Transfer Protocol, or HTTP. He also created a markup language called Hypertext
    Markup Language, or HTML. To bring these together, he wrote the first web browser
    and web server.
  prefs: []
  type: TYPE_NORMAL
- en: Today we take these tools for granted, but back then, the concept was revolutionary.
    The most connectivity so far experienced by at-home modem users was dialing up
    and connecting to a bulletin board where you could communicate and swap data only
    with other users of that service. Consequently, you needed to be a member of many
    bulletin board systems in order to effectively communicate electronically with
    your colleagues and friends.
  prefs: []
  type: TYPE_NORMAL
- en: But Berners-Lee changed all that in one fell swoop, and by the mid-1990s, there
    were three major graphical web browsers competing for the attention of five million
    users. It soon became obvious, though, that something was missing. Yes, pages
    of text and graphics with hyperlinks to take you to other pages was a brilliant
    concept, but the results didn’t reflect the instantaneous potential of computers
    and the internet to meet the particular needs of each user with dynamically changing
    content. Using the web was a very dry and plain experience, even if we did now
    have scrolling text and animated GIFs!
  prefs: []
  type: TYPE_NORMAL
- en: Shopping carts, search engines, and social networks have clearly altered how
    we use the web. In this chapter, we’ll take a brief look at the various components
    that make up the web, and the software that helps make using it a rich and dynamic
    experience.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: It is necessary to start using some acronyms more or less right away. I have
    tried to clearly explain them before proceeding, but don’t worry too much about
    what they stand for or what these names mean, because the details will become
    clear as you read on.
  prefs: []
  type: TYPE_NORMAL
- en: 'HTTP and HTML: Berners-Lee’s Basics'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: HTTP is a communication standard governing the requests and responses that are
    sent between the browser running on the end user’s computer and the web server.
    The server’s job is to accept a request from the client and attempt to reply to
    it in a meaningful way, usually by serving up a requested web page—that’s why
    the term *server* is used. The natural counterpart to a server is a *client*,
    so that term is applied both to the web browser and the computer on which it’s
    running.
  prefs: []
  type: TYPE_NORMAL
- en: Between the client and the server there can be several other devices, such as
    routers, proxies, gateways, and so on. They serve different roles in ensuring
    that the requests and responses are correctly transferred between the client and
    server. Typically, they use the internet to send this information. Some of these
    in-between devices can also help speed up the internet by storing pages or information
    locally in what is called a *cache* and then serving this content up to clients
    directly from the cache rather than fetching it all the way from the source server.
  prefs: []
  type: TYPE_NORMAL
- en: A web server can usually handle multiple simultaneous connections, and when
    not communicating with a client, it spends its time listening for an incoming
    connection. When one arrives, the server sends back a response to confirm its
    receipt.
  prefs: []
  type: TYPE_NORMAL
- en: The Request/Response Procedure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At its most basic level, the request/response process consists of a web browser
    or other client asking the web server to send it a web page and the server sending
    back the page. The browser then takes care of displaying or rendering the page
    (see [Figure 1-1](#basic_clientsolidusserver_requestsol)).
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1-1\. The basic client/server request/response sequence
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'The steps in the request and response sequence are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: You enter *http://server.com* into your browser’s address bar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your browser looks up the Internet Protocol (IP) address for *server.com*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your browser issues a request for the home page at *server.com*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The request crosses the internet and arrives at the *server.com* web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The web server, having received the request, looks for the web page on its disk.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The web server retrieves the page and returns it to the browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your browser displays the web page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For an average web page, this process also takes place once for each object
    within the page: a graphic, an embedded video or Flash file, and even a CSS template.'
  prefs: []
  type: TYPE_NORMAL
- en: In step 2, notice that the browser looks up the IP address of *server.com*.
    Every machine attached to the internet has an IP address—your computer included—but
    we generally access web servers by name, such as *google.com*. The browser consults
    an additional internet service called the Domain Name System (DNS) to find the
    server’s associated IP address and then uses it to communicate with the computer.
  prefs: []
  type: TYPE_NORMAL
- en: For dynamic web pages, the procedure is a little more involved, because it may
    bring both PHP and MySQL into the mix. For instance, you may click a picture of
    a raincoat. Then PHP will put together a request using the standard database language,
    SQL—many of whose commands you will learn in this book—and send the request to
    the MySQL server. The MySQL server will return information about the raincoat
    you selected, and the PHP code will wrap it all up in some HTML, which the server
    will send to your browser (see [Figure 1-2](#dynamic_clientsolidusserver_requestsol)).
  prefs: []
  type: TYPE_NORMAL
- en: '![A dynamic client/server request/response sequence](Images/pmj6_0102.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1-2\. A dynamic client/server request/response sequence
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'The steps are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: You enter *http://server.com* into your browser’s address bar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your browser looks up the IP address for *server.com*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your browser issues a request to that address for the web server’s home page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The request crosses the internet and arrives at the *server.com* web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The web server, having received the request, fetches the home page from its
    hard disk.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With the home page now in memory, the web server notices that it is a file incorporating
    PHP scripting and passes the page to the PHP interpreter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The PHP interpreter executes the PHP code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Some of the PHP contains SQL statements, which the PHP interpreter now passes
    to the MySQL database engine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The MySQL database returns the results of the statements to the PHP interpreter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The PHP interpreter returns the results of the executed PHP code, along with
    the results from the MySQL database, to the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The web server returns the page to the requesting client, which displays it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Although it’s helpful to be aware of this process so that you know how the three
    elements work together, in practice you don’t really need to concern yourself
    with these details, because they all happen automatically.
  prefs: []
  type: TYPE_NORMAL
- en: The HTML pages returned to the browser in each example may well contain JavaScript,
    which will be interpreted locally by the client, and which could initiate another
    request—the same way embedded objects such as images would.
  prefs: []
  type: TYPE_NORMAL
- en: The Benefits of PHP, MySQL, JavaScript, CSS, and HTML5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the start of this chapter, I introduced the world of Web 1.0, but it wasn’t
    long before the rush was on to create Web 1.1, with the development of such browser
    enhancements as Java, JavaScript, JScript (Microsoft’s slight variant of JavaScript),
    and ActiveX. On the server side, progress was being made on the Common Gateway
    Interface (CGI) using scripting languages such as Perl (an alternative to the
    PHP language) and *server-side scripting*—inserting the contents of one file (or
    the output of running a local program) into another one dynamically.
  prefs: []
  type: TYPE_NORMAL
- en: Once the dust had settled, three main technologies stood head and shoulders
    above the others. Although Perl was still a popular scripting language with a
    strong following, PHP’s simplicity and built-in links to the MySQL database program
    had earned it more than double the number of users. And JavaScript, which had
    become an essential part of the equation for dynamically manipulating Cascading
    Style Sheets (CSS) and HTML, now took on the even more muscular task of handling
    the client side of asynchronous communication (exchanging data between a client
    and server after a web page has loaded). Using asynchronous communication, web
    pages perform data handling and send requests to web servers in the background—without
    the web user being aware that this is going on.
  prefs: []
  type: TYPE_NORMAL
- en: No doubt the symbiotic nature of PHP and MySQL helped propel them both forward,
    but what attracted developers to them in the first place? The simple answer has
    to be the ease with which you can use them to quickly create dynamic elements
    on websites. MySQL is a fast and powerful yet easy-to-use database system that
    offers just about anything a website would need in order to find and serve up
    data to browsers. When PHP allies with MySQL to store and retrieve this data,
    you have the fundamental parts required for the beginnings of Web 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: And when you bring JavaScript and CSS into the mix too, you have a recipe for
    building highly dynamic and interactive websites—especially as there is now a
    wide range of sophisticated frameworks of JavaScript functions you can call on
    to really speed up web development. These include the well-known jQuery, which
    until very recently was one of the most common ways programmers accessed asynchronous
    communication features and the more recent React JavaScript library, which has
    been growing quickly in popularity. It is now one of the most widely downloaded
    and implemented frameworks, so much so that since 2020 the Indeed job site lists
    more than twice as many positions for React developers than for jQuery.
  prefs: []
  type: TYPE_NORMAL
- en: 'MariaDB: The MySQL Clone'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After Oracle purchased Sun Microsystems (the owners of MySQL), the community
    became wary that MySQL might not remain fully open source, so MariaDB was forked
    from it to keep it free under the GNU GPL. Development of MariaDB is led by some
    of the original developers of MySQL, and it retains exceedingly close compatibility
    with MySQL. Therefore, you may well encounter MariaDB on some servers in place
    of MySQL—but not to worry, everything in this book works equally well on both
    MySQL and MariaDB. For all intents and purposes, you can swap one with the other
    and notice no difference.
  prefs: []
  type: TYPE_NORMAL
- en: Anyway, as it turns out, many of the initial fears appear to have been allayed
    as MySQL remains open source, with Oracle simply charging for support and for
    editions that provide additional features such as geo-replication and automatic
    scaling. However, unlike MariaDB, MySQL is no longer community driven, so knowing
    that MariaDB will always be there if ever needed will keep many developers sleeping
    at night and probably ensures that MySQL itself will remain open source.
  prefs: []
  type: TYPE_NORMAL
- en: Using PHP
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With PHP, it’s a simple matter to embed dynamic activity in web pages. When
    you give pages the *.php* extension, they have instant access to the scripting
    language. From a developer’s point of view, all you have to do is write code such
    as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The opening `<?php` tells the web server to allow the PHP program to interpret
    all the following code up to the `?>` tag. Outside of this construct, everything
    is sent to the client as direct HTML. So, the text `Here's the latest news.` is
    simply output to the browser; within the PHP tags, the built-in `date` function
    displays the current day of the week according to the server’s system time.
  prefs: []
  type: TYPE_NORMAL
- en: 'The final output of the two parts looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'PHP is a flexible language, and some people prefer to place the PHP construct
    directly next to PHP code, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: There are even more ways of formatting and outputting information, which I’ll
    explain in the chapters on PHP. The point is that with PHP, web developers have
    a scripting language that, although not as fast as compiling your code in C or
    a similar language, is incredibly speedy and also integrates seamlessly with HTML
    markup.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: If you intend to enter the PHP examples in this book into a program editor to
    work along with me, you must remember to add `<?php` in front and `?>` after them
    to ensure that the PHP interpreter processes them. To facilitate this, you may
    wish to prepare a file called *example.php* with those tags in place.
  prefs: []
  type: TYPE_NORMAL
- en: Using PHP, you have unlimited control over your web server. Whether you need
    to modify HTML on the fly, process a credit card, add user details to a database,
    or fetch information from a third-party website, you can do it all from within
    the same PHP files in which the HTML itself resides.
  prefs: []
  type: TYPE_NORMAL
- en: Using MySQL
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Of course, there’s not a lot of point to being able to change HTML output dynamically
    unless you also have a means to track the information users provide to your website
    as they use it. In the early days of the web, many sites used “flat” text files
    to store data such as usernames and passwords. But this approach could cause problems
    if the file wasn’t correctly locked against corruption from multiple simultaneous
    accesses. Also, a flat file can get only so big before it becomes unwieldy to
    manage—not to mention the difficulty of trying to merge files and perform complex
    searches in any kind of reasonable time.
  prefs: []
  type: TYPE_NORMAL
- en: That’s where relational databases with structured querying become essential.
    And MySQL, being free to use and installed on vast numbers of internet web servers,
    rises superbly to the occasion. It is a robust and exceptionally fast database
    management system that uses English-like commands.
  prefs: []
  type: TYPE_NORMAL
- en: 'The highest level of MySQL structure is a database, within which you can have
    one or more tables that contain your data. For example, let’s suppose you are
    working on a table called *users*, within which you have created columns for *surname*,
    *firstname*, and *email*, and you now wish to add another user. One command that
    you might use to do this is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: You will previously have issued other commands to create the database and table
    and to set up all the correct fields, but the SQL `INSERT` command here shows
    how simple it can be to add new data to a database. SQL is a language designed
    in the early 1970s that is reminiscent of one of the oldest programming languages,
    COBOL. It is well suited, however, to database queries, which is why it is still
    in use after all this time.
  prefs: []
  type: TYPE_NORMAL
- en: 'It’s equally easy to look up data. Let’s assume that you have an email address
    for a user and need to look up that person’s name. To do this, you could issue
    a MySQL query such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: MySQL will then return `Smith, John` and any other pairs of names that may be
    associated with that email address in the database.
  prefs: []
  type: TYPE_NORMAL
- en: As you’d expect, there’s quite a bit more that you can do with MySQL than just
    simple `INSERT` and `SELECT` commands. For example, you can combine related data
    sets to bring related pieces of information together, ask for results in a variety
    of orders, make partial matches when you know only part of the string that you
    are searching for, return only the *n*th result, and a lot more.
  prefs: []
  type: TYPE_NORMAL
- en: Using PHP, you can make all these calls directly to MySQL without having to
    directly access the MySQL command-line interface yourself. This means you can
    save the results in arrays for processing and perform multiple lookups, each dependent
    on the results returned from earlier ones, to drill down to the item of data you
    need.
  prefs: []
  type: TYPE_NORMAL
- en: For even more power, as you’ll see later, there are additional functions built
    right into MySQL that you can call up to efficiently run common operations within
    MySQL, rather than creating them out of multiple PHP calls to MySQL.
  prefs: []
  type: TYPE_NORMAL
- en: Using JavaScript
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: JavaScript was created to enable scripting access to all the elements of an
    HTML document. In other words, it provides a means for dynamic user interaction
    such as checking email address validity in input forms and displaying prompts
    such as “Did you really mean that?” (although it cannot be relied upon for security,
    which should always be performed on the web server).
  prefs: []
  type: TYPE_NORMAL
- en: Combined with CSS (see the following section), JavaScript is the power behind
    dynamic web pages that change in front of your eyes rather than when a new page
    is returned by the server.
  prefs: []
  type: TYPE_NORMAL
- en: However, JavaScript used to be tricky to use, due to some major differences
    in the ways different browser designers have chosen to implement it. This mainly
    came about when some manufacturers tried to put additional functionality into
    their browsers at the expense of compatibility with their rivals.
  prefs: []
  type: TYPE_NORMAL
- en: Thankfully, the developers have mostly come to their senses and have realized
    the need for full compatibility with one another, so it is less necessary these
    days to have to optimize your code for different browsers. However, there remain
    millions of users using legacy browsers, and this will likely be the case for
    a good many years to come. Luckily, there are solutions for the incompatibility
    problems, and later in this book we’ll look at libraries and techniques that enable
    you to safely ignore these differences.
  prefs: []
  type: TYPE_NORMAL
- en: 'For now, let’s take a look at how to use basic JavaScript, accepted by all
    browsers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This code snippet tells the web browser to interpret everything within the
    `<script>` tags as JavaScript, which the browser does by writing the text `Today
    is` to the current document, along with the date, using the JavaScript function
    `Date`. The result will look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Unless you need to specify an exact version of JavaScript, you can normally
    omit the `type="text/javascript"` and just use `<script>` to start the interpretation
    of the JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: As previously mentioned, JavaScript was originally developed to offer dynamic
    control over the various elements within an HTML document, and that is still its
    main use. But more and more, JavaScript is being used for *Ajax*, the process
    of accessing the web server in the background.
  prefs: []
  type: TYPE_NORMAL
- en: Asynchronous communication is what allows web pages to begin to resemble standalone
    programs, because they don’t have to be reloaded in their entirety to display
    new content. Instead, an asynchronous call can pull in and update a single element
    on a web page, such as changing your photograph on a social networking site or
    replacing a button that you click with the answer to a question. This subject
    is fully covered in [Chapter 18](ch18.xhtml#using_ajax).
  prefs: []
  type: TYPE_NORMAL
- en: Then, in [#introduction_to_jquery](ch22.xhtml#introduction_to_jquery), we take
    a good look at the jQuery framework, which you can use to save reinventing the
    wheel when you need fast, cross-browser code to manipulate your web pages. Of
    course, there are other frameworks available too, so we also take a look at React,
    one of the most popular choices of today, in [Chapter 24](ch24.xhtml#introduction_to_react).
    Both are extremely reliable and are major tools in the utility kits of many seasoned
    web developers.
  prefs: []
  type: TYPE_NORMAL
- en: Using CSS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: CSS is the crucial companion to HTML, ensuring that the HTML text and embedded
    images are laid out consistently and in a manner appropriate for the user’s screen.
    With the emergence of the CSS3 standard in recent years, CSS now offers a level
    of dynamic interactivity previously supported only by JavaScript. For example,
    not only can you style any HTML element to change its dimensions, colors, borders,
    spacing, and so on, but now you can also add animated transitions and transformations
    to your web pages, using only a few lines of CSS.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using CSS can be as simple as inserting a few rules between `<style>` and `</style>`
    tags in the head of a web page, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: These rules change the default text alignment of the `<p>` tag so that paragraphs
    contained in it are fully justified and use the Helvetica font.
  prefs: []
  type: TYPE_NORMAL
- en: As you’ll learn in [Chapter 19](ch19.xhtml#introduction_to_css), there are many
    different ways you can lay out CSS rules, and you can also include them directly
    within tags or save a set of rules to an external file to be loaded in separately.
    This flexibility not only lets you style your HTML precisely but can also (for
    example) provide built-in hover functionality to animate objects as the mouse
    passes over them. You will also learn how to access all of an element’s CSS properties
    from JavaScript as well as HTML.
  prefs: []
  type: TYPE_NORMAL
- en: And Then There’s HTML5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As useful as all these additions to the web standards became, they were not
    enough for ever-more ambitious developers. For example, there was still no simple
    way to manipulate graphics in a web browser without resorting to plug-ins such
    as Flash. And the same went for inserting audio and video into web pages. Plus,
    several annoying inconsistencies had crept into HTML during its evolution.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, to clear all this up and take the internet beyond Web 2.0 and into its
    next iteration, a new standard for HTML was created to address all these shortcomings:
    *HTML5*. Its development began as long ago as 2004, when the first draft was drawn
    up by the Mozilla Foundation and Opera Software (developers of two popular web
    browsers), but it wasn’t until the start of 2013 that the final draft was submitted
    to the World Wide Web Consortium (W3C), the international governing body for web
    standards.'
  prefs: []
  type: TYPE_NORMAL
- en: It has taken a few years for HTML5 to develop, but now we are at a very solid
    and stable version 5.1 (since 2016). It’s a never-ending cycle of development,
    though, and more functionality is sure to be built into it over time, with version
    5.2 (planned to make the plug-in system obsolete) released as a W3C recommendation
    in 2017, HTML 5.3  (with proposed features such as auto-capitalization) still
    in planning as of 2020, and so on. Some of the best features in HTML5 for handling
    and displaying media include the `<audio>`, `<video>`, and `<canvas>` elements,
    which add sound, video, and advanced graphics. Everything you need to know about
    these and all other aspects of HTML5 is covered in detail starting in [Chapter 25](ch25.xhtml#introduction_to_html5).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: One of the little things I like about the HTML5 specification is that XHTML
    syntax is no longer required for self-closing elements. In the past, you could
    display a line break using the `<br>` element. Then, to ensure future compatibility
    with XHTML (the planned replacement for HTML that never happened), this was changed
    to `<br />`, in which a closing `/` character was added (since all elements were
    expected to include a closing tag featuring this character). But now things have
    gone full circle, and you can use either version of these types of elements. So,
    for the sake of brevity and fewer keystrokes, in this book I have reverted to
    the former style of `<br>`, `<hr>`, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: The Apache Web Server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In addition to PHP, MySQL, JavaScript, CSS, and HTML5, there’s a sixth hero
    in the dynamic web: the web server. In the case of this book, that means the Apache
    web server. We’ve discussed a little of what a web server does during the HTTP
    server/client exchange, but it does much more behind the scenes.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, Apache doesn’t serve up just HTML files—it handles a wide range
    of files, from images and Flash files to MP3 audio files, RSS (Really Simple Syndication)
    feeds, and so on. And these objects don’t have to be static files such as GIF
    images. They can all be generated by programs such as PHP scripts. That’s right:
    PHP can even create images and other files for you, either on the fly or in advance
    to serve up later.'
  prefs: []
  type: TYPE_NORMAL
- en: To do this, you normally have modules either precompiled into Apache or PHP
    or called up at runtime. One such module is the GD (Graphics Draw) library, which
    PHP uses to create and handle graphics.
  prefs: []
  type: TYPE_NORMAL
- en: Apache also supports a huge range of modules of its own. In addition to the
    PHP module, the most important for your purposes as a web programmer are the modules
    that handle security. Other examples are the Rewrite module, which enables the
    web server to handle a range of URL types and rewrite them to its own internal
    requirements, and the Proxy module, which you can use to serve up often-requested
    pages from a cache to ease the load on the server.
  prefs: []
  type: TYPE_NORMAL
- en: Later in the book, you’ll see how to use some of these modules to enhance the
    features provided by the three core technologies.
  prefs: []
  type: TYPE_NORMAL
- en: Handling Mobile Devices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are now firmly in a world of interconnected mobile computing devices, and
    the concept of developing websites solely for desktop computers has become rather
    dated. Instead, developers now aim to develop responsive websites and web apps
    that tailor themselves to the environment in which they find themselves running.
  prefs: []
  type: TYPE_NORMAL
- en: So, new in this edition, I show how you can easily create these types of products
    using just the technologies detailed in this book, along with the powerful jQuery
    Mobile library of responsive JavaScript functions. With it, you’ll be able to
    focus on the content and usability of your websites and web apps, knowing that
    how they display will be automatically optimized for a range of different computing
    devices—one less thing for you to worry about.
  prefs: []
  type: TYPE_NORMAL
- en: To demonstrate how to make full use of its power, the final chapter of this
    book creates a simple social networking example website, using jQuery to make
    it fully responsive and ensure it displays well on anything from a small mobile
    phone screen to a tablet or a desktop computer. We could equally have used React
    (or other JavaScript libraries or frameworks), but perhaps that’s an exercise
    you’ll like to set yourself once you’ve completed this book.
  prefs: []
  type: TYPE_NORMAL
- en: About Open Source
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The technologies in this book are open source: anyone is allowed to read and
    change the code. Whether or not this status is the reason these technologies are
    so popular has often been debated, but PHP, MySQL, and Apache *are* the three
    most commonly used tools in their categories. What can be said definitively, though,
    is that their being open source means that they have been developed in the community
    by teams of programmers writing the features they themselves want and need, with
    the original code available for all to see and change. Bugs can be found quickly,
    and security breaches can be prevented before they happen.'
  prefs: []
  type: TYPE_NORMAL
- en: 'There’s another benefit: all of these programs are free to use. There’s no
    worrying about having to purchase additional licenses if you have to scale up
    your website and add more servers, and you don’t need to check the budget before
    deciding whether to upgrade to the latest versions of these products.'
  prefs: []
  type: TYPE_NORMAL
- en: Bringing It All Together
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The real beauty of PHP, MySQL, JavaScript (sometimes aided by React or other
    frameworks), CSS, and HTML5 is the wonderful way in which they all work together
    to produce dynamic web content: PHP handles all the main work on the web server,
    MySQL manages all the data, and the combination of CSS and JavaScript looks after
    web page presentation. JavaScript can also talk with your PHP code on the web
    server whenever it needs to update something (either on the server or on the web
    page). And with the powerful features in HTML5, such as the canvas, audio and
    video, and geolocation, you can make your web pages highly dynamic, interactive,
    and multimedia-packed.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Without using program code, let’s summarize the contents of this chapter by
    looking at the process of combining some of these technologies into an everyday
    asynchronous communication feature that many websites use: checking whether a
    desired username already exists on the site when a user is signing up for a new
    account. A good example of this can be seen with Gmail (see [Figure 1-3](#gmail-signup)).'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/pmj6_0103.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1-3\. Gmail uses asynchronous communication to check the availability
    of usernames
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'The steps involved in this asynchronous process will be similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The server outputs the HTML to create the web form, which asks for the necessary
    details, such as username, first name, last name, and email address.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the same time, the server attaches some JavaScript to the HTML to monitor
    the username input box and check for two things: whether some text has been typed
    into it, and whether the input has been deselected because the user has clicked
    another input box.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the text has been entered and the field deselected, in the background the
    JavaScript code passes the username that was entered back to a PHP script on the
    web server and awaits a response.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The web server looks up the username and replies back to the JavaScript regarding
    whether that name has already been taken.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The JavaScript then places an indication next to the username input box to show
    whether the name is available to the user—perhaps a green checkmark or a red cross
    graphic, along with some text.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the username is not available and the user still submits the form, the JavaScript
    interrupts the submission and reemphasizes (perhaps with a larger graphic and/or
    an alert box) that the user needs to choose another username.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Optionally, an improved version of this process could even look at the username
    requested by the user and suggest an alternative that is currently available.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All of this takes place quietly in the background and makes for a comfortable
    and seamless user experience. Without asynchronous communication, the entire form
    would have to be submitted to the server, which would then send back HTML, highlighting
    any mistakes. It would be a workable solution but nowhere near as tidy or pleasurable
    as on-the-fly form field processing.
  prefs: []
  type: TYPE_NORMAL
- en: Asynchronous communication can be used for a lot more than simple input verification
    and processing, though; we’ll explore many additional things that you can do with
    it later in this book.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you have read a good introduction to the core technologies
    of PHP, MySQL, JavaScript, CSS, and HTML5 (as well as Apache) and have learned
    how they work together. In [Chapter 2](ch02.xhtml#setting_up_a_development_server),
    we’ll look at how you can install your own web development server on which to
    practice everything that you will be learning.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What four components (at the minimum) are needed to create a fully dynamic web
    page?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What does *HTML* stand for?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why does the name *MySQL* contain the letters *SQL*?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*PHP* and *JavaScript* are both programming languages that generate dynamic
    results for web pages. What is their main difference, and why would you use both
    of them?'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What does *CSS* stand for?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: List three major new elements introduced in HTML5.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you encounter a bug (which is rare) in one of the open source tools, how
    do you think you could get it fixed?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why is a framework such as jQuery or React so important for developing modern
    websites and web apps?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: See [“Chapter 1 Answers”](app01_split_000.xhtml#chapter_1_answers) in the [Appendix A](app01_split_000.xhtml#solutions_to_the_chapter_questions)
    for the answers to these questions.
  prefs: []
  type: TYPE_NORMAL
