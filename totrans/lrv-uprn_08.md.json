["```php\nphp artisan make:controller PostController\n```", "```php\n* * * * * php /home/myapp.com/artisan schedule:run >> /dev/null 2>&1\n```", "```php\nphp artisan make:command WelcomeNewUsers --command=email:newusers\n```", "```php\n<?php\n\nnamespace App\\Console\\Commands;\n\nuse Illuminate\\Console\\Command;\n\nclass WelcomeNewUsers extends Command\n{\n    /**\n * The name and signature of the console command\n *\n * @var string\n */\n    protected $signature = 'email:newusers';\n\n    /**\n * The console command description\n *\n * @var string\n */\n    protected $description = 'Command description';\n\n    /**\n * Execute the console command.\n */\n    public function handle(): void\n    {\n        //\n    }\n}\n```", "```php\n// ...\n\nclass WelcomeNewUsers extends Command\n{\n    public function handle(): void\n    {\n        User::signedUpThisWeek()->each(function ($user) {\n            Mail::to($user)->send(new WelcomeEmail);\n        });\n    }\n```", "```php\n...\nclass WelcomeNewUsers extends Command\n{\n    public function __construct(UserMailer $userMailer)\n    {\n        parent::__construct();\n\n        $this->userMailer = $userMailer\n    }\n\n    public function handle(): void\n    {\n        $this->userMailer->welcomeNewUsers();\n    }\n```", "```php\nprotected $signature = 'password:reset {userId} {--sendEmail}';\n```", "```php\npassword:reset {userId}\n```", "```php\npassword:reset {userId?}\n```", "```php\npassword:reset {userId=1}\n```", "```php\npassword:reset {userId} {--sendEmail}\n```", "```php\npassword:reset {userId} {--password=}\n```", "```php\npassword:reset {userId} {--queue=default}\n```", "```php\npassword:reset {userIds*}\n\npassword:reset {--ids=*}\n```", "```php\n// Argument\nphp artisan password:reset 1 2 3\n\n// Option\nphp artisan password:reset --ids=1 --ids=2 --ids=3\n```", "```php\nprotected $signature = 'password:reset\n {userId : The ID of the user}\n {--sendEmail : Whether to send user an email}';\n```", "```php\n// With definition \"password:reset {userId}\"\nphp artisan password:reset 5\n\n// $this->arguments() returns this array\n[\n    \"command\": \"password:reset\",\n    \"userId\": \"5\",\n]\n\n// $this->argument('userId') returns this string\n\"5\"\n```", "```php\n// With definition \"password:reset {--userId=}\"\nphp artisan password:reset --userId=5\n\n// $this->options() returns this array\n[\n    \"userId\" => \"5\",\n    \"help\" => false,\n    \"quiet\" => false,\n    \"verbose\" => false,\n    \"version\" => false,\n    \"ansi\" => false,\n    \"no-ansi\" => false,\n    \"no-interaction\" => false,\n    \"env\" => null,\n]\n\n// $this->option('userId') returns this string\n\"5\"\n```", "```php\npublic function handle(): void\n{\n    // All arguments, including the command name\n    $arguments = $this->arguments();\n\n    // Just the 'userId' argument\n    $userid = $this->argument('userId');\n\n    // All options, including some defaults like 'no-interaction' and 'env'\n    $options = $this->options();\n\n    // Just the 'sendEmail' option\n    $sendEmail = $this->option('sendEmail');\n}\n```", "```php\n$email = $this->ask('What is your email address?');\n```", "```php\n$password = $this->secret('What is the DB password?');\n```", "```php\nif ($this->confirm('Do you want to truncate the tables?')) {\n    //\n}\n```", "```php\n$album = $this->anticipate('What is the best album ever?', [\n    \"The Joshua Tree\", \"Pet Sounds\", \"What's Going On\"\n]);\n```", "```php\n$winner = $this->choice(\n    'Who is the best football team?',\n    ['Gators', 'Wolverines'],\n    0\n);\n```", "```php\n$winner = $this->choice(\n    'Who is the best football team?',\n    ['gators' => 'Gators', 'wolverines' => 'Wolverines'],\n    'gators'\n);\n```", "```php\n$this->info('Your command has run successfully.');\n```", "```php\n$headers = ['Name', 'Email'];\n\n$data = [\n    ['Dhriti', 'dhriti@amrit.com'],\n    ['Moses', 'moses@gutierez.com'],\n];\n\n// Or, you could get similar data from the database:\n$data = App\\User::all(['name', 'email'])->toArray();\n\n$this->table($headers, $data);\n```", "```php\n+---------+--------------------+\n| Name    | Email              |\n+---------+--------------------+\n| Dhriti  | dhriti@amrit.com   |\n| Moses   | moses@gutierez.com |\n+---------+--------------------+\n```", "```php\n$totalUnits = 350;\n$this->output->progressStart($totalUnits);\n\nfor ($i = 0; $i < $totalUnits; $i++) {\n    sleep(1);\n\n    $this->output->progressAdvance();\n}\n\n$this->output->progressFinish();\n```", "```php\n// routes/console.php\nArtisan::command(\n    'password:reset {userId} {--sendEmail}',\n    function ($userId, $sendEmail) {\n        $userId = $this->argument('userId');\n        // Do something...\n    }\n);\n```", "```php\nRoute::get('test-artisan', function () {\n    $exitCode = Artisan::call('password:reset', [\n        'userId' => 15,\n        '--sendEmail' => true,\n    ]);\n});\n```", "```php\nArtisan::call('password:reset 15 --sendEmail')\n```", "```php\npublic function handle(): void\n{\n    $this->callSilent('password:reset', [\n        'userId' => 15,\n    ]);\n}\n```", "```php\n$ php artisan tinker\n\n>>> $user = new App\\User;\n=> App\\User: {}\n>>> $user->email = 'matt@mattstauffer.com';\n=> \"matt@mattstauffer.com\"\n>>> $user->password = bcrypt('superSecret');\n=> \"$2y$10$TWPGBC7e8d1bvJ1q5kv.VDUGfYDnE9gANl4mleuB3htIY2dxcQfQ5\"\n>>> $user->save();\n=> true\n\n```", "```php\n$ php artisan dump-server\n\nLaravel Var Dump Server\n=======================\n\n [OK] Server listening on tcp://127.0.0.1:9912\n\n // Quit the server with CONTROL-C.\n```", "```php\nRoute::get('/', function () {\n    dump('Dumped Value');\n\n    return 'Hello World';\n});\n```", "```php\nGET http://myapp.test/\n--------------------\n\n ------------ ---------------------------------\n  date         Tue, 18 Sep 2018 22:43:10 +0000\n  controller   \"Closure\"\n  source       web.php on line 20\n  file         routes/web.php\n ------------ ---------------------------------\n\n\"Dumped Value\"\n```", "```php\npublic function test_empty_log_command_empties_logs_table()\n{\n    DB::table('logs')->insert(['message' => 'Did something']);\n    $this->assertCount(1, DB::table('logs')->get());\n\n    $this->artisan('logs:empty'); // Same as Artisan::call('logs:empty');\n    $this->assertCount(0, DB::table('logs')->get());\n}\n\n```", "```php\npublic function testItCreatesANewUser()\n{\n    $this->artisan('myapp:create-user')\n        ->expectsQuestion(\"What's the name of the new user?\", \"Wilbur Powery\")\n        ->expectsQuestion(\"What's the email of the new user?\", \"wilbur@thisbook.co\")\n        ->expectsQuestion(\"What's the password of the new user?\", \"secret\")\n        ->expectsOutput(\"User Wilbur Powery created!\");\n\n    $this->assertDatabaseHas('users', [\n        'email' => 'wilbur@thisbook.co'\n    ]);\n}\n```"]