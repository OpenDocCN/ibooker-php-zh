- en: Chapter 13\. JSON
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Similar to XML, JavaScript Object Notation (JSON) was designed as a standardized
    data-interchange format. However, unlike XML, JSON is extremely lightweight and
    human-readable. While it takes many syntax cues from JavaScript, JSON is designed
    to be language-independent.
  prefs: []
  type: TYPE_NORMAL
- en: 'JSON is built on two structures: collections of name/value pairs called *objects*
    (equivalent to PHP’s associative arrays) and ordered lists of values called *arrays*
    (equivalent to PHP’s indexed arrays). Each value can be one of a number of types:
    an object, an array, a string, a number, the Boolean values `TRUE` or `FALSE`,
    or `NULL` (indicating a lack of a value).'
  prefs: []
  type: TYPE_NORMAL
- en: Using JSON
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *json* extension, included by default in PHP installations, natively supports
    converting data to JSON format from PHP variables and vice versa.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get a JSON representation of a PHP variable, use `json_encode()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, if you have a string containing JSON data, you can turn it into
    a PHP variable using `json_decode()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: If the string is invalid JSON, or if the string is not encoded in UTF-8 format,
    a single `NULL` value is returned instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'The value types in JSON are converted to PHP equivalents as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`object`'
  prefs: []
  type: TYPE_NORMAL
- en: An associative array containing the object’s key-value pairs. Each value is
    converted into its PHP equivalent as well.
  prefs: []
  type: TYPE_NORMAL
- en: '`array`'
  prefs: []
  type: TYPE_NORMAL
- en: An indexed array containing the contained values, each converted into its PHP
    equivalent as well.
  prefs: []
  type: TYPE_NORMAL
- en: '`string`'
  prefs: []
  type: TYPE_NORMAL
- en: Converts directly into a PHP string.
  prefs: []
  type: TYPE_NORMAL
- en: '`number`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns a number. If the value is too large to be represented by PHP’s number
    value, it returns `NULL`, unless `json_decode()` is called with the `JSON_BIGINT​_AS_STRING`
    (in which case, a string is returned).
  prefs: []
  type: TYPE_NORMAL
- en: '`boolean`'
  prefs: []
  type: TYPE_NORMAL
- en: The Boolean `true` value is converted to `TRUE`; the Boolean `false` value is
    converted to `FALSE`.
  prefs: []
  type: TYPE_NORMAL
- en: '`null`'
  prefs: []
  type: TYPE_NORMAL
- en: The `null` value, and any value that cannot be decoded, is converted to `NULL`.
  prefs: []
  type: TYPE_NORMAL
- en: Serializing PHP Objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Despite the similar names, there is no direct translation between PHP objects
    and JSON objects—what JSON calls an “object” is really an associative array. To
    convert JSON data into an instance of a PHP object class, you must write code
    to do so based on the format returned by the API.
  prefs: []
  type: TYPE_NORMAL
- en: However, the `JsonSerializable` interface allows you to convert objects *into*
    JSON data however you like. If an object class does not implement the interface,
    `json_encode()` simply creates a JSON object containing keys and values corresponding
    to the object’s data members.
  prefs: []
  type: TYPE_NORMAL
- en: Otherwise, `json_encode()` calls the `jsonSerialize()` method on the class and
    uses that to serialize the object’s data.
  prefs: []
  type: TYPE_NORMAL
- en: '[Example 13-1](#example_onethree_onedot_book_and_author) adds the `JsonSerializable`
    interface to the `Book` and `Author` classes.'
  prefs: []
  type: TYPE_NORMAL
- en: Example 13-1\. Book and Author JSON serialization
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Creating a PHP object from JSON data requires you to write code to perform the
    translation.
  prefs: []
  type: TYPE_NORMAL
- en: '[Example 13-2](#example_onethree_twodot_book_and_author) shows a class implementing
    factory-style transformation of JSON data into `Book` and `Author` instances into
    PHP objects.'
  prefs: []
  type: TYPE_NORMAL
- en: Example 13-2\. Book and Author JSON serialization by factory
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The JSON parser functions have several options you can set to control the conversion
    process.
  prefs: []
  type: TYPE_NORMAL
- en: 'For `json_decode()`, the most common options include:'
  prefs: []
  type: TYPE_NORMAL
- en: '`JSON_BIGINT_AS_STRING`'
  prefs: []
  type: TYPE_NORMAL
- en: When decoding a number that is too large to be represented as a PHP number type,
    returns that value as a string instead.
  prefs: []
  type: TYPE_NORMAL
- en: '`JSON_OBJECT_AS_ARRAY`'
  prefs: []
  type: TYPE_NORMAL
- en: Decodes JSON objects as PHP arrays.
  prefs: []
  type: TYPE_NORMAL
- en: 'For `json_encode()`, the most common options include:'
  prefs: []
  type: TYPE_NORMAL
- en: '`JSON_FORCE_OBJECT`'
  prefs: []
  type: TYPE_NORMAL
- en: Encodes indexed arrays from the PHP values as JSON objects instead of JSON arrays.
  prefs: []
  type: TYPE_NORMAL
- en: '`JSON_NUMERIC_CHECK`'
  prefs: []
  type: TYPE_NORMAL
- en: Encodes strings that represent number values as JSON numbers, rather than as
    JSON strings. In practice, you’re better off converting manually, so you’re aware
    of what the types are.
  prefs: []
  type: TYPE_NORMAL
- en: '`JSON_PRETTY_PRINT`'
  prefs: []
  type: TYPE_NORMAL
- en: Uses whitespace to format the returned data to something more human-readable.
    Not strictly necessary, but makes debugging simpler.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, the following options can be used for both `json_encode()` and `json_decode()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`JSON_INVALID_UTF8_IGNORE`'
  prefs: []
  type: TYPE_NORMAL
- en: Ignores invalid UTF-8 characters. If `JSON_INVALID_UTF8_SUBSTITUTE` is also
    set, replaces them; otherwise, drops them in the resulting string.
  prefs: []
  type: TYPE_NORMAL
- en: '`JSON_INVALID_UTF8_SUBSTITUTE`'
  prefs: []
  type: TYPE_NORMAL
- en: Replaces invalid UTF-8 characters with `\0xfffd` (the Unicode character `'REPLACEMENT
    CHARACTER'`).
  prefs: []
  type: TYPE_NORMAL
- en: '`JSON_THROW_ON_ERROR`'
  prefs: []
  type: TYPE_NORMAL
- en: Throws an error instead of populating the global last error state when an error
    occurs.
  prefs: []
  type: TYPE_NORMAL
- en: What’s Next
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you’re writing PHP, one of the most important things to consider is the
    security of your code, from how well the code can absorb and deflect attacks to
    how you keep your own and your users’ data safe. The next chapter provides guidance
    and best practices to help you avert security-related disasters.
  prefs: []
  type: TYPE_NORMAL
