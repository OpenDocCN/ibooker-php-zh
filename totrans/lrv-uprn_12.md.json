["```php\n$this->*`assertWHATEVER`*(*`$expected`*, *`$real`*);\n\n```", "```php\n$multiplicationResult = $myCalculator->multiply(5, 3);\n$this->assertEqual(15, $multiplicationResult);\n```", "```php\n<?php\n\nnamespace Tests\\Feature;\n\n// use Illuminate\\Foundation\\Testing\\RefreshDatabase;\nuse Tests\\TestCase;\n\nclass ExampleTest extends TestCase\n{\n    /**\n * A basic test example.\n */\n    public function test_the_application_returns_a_successful_response(): void\n    {\n        $response = $this->get('/');\n\n        $response->assertStatus(200);\n    }\n}\n```", "```php\n  PASS  Tests\\Unit\\ExampleTest\n  ✓ that true is true\n\n   PASS  Tests\\Feature\\ExampleTest\n  ✓ the application returns a successful response\n\n  Tests:  2 passed (2 assertions)\n  Time:   0.25s\n```", "```php\npublic function test_example()\n{\n    $response = $this->get('/');\n\n    $response->assertStatus(301);\n}\n```", "```php\nphp artisan make:test SubscriptionTest --unit\n```", "```php\n   PASS  Tests\\Unit\\ExampleTest\n  ✓ that true is true\n\n   PASS  Tests\\Feature\\ExampleTest\n  ✓ the application returns a successful response\n\n   FAIL  Tests\\Feature\\FailingTest\n  ✕ example\n\n  FAILED  Tests\\Feature\\FailingTest > example\n  Expected status code [301] but received 200\\. Failed asserting that\n    301 is identical to 200.\n\n  at tests/Feature/FailingTest.php:20\n    16|     public function test_example()\n    17|     {\n    18|         $response = $this->get('/');\n    19|\n  > 20|         $response->assertStatus(301);\n    21|     }\n    22| }\n    23|\n\n  Tests:  1 failed, 2 passed (3 assertions)\n  Duration: 1.10s\n```", "```php\nclass NamingTest\n{\n    public function test_it_names_things_well()\n    {\n        // Runs as \"It names things well\"\n    }\n\n    public function testItNamesThingsWell()\n    {\n        // Runs as \"It names things well\"\n    }\n\n    /** @test */\n    public function it_names_things_well()\n    {\n        // Runs as \"It names things well\"\n    }\n\n    public function it_names_things_well()\n    {\n        // Doesn't run\n    }\n}\n```", "```php\nclass GeometryTest extends TestCase\n{\n    public function test_it_calculates_area()\n    {\n        $square = new Square;\n        $square->sideLength = 4;\n\n        $calculator = new GeometryCalculator;\n\n        $this->assertEquals(16, $calculator->area($square));\n    }\n```", "```php\nclass PopularityTest extends TestCase\n{\n    use RefreshDatabase;\n\n    public function test_votes_matter_more_than_views()\n    {\n        $package1 = Package::make(['votes' => 1, 'views' => 0]);\n        $package2 = Package::make(['votes' => 0, 'views' => 1]);\n\n        $this->assertTrue($package1->popularity > $package2->popularity);\n    }\n```", "```php\npublic function test_it_stores_new_packages()\n{\n    $response = $this->post(route('packages.store'), [\n        'name' => 'The greatest package',\n    ]);\n\n    $response->assertOk();\n}\n```", "```php\npublic function test_the_api_route_stores_new_packages()\n{\n    $response = $this->postJson(route('api.packages.store'), [\n        'name' => 'The greatest package',\n    ], ['X-API-Version' => '17']);\n\n    $response->assertOk();\n}\n```", "```php\n$response = $this->get('terms');\n$response->assertOk();\n```", "```php\n$response = $this->post('articles', [\n    'title' => 'Testing Laravel',\n    'body'  => 'My article about testing Laravel',\n]);\n// Assuming this returns 201 CREATED...\n$response->assertSuccessful();\n```", "```php\n$response = $this->patch('settings', ['password' => 'abc']);\n$response->assertUnauthorized();\n```", "```php\n$response = $this->actingAs($normalUser)->get('admin');\n$response->assertForbidden();\n```", "```php\n$response = $this->get('posts/first-post');\n$response->assertNotFound();\n```", "```php\n$response = $this->get('admin');\n$response->assertStatus(401); // Unauthorized\n```", "```php\n$package = Package::factory()->create();\n$response = $this->get(route('packages.index'));\n$response->assertSee($package->name);\n```", "```php\n$this->postJson(route('packages.store'), ['name' => 'GreatPackage2000']);\n$response = $this->getJson(route('packages.index'));\n$response->assertJson(['name' => 'GreatPackage2000']);\n```", "```php\n$package = Package::factory()->create();\n$response = $this->get(route('packages.show'));\n$response->assertViewHas('name', $package->name);\n```", "```php\n$response = $this->get('beta/enable');\n$response->assertSessionHas('beta-enabled', true);\n```", "```php\n$response = $this->post('users', ['name' => 'Abdullah']);\n// Assuming it errored, check that the entered name is flashed;\n$response->assertSessionHasInput('name', 'Abdullah');\n```", "```php\n// Assuming the \"/form\" route requires an email field, and we're\n// posting an empty submission to it to trigger the error\n$response = $this->post('form', []);\n\n$response->assertSessionHasErrors();\n$response->assertSessionHasErrors([\n    'email' => 'The email field is required.',\n ]);\n$response->assertSessionHasErrors(\n    ['email' => '<p>The email field is required.</p>'],\n    '<p>:message</p>'\n);\n```", "```php\n$response = $this->post('settings', ['dismiss-warning']);\n$response->assertCookie('warning-dismiss', true);\n```", "```php\n$response->assertCookieExpired('warning-dismiss');\n```", "```php\n$response->assertCookieNotExpired('warning-dismiss');\n```", "```php\n$response = $this->post(route('packages.store'), [\n    'email' => 'invalid'\n]);\n\n$response->assertRedirect(route('packages.create'));\n```", "```php\npublic function test_guests_cant_view_dashboard()\n{\n    $user = User::factory()->guest()->create();\n    $response = $this->actingAs($user)->get('dashboard');\n    $response->assertStatus(401); // Unauthorized\n}\n\npublic function test_members_can_view_dashboard()\n{\n    $user = User::factory()->member()->create();\n    $response = $this->actingAs($user)->get('dashboard');\n    $response->assertOk();\n}\n\npublic function test_members_and_guests_cant_view_statistics()\n{\n    $guest = User::factory()->guest()->create();\n    $response = $this->actingAs($guest)->get('statistics');\n    $response->assertStatus(401); // Unauthorized\n\n    $member = User::factory()->member()->create();\n    $response = $this->actingAs($member)->get('statistics');\n    $response->assertStatus(401); // Unauthorized\n}\n\npublic function test_admins_can_view_statistics()\n{\n    $user = User::factory()->admin()->create();\n    $response = $this->actingAs($user)->get('statistics');\n    $response->assertOk();\n}\n```", "```php\n$response = $this->withSession([\n    'alert-dismissed' => true,\n])->get('dashboard');\n```", "```php\n$response = $this->withHeaders([\n    'X-THE-ANSWER' => '42',\n])->get('the-restaurant-at-the-end-of-the-universe');\n```", "```php\n// routes/web.php\nRoute::get('has-exceptions', function () {\n    throw new Exception('Stop!');\n});\n\n// tests/Feature/ExceptionsTest.php\npublic function test_exception_in_route()\n{\n    $this->get('/has-exceptions');\n\n    $this->assertTrue(true);\n}\n```", "```php\n// tests/Feature/ExceptionsTest.php\npublic function test_exception_in_route()\n{\n    // Now throws an error\n    $this->withoutExceptionHandling();\n\n    $this->get('/has-exceptions');\n\n    $this->assertTrue(true);\n}\n```", "```php\n$response = $this->get('/');\n\n$response->dumpHeaders();\n$response->dump();\n$response->dd();\n```", "```php\n$response = $this->get('/');\n\n$response->dumpSession();\n$response->dumpSession(['message']);\n```", "```php\npublic function test_create_package_page_stores_package()\n{\n    $this->post(route('packages.store'), [\n        'name' => 'Package-a-tron',\n    ]);\n\n    $this->assertDatabaseHas('packages', ['name' => 'Package-a-tron']);\n}\n```", "```php\npublic function test_undeletable_packages_cant_be_deleted()\n{\n    // Create undeletable model\n    $package = Package::factory()->create([\n        'name' => 'Package-a-tron',\n        'is_deletable' => false,\n    ]);\n\n    $this->post(route('packages.delete', $package));\n\n    // Can check existence or whether it was soft deleted\n    $this->assertModelExists($package);\n    $this->assertNotSoftDeleted($package);\n\n    $package->update(['is_deletable' => true]);\n\n    $this->post(route('packages.delete', $package));\n\n    // Can check existence or whether it was soft deleted\n    $this->assertModelMissing($package);\n    $this->assertSoftDeleted($package);\n}\n```", "```php\n$this->seed(); // Seeds all\n$this->seed(UserSeeder::class); // Seeds users\n```", "```php\npublic function test_controller_does_some_thing()\n{\n    Event::fake();\n\n    // Call controller and assert it does whatever you want without\n    // worrying about it pinging Slack\n}\n```", "```php\npublic function test_signing_up_users_notifies_slack()\n{\n    Event::fake();\n\n    // Sign user up\n\n    Event::assertDispatched(UserJoined::class, function ($event) use ($user) {\n        return $event->user->id === $user->id;\n    });\n\n    // Or sign multiple users up and assert it was dispatched twice\n\n    Event::assertDispatched(UserJoined::class, 2);\n\n    // Or sign up with validation failures and assert it wasn't dispatched\n\n    Event::assertNotDispatched(UserJoined::class);\n}\n```", "```php\npublic function test_popularity_is_calculated()\n{\n    Bus::fake();\n\n    // Synchronize package data...\n\n    // Assert a job was dispatched\n    Bus::assertDispatched(\n        CalculatePopularity::class,\n        function ($job) use ($package) {\n            return $job->package->id === $package->id;\n        }\n    );\n\n    // Assert a job was not dispatched\n    Bus::assertNotDispatched(DestroyPopularityMaybe::class);\n}\n\npublic function test_popularity_calculation_is_queued()\n{\n    Queue::fake();\n\n    // Synchronize package data...\n\n    // Assert a job was pushed to any queue\n    Queue::assertPushed(\n        CalculatePopularity::class,\n        function ($job) use ($package) {\n        return $job->package->id === $package->id;\n        }\n    );\n\n    // Assert a job was pushed to a given queue named \"popularity\"\n    Queue::assertPushedOn('popularity', CalculatePopularity::class);\n\n    // Assert a job was pushed twice\n    Queue::assertPushed(CalculatePopularity::class, 2);\n\n    // Assert a job was not pushed\n    Queue::assertNotPushed(DestroyPopularityMaybe::class);\n}\n```", "```php\npublic function test_package_authors_receive_launch_emails()\n{\n    Mail::fake();\n\n    // Make a package public for the first time...\n\n    // Assert a message was sent to a given email address\n    Mail::assertSent(PackageLaunched::class, function ($mail) use ($package) {\n        return $mail->package->id === $package->id;\n    });\n\n    // Assert a message was sent to given email addresses\n    Mail::assertSent(PackageLaunched::class, function ($mail) use ($package) {\n        return $mail->hasTo($package->author->email) &&\n               $mail->hasCc($package->collaborators) &&\n               $mail->hasBcc('admin@novapackages.com');\n    });\n\n    // Or, launch two packages...\n\n    // Assert a mailable was sent twice\n    Mail::assertSent(PackageLaunched::class, 2);\n\n    // Assert a mailable was not sent\n    Mail::assertNotSent(PackageLaunchFailed::class);\n}\n```", "```php\npublic function test_users_are_notified_of_new_package_ratings()\n{\n    Notification::fake();\n\n    // Perform package rating...\n\n    // Assert author was notified\n    Notification::assertSentTo(\n        $package->author,\n        PackageRatingReceived::class,\n        function ($notification, $channels) use ($package) {\n            return $notification->package->id === $package->id;\n        }\n    );\n\n    // Assert a notification was sent to the given users\n    Notification::assertSentTo(\n        [$package->collaborators], PackageRatingReceived::class\n    );\n\n    // Or, perform a duplicate package rating...\n\n    // Assert a notification was not sent\n    Notification::assertNotSentTo(\n        [$package->author], PackageRatingReceived::class\n    );\n}\n```", "```php\npublic function test_users_are_notified_by_their_preferred_channel()\n{\n    Notification::fake();\n\n    $user = User::factory()->create(['slack_preferred' => true]);\n\n    // Perform package rating...\n\n    // Assert author was notified via Slack\n    Notification::assertSentTo(\n        $user,\n        PackageRatingReceived::class,\n        function ($notification, $channels) use ($package) {\n            return $notification->package->id === $package->id\n                && in_array('slack', $channels);\n        }\n    );\n}\n```", "```php\npublic function test_package_screenshot_upload()\n{\n    Storage::fake('screenshots');\n\n    // Upload a fake image\n    $response = $this->postJson('screenshots', [\n        'screenshot' => UploadedFile::fake()->image('screenshot.jpg'),\n    ]);\n\n    // Assert the file was stored\n    Storage::disk('screenshots')->assertExists('screenshot.jpg');\n\n    // Or, assert a file does not exist\n    Storage::disk('screenshots')->assertMissing('missing.jpg');\n}\n```", "```php\npublic function test_posts_are_no_longer_editable_after_thirty_minutes()\n{\n    $post = Post::create();\n\n    $this->assertTrue($post->isEditable());\n\n    $this->travel(30)->seconds();\n\n    $this->assertTrue($post->isEditable());\n\n    $this->travelTo($post->created_at->copy()->addMinutes(31));\n\n    $this->assertFalse($post->isEditable());\n}\n```", "```php\npublic function test_posts_are_no_longer_editable_after_thirty_minutes()\n{\n    $post = Post::create();\n\n    $this->assertTrue($post->isEditable());\n\n    $this->travel(30)->seconds(function () {\n        $this->assertTrue($post->isEditable());\n    });\n\n    $this->travelTo($post->created_at->copy()->addMinutes(31), function () {\n        $this->assertFalse($post->isEditable());\n    });\n}\n```", "```php\n// app/SlackClient.php\nclass SlackClient\n{\n    // ...\n\n    public function send($message, $channel)\n    {\n        // Actually sends a message to Slack\n    }\n}\n\n// app/Notifier.php\nclass Notifier\n{\n    private $slack;\n\n    public function __construct(SlackClient $slack)\n    {\n        $this->slack = $slack;\n    }\n\n    public function notifyAdmins($message)\n    {\n        $this->slack->send($message, 'admins');\n    }\n}\n\n// tests/Unit/NotifierTest.php\npublic function test_notifier_notifies_admins()\n{\n    $slackMock = Mockery::mock(SlackClient::class)->shouldIgnoreMissing();\n\n    $notifier = new Notifier($slackMock);\n    $notifier->notifyAdmins('Test message');\n}\n```", "```php\n$slackMock = Mockery::mock(SlackClient::class)->shouldIgnoreMissing();\n```", "```php\npublic function test_notifier_notifies_admins()\n{\n    $slackMock = Mockery::mock(SlackClient::class);\n    $slackMock->shouldReceive('send')->once();\n\n    $notifier = new Notifier($slackMock);\n    $notifier->notifyAdmins('Test message');\n}\n```", "```php\n$slackMock->shouldReceive('send')->with('Hello, world!')->andReturn(true);\n```", "```php\npublic function test_notifier_notifies_admins()\n{\n    $slackMock = Mockery::mock(SlackClient::class);\n    $slackMock->shouldReceive('send')->once();\n\n    app()->instance(SlackClient::class, $slackMock);\n\n    $notifier = app(Notifier::class);\n    $notifier->notifyAdmins('Test message');\n}\n```", "```php\n$this->mock(SlackClient::class, function ($mock) {\n    $mock->shouldReceive('send')->once();\n});\n```", "```php\n// PersonController\npublic function index()\n{\n    return Cache::remember('people', function () {\n        return Person::all();\n    });\n}\n\n// PeopleTest\npublic function test_all_people_route_should_be_cached()\n{\n    $person = Person::factory()->create();\n\n    Cache::shouldReceive('remember')\n        ->once()\n        ->andReturn(collect([$person]));\n\n    $this->get('people')->assertJsonFragment(['name' => $person->name]);\n}\n```", "```php\npublic function test_package_should_be_cached_after_visit()\n{\n    Cache::spy();\n\n    $package = Package::factory()->create();\n\n    $this->get(route('packages.show', [$package->id]));\n\n    Cache::shouldHaveReceived('put')\n        ->once()\n        ->with('packages.' . $package->id, $package->toArray());\n}\n```", "```php\n// Full mock\nCustomFacade::shouldReceive('someMethod')->once();\nCustomFacade::someMethod();\nCustomFacade::anotherMethod(); // Fails\n\n// Partial mock\nCustomFacade::partialMock()->shouldReceive('someMethod')->once();\nCustomFacade::someMethod(); // Uses the mocked object\nCustomFacade::anotherMethod(); // Uses the method on the actual Facade\n```", "```php\npublic function test_promote_console_command_promotes_user()\n{\n    $user = User::factory()->create();\n\n    $this->artisan('user:promote', ['userId' => $user->id]);\n\n    $this->assertTrue($user->isPromoted());\n}\n```", "```php\n$code = $this->artisan('do:thing', ['--flagOfSomeSort' => true]);\n$this->assertEquals(0, $code); // 0 means \"no errors were returned\"\n```", "```php\n// routes/console.php\nArtisan::command('make:post {--expanded}', function () {\n    $title = $this->ask('What is the post title?');\n    $this->comment('Creating at ' . Str::slug($title) . '.md');\n\n    $category = $this->choice('What category?', ['technology', 'construction'], 0);\n\n    // Create post here\n\n    $this->comment('Post created');\n});\n```", "```php\n// Test file\npublic function test_make_post_console_commands_performs_as_expected()\n{\n    $this->artisan('make:post', ['--expanded' => true])\n        ->expectsQuestion('What is the post title?', 'My Best Post Now')\n        ->expectsOutput('Creating at my-best-post-now.md')\n        ->expectsQuestion('What category?', 'construction')\n        ->expectsOutput('Post created')\n        ->assertExitCode(0);\n}\n```", "```php\ncomposer require brianium/paratest --dev\n```", "```php\n# Use as many processes as your CPU can offer\nphp artisan test --parallel\n\n# Specify the desired number of processes\nphp artisan test --parallel --processes=3\n```", "```php\n$this->browse(function ($browser) {\n    $browser->visit('/register')\n        ->type('email', 'test@example.com')\n        ->type('password', 'secret')\n        ->press('Sign Up')\n        ->assertPathIs('/dashboard');\n});\n```", "```php\ncomposer require --dev laravel/dusk\nphp artisan dusk:install\n```", "```php\nphp artisan dusk:make RatingTest\n```", "```php\npublic function testBasicExample()\n{\n    $user = User::factory()->create();\n\n    $this->browse(function ($browser) use ($user) {\n        $browser->visit('login')\n            ->type('email', $user->email)\n            ->type('password', 'secret')\n            ->press('Login')\n            ->assertPathIs('/home');\n    });\n}\n```", "```php\n$this->browse(function ($first, $second) {\n    $first->loginAs(User::find(1))\n        ->visit('home')\n        ->waitForText('Message');\n\n    $second->loginAs(User::find(2))\n        ->visit('home')\n        ->waitForText('Message')\n        ->type('message', 'Hey Taylor')\n        ->press('Send');\n\n    $first->waitForText('Hey Taylor')\n        ->assertSee('Jeffrey Way');\n});\n```", "```php\n<-- Template -->\n<div class=\"search\"><input><button id=\"search-button\"></button></div>\n<button dusk=\"expand-nav\"></button>\n```", "```php\n// Dusk tests\n// Option 1: jQuery-style syntax\n$browser->click('.search button');\n$browser->click('#search-button');\n\n// Option 2: dusk=\"selector-here\" syntax; recommended\n$browser->click('@expand-nav');\n```", "```php\n$browser->keys('selector', 'this is ', ['{shift}', 'great']);\n```", "```php\n$browser->keys('#app', ['{command}', '/']);\n```", "```php\n$browser->click('chat')\n    ->pause(500)\n    ->assertSee('How can we help?');\n```", "```php\n$browser->waitFor('@chat', 5);\n$browser->waitUntilMissing('@loading', 5);\n```", "```php\n$browser->whenAvailable('@chat', function ($chat) {\n    $chat->assertSee('How can we help you?');\n});\n```", "```php\n$browser->waitForText('Your purchase has been completed.', 5);\n```", "```php\n$browser->waitForLink('Clear these results', 2);\n```", "```php\n$browser->waitForLocation('auth/login');\n```", "```php\n$browser->waitForRoute('packages.show', [$package->id]);\n```", "```php\n$browser->waitUntil('App.packages.length > 0', 7);\n```", "```php\nphp artisan dusk:page CreatePackage\n```", "```php\n<?php\n\nnamespace Tests\\Browser\\Pages;\n\nuse Laravel\\Dusk\\Browser;\n\nclass CreatePackage extends Page\n{\n    /**\n * Get the URL for the page\n *\n * @return string\n */\n    public function url()\n    {\n        return '/';\n    }\n\n    /**\n * Assert that the browser is on the page\n *\n * @param  Browser  $browser\n * @return void\n */\n    public function assert(Browser $browser)\n    {\n        $browser->assertPathIs($this->url());\n    }\n\n    /**\n * Get the element shortcuts for the page\n *\n * @return array\n */\n    public function elements()\n    {\n        return [\n            '@element' => '#selector',\n        ];\n    }\n}\n```", "```php\nclass CreatePackage extends Page\n{\n    public function url()\n    {\n        return '/packages/create';\n    }\n\n    public function assert(Browser $browser)\n    {\n        $browser->assertTitleContains('Create Package');\n        $browser->assertPathIs($this->url());\n    }\n\n    public function elements()\n    {\n        return [\n            '@title' => 'input[name=title]',\n            '@instructions' => 'textarea[name=instructions]',\n        ];\n    }\n}\n```", "```php\n// In a test\n$browser->visit(new Tests\\Browser\\Pages\\CreatePackage)\n    ->type('@title', 'My package title');\n```", "```php\nclass CreatePackage extends Page\n{\n    // ... url(), assert(), elements()\n\n    public function fillBasicFields(Browser $browser, $packageTitle = 'Best package')\n    {\n        $browser->type('@title', $packageTitle)\n            ->type('@instructions', 'Do this stuff and then that stuff');\n    }\n}\n```", "```php\n$browser->visit(new CreatePackage)\n    ->fillBasicFields('Greatest Package Ever')\n    ->press('Create Package')\n    ->assertSee('Greatest Package Ever');\n```", "```php\nphp artisan dusk:component RatingWidget\n```", "```php\n<?php\n\nnamespace Tests\\Browser\\Components;\n\nuse Laravel\\Dusk\\Browser;\nuse Laravel\\Dusk\\Component as BaseComponent;\n\nclass RatingWidget extends BaseComponent\n{\n    /**\n * Get the root selector for the component\n *\n * @return string\n */\n    public function selector()\n    {\n        return '#selector';\n    }\n\n    /**\n * Assert that the browser page contains the component\n *\n * @param  Browser  $browser\n * @return void\n */\n    public function assert(Browser $browser)\n    {\n        $browser->assertVisible($this->selector());\n    }\n\n    /**\n * Get the element shortcuts for the component\n *\n * @return array\n */\n    public function elements()\n    {\n        return [\n            '@element' => '#selector',\n        ];\n    }\n}\n```", "```php\nclass RatingWidget extends BaseComponent\n{\n    public function selector()\n    {\n        return '.rating-widget';\n    }\n\n    public function assert(Browser $browser)\n    {\n        $browser->assertVisible($this->selector());\n    }\n\n    public function elements()\n    {\n        return [\n            '@5-star' => '.five-star-rating',\n            '@4-star' => '.four-star-rating',\n            '@3-star' => '.three-star-rating',\n            '@2-star' => '.two-star-rating',\n            '@1-star' => '.one-star-rating',\n            '@average' => '.average-rating',\n            '@mine' => '.current-user-rating',\n        ];\n    }\n\n    public function ratePackage(Browser $browser, $rating)\n    {\n        $browser->click(\"@{$rating}-star\")\n            ->assertSeeIn('@mine', $rating);\n    }\n}\n```", "```php\n$browser->visit('/packages/tightenco/nova-stock-picker')\n    ->within(new RatingWidget, function ($browser) {\n        $browser->ratePackage(2);\n        $browser->assertSeeIn('@average', 2);\n    });\n```", "```php\nit('has a welcome page', function () {\n    $response = $this->get('/');\n\n    expect($response->status())->toBe(200);\n});\n```"]