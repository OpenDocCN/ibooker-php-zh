["```php\n$fp = fopen('document.txt', 'r');\n```", "```php\nwhile (($buffer = fgets($fp, 4096)) !== false) { ![1](assets/1.png)\n    echo $buffer; ![2](assets/2.png)\n}\n\nfclose($fp); ![3](assets/3.png)\n```", "```php\n$fp = fopen('https://eamann.com/', 'r');\n```", "```php\n$config = file_get_contents('config.json');\n\nif ($config !== false) {\n    $parsed = json_decode($config);\n\n    // ...\n}\n```", "```php\nfunction fileGetContents(string $filename): string|false\n{\n    $buffer = '';\n    $fp = fopen($filename, 'r');\n\n    try {\n        while (!feof($fp)) {\n            $buffer .= fread($fp, 4096);\n        }\n    } catch(Exception $e) {\n        $buffer = false;\n    } finally {\n        fclose($fp);\n    }\n\n    return $buffer;\n}\n\n$config = fileGetContents('config.json');\n```", "```php\n$config = new Config(/** ... **/);\n$serialized = json_encode($config);\n\nfile_put_contents('config.json', $serialized);\n```", "```php\n$fp = fopen('document.txt', 'r');\nfseek($fp, 32, SEEK_SET);\n\n$data = fread($fp, 32);\n```", "```php\n$fp = fopen('log.txt', 'r');\nfseek($fp, -4096, SEEK_END);\n\necho fread($fp, 4096);\n\nfclose($fp);\n```", "```php\n$fp = fopen('resume.txt', 'r+');\nfseek($fp, 32);\n\nfwrite($fp, 'New data', 8);\n\nfclose($fp);\n```", "```php\n$contents = 'the quick brown fox jumped over the lazy dog';\nfwrite($fp, $contents, 9);\n```", "```php\n$fps = [\n    fopen('data.txt', 'w'),\n    fopen('php://stdout', 'w')\n];\n\nforeach ($fps as $fp) {\n    fwrite($fp, 'The wheels on the bus go round and round.');\n}\n```", "```php\nclass MultiFile\n{\n    private array $handles = [];\n\n    public function open(\n        string $filename,\n        string $mode = 'w',\n        bool $use_include_path = false,\n        $context = null\n        ): mixed\n    {\n        $fp = fopen($filename, $mode, $use_include_path, $context);\n\n        if ($fp !== false) {\n            $this->handles[] = $fp;\n        }\n\n        return $fp;\n    }\n\n    public function write(string $data, ?int $length = null): int|false\n    {\n        $success = true;\n        $bytes = 0;\n\n        foreach($this->handles as $fp) {\n            $out = fwrite($fp, $data, $length);\n            if ($out === false) {\n                $success = false;\n            } else {\n                $bytes = $out;\n            }\n        }\n\n        return $success ? $bytes : false;\n    }\n\n    public function close(): bool\n    {\n        $return = true;\n\n        foreach ($this->handles as $fp) {\n            $return = $return && fclose($fp);\n        }\n\n        return $return;\n    }\n}\n```", "```php\n$writer = new MultiFile();\n$writer->open('data.txt');\n$writer->open('php://stdout');\n\n$writer->write(\"Row, row, row your boat\\nGently down the stream.\");\n\n$writer->close();\n```", "```php\n$fp = fopen('myfile.txt', 'r');\n\nif (flock($fp, LOCK_EX)) {\n    // ... Do whatever reading you need\n\n    flock($fp, LOCK_UN);\n} else {\n    echo 'Could not lock file!';\n    exit(1);\n}\n```", "```php\n$fp = fopen('myfile.txt', 'r');\n\necho 'Getting a lock ...' . PHP_EOL;\nif (flock($fp, LOCK_EX)) {\n    echo 'Sleeping ...' . PHP_EOL;\n    for($i = 0; $i < 3; $i++) {\n        sleep(10);\n        echo '  Zzz ...' . PHP_EOL;\n    }\n\n    echo 'Unlocking ...' . PHP_EOL;\n    flock($fp, LOCK_UN);\n} else {\n    echo 'Could not lock file!';\n    exit(1);\n}\n```"]