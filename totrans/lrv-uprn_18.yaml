- en: Chapter 18\. The Laravel Ecosystem
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As Laravel has grown, the Laravel team has built a suite of tools to support
    and simplify the lives and workflows of Laravel developers. Much of the new work
    has gone straight into the core, but there are quite a few packages and SaaS offerings
    that aren’t part of the core but are still very much a part of the Laravel experience.
  prefs: []
  type: TYPE_NORMAL
- en: We’ve already covered quite a few of them, and for those I’ll provide pointers
    to where to go in the book for more information. For the tools we haven’t covered,
    I’ll give each a quick description and a link to the relevant website.
  prefs: []
  type: TYPE_NORMAL
- en: Tools Covered in This Book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We’ve already taken a look at these, but here are some brief reminders of what
    they are and links to where you can find the relevant sources in the book.
  prefs: []
  type: TYPE_NORMAL
- en: Valet
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Valet is a local development server (for Mac, but with forks for Windows and
    Linux) that makes it quick and easy to serve all of your projects to your browser
    with almost no effort. You’ll install Valet globally on your local development
    machine via Composer.
  prefs: []
  type: TYPE_NORMAL
- en: With a few commands you can have Nginx, MySQL, Redis, and more serving every
    Laravel app on your machine at a `*.test*` domain.
  prefs: []
  type: TYPE_NORMAL
- en: Valet is covered in [“Laravel Valet”](ch02.html#valet).
  prefs: []
  type: TYPE_NORMAL
- en: Homestead
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Homestead is a configuration layer on top of Vagrant that makes it simple to
    serve multiple Laravel applications from a Laravel-friendly Vagrant setup.
  prefs: []
  type: TYPE_NORMAL
- en: Homestead was introduced briefly in [“Laravel Homestead”](ch02.html#homestead).
  prefs: []
  type: TYPE_NORMAL
- en: Herd
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Herd is a native macOS app that wraps Valet and its dependencies up into a single
    app you can install without wrangling Docker, Homebrew, or any other dependency
    managers.
  prefs: []
  type: TYPE_NORMAL
- en: Herd is covered in [“Laravel Herd”](ch02.html#herd).
  prefs: []
  type: TYPE_NORMAL
- en: The Laravel Installer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Laravel installer is a package installed globally on your local development
    machine (via Composer) that makes it easy and quick to set up a new Laravel project.
  prefs: []
  type: TYPE_NORMAL
- en: The installer is covered in [“Installing Laravel with the Laravel Installer
    Tool”](ch02.html#laravel_installer).
  prefs: []
  type: TYPE_NORMAL
- en: Dusk
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Dusk is a frontend testing framework built for testing your entire application,
    JavaScript and all. It’s a powerful package you can pull into your application
    via Composer and that drives actual browsers with ChromeDriver.
  prefs: []
  type: TYPE_NORMAL
- en: Dusk is covered in [“Testing with Dusk”](ch12.html#dusk_testing).
  prefs: []
  type: TYPE_NORMAL
- en: Passport
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Passport is a powerful, simple-to-set-up OAuth 2.0 server for authenticating
    clients to your APIs. You’ll install it in each application as a Composer package,
    and with very little work you can have a full OAuth 2.0 flow accessible to your
    users.
  prefs: []
  type: TYPE_NORMAL
- en: Passport is covered in [“API Authentication with Laravel Passport”](ch13.html#passport).
  prefs: []
  type: TYPE_NORMAL
- en: Sail
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sail is Laravel’s default local development environment, powered by Docker.
  prefs: []
  type: TYPE_NORMAL
- en: Sail is covered in [“Laravel Sail”](ch02.html#sail).
  prefs: []
  type: TYPE_NORMAL
- en: Sanctum
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sanctum is an authentication system to power mobile apps, SPAs, and simple token-based
    APIs. It’s a simpler but still quite powerful alternative to the much more complex
    OAuth.
  prefs: []
  type: TYPE_NORMAL
- en: Sanctum is covered in [“API Authentication with Sanctum”](ch13.html#sanctum).
  prefs: []
  type: TYPE_NORMAL
- en: Fortify
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Fortify is a headless authentication system. It provides the routes and controllers
    for all the authentication features Laravel requires, from login and registration
    to password reset and more, to be consumed by whichever frontend you choose.
  prefs: []
  type: TYPE_NORMAL
- en: Fortify is covered in [“Fortify”](ch06.html#fortify).
  prefs: []
  type: TYPE_NORMAL
- en: Breeze
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Breeze is a minimal set of routes and controllers for all of Laravel’s required
    authentication features, paired together with frontend templates for each. Breeze
    can be served through Blade, Vue, React, or Inertia.
  prefs: []
  type: TYPE_NORMAL
- en: Breeze is covered in [“Laravel Breeze”](ch06.html#breeze).
  prefs: []
  type: TYPE_NORMAL
- en: Jetstream
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Jetstream is a robust application starter kit, providing all of the authentication
    features Breeze offers, along with email verification, two-factor authentication,
    session management, API authentication, and team management features. Unlike Breeze,
    Jetstream is only available in two frontend tooling flavors: Livewire and Inertia/Vue.'
  prefs: []
  type: TYPE_NORMAL
- en: Jetstream is covered in [“Laravel Jetstream”](ch06.html#jetstream).
  prefs: []
  type: TYPE_NORMAL
- en: Horizon
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Horizon is a queue monitoring package you can install into each application
    via Composer. It exposes a full user interface for monitoring the health, performance,
    failures, and history of your Redis queued jobs.
  prefs: []
  type: TYPE_NORMAL
- en: Horizon is introduced briefly in [“Laravel Horizon”](ch16.html#horizon).
  prefs: []
  type: TYPE_NORMAL
- en: Echo
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Echo is a JavaScript library (introduced along with a series of improvements
    to Laravel’s notification system) that makes it simple to subscribe to events
    and channels broadcast from your Laravel app via WebSockets.
  prefs: []
  type: TYPE_NORMAL
- en: Echo is covered in [“Laravel Echo (the JavaScript Side)”](ch16.html#echo).
  prefs: []
  type: TYPE_NORMAL
- en: Tools Not Covered in This Book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: These are a few tools that I did not cover because they are beyond the scope
    of this book. Some of these are just for use in special circumstances (Cashier
    for taking payments, Socialite for social login, etc.), but some I use every day
    (Forge, especially).
  prefs: []
  type: TYPE_NORMAL
- en: Here’s a brief introduction, beginning with the ones you’re most likely to encounter
    in your work. Note that this list is not exhaustive!
  prefs: []
  type: TYPE_NORMAL
- en: Forge
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Forge](https://forge.laravel.com) is a paid SaaS tool for creating and managing
    virtual servers on hosts like DigitalOcean, Linode, AWS, and more. It provisions
    Laravel-ready servers (and individual sites on those servers) with all the tools
    you need to run them, from queues and queue workers to Let’s Encrypt SSL certificates.
    It can also set up simple shell scripts to autodeploy your sites when you push
    up new code to GitHub or Bitbucket.'
  prefs: []
  type: TYPE_NORMAL
- en: Forge is incredibly useful for spinning up sites quickly and easily, but it’s
    not so minimal that you can’t also run your apps on it in the longer term or at
    larger scale. You can scale up your server sizes, add load balancers, and manage
    private networking between your servers, all within Forge.
  prefs: []
  type: TYPE_NORMAL
- en: Vapor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Vapor](https://vapor.laravel.com) is a paid SaaS tool for deploying Laravel
    applications to AWSs Lambda, using the “serverless” hosting pattern. It manages
    cache, queues, database, asset building, domain direction, autoscaling, content
    delivery networks, environment management, and most of anything else you’ll need
    to move to serverless deployment for your Laravel apps.'
  prefs: []
  type: TYPE_NORMAL
- en: Envoyer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Envoyer](https://envoyer.io) is a paid SaaS tool that’s branded as offering
    “zero downtime PHP deployment.” Unlike Forge, Envoyer doesn’t spin up your servers
    or manage them. Its primary job is to listen to triggers—​usually when you push
    new code, but you can also manually trigger deployments or trigger them with webhooks—​and
    perform your deployment steps in response.'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three ways that Envoyer does this much better than Forge’s push-to-deploy
    tool and most other push-to-deploy solutions:'
  prefs: []
  type: TYPE_NORMAL
- en: It has a robust toolset for building out your deployment pipeline as a simple
    but powerful multistage process.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It deploys your app using Capistrano-style zero-downtime deploys; each new deployment
    is built into its own folder, and only once the build process has completed successfully
    is that deploy folder symlinked to your actual web root. Because of this, there’s
    no moment when your server is broken while Composer installs or NPM builds.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Because of this folder-based system, it’s easy and quick to roll back any breaking
    changes to a previous release; Envoyer just updates the symlink back to a previous
    deploy folder and it’s immediately serving an older build.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can also set up regular health checks (pings against your servers that report
    errors to you if the pings don’t get back a 200 HTTP response), expectations that
    your cron jobs will ping Envoyer on a regular schedule, and chat-based notifications
    of any significant events.
  prefs: []
  type: TYPE_NORMAL
- en: Envoyer is more of a niche tool than Forge. I don’t know many Laravel developers
    who don’t use Forge, but those who pay for Envoyer are more likely to have websites
    that will suffer if they can’t immediately roll back a problematic commit, or
    websites that get enough traffic (or important enough traffic) that 10 seconds
    of downtime here and there can be a big issue. If your site is in that category,
    Envoyer will feel like magic.
  prefs: []
  type: TYPE_NORMAL
- en: Cashier
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Cashier](https://oreil.ly/25wiq) is a free package that provides a simple
    interface in front of Stripe’s subscription billing offerings. Cashier handles
    much of the basic functionality of subscribing users, changing their plans, giving
    them access to invoices, handling webhook callbacks from the billing service,
    managing cancellation grace periods, and more.'
  prefs: []
  type: TYPE_NORMAL
- en: If you want to allow your users to sign up for subscriptions using Stripe, Cashier
    will make your life a lot easier.
  prefs: []
  type: TYPE_NORMAL
- en: Socialite
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Socialite](https://oreil.ly/_fqcc) is a free package that makes it incredibly
    simple to add social login (for example, via GitHub or Facebook) to your apps.'
  prefs: []
  type: TYPE_NORMAL
- en: Nova
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Nova](https://nova.laravel.com) is a paid package for building admin panels.
    If you imagine your average complex Laravel app, it may have several parts: the
    public-facing website or customer view, the administration section for making
    changes to the core data or customer list, and maybe an API.'
  prefs: []
  type: TYPE_NORMAL
- en: Nova drastically simplifies the process of building the admin panel part of
    the site using Vue and a Laravel API. It makes it easy to generate CRUD (create,
    read, update, delete) pages for all of your resources, together with more complex
    custom views for your data, custom actions and relationships on each of your resources,
    and even custom tools for adding non-CRUD tooling to the same general admin space.
  prefs: []
  type: TYPE_NORMAL
- en: Spark
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Spark](https://spark.laravel.com) is a paid package for generating a SaaS
    that accepts payments and makes it easy to manage users, teams, and subscriptions.
    It provides Stripe and Paddle integration, invoices, per-seat or team-based billing,
    and a full billing portal that stands alone from the rest of your app so you’re
    not stuck using Spark’s default tech stack.'
  prefs: []
  type: TYPE_NORMAL
- en: Envoy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Envoy](https://oreil.ly/kZMy8) is a local task runner that makes it easy to
    define common tasks that will run on your remote servers, commit those tasks’
    definitions to version control, and run them simply and predictably.'
  prefs: []
  type: TYPE_NORMAL
- en: Take a look at [Example 18-1](#envoy_sample) to get a sense of what a common
    Envoy task looks like.
  prefs: []
  type: TYPE_NORMAL
- en: Example 18-1\. A common Envoy task
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'To run [Example 18-1](#envoy_sample), you’d run the following command from
    your local terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Telescope
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Telescope](https://oreil.ly/gc78b) is a free debugging tool, installable as
    a package, for Laravel applications. It generates a dashboard where you can dig
    into the current status of jobs, queue workers, HTTP requests, database queries,
    and much more.'
  prefs: []
  type: TYPE_NORMAL
- en: Octane
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Octane](https://oreil.ly/xCtgq) is a free tool that makes it possible for
    you to serve your Laravel applications using asynchronous, concurrent PHP web
    servers designed for speed and power. There are three such tools at the writing
    of this book: Swoole, Open Swoole, and RoadRunner. With Octane, these tools load
    your application into memory once and then facilitate serving your application
    each request in the most performant way, taking advantage of language and system-level
    tooling for concurrency.'
  prefs: []
  type: TYPE_NORMAL
- en: Pennant
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Pennant](https://oreil.ly/zAFHa) is a Laravel-native implementation of “feature
    flags,” a pattern that allows you to easily define whether each request should
    see a certain feature in your app—​often because of the user who’s requesting
    and what they have access to. Pennant allows you to define once which metrics
    should be used to define whether the request should or shouldn’t be served a given
    feature, providing a syntax very similar to Laravel’s access control list layer.'
  prefs: []
  type: TYPE_NORMAL
- en: Folio
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Folio is a Laravel package that allows you to build your app’s routing based
    on the arrangement of template files inside of folders. Similar to Next and Nuxt,
    Folio allows you to create individual templates (e.g., */index.blade.php* displays
    at `mysite.com/`, */about.blade.php* at `mysite.com/about`, and */users/index.blade.php*
    at `mysite.com/users`) or define templates that should match placeholders in the
    URL (e.g. */users/[id].blade.php* at `mysite.com/users/14`).
  prefs: []
  type: TYPE_NORMAL
- en: Volt
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Volt augments Livewire with the ability to write single-file, functional components.
    Volt also offers a directive, `@volt`, that allows you to assign a subsection
    of a template to be managed by the Livewire component definition, while the rest
    of the template is still normal Blade.
  prefs: []
  type: TYPE_NORMAL
- en: Pint
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Pint](https://oreil.ly/AB21w) is a code style tool built to enforce Laravel’s
    default code style in your apps. It’s built on top of PHP-CS-Fixer, providing
    a few tooling improvements and also a pre-configured Laravel-specific set of code
    rules.'
  prefs: []
  type: TYPE_NORMAL
- en: Other Resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'I’ve mentioned many of these already, but here’s a nonexhaustive list of resources
    folks often turn to to learn Laravel:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Laravel Bootcamp](https://bootcamp.laravel.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Laravel News](https://laravel-news.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Laracasts](https://laracasts.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[@TaylorOtwell](https://twitter.com/taylorotwell) and [@LaravelPHP](https://twitter.com/laravelphp)
    on Twitter'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Adam Wathan’s courses](https://adamwathan.me)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chris Fidao’s courses](https://fideloper.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Laravel Daily](https://laraveldaily.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[DevDojo](https://devdojo.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[CodeCourse](https://codecourse.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The Laravel Podcast](http://www.laravelpodcast.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are many blogs (I have one at [*mattstauffer.com*](https://mattstauffer.com/)
    and Tighten has one at [*tighten.com*](https://www.tighten.com), and there are
    plenty of others that are incredibly useful), many excellent Twitter-ers, many
    superb package authors, and far too many Laravel practitioners who I respect to
    fit into a list here. This is a rich, diverse, and giving community, full of developers
    who love to share everything they’re learning; the hard part is not finding good
    content but finding the time to consume it all.
  prefs: []
  type: TYPE_NORMAL
- en: I can’t list every person or resource you should look to in your journey as
    a Laravel developer, but if you start with the resources and folks listed here,
    you will be off to a great start in getting up and running with Laravel.
  prefs: []
  type: TYPE_NORMAL
