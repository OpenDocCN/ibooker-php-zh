- en: Appendix. Function Reference
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This appendix describes the functions available in the built-in PHP extensions.
    These are the extensions that PHP is built with if you provide no `--with` or
    `--enable` options to `configure`, and they cannot be removed via configuration
    options.
  prefs: []
  type: TYPE_NORMAL
- en: For each function, we’ve provided the function signature, showing the data types
    of the various arguments and which are mandatory or optional, as well as a brief
    description of the side effects, errors, and returned data structures.
  prefs: []
  type: TYPE_NORMAL
- en: PHP Functions by Category
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section gives a list of functions provided by PHP’s built-in extensions,
    grouped by extension category.
  prefs: []
  type: TYPE_NORMAL
- en: Arrays
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`array_change_key_case`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_chunk`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_combine`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_count_values`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_diff`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_diff_assoc`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_diff_key`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_diff_uassoc`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_diff_ukey`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_fill`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_fill_keys`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_filter`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_flip`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_intersect`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_intersect_assoc`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_intersect_key`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_intersect_uassoc`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_intersect_ukey`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_key_exists`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_keys`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_map`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_merge`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_merge_recursive`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_multisort`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_pad`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_pop`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_product`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_push`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_rand`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_reduce`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_replace`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_replace_recursive`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_reverse`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_search`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_shift`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_slice`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_splice`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_sum`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_udiff`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_udiff_assoc`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_udiff_uassoc`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_uintersect`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_uintersect_assoc`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_uintersect_uassoc`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_unique`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_unshift`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_values`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_walk`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`array_walk_recursive`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`arsort`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`asort`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`compact`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`count`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`current`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`each`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`end`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`extract`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`in_array`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`is_countable`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`key`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`krsort`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`ksort`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`list`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`natcasesort`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`natsort`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`next`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`prev`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`range`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`reset`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`rsort`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`shuffle`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`sort`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`uasort`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`uksort`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`usort`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Classes and Objects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`class_alias`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`class_exists`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`get_called_class`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`get_class`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`get_class_methods`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`get_class_vars`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`get_declared_classes`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`get_declared_interfaces`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`get_declared_traits`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`get_object_vars`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`get_parent_class`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`interface_exists`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`is_a`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`is_subclass_of`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`method_exists`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`property_exists`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`trait_exists`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Data Filtering
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`filter_has_var`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`filter_id`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`filter_input_array`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`filter_var`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`filter_input`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`filter_list`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`filter_var_array`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Date and Time
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`checkdate`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`date`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`date_default_timezone_get`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`date_default_timezone_set`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`date_parse`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`date_parse_from_format`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`date_sun_info`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`date_sunrise`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`date_sunset`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`getdate`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`gettimeofday`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`gmdate`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`gmmktime`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`gmstrftime`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`hrtime`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`idate`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`localtime`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`microtime`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`mktime`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`strftime`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`strptime`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`strtotime`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`time`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`timezone_name_from_abbr`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`timezone_version_get`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Directories
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`chdir`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`chroot`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`closedir`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`dir`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`getcwd`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`opendir`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`readdir`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`rewinddir`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`scandir`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Errors and Logging
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`debug_backtrace`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`debug_print_backtrace`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`error_clear_last`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`error_get_last`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`error_log`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`error_reporting`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`restore_error_handler`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`restore_exception_handler`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`set_error_handler`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`set_exception_handler`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`trigger_error`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Filesystem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`basename`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`chgrp`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`chmod`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`chown`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`clearstatcache`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`copy`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`dirname`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`disk_free_space`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`disk_total_space`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`fclose`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`feof`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`fflush`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`fgetc`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`fgetcsv`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`fgets`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`fgetss`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`file`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`file_exists`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`file_get_contents`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`file_put_contents`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`fileatime`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`filectime`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`filegroup`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`fileinode`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`filemtime`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`fileowner`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`fileperms`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`filesize`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`filetype`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`flock`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`fnmatch`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`fopen`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`fpassthru`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`fputcsv`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`fread`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`fscanf`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`fseek`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`fstat`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`ftell`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`ftruncate`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`fwrite`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`glob`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`is_dir`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`is_executable`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`is_file`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`is_link`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`is_readable`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`is_uploaded_file`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`is_writable`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`lchgrp`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`lchown`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`link`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`linkinfo`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`lstat`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`mkdir`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`move_uploaded_file`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`parse_ini_file`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`parse_ini_string`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`pathinfo`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`pclose`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`popen`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`readfile`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`readlink`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`realpath_cache_get`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`realpath_cache_size`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`realpath`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`rename`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`rewind`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`rmdir`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stat`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`symlink`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`tempnam`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`tmpfile`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`touch`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`umask`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`unlink`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`call_user_func`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`call_user_func_array`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`create_function`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`forward_static_call`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`forward_static_call_array`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`func_get_arg`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`func_get_args`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`func_num_args`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`function_exists`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`get_defined_functions`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`register_shutdown_function`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`register_tick_function`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`unregister_tick_function`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Mail
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`mail`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Math
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`abs`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`acos`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`acosh`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`asin`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`asinh`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`atan2`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`atan`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`atanh`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`base_convert`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`bindec`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`ceil`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`cos`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`cosh`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`decbin`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`dechex`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`decoct`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`deg2rad`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`exp`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`expm1`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`floor`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`fmod`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`getrandmax`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`hexdec`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`hypot`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`is_finite`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`is_infinite`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`is_nan`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`lcg_value`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`log10`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`log1p`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`log`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`max`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`min`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`mt_getrandmax`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`mt_rand`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`mt_srand`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`octdec`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`pi`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`pow`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`rad2deg`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`rand`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`random_int`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`round`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`sin`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`sinh`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`sqrt`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`srand`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`tan`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`tanh`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Miscellaneous Functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`connection_aborted`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`connection_status`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`constant`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`define`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`defined`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`get_browser`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`highlight_file`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`highlight_string`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`ignore_user_abort`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`pack`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`php_strip_whitespace`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`sleep`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`sys_getloadavg`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`time_nanosleep`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`time_sleep_until`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`uniqid`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`unpack`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`usleep`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Network
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`checkdnsrr`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`closelog`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`fsockopen`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`gethostbyaddr`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`gethostbyname`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`gethostbynamel`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`gethostname`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`getmxrr`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`getprotobyname`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`getprotobynumber`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`getservbyname`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`getservbyport`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`header`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`header_remove`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`headers_list`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`headers_sent`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`inet_ntop`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`inet_pton`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`ip2long`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`long2ip`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`openlog`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`pfsockopen`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`setcookie`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`setrawcookie`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`syslog`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Output Buffering
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`flush`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`ob_clean`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`ob_end_clean`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`ob_end_flush`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`ob_flush`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`ob_get_clean`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`ob_get_contents`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`ob_get_flush`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`ob_get_length`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`ob_get_level`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`ob_get_status`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`ob_gzhandler`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`ob_implicit_flush`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`ob_list_handlers`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`ob_start`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`output_add_rewrite_var`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`output_reset_rewrite_vars`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: PHP Language Tokenizer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`token_get_all`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`token_name`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: PHP Options/Info
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`assert_options`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`assert`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`extension_loaded`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`gc_collect_cycles`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`gc_disable`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`gc_enable`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`gc_enabled`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`get_cfg_var`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`get_current_user`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`get_defined_constants`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`get_extension_funcs`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`get_include_path`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`get_included_files`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`get_loaded_extensions`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`getenv`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`getlastmod`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`getmygid`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`getmyinode`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`getmypid`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`getmyuid`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`getopt`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`getrusage`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`ini_get_all`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`ini_get`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`ini_restore`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`ini_set`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`memory_get_peak_usage`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`memory_get_usage`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`php_ini_loaded_file`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`php_ini_scanned_files`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`php_logo_guid`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`php_sapi_name`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`php_uname`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`phpcredits`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`phpinfo`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`phpversion`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`putenv`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`set_include_path`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`set_time_limit`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`sys_get_temp_dir`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`version_compare`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`zend_logo_guid`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`zend_thread_id`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`zend_version`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Program Execution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`escapeshellarg`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`escapeshellcmd`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`exec`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`passthru`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`proc_close`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`proc_get_status`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`proc_nice`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`proc_open`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`proc_terminate`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`shell_exec`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`system`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Session Handling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`session_cache_expire`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`session_cache_limiter`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`session_decode`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`session_destroy`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`session_encode`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`session_get_cookie_params`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`session_id`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`session_module_name`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`session_name`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`session_regenerate_id`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`session_register_shutdown`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`session_save_path`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`session_set_cookie_params`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`session_set_save_handler`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`session_start`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`session_status`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`session_unset`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`session_write_close`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Streams
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`stream_bucket_append`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_bucket_make_writeable`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_bucket_new`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_bucket_prepend`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_context_create`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_context_get_default`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_context_get_options`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_context_get_params`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_context_set_default`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_context_set_option`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_context_set_params`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_copy_to_stream`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_encoding`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_filter_append`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_filter_prepend`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_filter_register`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_filter_remove`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_get_contents`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_get_filters`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_get_line`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_get_meta_data`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_get_transports`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_get_wrappers`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_is_local`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_notification_callback`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_resolve_include_path`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_select`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_set_blocking`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_set_chunk_size`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_set_read_buffer`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_set_timeout`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_set_write_buffer`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_socket_accept`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_socket_client`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_socket_enable_crypto`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_socket_get_name`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_socket_pair`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_socket_recvfrom`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_socket_sendto`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_socket_server`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_socket_shutdown`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_supports_lock`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_wrapper_register`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_wrapper_restore`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stream_wrapper_unregister`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Strings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`addcslashes`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`addslashes`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`bin2hex`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`chr`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`chunk_split`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`convert_cyr_string`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`convert_uudecode`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`convert_uuencode`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`count_chars`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`crc32`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`crypt`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`echo`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`explode`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`fprintf`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`get_html_translation_table`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`hebrev`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`hex2bin`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`html_entity_decode`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`htmlentities`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`htmlspecialchars`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`htmlspecialchars_decode`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`implode`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`lcfirst`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`levenshtein`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`localeconv`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`ltrim`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`md5`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`md5_file`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`metaphone`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`nl_langinfo`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`nl2br`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`number_format`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`ord`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`parse_str`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`printf`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`quoted_printable_decode`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`quoted_printable_encode`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`quotemeta`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`random_bytes`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`rtrim`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`setlocale`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`sha1`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`sha1_file`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`similar_text`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`soundex`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`sprintf`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`sscanf`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`str_getcsv`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`str_ireplace`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`str_pad`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`str_repeat`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`str_replace`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`str_rot13`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`str_shuffle`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`str_split`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`str_word_count`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`strcasecmp`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`strcmp`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`strcoll`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`strcspn`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`strip_tags`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stripcslashes`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stripos`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stripslashes`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`stristr`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`strlen`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`strnatcasecmp`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`strnatcmp`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`strncasecmp`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`strncmp`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`strpbrk`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`strpos`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`strrchr`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`strrev`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`strripos`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`strrpos`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`strspn`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`strstr`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`strtok`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`strtolower`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`strtoupper`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`strtr`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`substr`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`substr_compare`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`substr_count`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`substr_replace`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`trim`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`ucfirst`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`ucwords`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`vfprintf`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`vprintf`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`vsprintf`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`wordwrap`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: URLs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`base64_decode`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`base64_encode`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`get_headers`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`get_meta_tags`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`http_build_query`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`parse_url`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`rawurldecode`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`rawurlencode`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`urldecode`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`urlencode`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Variables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`debug_zval_dump`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`empty`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`floatval`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`get_defined_vars`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`get_resource_type`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`gettype`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`intval`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`is_array`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`is_bool`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`is_callable`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`is_float`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`is_int`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`is_null`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`is_numeric`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`is_object`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`is_resource`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`is_scalar`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`is_string`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`isset`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`print_r`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`serialize`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`settype`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`strval`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`unserialize`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`unset`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`var_dump`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`var_export`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Zlib
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`deflate_add`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`deflate_init`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`inflate_add`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`inflate_init`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Alphabetical Listing of PHP Functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: abs
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int abs(int` *number*`) float abs(float` *number*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the absolute value of *number* in the same type (float or integer) as
    the argument.
  prefs: []
  type: TYPE_NORMAL
- en: acos
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`float acos(float` *value*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the arc cosine of *value* in radians.
  prefs: []
  type: TYPE_NORMAL
- en: acosh
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`float acosh(float` *value*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the inverse hyberbolic cosine of *value*.
  prefs: []
  type: TYPE_NORMAL
- en: addcslashes
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string addcslashes(string` *string*`, string` *characters*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns escaped instances of *characters* in *string* by adding a backslash
    before them. You can specify ranges of characters by separating them with two
    periods—for example, to escape characters between `a` and `q`, use `"a..q"`. Multiple
    characters and ranges can be specified in *characters*. The `addcslashes()` function
    is the inverse of `stripcslashes()`.
  prefs: []
  type: TYPE_NORMAL
- en: addslashes
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string addslashes(string` *string*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns escaped characters in *string* that have special meaning in SQL database
    queries. Single quotes (`''`), double quotes (`""`), backslashes (`\`), and the
    NUL-byte (`\0`) are escaped. The `stripslashes()` function is the inverse for
    this function.
  prefs: []
  type: TYPE_NORMAL
- en: array_change_key_case
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array array_change_key_case(array` *array*`[, CASE_UPPER|CASE_LOWER])`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns an array whose elements’ keys are changed to all uppercase or all lowercase.
    Numeric indices are unchanged. If the optional case parameter is left off, the
    keys are changed to lowercase.
  prefs: []
  type: TYPE_NORMAL
- en: array_chunk
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array array_chunk(array` *array*`, int` *size*`[, int` *preserve_keys*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Splits *array* into a series of arrays, each containing *size* elements, and
    returns them in an array. If *preserve_keys* is `true` (default is `false`), the
    original keys are preserved in the resulting arrays; otherwise, the values are
    ordered with numeric indices starting at 0.
  prefs: []
  type: TYPE_NORMAL
- en: array_combine
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array array_combine(array` *keys*`, array` *values*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns an array created by using each element in the *keys* array as the key
    and the element in the *values* array as the value. If either array has no elements,
    if the number of elements in each array differs, or if an element exists in one
    array but not in the other, `false` is returned.
  prefs: []
  type: TYPE_NORMAL
- en: array_count_values
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array array_count_values(array` *array*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns an array whose elements’ keys are the input array’s values. The value
    of each key is the number of times that key appears in the input array as a value.
  prefs: []
  type: TYPE_NORMAL
- en: array_diff
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array array_diff(array` *array1*`, array` *array2*`[, ... array` *arrayN*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns an array that contains all of the values from the first array that are
    not present in any of the other provided arrays. The keys of the values are preserved.
  prefs: []
  type: TYPE_NORMAL
- en: array_diff_assoc
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array array_diff_assoc(array` *array1*`, array` *array2*`[, ... array` *arrayN*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns an array containing all the values in *array1* that are not present
    in any of the other provided arrays. Unlike in `array_diff()`, both the keys and
    values must match to be considered identical. The keys of the values are preserved.
  prefs: []
  type: TYPE_NORMAL
- en: array_diff_key
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array array_diff_key(array` *array1*`, array` *array2*`[, ... array` *arrayN*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns an array that contains all of the values from the first array whose
    keys are not present in any of the other provided arrays. The keys of the values
    are preserved.
  prefs: []
  type: TYPE_NORMAL
- en: array_diff_uassoc
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array array_diff_uassoc(array` *array1*`, array` *array2* `[, ... array` *arrayN*`],
    callable` *function*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns an array containing all the values in *array1* that are not present
    in any of the other provided arrays. Unlike in `array_diff()`, both the keys and
    values must match to be considered identical. The function *function* is used
    to compare the values of the elements for equality. The function is called with
    two parameters—the values to compare. It should return an integer less than 0
    if the first argument is less than the second, `0` if the first and second arguments
    are equal, and an integer greater than 0 if the first argument is greater than
    the second. The keys of the values are preserved.
  prefs: []
  type: TYPE_NORMAL
- en: array_diff_ukey
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array array_diff_ukey(array` *array1*`, array` *array2* `[, ... array` *arrayN*`],
    callable` *function*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns an array containing all the values in *array1* whose keys are not present
    in any of the other provided arrays. The function *function* is used to compare
    the keys of the elements for equality. The function is called with two parameters—the
    keys to compare. It should return an integer less than zero if the first argument
    is less than the second, `0` if the first and second arguments are equal, and
    an integer greater than zero if the first argument is greater than the second.
    The keys of the values are preserved.
  prefs: []
  type: TYPE_NORMAL
- en: array_fill
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array array_fill(int` *start*`, int` *count*`, mixed` *value*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns an array with *count* elements with the value *value*. Numeric indices
    are used, starting at *start* and counting upward by 1 for each element. If *count*
    is zero or less, an error is produced.
  prefs: []
  type: TYPE_NORMAL
- en: array_fill_keys
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array array_fill_keys(array` *keys*`, mixed` *value*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns an array containing values for each item in *keys*, using the elements
    in *keys* for each element’s key and *value* for each element’s value.
  prefs: []
  type: TYPE_NORMAL
- en: array_filter
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array array_filter(array` *array*`, mixed` *callback*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Creates an array containing all values from the original array for which the
    given callback function returns `true`. If the input array is an associative array,
    the keys are preserved. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: array_flip
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array array_flip(array` *array*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns an array in which the elements’ keys are the original array’s values,
    and vice versa. If multiple values are found, the last one encountered is retained.
    If any of the values in the original array are any type except strings and integers,
    `array_flip()` will issue a warning, and the key-value pair in question will not
    be included in the result. `array_flip()` returns `NULL` on failure.
  prefs: []
  type: TYPE_NORMAL
- en: array_intersect
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array array_intersect(array` *array1*`, array` *array2*`[, ... array` *arrayN*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns an array consisting of every element in *array1* that also exists in
    every other array.
  prefs: []
  type: TYPE_NORMAL
- en: array_intersect_assoc
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array array_intersect_assoc(array` *array1*`, array` *array2*`[, ... array`
    *arrayN*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns an array containing all the values present in all of the given arrays.
    Unlike in `array_intersect()`, both the keys and values must match to be considered
    identical. The keys of the values are preserved.
  prefs: []
  type: TYPE_NORMAL
- en: array_intersect_key
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array array_intersect_key(array` *array1*`, array` *array2*`[, ... array`
    *arrayN*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns an array consisting of every element in *array1* whose keys also exist
    in every other array.
  prefs: []
  type: TYPE_NORMAL
- en: array_intersect_uassoc
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array array_intersect_uassoc(array` *array1*`, array` *array2* `[, ... array`
    *arrayN*`], callable` *function*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns an array containing all the values present in all of the given arrays.
  prefs: []
  type: TYPE_NORMAL
- en: The function *function* is used to compare the keys of the elements for equality.
    The function is called with two parameters—the values to compare. It should return
    an integer less than zero if the first argument is less than the second, `0` if
    the first and second arguments are equal, and an integer greater than zero if
    the first argument is greater than the second. The keys of the values are preserved.
  prefs: []
  type: TYPE_NORMAL
- en: array_intersect_ukey
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array array_intersect_ukey(array` *array1*`, array` *array2* `[, ... array`
    *arrayN*`], callable` *function*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns an array consisting of every element in *array1* whose keys also exist
    in every other array.
  prefs: []
  type: TYPE_NORMAL
- en: The function *function* is used to compare the values of the elements for equality.
    The function is called with two parameters—the keys to compare. It should return
    an integer less than zero if the first argument is less than the second, `0` if
    the first and second arguments are equal, and an integer greater than zero if
    the first argument is greater than the second.
  prefs: []
  type: TYPE_NORMAL
- en: array_key_exists
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool array_key_exists(mixed` *key*`, array` *array*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns `true` if *array* contains a key with the value *key*. If no such key
    is available, returns `false`.
  prefs: []
  type: TYPE_NORMAL
- en: array_keys
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array array_keys(array` *array*`[, mixed` *value*`[, bool` *strict*`]])`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns an array containing all of the keys in the given array. If the second
    parameter is provided, only keys whose values match *value* are returned in the
    array. If *strict* is specified and is `true`, a matched element is returned only
    when it is of the same type and value as *value*.
  prefs: []
  type: TYPE_NORMAL
- en: array_map
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array array_map(mixed` *callback*`, array` *array1*`[, ... array` *arrayN*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Creates an array by applying the callback function referenced in the first
    parameter to the remaining parameters (provided arrays); the callback function
    should take as parameters a number of values equal to the number of arrays passed
    into `array_map()`. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: array_merge
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array array_merge(array` *array1*`, array` *array2*`[, ... array` *arrayN*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns an array created by appending the elements of every provided array to
    the previous. If any array has a value with the same string key, the last value
    encountered for the key is returned in the array; any elements with identical
    numeric keys are inserted into the resulting array.
  prefs: []
  type: TYPE_NORMAL
- en: array_merge_recursive
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array array_merge_recursive(array` *array1*`, array` *array2*`[, ... array`
    *arrayN*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Like `array_merge()`, creates and returns an array by appending each input array
    to the previous. However, unlike in `array_merge()`, when multiple elements have
    the same string key, an array containing each value is inserted into the resulting
    array.
  prefs: []
  type: TYPE_NORMAL
- en: array_multisort
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool array_multisort(array` *array1*`[, SORT_ASC|SORT_DESC [, SORT_REGULAR|SORT_NUMERIC|SORT_STRING]]
    [, array` *array2*`[, SORT_ASC|SORT_DESC [, SORT_REGULAR|SORT_NUMERIC|SORT_STRING]],
    ...])`'
  prefs: []
  type: TYPE_NORMAL
- en: Used to sort several arrays simultaneously, or to sort a multidimensional array
    in one or more dimensions. The input arrays are treated as columns in a table
    to be sorted by rows—the first array is the primary sort. Any values that compare
    the same according to that sort are sorted by the next input array, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first argument is an array; following that, each argument may be an array
    or one of the following order flags (the order flags are used to change the default
    order of the sort):'
  prefs: []
  type: TYPE_NORMAL
- en: '| `SORT_ASC` (default) | Sort in ascending order |'
  prefs: []
  type: TYPE_TB
- en: '| `SORT_DESC` | Sort in descending order |'
  prefs: []
  type: TYPE_TB
- en: 'After that, a sorting type from the following list can be specified:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `SORT_REGULAR` (default) | Compare items normally |'
  prefs: []
  type: TYPE_TB
- en: '| `SORT_NUMERIC` | Compare items numerically |'
  prefs: []
  type: TYPE_TB
- en: '| `SORT_STRING` | Compare items as strings |'
  prefs: []
  type: TYPE_TB
- en: The sorting flags apply only to the immediately preceding array, and they revert
    to `SORT_ASC` and `SORT_REGULAR` before each new array argument.
  prefs: []
  type: TYPE_NORMAL
- en: This function returns `true` if the operation was successful and `false` otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: array_pad
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array array_pad(array` *input*`, int` *size*`[, mixed` *padding*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns a copy of the input array padded to the length specified by *size*.
    Any new elements added to the array have the value of the optional third value.
    You can add elements to the beginning of the array by specifying a negative size—in
    this case, the new size of the array is the absolute value of the size.
  prefs: []
  type: TYPE_NORMAL
- en: If the array already has the specified number of elements or more, no padding
    takes place and an exact copy of the original array is returned.
  prefs: []
  type: TYPE_NORMAL
- en: array_pop
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`mixed array_pop(array &`*stack*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Removes the last value from the given array and returns it. If the array is
    empty (or the argument is not an array), returns `NULL`. Note that the array pointer
    is reset on the provided array.
  prefs: []
  type: TYPE_NORMAL
- en: array_product
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`number array_product(array` *array*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the product of every element in *array*. If each value in *array* is
    an integer, the resulting product is an integer; otherwise, the resulting product
    is a float.
  prefs: []
  type: TYPE_NORMAL
- en: array_push
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int array_push(array &`*array*`, mixed` *value1*`[, ... mixed` *valueN*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Adds the given values to the end of the array specified in the first argument
    and returns the new size of the array. Performs the same function as calling `$array[]
    = $value` for each of the values in the list.
  prefs: []
  type: TYPE_NORMAL
- en: array_rand
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`mixed array_rand(array` *array*`[, int` *count*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Picks a random element from the given array. The second (optional) parameter
    can be given to specify a number of elements to pick and return. If more than
    one element is returned, an array of keys is returned, rather than the element’s
    value.
  prefs: []
  type: TYPE_NORMAL
- en: array_reduce
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`mixed array_reduce(array` *array*`, mixed` *callback*`[, int` *initial*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns a value derived by iteratively calling the given callback function with
    pairs of values from the array. If the third parameter is supplied, it, along
    with the first element in the array, is passed to the callback function for the
    initial call.
  prefs: []
  type: TYPE_NORMAL
- en: array_replace
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array array_replace(array` *array1*`, array` *array2*`[, ... array` *arrayN*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns an array created by replacing values in *array1* with values from the
    other arrays. Elements in *array1* with keys matching in the replacement arrays
    are replaced with the values of those elements.
  prefs: []
  type: TYPE_NORMAL
- en: If multiple replacement arrays are provided, they are processed in order. Any
    elements in *array1* whose keys do not match any keys in the replacement arrays
    are preserved.
  prefs: []
  type: TYPE_NORMAL
- en: array_replace_recursive
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array array_replace_recursive(array` *array1*`, array` *array2*`[, ... array`
    *arrayN*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns an array created by replacing values in *array1* with values from the
    other arrays. Elements in *array1* with keys matching in the replacement arrays
    are replaced with the values of those elements.
  prefs: []
  type: TYPE_NORMAL
- en: If the value in both *array1* and a replacement array for a particular key are
    arrays, those values in those arrays are recursively merged using the same process.
  prefs: []
  type: TYPE_NORMAL
- en: If multiple replacement arrays are provided, they are processed in order. Any
    elements in *array1* whose keys do not match any keys in the replacement arrays
    are preserved.
  prefs: []
  type: TYPE_NORMAL
- en: array_reverse
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array array_reverse(array` *array*`[, bool` *preserve_keys*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns an array containing the same elements as the input array, but whose
    order is reversed. If `preserve_keys` is set to `true`, then numeric keys are
    preserved. Non-numeric keys are not affected by this parameter and are always
    preserved.
  prefs: []
  type: TYPE_NORMAL
- en: array_search
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`mixed array_search(mixed` *value*`, array` *array*`[, bool` *strict*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Performs a search for a value in an array, as with `in_array()`. If the value
    is found, the key of the matching element is returned; `NULL` is returned if the
    value is not found. If *strict* is specified and is `true`, a matched element
    is returned only when it is of the same type and value as *value*.
  prefs: []
  type: TYPE_NORMAL
- en: array_shift
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`mixed array_shift(array` *stack*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Similar to `array_pop()`, but instead of removing and returning the last element
    in the array, it removes and returns the first element in the array. If the array
    is empty, or if the argument is not an array, returns `NULL`.
  prefs: []
  type: TYPE_NORMAL
- en: array_slice
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array array_slice(array` *array*`, int` *offset*`[, int` *length*`][, bool
    keepkeys])`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns an array containing a set of elements pulled from the given array. If
    *offset* is a positive number, elements starting from that index onward are used;
    if *offset* is a negative number, elements starting that many elements from the
    end of the array are used. If the third argument is provided and is a positive
    number, that many elements are returned; if negative, the sequence stops that
    many elements from the end of the array. If the third argument is omitted, the
    sequence returned contains all elements from the offset to the end of the array.
    If `keepkeys`, the fourth argument, is `true`, then the order of numeric keys
    will be preserved; otherwise, they will be renumbered and resorted.
  prefs: []
  type: TYPE_NORMAL
- en: array_splice
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array array_splice(array` *array*`, int` *offset*`[, int` *length*`[, array`
    *replacement*`]])`'
  prefs: []
  type: TYPE_NORMAL
- en: Selects a sequence of elements using the same rules as `array_slice()`, but
    instead of being returned, those elements are either removed or, if the fourth
    argument is provided, replaced with that array. An array containing the removed
    (or replaced) elements is returned.
  prefs: []
  type: TYPE_NORMAL
- en: array_sum
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`number array_sum(array` *array*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the sum of every element in the array. If all of the values are integers,
    an integer is returned. If any of the values are floats, a float is returned.
  prefs: []
  type: TYPE_NORMAL
- en: array_udiff
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array array_udiff(array` *array1*`, array` *array2*`[, ... array` *arrayN*`],
    string` *function*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns an array containing all the values in *array1* that are not present
    in any of the other arrays. Only the values are used to check for equality; that
    is, `"a" => 1` and `"b" => 1` are considered equal. The function *function* is
    used to compare the values of the elements for equality. The function is called
    with two parameters—the values to compare. It should return an integer less than
    zero if the first argument is less than the second, `0` if the first and second
    arguments are equal, and an integer greater than zero if the first argument is
    greater than the second. The keys of the values are preserved.
  prefs: []
  type: TYPE_NORMAL
- en: array_udiff_assoc
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array array_udiff_assoc(array` *array1*`, array` *array2* `[, ... array` *arrayN*`],
    string` *function*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns an array containing all the values in *array1* that are not present
    in any of the other arrays. Both keys and values are used to check for equality;
    that is, `"a" => 1` and `"b" => 1` are not considered equal. The function *function*
    is used to compare the values of the elements for equality. The function is called
    with two parameters—the values to compare. It should return an integer less than
    zero if the first argument is less than the second, `0` if the first and second
    arguments are equal, and an integer greater than zero if the first argument is
    greater than the second. The keys of the values are preserved.
  prefs: []
  type: TYPE_NORMAL
- en: array_udiff_uassoc
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array array_udiff_uassoc(array` *array1*`, array` *array2*`[, ... array` *arrayN*`],
    string` *function1*`, string` *function2*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns an array containing all the values in *array1* that are not present
    in any of the other arrays. Both keys and values are used to check for equality;
    that is, `"a" => 1` and `"b" => 1` are not considered equal. The function *function1*
    is used to compare the values of the elements for equality. The function *function2*
    is used to compare the values of the keys for equality. Each function is called
    with two parameters—the values to compare. It should return an integer less than
    zero if the first argument is less than the second, `0` if the first and second
    arguments are equal, and an integer greater than zero if the first argument is
    greater than the second. The keys of the values are preserved.
  prefs: []
  type: TYPE_NORMAL
- en: array_uintersect
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array array_uintersect(array` *array1*`, array` *array2* `[, ... array` *arrayN*`],
    string` *function*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns an array containing all the values in *array1* that are present in all
    of the other arrays. Only the values are used to check for equality; that is,
    `"a" => 1` and `"b" => 1` are considered equal. The function *function* is used
    to compare the values of the elements for equality. The function is called with
    two parameters—the values to compare. It should return an integer less than zero
    if the first argument is less than the second, `0` if the first and second arguments
    are equal, and an integer greater than zero if the first argument is greater than
    the second. The keys of the values are preserved.
  prefs: []
  type: TYPE_NORMAL
- en: array_uintersect_assoc
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array array_uintersect_assoc(array` *array1*`, array` *array2*`[, ... array`
    *arrayN*`], string` *function*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns an array containing all the values in *array1* that are present in all
    of the other arrays. Both keys and values are used to check for equality; that
    is, `"a" => 1` and `"b" => 1` are not considered equal. The function *function*
    is used to compare the values of the elements for equality. The function is called
    with two parameters—the values to compare. It should return an integer less than
    zero if the first argument is less than the second, `0` if the first and second
    arguments are equal, and an integer greater than zero if the first argument is
    greater than the second. The keys of the values are preserved.
  prefs: []
  type: TYPE_NORMAL
- en: array_uintersect_uassoc
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array array_uintersect_uassoc(array` *array1*`, array` *array2*`[, ... array`
    *arrayN*`], string` *function1*`, string` *function2*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns an array containing all the values in the first array that are also
    present in all of the other arrays. Both keys and values are used to check for
    equality; that is, `"a" => 1` and `"b" => 1` are not considered equal. The function
    *function1* is used to compare the values of the elements for equality. The function
    *function2* is used to compare the values of the keys for equality. Each function
    is called with two parameters—the values to compare. It should return an integer
    less than zero if the first argument is less than the second, `0` if the first
    and second arguments are equal, and an integer greater than zero if the first
    argument is greater than the second. The keys of the values are preserved.
  prefs: []
  type: TYPE_NORMAL
- en: array_unique
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array array_unique(array` *array*`[, int sort_flags])`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Creates and returns an array containing each element in the given array. If
    any values are duplicated, the later values are ignored. The `sort_flags` optional
    argument can be used to alter the sorting methods with constants: `SORT_REGULAR`,
    `SORT_NUMERIC`, `SORT_STRING` (default), and `SORT_LOCALE_STRING`. Keys from the
    original array are preserved.'
  prefs: []
  type: TYPE_NORMAL
- en: array_unshift
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int array_unshift(array` *stack*`, mixed` *value1*`[, ... mixed` *valueN*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns a copy of the given array with the additional arguments added to the
    beginning of the array; the added elements are added as a whole, so the elements
    as they appear in the array are in the same order as they appear in the argument
    list. Returns the number of elements in the new array.
  prefs: []
  type: TYPE_NORMAL
- en: array_values
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array array_values(array` *array*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns an array containing all of the values from the input array. The keys
    for those values are not retained.
  prefs: []
  type: TYPE_NORMAL
- en: array_walk
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool array_walk(array` *input*`, string` *callback*`[, mixed` *user_data*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Calls the named function for each element in the array. The function is called
    with the element’s value, key, and optional user data as arguments. To ensure
    that the function works directly on the values of the array, define the first
    parameter of the function by reference. Returns `true` on success, and `false`
    on failure.
  prefs: []
  type: TYPE_NORMAL
- en: array_walk_recursive
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool array_walk_recursive(array` *input*`, string` *function*`[, mixed` *user_data*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Like `array_walk()`, calls the named function for each element in the array.
    Unlike in `array_walk()`, if an element’s value is an array, the function is called
    for each element in that array as well. The function is called with the element’s
    value, key, and optional user data as arguments. To ensure that the function works
    directly on the values of the array, define the first parameter of the function
    by reference. Returns `true` on success, and `false` on failure.
  prefs: []
  type: TYPE_NORMAL
- en: arsort
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool arsort(array` *array*`[, int` *flags*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Sorts an array in reverse order, maintaining the keys for the array values.
    The optional second parameter contains additional sorting flags. Returns `true`
    on success, and `false` on failure. See [Chapter 5](ch05.xhtml#array) and `sort`
    for more information on using this function.
  prefs: []
  type: TYPE_NORMAL
- en: asin
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`float asin(float` *value*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the arc sine of *value* in radians.
  prefs: []
  type: TYPE_NORMAL
- en: asinh
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`float asinh(float` *value*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the inverse hyperbolic sine of *value*.
  prefs: []
  type: TYPE_NORMAL
- en: asort
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool asort(array` *array*`[, int` *flags*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Sorts an array, maintaining the keys for the array values. The optional second
    parameter contains additional sorting flags. Returns `true` on success, and `false`
    on failure. See [Chapter 5](ch05.xhtml#array) and `sort` for more information
    on using this function.
  prefs: []
  type: TYPE_NORMAL
- en: assert
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool assert(string|bool` *assertion*`[, string description])`'
  prefs: []
  type: TYPE_NORMAL
- en: If *assertion* is `true`, generates a warning in executing the code. If *assertion*
    is a string, `assert()` evaluates that string as PHP code. The optional second
    argument allows for additional text to be added in with the failure message. Check
    the `assert_options()` function to see its related connection.
  prefs: []
  type: TYPE_NORMAL
- en: assert_options
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`mixed assert_options(int` *option*`[, mixed` *value*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: 'If *value* is specified, sets the assert control option *option* to *value*
    and returns the previous setting. If *value* is not specified, returns the current
    value of *option*. The following values for *option* are allowed:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `ASSERT_ACTIVE` | Enable assertions |'
  prefs: []
  type: TYPE_TB
- en: '| `ASSERT_WARNING` | Have assertions generate warnings |'
  prefs: []
  type: TYPE_TB
- en: '| `ASSERT_BAIL` | Have execution of the script halt on an assertion |'
  prefs: []
  type: TYPE_TB
- en: '| `ASSERT_QUIET_EVAL` | Disable error reporting while evaluating assertion
    code given to the `assert()` function |'
  prefs: []
  type: TYPE_TB
- en: '| `ASSERT_CALLBACK` | Call the specified user function to handle an assertion.
    Assertion callbacks are called with three arguments: the file, the line, and the
    expression where the assertion failed |'
  prefs: []
  type: TYPE_TB
- en: atan
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`float atan(float` *value*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the arc tangent of *value* in radians.
  prefs: []
  type: TYPE_NORMAL
- en: atan2
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`float atan2(float` *y*`, float` *x*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Using the signs of both parameters to determine the quadrant the value is in,
    returns the arc tangent of *x* and *y* in radians.
  prefs: []
  type: TYPE_NORMAL
- en: atanh
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`float atanh(float` *value*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the inverse hyperbolic tangent of *value*.
  prefs: []
  type: TYPE_NORMAL
- en: base_convert
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string base_convert(string` *number*`, int` *from*`, int` *to*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Converts *number* from one base to another. The base the number is currently
    in is *from*, and the base to convert to is *to*. The bases to convert from and
    to must be between 2 and 36\. Digits in a base higher than 10 are represented
    with the letters `a` (10) through `z` (35). Up to a 32-bit number, or 2,147,483,647
    decimal, can be converted.
  prefs: []
  type: TYPE_NORMAL
- en: base64_decode
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string base64_decode(string` *data*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Decodes *data*, which is base-64-encoded data, into a string (which may contain
    binary data). For more information on base-64 encoding, see RFC 2045.
  prefs: []
  type: TYPE_NORMAL
- en: base64_encode
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string base64_encode(string` *data*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns a base-64-encoded version of *data*. MIME base-64 encoding is designed
    to allow binary or other 8-bit data to survive transition through protocols that
    may not be 8-bit safe, such as email messages.
  prefs: []
  type: TYPE_NORMAL
- en: basename
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string basename(string` *path*`[, string` *suffix*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns the filename component from the full path *path*. If the file’s name
    ends in *suffix*, that string is removed from the name. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: bin2hex
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string bin2hex(string` *binary*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Converts *binary* to a hexadecimal (base-16) value. Up to a 32-bit number, or
    2,147,483,647 decimal, can be converted.
  prefs: []
  type: TYPE_NORMAL
- en: bindec
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`number bindec(string` *binary*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Converts *binary* to a decimal value. Up to a 32-bit number, or 2,147,483,647
    decimal, can be converted.
  prefs: []
  type: TYPE_NORMAL
- en: call_user_func
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`mixed call_user_func(string` *function*`[, mixed` *parameter1*`[, ... mixed`
    *parameterN*`]])`'
  prefs: []
  type: TYPE_NORMAL
- en: Calls the function given in the first parameter. Additional parameters are used
    as such when calling the function. The comparison to check for a matching function
    is case-insensitive. Returns the value returned by the function.
  prefs: []
  type: TYPE_NORMAL
- en: call_user_func_array
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`mixed call_user_func_array(string` *function*`, array` *parameters*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Similar to `call_user_func()`, this function calls the function named *function*
    with the parameters in the array *parameters*. The comparison to check for a matching
    function is case-insensitive. Returns the value returned by the function.
  prefs: []
  type: TYPE_NORMAL
- en: ceil
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`float ceil(float` *number*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the next highest value to *number*, rounding upward if needed.
  prefs: []
  type: TYPE_NORMAL
- en: chdir
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool chdir(string` *path*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Sets the current working directory to *path*; returns `true` if the operation
    was successful and `false` if not.
  prefs: []
  type: TYPE_NORMAL
- en: checkdate
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool checkdate(int` *month*`, int` *day*`, int` *year*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns `true` if the month, date, and year as given in the parameters are valid
    (Gregorian), and `false` if not. A date is considered valid if the year falls
    between 1 and 32,767 inclusive, the month is between 1 and 12 inclusive, and the
    day is within the number of days the specified month has (including leap years).
  prefs: []
  type: TYPE_NORMAL
- en: checkdnsrr
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool checkdnsrr(string` *host*`[, string` *type*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Searches DNS records for a host having the given type. Returns `true` if any
    records are found, and `false` if none are found. The host type can take any of
    the following values (if no value is specified, `MX` is the default):'
  prefs: []
  type: TYPE_NORMAL
- en: '| `A` | IP address |'
  prefs: []
  type: TYPE_TB
- en: '| `MX` (default) | Mail exchanger |'
  prefs: []
  type: TYPE_TB
- en: '| `NS` | Name server |'
  prefs: []
  type: TYPE_TB
- en: '| `SOA` | Start of authority |'
  prefs: []
  type: TYPE_TB
- en: '| `PTR` | Pointer to information |'
  prefs: []
  type: TYPE_TB
- en: '| `CNAME` | Canonical name |'
  prefs: []
  type: TYPE_TB
- en: '| `AAAA` | 128-bit IPv6 address |'
  prefs: []
  type: TYPE_TB
- en: '| `A6` | Defined as part of early IPv6 but downgraded to experimental |'
  prefs: []
  type: TYPE_TB
- en: '| `SRV` | Generalized service location record |'
  prefs: []
  type: TYPE_TB
- en: '| `NAPTR` | Regular expression–based rewriting of domain names |'
  prefs: []
  type: TYPE_TB
- en: '| `TXT` | Originally for human-readable text. However, this record also carries
    machine-readable data |'
  prefs: []
  type: TYPE_TB
- en: '| `ANY` | Any of the above |'
  prefs: []
  type: TYPE_TB
- en: Check the [DNS record entry on Wikipedia](http://en.wikipedia.org/wiki/List_of_DNS_record_types)
    for more details.
  prefs: []
  type: TYPE_NORMAL
- en: chgrp
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool chgrp(string` *path*`, mixed` *group*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Changes the group for the file *path* to *group*; PHP must have appropriate
    privileges for this function to work. Returns `true` if the change was successful
    and `false` if not.
  prefs: []
  type: TYPE_NORMAL
- en: chmod
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool chmod(string` *path*`, int` *mode*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Attempts to change the permissions of *path* to *mode*. *mode* is expected to
    be an octal number, such as `0755`. An integer value such as `755` or a string
    value such as `"u+x"` will not work as expected. Returns `true` if the operation
    was successful and `false` if not.
  prefs: []
  type: TYPE_NORMAL
- en: chown
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool chown(string` *path*`, mixed` *user*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Changes ownership for the file *path* to the user named *user*. PHP must have
    appropriate privileges (generally, root for this function) for the function to
    operate. Returns `true` if the change was successful and `false` if not.
  prefs: []
  type: TYPE_NORMAL
- en: chr
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string chr(int` *char*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns a string consisting of the single ASCII character *char*.
  prefs: []
  type: TYPE_NORMAL
- en: chroot
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool chroot(string` *path*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Changes the root directory of the current process to *path*. You cannot use
    `chroot()` to restore the root directory to `/` when running PHP in a web server
    environment. Returns `true` if the change was successful and `false` if not.
  prefs: []
  type: TYPE_NORMAL
- en: chunk_split
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string chunk_split(string` *string*`[, int` *size*`[, string` *postfix*`]])`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Inserts *postfix* into *string* after every *size* characters and at the end
    of the string; returns the resulting string. If not specified, *postfix* defaults
    to `\r\n` and *size* defaults to `76`. This function is most useful for encoding
    data to the RPF 2045 standard. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: class_alias
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool class_alias(string` *name*`, string` *alias*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Creates an alias to the class *name*. From then on, you can reference the class
    (for example, to instantiate objects) with either *name* or *alias*. Returns `true`
    if the alias could be created; if not, it returns `false`.
  prefs: []
  type: TYPE_NORMAL
- en: class_exists
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool class_exists(string` *name*`[, bool` *autoload_class*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns `true` if a class with the same name as the string has been defined;
    if not, it returns `false`. The comparison for class names is case-insensitive.
    If *autoload*`_class` is set and is `true`, the class is loaded through the class’s
    `__autoload()` function before getting the interfaces it implements.
  prefs: []
  type: TYPE_NORMAL
- en: class_implements
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array class_implements(mixed` *class*`[, bool` *autoload_class*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: If *class* is an object, returns an array containing the names of the interfaces
    implemented by *class*’s object class. If *class* is a string, returns an array
    containing the names of the interfaces implemented by the class named *class*.
    Returns `false` if *class* is neither an object nor a string, or if *class* is
    a string but no object class of that name exists. If *autoload_class* is set and
    is `true`, the class is loaded through the class’s `__autoload()` function before
    getting the interfaces it implements.
  prefs: []
  type: TYPE_NORMAL
- en: class_parents
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array class_parents(mixed` *class*`[, bool` *autoload_class*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: If *class* is an object, returns an array containing the names of the parents
    of *class*’s object class. If *class* is a string, returns an array containing
    the class names of the parents of the class named *class*. Returns `false` if
    *class* is neither an object nor a string, or if *class* is a string but no object
    class of that name exists. If *autoload_class* is set and is `true`, the class
    is loaded through the class’s `__autoload()` function before getting its parents.
  prefs: []
  type: TYPE_NORMAL
- en: clearstatcache
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`void clearstatcache([bool` *clear_realpath_cache*`[, string` *file*`]])`'
  prefs: []
  type: TYPE_NORMAL
- en: Clears the file status functions cache. The next call to any of the file status
    functions will retrieve the information from the disk. The *clear_realpath_cache*
    parameter allows for clearing the *realpath* cache. The `file` parameter allows
    for the clearing of the *realpath* and stat caches for a specific filename only,
    and it can be used only if *clear_realpath_cache* is `true`.
  prefs: []
  type: TYPE_NORMAL
- en: closedir
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`void closedir([int` *handle*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Closes the directory stream referenced by *handle*. See `opendir()` for more
    information on directory streams. If *handle* is not specified, the most recently
    opened directory stream is closed.
  prefs: []
  type: TYPE_NORMAL
- en: closelog
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int closelog()`'
  prefs: []
  type: TYPE_NORMAL
- en: Closes the file descriptor used to write to the system logger after an `openlog()`
    call. Returns `true` if the change was successful and `false` if not.
  prefs: []
  type: TYPE_NORMAL
- en: compact
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array compact(mixed` *variable1*`[, ... mixed` *variableN*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Creates an array by retrieving the values of the variables named in the parameters.
    If any of the parameters are arrays, the values of variables named in the arrays
    are also retrieved. The array returned is an associative array, with the keys
    being the arguments provided to the function and the values being the values of
    the named variables. This function is the opposite of `extract()`.
  prefs: []
  type: TYPE_NORMAL
- en: connection_aborted
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int connection_aborted()`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns `true` (`1`) if the client disconnected (for example, clicked Stop in
    the browser) at any point before the function is called. Returns `false` (`0`)
    if the client is still connected.
  prefs: []
  type: TYPE_NORMAL
- en: connection_status
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int connection_status()`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns the status of the connection as a bitfield with three states: `NORMAL`
    (`0`), `ABORTED` (`1`), and `TIMEOUT` (`2`).'
  prefs: []
  type: TYPE_NORMAL
- en: constant
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`mixed constant(string` *name*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the value of the constant called *name*.
  prefs: []
  type: TYPE_NORMAL
- en: convert_cyr_string
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string convert_cyr_string(string` *value*`, string` *from*`, string` *to*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Converts *value* from one Cyrillic set to another. The *from* and *to* parameters
    are single-character strings representing the set and have the following valid
    values:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `k` | koi8-r |'
  prefs: []
  type: TYPE_TB
- en: '| `w` | Windows-1251 |'
  prefs: []
  type: TYPE_TB
- en: '| `i` | ISO 8859-5 |'
  prefs: []
  type: TYPE_TB
- en: '| `a` or `d` | x-cp866 |'
  prefs: []
  type: TYPE_TB
- en: '| `m` | x-mac-cyrillic |'
  prefs: []
  type: TYPE_TB
- en: convert_uudecode
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string convert_uudecode(string` *value*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Decodes the `uuencode`d string *value* and returns it.
  prefs: []
  type: TYPE_NORMAL
- en: convert_uuencode
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string convert_uuencode(string` *value*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Encodes the string *value* using `uuencode` and returns it.
  prefs: []
  type: TYPE_NORMAL
- en: copy
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int copy(string` *path*`, string` *destination*`[, resource` *context*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Copies the file at *path* to *destination*. If the operation succeeds, the function
    returns `true`; otherwise, it returns `false`. If the file at the destination
    exists, it will be replaced. The optional *context* parameter can make use of
    a valid context resource created with the `stream_context_create()` function.
  prefs: []
  type: TYPE_NORMAL
- en: cos
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`float cos(float` *value*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the cosine of *value* in radians.
  prefs: []
  type: TYPE_NORMAL
- en: cosh
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`float cosh(float` *value*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the hyperbolic cosine of *value*.
  prefs: []
  type: TYPE_NORMAL
- en: count
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int count(mixed` *value*`[, int` *mode*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the number of elements in the *value*; for arrays or objects, this is
    the number of elements; for any other *value*, this is `1`. If the parameter is
    a variable and the variable is not set, `0` is returned. If *mode* is set and
    is `COUNT_RECURSIVE`, the number of elements is counted recursively, counting
    the number of values in arrays inside arrays.
  prefs: []
  type: TYPE_NORMAL
- en: count_chars
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`mixed count_chars(string` *string*`[, int` *mode*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns the number of occurrences of each byte value from 0 to 255 in *string*;
    *mode* determines the form of the result. The possible values of *mode* are:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `0` (default) | Returns an associative array with each byte value as a key
    and the frequency of that byte value as the value |'
  prefs: []
  type: TYPE_TB
- en: '| `1` | Same as above, except that only byte values with a nonzero frequency
    are listed |'
  prefs: []
  type: TYPE_TB
- en: '| `2` | Same as above, except that only byte values with a frequency of zero
    are listed |'
  prefs: []
  type: TYPE_TB
- en: '| `3` | Returns a string containing all byte values with a nonzero frequency
    |'
  prefs: []
  type: TYPE_TB
- en: '| `4` | Returns a string containing all byte values with a frequency of zero
    |'
  prefs: []
  type: TYPE_TB
- en: crc32
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int crc32(string` *value*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Calculates and returns the *cyclic redundancy checksum* (CRC) for *value*.
  prefs: []
  type: TYPE_NORMAL
- en: create_function
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string create_function(string` *arguments*`, string` *code*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Creates an anonymous function with the given *arguments* and *code*; returns
    a generated name for the function. Such anonymous functions (also called *lambda
    functions*) are useful for short-term callback functions, such as when using `usort()`.
  prefs: []
  type: TYPE_NORMAL
- en: crypt
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string crypt(string` *string*`[, string` *salt*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Encrypts *string* using the DES encryption algorithm seeded with the two-character
    salt value *salt*. If *salt* is not supplied, a random *salt* value is generated
    the first time `crypt()` is called in a script; this value is used on subsequent
    calls to `crypt()`. Returns the encrypted string.
  prefs: []
  type: TYPE_NORMAL
- en: current
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`mixed current(array` *array*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the value of the element to which the internal pointer is set. The first
    time that `current()` is called, or when `current()` is called after `reset`,
    the pointer is set to the first element in the array.
  prefs: []
  type: TYPE_NORMAL
- en: date
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string date(string` *format*`[, int` *timestamp*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Formats a time and date according to the *format* string provided in the first
    parameter. If the second parameter is not specified, the current time and date
    is used. The following characters are recognized in the *format* string:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `a` | “am” or “pm” |'
  prefs: []
  type: TYPE_TB
- en: '| `A` | “AM” or “PM” |'
  prefs: []
  type: TYPE_TB
- en: '| `B` | Swatch internet time |'
  prefs: []
  type: TYPE_TB
- en: '| `d` | Day of the month as two digits, including a leading zero if necessary
    (e.g., “01” through “31”) |'
  prefs: []
  type: TYPE_TB
- en: '| `D` | Name of the day of the week as a three-letter abbreviation (e.g., “Mon”)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `F` | Name of the month (e.g., “August”) |'
  prefs: []
  type: TYPE_TB
- en: '| `g` | Hour in 12-hour format (e.g., “1” through “12”) |'
  prefs: []
  type: TYPE_TB
- en: '| `G` | Hour in 24-hour format (e.g., “0” through “23”) |'
  prefs: []
  type: TYPE_TB
- en: '| `h` | Hour in 12-hour format, including a leading zero if necessary; e.g.,
    “01” through “12” |'
  prefs: []
  type: TYPE_TB
- en: '| `H` | Hour in 24-hour format, including a leading zero if necessary (e.g.,
    “00” through “23”) |'
  prefs: []
  type: TYPE_TB
- en: '| `i` | Minutes, including a leading zero if necessary (e.g., “00” through
    “59”) |'
  prefs: []
  type: TYPE_TB
- en: '| `I` | “1” if Daylight Saving Time; “0” otherwise |'
  prefs: []
  type: TYPE_TB
- en: '| `j` | Day of the month (e.g., “1” through “31”) |'
  prefs: []
  type: TYPE_TB
- en: '| `l` | Name of the day of the week (e.g., “Monday”) |'
  prefs: []
  type: TYPE_TB
- en: '| `L` | “0” if the year is not a leap year; “1” if it is |'
  prefs: []
  type: TYPE_TB
- en: '| `m` | Month, including a leading zero if necessary (e.g., “01” through “12”)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `M` | Name of the month as a three-letter abbreviation (e.g., “Aug”) |'
  prefs: []
  type: TYPE_TB
- en: '| `n` | Month without leading zeros (e.g., “1” to “12”) |'
  prefs: []
  type: TYPE_TB
- en: '| `r` | Date formatted according to RFC 822 (e.g., “Thu, 21 Jun 2001 21:27:19
    +0600”) |'
  prefs: []
  type: TYPE_TB
- en: '| `s` | Seconds, including a leading zero if necessary (e.g., “00” through
    “59”) |'
  prefs: []
  type: TYPE_TB
- en: '| `S` | English ordinal suffix for the day of the month; either “st”, “nd”,
    or “th” |'
  prefs: []
  type: TYPE_TB
- en: '| `t` | Number of days in the month, from “28” to “31” |'
  prefs: []
  type: TYPE_TB
- en: '| `T` | Time zone setting of the machine running PHP (e.g., “MST”) |'
  prefs: []
  type: TYPE_TB
- en: '| `u` | Seconds since the Unix epoch |'
  prefs: []
  type: TYPE_TB
- en: '| `w` | Numeric day of the week, starting with “0” for Sunday |'
  prefs: []
  type: TYPE_TB
- en: '| `W` | Numeric week of the year according to ISO 8601 |'
  prefs: []
  type: TYPE_TB
- en: '| `Y` | Year with four digits (e.g., “1998”) |'
  prefs: []
  type: TYPE_TB
- en: '| `y` | Year with two digits (e.g., “98”) |'
  prefs: []
  type: TYPE_TB
- en: '| `z` | Day of the year, from “0” through “365” |'
  prefs: []
  type: TYPE_TB
- en: '| `Z` | Time zone offset in seconds, from “–43200” (far west of UTC) to “43200”
    (far east of UTC) |'
  prefs: []
  type: TYPE_TB
- en: Any characters in the *format* string not matching one of the above will be
    kept in the resulting string as is. If a non-numeric value is provided for `timestamp`,
    then `false` is returned and a warning is issued.
  prefs: []
  type: TYPE_NORMAL
- en: date_default_timezone_get
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string date_default_timezone_get()`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the current default time zone, set previously by the `date_default_timezone_set()`
    function or via the `date.timezone` option in the *php.ini* file. Returns `"UTC"`
    if neither is set.
  prefs: []
  type: TYPE_NORMAL
- en: date_default_timezone_set
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string date_default_timezone_set(string` *timezone*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Sets the current default time zone.
  prefs: []
  type: TYPE_NORMAL
- en: date_parse
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array date_parse(string` *time*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Converts an English description of a time and date into an array describing
    that time and date. Returns `false` if the value could not be converted into a
    valid date. The returned array contains the same values as returned from `date_parse_from_format()`.
  prefs: []
  type: TYPE_NORMAL
- en: date_parse_from_format
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array date_parse_from_format(string` *format*`, string` *time*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parses *time* into an associative array representing a date. The string *time*
    is given in the format specified by *format*, using the same character codes as
    described in `date()`. The returned array contains the following entries:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `year` | Year |'
  prefs: []
  type: TYPE_TB
- en: '| `month` | Month |'
  prefs: []
  type: TYPE_TB
- en: '| `day` | Day of the month |'
  prefs: []
  type: TYPE_TB
- en: '| `hour` | Hours |'
  prefs: []
  type: TYPE_TB
- en: '| `minute` | Minutes |'
  prefs: []
  type: TYPE_TB
- en: '| `second` | Seconds |'
  prefs: []
  type: TYPE_TB
- en: '| `fraction` | Fractions of seconds |'
  prefs: []
  type: TYPE_TB
- en: '| `warning_count` | Number of warnings that occurred during parsing |'
  prefs: []
  type: TYPE_TB
- en: '| `warnings` | An array of warnings that occurred during parsing |'
  prefs: []
  type: TYPE_TB
- en: '| `error_count` | Number of errors that occurred during parsing |'
  prefs: []
  type: TYPE_TB
- en: '| `errors` | An array of errors that occurred during parsing |'
  prefs: []
  type: TYPE_TB
- en: '| `is_localtime` | True if the time represents a time in the current default
    time zone |'
  prefs: []
  type: TYPE_TB
- en: '| `zone_type` | The type of time zone `zone` represents |'
  prefs: []
  type: TYPE_TB
- en: '| `zone` | The time zone the time is in |'
  prefs: []
  type: TYPE_TB
- en: '| `is_dst` | True if the time represents a time in Daylight Saving Time |'
  prefs: []
  type: TYPE_TB
- en: date_sun_info
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array date_sun_info(int` *timestamp*`, float` *latitude*`, float` *longitude*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns information as an associative array about the times of sunrise and
    sunset, and the times twilight begins and ends, at a given latitude and longitude.
    The resulting array contains the following keys:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `sunrise` | The time sunrise occurs |'
  prefs: []
  type: TYPE_TB
- en: '| `sunset` | The time sunset occurs |'
  prefs: []
  type: TYPE_TB
- en: '| `transit` | The time the sun is at its zenith |'
  prefs: []
  type: TYPE_TB
- en: '| `civil_twilight_begin` | The time civil twilight begins |'
  prefs: []
  type: TYPE_TB
- en: '| `civil_twilight_end` | The time civil twilight ends |'
  prefs: []
  type: TYPE_TB
- en: '| `nautical_twilight_begin` | The time nautical twilight begins |'
  prefs: []
  type: TYPE_TB
- en: '| `nautical_twilight_end` | The time nautical twilight ends |'
  prefs: []
  type: TYPE_TB
- en: '| `astronomical_twilight_begin` | The time astronomical twilight begins |'
  prefs: []
  type: TYPE_TB
- en: '| `astronomical_twilight_end` | The time astronomical twilight ends |'
  prefs: []
  type: TYPE_TB
- en: date_sunrise
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`mixed date_sunrise(int` *timestamp*`[, int` *format*`[, float` *latitude*`[,
    float` *longitude* `[, float` *zenith*`[, float` *gmt_offset*`]]]]])`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns the time of the sunrise for the day in *timestamp*; `false` on failure.
    The *format* parameter determines the format the time is returned as (with a default
    of `SUNFUNCS_RET_STRING`), while the *latitude*, *longitude*, *zenith*, and *gmt_offset*
    parameters provide a specific location. They default to values given in the PHP
    configuration options (*php.ini*). Parameters include:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `SUNFUNCS_RET_STRING` | Returns the value as a string; for example, “06:14”
    |'
  prefs: []
  type: TYPE_TB
- en: '| `SUNFUNCS_RET_DOUBLE` | Returns the value as a float; for example, 6.233
    |'
  prefs: []
  type: TYPE_TB
- en: '| `SUNFUNCS_RET_TIMESTAMP` | Returns the value as a Unix epochal timestamp
    |'
  prefs: []
  type: TYPE_TB
- en: date_sunset
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`mixed date_sunset(int` *timestamp*`[, int` *format*`[, float` *latitude*`[,
    float` *longitude* `[, float` *zenith*`[, float` *gmt_offset*`]]]]])`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns the time of the sunset for the day in *timestamp*; `false` on failure.
    The *format* parameter determines the format the time is returned as (with a default
    of `SUNFUNCS_RET_STRING`), while the *latitude*, *longitude*, *zenith*, and *gmt_offset*
    parameters provide a specific location. They default to values given in the PHP
    configuration options (*php.ini*). Parameters include:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `SUNFUNCS_RET_STRING` | Returns the value as a string; for example, “19:02”
    |'
  prefs: []
  type: TYPE_TB
- en: '| `SUNFUNCS_RET_DOUBLE` | Returns the value as a float; for example, 19.033
    |'
  prefs: []
  type: TYPE_TB
- en: '| `SUNFUNCS_RET_TIMESTAMP` | Returns the value as a Unix epochal timestamp
    |'
  prefs: []
  type: TYPE_TB
- en: debug_backtrace
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array debug_backtrace([ int` *options* `[, int` *limit*`]])`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns an array of associative arrays containing a backtrace of where PHP
    is currently executing. One element is included per function or file include,
    with the following elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `function` | If in a function, the function’s name as a string |'
  prefs: []
  type: TYPE_TB
- en: '| `line` | The line number within the file where the current function or file
    include is located |'
  prefs: []
  type: TYPE_TB
- en: '| `file` | The name of the file the element is in |'
  prefs: []
  type: TYPE_TB
- en: '| `class` | If in an object instance or class method, the name of the class
    the element is in |'
  prefs: []
  type: TYPE_TB
- en: '| `object` | If in an object, that object’s name |'
  prefs: []
  type: TYPE_TB
- en: '| `type` | The current call type: `::` if a static method; `->` if a method;
    nothing if a function |'
  prefs: []
  type: TYPE_TB
- en: '| `args` | If in a function, the arguments used to call that function; if in
    a file include, the include file’s name |'
  prefs: []
  type: TYPE_TB
- en: Each function call or file include generates a new element in the array. The
    innermost function call or file include is the element with an index of 0; further
    elements are less deep function calls or file includes.
  prefs: []
  type: TYPE_NORMAL
- en: debug_print_backtrace
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`void debug_print_backtrace()`'
  prefs: []
  type: TYPE_NORMAL
- en: Prints the current debug backtrace (see `debug_backtrace`) to the client.
  prefs: []
  type: TYPE_NORMAL
- en: decbin
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string decbin(int` *decimal*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Converts the provided *decimal* value to a binary representation of it. Up to
    a 32-bit number, or 2,147,483,647 decimal, can be converted.
  prefs: []
  type: TYPE_NORMAL
- en: dechex
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string dechex(int` *decimal*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Converts *decimal* to a hexadecimal (base-16) representation of it. Up to a
    32-bit number, or 2,147,483,647 decimal (0x7FFFFFFF hexadecimal), can be converted.
  prefs: []
  type: TYPE_NORMAL
- en: decoct
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string decoct(int` *decimal*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Converts *decimal* to an octal (base-8) representation of it. Up to a 32-bit
    number, or 2,147,483,647 decimal (017777777777 octal), can be converted.
  prefs: []
  type: TYPE_NORMAL
- en: define
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool define(string` *name*`, mixed` *value*`[, int` *case_insensitive*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Defines a constant named *name* and sets its value to *value*. If *case_insensitive*
    is set and is `true`, the operation fails if a constant with the same name, compared
    case-insensitively, is previously defined. Otherwise, the check for existing constants
    is done case-sensitively. Returns `true` if the constant could be created, and
    `false` if a constant with the given name already exists.
  prefs: []
  type: TYPE_NORMAL
- en: define_syslog_variables
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`void define_syslog_variables()`'
  prefs: []
  type: TYPE_NORMAL
- en: Initializes all variables and constants used by the syslog functions `openlog()`,
    `syslog()`, and `closelog()`. This function should be called before using any
    of the syslog functions.
  prefs: []
  type: TYPE_NORMAL
- en: defined
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool defined(string` *name*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns `true` if a constant with the name *name* exists, and `false` if a constant
    with that name does not exist.
  prefs: []
  type: TYPE_NORMAL
- en: deflate_add
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`void deflate_init(resource` *context*`, string` *data*`[, int` *flush_mode*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Adds *data* to the deflate context *context*, and checks if the context should
    be flushed based on *flush_mode*, which is one of `ZLIB_BLOCK`, `ZLIB_NO_FLUSH`,
    `ZLIB_PARTIAL_FLUSH`, `ZLIB_SYNC_FLUSH` (the default), `ZLIB_FULL_FLUSH`, or `ZLIB_FINISH`.
    When adding most chunks of data, choose `ZLIB_NO_FLUSH` to maximize compression
    attempts. After the last chunk has been added, use `ZLIB_FINISH` to indicate the
    context is complete.
  prefs: []
  type: TYPE_NORMAL
- en: deflate_init
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`void deflate_init(int` *encoding*`[, array` *options*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Initializes and returns an incremental deflation context. This context can be
    used to incrementally deflate data using calls to `deflate_add()` using that context.
  prefs: []
  type: TYPE_NORMAL
- en: '| `level` | The compression range from –1 through 9 |'
  prefs: []
  type: TYPE_TB
- en: '| `memory` | The compression memory level from 1 through 9 |'
  prefs: []
  type: TYPE_TB
- en: '| `window` | The zlib window size from 8 through 15 |'
  prefs: []
  type: TYPE_TB
- en: '| `strategy` | The compression strategy to use; either `ZLIB_FILTERED`, `ZLIB_HUFFMAN_ONLY`,
    `ZLIB_RLE`, `ZLIB_FIXED`, or `ZLIB_DEFAULT_STRATEGY` (default) |'
  prefs: []
  type: TYPE_TB
- en: '| `dictionary` | A string or array of strings of the compression preset dictionary
    |'
  prefs: []
  type: TYPE_TB
- en: deg2rad
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`float deg2rad(float` *number*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Converts *number* from degrees to radians and returns the result.
  prefs: []
  type: TYPE_NORMAL
- en: dir
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`directory dir(string` *path*`[, resource` *context*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns an instance of the `directory` class initialized to the given *path*.
    You can use the `read()`, `rewind()`, and `close()` methods on the object as equivalent
    to the `readdir()`, `rewinddir()`, and `closedir()` procedural functions.
  prefs: []
  type: TYPE_NORMAL
- en: dirname
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string dirname(string` *path*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the directory component of *path*. This includes everything up to the
    filename portion (see `basename`) and doesn’t include the trailing path separator.
  prefs: []
  type: TYPE_NORMAL
- en: disk_free_space
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`float disk_free_space(string` *path*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the number of bytes of free space available on the disk partition or
    filesystem at *path*.
  prefs: []
  type: TYPE_NORMAL
- en: disk_total_space
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`float disk_total_space(string` *path*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the number of bytes of total space available (including both used and
    free) on the disk partition or filesystem at *path*.
  prefs: []
  type: TYPE_NORMAL
- en: each
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array each(array &`*array*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Creates an array containing the keys and values of the element currently pointed
    at by the array’s internal pointer. The array contains four elements: elements
    with the keys `0` and *key* containing the key of the element, and elements with
    the keys `1` and *value* containing the value of the element.'
  prefs: []
  type: TYPE_NORMAL
- en: If the internal pointer of the array points beyond the end of the array, `each()`
    returns `false`.
  prefs: []
  type: TYPE_NORMAL
- en: echo
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`void echo string` *string*`[, string` *string2*`[, string` *stringN* `...]]`'
  prefs: []
  type: TYPE_NORMAL
- en: Outputs the given strings. `echo` is a language construct, and enclosing the
    parameters in parentheses is optional, unless multiple parameters are given—in
    which case, you cannot use parentheses.
  prefs: []
  type: TYPE_NORMAL
- en: empty
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool empty(mixed` *value*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns `true` if *value* is either `0` or not set, and `false` otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: end
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`mixed end(array &`*array*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Advances the array’s internal pointer to the last element and returns the element’s
    value.
  prefs: []
  type: TYPE_NORMAL
- en: error_clear_last
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array error_clear_last()`'
  prefs: []
  type: TYPE_NORMAL
- en: Clears the most recent error; it will no longer be returned by `error_get_last()`.
  prefs: []
  type: TYPE_NORMAL
- en: error_get_last
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array error_get_last()`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns an associative array of information about the most recent error that
    occurred, or `NULL` if no errors have yet occurred while processing the current
    script. The following values are included in the array:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `type` | The type of error |'
  prefs: []
  type: TYPE_TB
- en: '| `message` | Printable version of the error |'
  prefs: []
  type: TYPE_TB
- en: '| `file` | The full path to the file where the error occurred |'
  prefs: []
  type: TYPE_TB
- en: '| `line` | The line number within the file where the error occurred |'
  prefs: []
  type: TYPE_TB
- en: error_log
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool error_log(string` *message*`, int` *type*`[, string` *destination*`[,
    string` *headers*`]])`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Records an error message to the web server’s error log, to an email address,
    or to a file. The first parameter is the message to log. The type is one of the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `0` | `message` is sent to the PHP system log; the message is put into the
    file pointed at by the `error_log` configuration directive. |'
  prefs: []
  type: TYPE_TB
- en: '| `1` | `message` is sent to the email address destination. If specified, *headers*
    provides optional headers to use when creating the message (see `mail` for more
    information on the optional headers). |'
  prefs: []
  type: TYPE_TB
- en: '| `3` | Appends *message* to the file *destination*. |'
  prefs: []
  type: TYPE_TB
- en: '| `4` | `message` is sent directly to the Server Application Programming Interface
    (SAPI) logging handler. |'
  prefs: []
  type: TYPE_TB
- en: error_reporting
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int error_reporting([int` *level*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Sets the level of errors reported by PHP to *level* and returns the current
    level; if *level* is omitted, the current level of error reporting is returned.
    The following values are available for the function:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `E_ERROR` | Fatal runtime errors (script execution halts) |'
  prefs: []
  type: TYPE_TB
- en: '| `E_WARNING` | Runtime warnings |'
  prefs: []
  type: TYPE_TB
- en: '| `E_PARSE` | Compile-time parse errors |'
  prefs: []
  type: TYPE_TB
- en: '| `E_NOTICE` | Runtime notices |'
  prefs: []
  type: TYPE_TB
- en: '| `E_CORE_ERROR` | Errors generated internally by PHP |'
  prefs: []
  type: TYPE_TB
- en: '| `E_CORE_WARNING` | Warnings generated internally by PHP |'
  prefs: []
  type: TYPE_TB
- en: '| `E_COMPILE_ERROR` | Errors generated internally by the Zend scripting engine
    |'
  prefs: []
  type: TYPE_TB
- en: '| `E_COMPILE_WARNING` | Warnings generated internally by the Zend scripting
    engine |'
  prefs: []
  type: TYPE_TB
- en: '| `E_USER_ERROR` | Runtime errors generated by a call to `trigger_error()`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `E_USER_WARNING` | Runtime warnings generated by a call to `trigger_error()`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `E_STRICT` | Direct PHP to suggest code changes to assist with forward compatibility
    |'
  prefs: []
  type: TYPE_TB
- en: '| `E_RECOVERABLE_ERROR` | If a potentially fatal error has occurred, was caught,
    and properly handled, the code can continue execution |'
  prefs: []
  type: TYPE_TB
- en: '| `E_DEPRECATED` | If enabled, warnings will be issued about deprecated code
    that will eventually not work properly |'
  prefs: []
  type: TYPE_TB
- en: '| `E_USER_DEPRECATED` | If enabled, any warning message triggered by deprecated
    code can be user-generated with the `trigger_error()` function |'
  prefs: []
  type: TYPE_TB
- en: '| `E_ALL` | All of the above options |'
  prefs: []
  type: TYPE_TB
- en: 'Any number of these options can be ORed (bitwise OR, `|`) together, so that
    errors in each of the levels are reported. For example, the following code turns
    off user errors and warnings, performs some actions, and then restores the original
    level:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: escapeshellarg
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string escapeshellarg(string` *argument*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Properly escapes *argument* so it can be used as a safe argument to a shell
    function. When directly passing user input (such as from forms) to a shell command,
    you should use this function to escape the data to ensure that the argument isn’t
    a security risk.
  prefs: []
  type: TYPE_NORMAL
- en: escapeshellcmd
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string escapeshellcmd(string` *command*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Escapes any characters in *command* that could cause a shell command to run
    additional commands. When directly passing user input (such as from forms) to
    the `exec()` or `system()` functions, you should use this function to escape the
    data to ensure that the argument isn’t a security risk.
  prefs: []
  type: TYPE_NORMAL
- en: exec
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string exec(string` *command*`[, array` *output*`[, int` *return*`]])`'
  prefs: []
  type: TYPE_NORMAL
- en: Executes *command* via the shell and returns the last line of output from the
    command’s result. If *output* is specified, it is filled with the lines returned
    by the command. If *return* is specified, it is set to the return status of the
    command.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to have the results of the command output into the PHP page, use
    `passthru()`.
  prefs: []
  type: TYPE_NORMAL
- en: exp
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`float exp(float` *number*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns *e* raised to the *number* power.
  prefs: []
  type: TYPE_NORMAL
- en: explode
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array explode(string` *separator*`, string` *string*`[, int` *limit*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns an array of substrings created by splitting *string* wherever *separator*
    is found. If supplied, a maximum of *limit* substrings will be returned, with
    the last substring returned containing the remainder of the string. If *separator*
    is not found, returns the original string.
  prefs: []
  type: TYPE_NORMAL
- en: expm1
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`float expm1(float` *number*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns `exp(`*number*`) – 1`, computed such that the returned value is accurate
    even when *number* is near 0.
  prefs: []
  type: TYPE_NORMAL
- en: extension_loaded
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool extension_loaded(string` *name*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns `true` if the *name*d extension is loaded, and `false` if it is not.
  prefs: []
  type: TYPE_NORMAL
- en: extract
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int extract(array` *array*`[, int` *type*`[, string` *prefix*`]])`'
  prefs: []
  type: TYPE_NORMAL
- en: Sets the value of variables to the values of elements from an array. For each
    element in the array, the key is used to determine the variable name to set, and
    that variable is set to the value of the element.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second argument, if given, takes one of the following values to determine
    behavior if the values in the array have the same name as variables that already
    exist in the local scope:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `EXTR_OVERWRITE` (default) | Overwrite the existing variable |'
  prefs: []
  type: TYPE_TB
- en: '| `EXTR_SKIP` | Don’t overwrite the existing variable (ignore the value provided
    in the array) |'
  prefs: []
  type: TYPE_TB
- en: '| `EXTR_PREFIX_SAME` | Prefix the variable name with the string given as the
    third argument |'
  prefs: []
  type: TYPE_TB
- en: '| `EXTR_PREFIX_ALL` | Prefix all variable names with the string given as the
    third argument |'
  prefs: []
  type: TYPE_TB
- en: '| `EXTR_PREFIX_INVALID` | Prefix any invalid or numeric variable names with
    the string given as the third argument |'
  prefs: []
  type: TYPE_TB
- en: '| `EXTR_IF_EXISTS` | Replace variable only if it exists in the current symbol
    table |'
  prefs: []
  type: TYPE_TB
- en: '| `EXTR_PREFIX_IF_EXISTS` | Create prefixed variable names only if the nonprefixed
    version of the same variable exists |'
  prefs: []
  type: TYPE_TB
- en: '| `EXTR_REFS` | Extract variables as references |'
  prefs: []
  type: TYPE_TB
- en: The function returns the number of successfully set variables.
  prefs: []
  type: TYPE_NORMAL
- en: fclose
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool fclose(int` *handle*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Closes the file referenced by *handle*; returns `true` if successful and `false`
    if not.
  prefs: []
  type: TYPE_NORMAL
- en: feof
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool feof(int` *handle*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns `true` if the marker for the file referenced by *handle* is at the end
    of the file (EOF) or if an error occurs. If the marker is not at EOF, returns
    `false`.
  prefs: []
  type: TYPE_NORMAL
- en: fflush
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool fflush(int` *handle*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Commits any changes to the file referenced by *handle* to disk, ensuring that
    the file contents are on disk and not just in a disk buffer. If the operation
    succeeds, the function returns `true`; otherwise, it returns `false`.
  prefs: []
  type: TYPE_NORMAL
- en: fgetc
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string fgetc(int` *handle*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the character at the marker for the file referenced by *handle* and
    moves the marker to the next character. If the marker is at the end of the file,
    the function returns `false`.
  prefs: []
  type: TYPE_NORMAL
- en: fgetcsv
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array fgetcsv(resource` *handle*`[, int` *length*`[, string` *delimiter*`[,
    string` *enclosure* `[, string` *escape*`]]]])`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Reads the next line from the file referenced by *handle* and parses the line
    as a comma-separated values (CSV) line. The longest line to read is given by *length*.
    If *delimiter* is supplied, it is used to delimit the values for the line instead
    of commas. If supplied, *enclosure* is a single character that is used to enclose
    values (by default, the double quote character, `"`). *escape* sets the escape
    character to use; the default is backslash `\`; only one character can be specified.
    For example, to read and display all lines from a file containing tab-separated
    values, use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: fgets
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string fgets(resource` *handle* `[, int` *length*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Reads a string from the file referenced by *handle*; a string of no more than
    *length* characters is returned, but the read ends at *length* `− 1` (for the
    end-of-line character) characters, at an end-of-line character, or at EOF. Returns
    `false` if any error occurs.
  prefs: []
  type: TYPE_NORMAL
- en: fgetss
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string fgetss(resource` *handle* `[, int` *length*`[, string` *tags*`]])`'
  prefs: []
  type: TYPE_NORMAL
- en: Reads a string from the file referenced by *handle*; a string of no more than
    *length* characters is returned, but the read ends at *length* `− 1` (for the
    end-of-line character) characters, at an end-of-line character, or at EOF. Any
    PHP and HTML tags in the string, except those listed in *tags*, are stripped before
    returning it. Returns `false` if any error occurs.
  prefs: []
  type: TYPE_NORMAL
- en: file
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array file(string` *filename*`[, int` *flags* `[, resource` *context*`]])`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Reads the *file* into an array. *flags* can be one or more of the following
    constants:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `FILE_USE_INCLUDE_PATH` | Search for the file in the include path as set
    in the *php.ini* file |'
  prefs: []
  type: TYPE_TB
- en: '| `FILE_IGNORE_NEW_LINES` | Do not add a newline at the end of the array elements
    |'
  prefs: []
  type: TYPE_TB
- en: '| `FILE_SKIP_EMPTY_LINES` | Skip any empty lines |'
  prefs: []
  type: TYPE_TB
- en: file_exists
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool file_exists(string` *path*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns `true` if the file at *path* exists and `false` if not.
  prefs: []
  type: TYPE_NORMAL
- en: fileatime
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int fileatime(string` *path*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the last access time, as a Unix timestamp value, for the file *path*.
    Because of the cost involved in retrieving this information from the filesystem,
    this information is cached; you can clear the cache with `clearstatcache()`.
  prefs: []
  type: TYPE_NORMAL
- en: filectime
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int filectime(string` *path*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the inode change time value for the file at *path*. Because of the cost
    involved in retrieving this information from the filesystem, this information
    is cached; you can clear the cache with `clearstatcache()`.
  prefs: []
  type: TYPE_NORMAL
- en: file_get_contents
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string file_get_contents(string` *path*`[, bool` *include* `[, resource` *context*
    `[, int` *offset* `[, int` *maxlen*`]]]])`'
  prefs: []
  type: TYPE_NORMAL
- en: Reads the file at *path* and returns its contents as a string, optionally starting
    at *offset*. If *include* is specified and is `true`, the include path is searched
    for the file. The length of the returned string can also be controlled with the
    *maxlen* parameter.
  prefs: []
  type: TYPE_NORMAL
- en: filegroup
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int filegroup(string` *path*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the group ID of the group owning the file *path*. Because of the cost
    involved in retrieving this information from the filesystem, this information
    is cached; you can clear the cache with `clearstatcache()`.
  prefs: []
  type: TYPE_NORMAL
- en: fileinode
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int fileinode(string` *path*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the inode number of the file *path*, or `false` if an error occurs.
    This information is cached; see `clearstatcache`.
  prefs: []
  type: TYPE_NORMAL
- en: filemtime
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int filemtime(string` *path*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the last-modified time, as a Unix timestamp value, for the file *path*.
    This information is cached; you can clear the cache with `clearstatcache()`.
  prefs: []
  type: TYPE_NORMAL
- en: fileowner
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int fileowner(string` *path*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the user ID of the owner of the file *path*, or `false` if an error
    occurs. This information is cached; you can clear the cache with `clearstatcache()`.
  prefs: []
  type: TYPE_NORMAL
- en: fileperms
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int fileperms(string` *path*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the file permissions for the file *path*, or `false` if an error occurs.
    This information is cached; you can clear the cache with `clearstatcache()`.
  prefs: []
  type: TYPE_NORMAL
- en: file_put_contents
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int file_put_contents(string` *path*`, mixed` *string* `[, int` *flags*`[,
    resource` *context*`]])`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Opens the file specified by *path*, writes *string* to the file, and then closes
    the file. Returns the number of bytes written to the file, or `−1` on error. The
    *flags* argument is a bitfield with two possible values:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `FILE_USE_INCLUDE_PATH` | If specified, the include path is searched for
    the file and the file is written at the first location where it already exists
    |'
  prefs: []
  type: TYPE_TB
- en: '| `FILE_APPEND` | If specified and if the file indicated by `path` already
    exists, `string` is appended to the existing contents of the file |'
  prefs: []
  type: TYPE_TB
- en: '| `LOCK_EX` | Exclusively lock the file before writing to it |'
  prefs: []
  type: TYPE_TB
- en: filesize
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int filesize(string` *path*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the size, in bytes, of the file *path*. If the file does not exist or
    any other error occurs, the function returns `false`. This information is cached;
    you can clear the cache with `clearstatcache()`.
  prefs: []
  type: TYPE_NORMAL
- en: filetype
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string filetype(string` *path*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns the type of file given in *path*. The possible types are:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `Fifo` | The file is a FIFO pipe |'
  prefs: []
  type: TYPE_TB
- en: '| `Char` | The file is a text file |'
  prefs: []
  type: TYPE_TB
- en: '| `Dir` | *path* is a directory |'
  prefs: []
  type: TYPE_TB
- en: '| `Block` | A block reserved for use by the filesystem |'
  prefs: []
  type: TYPE_TB
- en: '| `Link` | The file is a symbolic link |'
  prefs: []
  type: TYPE_TB
- en: '| `File` | The file contains binary data |'
  prefs: []
  type: TYPE_TB
- en: '| `Socket` | A socket interface |'
  prefs: []
  type: TYPE_TB
- en: '| `Unknown` | The file’s type could not be determined |'
  prefs: []
  type: TYPE_TB
- en: filter_has_var
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool filter_has_var(int` *context*`, string` *name*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns `true` if a value named *name* exists in the specified *context*, and
    `false` if it doesn’t. The context is one of `INPUT_GET`, `INPUT_POST`, `INPUT_COOKIE`,
    `INPUT_SERVER`, or `INPUT_ENV`.
  prefs: []
  type: TYPE_NORMAL
- en: filter_id
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int filter_id(string` *name*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the ID for the filter identified by *name*, or `false` if no such filter
    exists.
  prefs: []
  type: TYPE_NORMAL
- en: filter_input
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`mixed filter_input(mixed` *var*`[, int` *filter_id*`[, mixed` *options*`]])`'
  prefs: []
  type: TYPE_NORMAL
- en: Performs the filter identified by ID *filter_id* on *var* in the given context
    and returns the result. The context is one of `INPUT_GET`, `INPUT_POST`, `INPUT_COOKIE`,
    `INPUT_SERVER`, or `INPUT_ENV`. If *filter_id* is not specified, the default filter
    is used. The *options* parameter can either be a bitfield of flags or an associative
    array of options appropriate to the filter. See [Chapter 4](ch04.xhtml#strings)
    for more information on using filters.
  prefs: []
  type: TYPE_NORMAL
- en: filter_input_array
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`mixed filter_input_array(array` *variables*`[, mixed` *filters*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Performs a series of filters against variables in the associative array *variables*
    and returns the results as an associative array. The context is one of `INPUT_GET`,
    `INPUT_POST`, `INPUT_COOKIE`, `INPUT_SERVER`, or `INPUT_ENV`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The optional parameter is an associative array where each element’s key is
    a variable name, with the associated value defining the filter and options to
    use to filter that variable’s value. The definition is either the ID of the filter
    to use or an array containing one or more of the following elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `filter` | The ID of the filter to apply |'
  prefs: []
  type: TYPE_TB
- en: '| `flags` | A bitfield of flags |'
  prefs: []
  type: TYPE_TB
- en: '| `options` | An associative array of options specific to the filter |'
  prefs: []
  type: TYPE_TB
- en: filter_list
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array filter_list()`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns an array of the name of each available filter; these names can be passed
    into `filter_id()` to obtain a filter ID for use in the other filtering functions.
  prefs: []
  type: TYPE_NORMAL
- en: filter_var
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`mixed filter_var(mixed` *var*`[, int` *filter_id*`[, mixed` *options*`]])`'
  prefs: []
  type: TYPE_NORMAL
- en: Performs the filter identified by ID *filter_id* on *var* and returns the result.
    If *filter_id* is not specified, the default filter is used. The *options* parameter
    can either be a bitfield of flags or an associative array of options appropriate
    to the filter. See [Chapter 4](ch04.xhtml#strings) for more information on using
    filters.
  prefs: []
  type: TYPE_NORMAL
- en: filter_var_array
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`mixed filter_var_array(mixed` *var*`[, mixed` *options*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Performs a series of filters against variables in the specified context and
    returns the results as an associative array. The context is one of `INPUT_GET`,
    `INPUT_POST`, `INPUT_COOKIE`, `INPUT_SERVER`, or `INPUT_ENV`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The *options* parameter is an associative array where each element’s key is
    a variable name, with the associated value defining the filter and options to
    use to filter that variable’s value. The definition is either the ID of the filter
    to use or an array containing one or more of the following elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `filter` | The ID of the filter to apply |'
  prefs: []
  type: TYPE_TB
- en: '| `flags` | A bitfield of flags |'
  prefs: []
  type: TYPE_TB
- en: '| `options` | An associative array of options specific to the filter |'
  prefs: []
  type: TYPE_TB
- en: floatval
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`float floatval(mixed` *value*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the float value for *value*. If value is a nonscalar (object or array),
    `1` is returned.
  prefs: []
  type: TYPE_NORMAL
- en: flock
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool flock(resource` *handle*`, int` *operation*`[, int` *would_block*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Attempts to lock the file path of the file specified by *handle*. The operation
    is one of the following values:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `LOCK_SH` | Shared lock (reader) |'
  prefs: []
  type: TYPE_TB
- en: '| `LOCK_EX` | Exclusive lock (writer) |'
  prefs: []
  type: TYPE_TB
- en: '| `LOCK_UN` | Release a lock (either shared or exclusive) |'
  prefs: []
  type: TYPE_TB
- en: '| `LOCK_NB` | Add to `LOCK_SH` or `LOCK_EX` to obtain a nonblocking lock |'
  prefs: []
  type: TYPE_TB
- en: If specified, *would_block* is set to `true` if the operation would cause a
    block on the file. The function returns `false` if the lock could not be obtained,
    and `true` if the operation succeeded.
  prefs: []
  type: TYPE_NORMAL
- en: Because file locking is implemented at the process level on most systems, `flock()`
    cannot prevent two PHP scripts running in the same web server process from accessing
    a file at the same time.
  prefs: []
  type: TYPE_NORMAL
- en: floor
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`float floor(float` *number*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the largest integer value less than or equal to *number*.
  prefs: []
  type: TYPE_NORMAL
- en: flush
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`void flush()`'
  prefs: []
  type: TYPE_NORMAL
- en: Sends the current output buffer to the client and empties the output buffer.
    See [Chapter 15](ch15.xhtml#application_techniques) for more information on using
    the output buffer.
  prefs: []
  type: TYPE_NORMAL
- en: fmod
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`float fmod(float` *x*`, float` *y*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the floating-point modulo of the division of *x* by *y*.
  prefs: []
  type: TYPE_NORMAL
- en: fnmatch
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool fnmatch(string` *pattern*`, string` *string*`[, int` *flags*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns `true` if *string* matches the shell wildcard pattern given in *pattern*.
    See `glob` for the pattern-matching rules. The flags value is a bitwise OR of
    any of the following values:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `FNM_NOESCAPE` | Treat backslashes in `pattern` as backslashes, rather than
    as the start of an escape sequence |'
  prefs: []
  type: TYPE_TB
- en: '| `FNM_PATHNAME` | Slash characters in `string` must be matched explicitly
    by slashes in `pattern` |'
  prefs: []
  type: TYPE_TB
- en: '| `FNM_PERIOD` | A period at the beginning of the string, or before any slash
    if `FNM_PATHNAME` is also specified, must be explicitly matched by periods in
    `pattern` |'
  prefs: []
  type: TYPE_TB
- en: '| `FNM_CASEFOLD` | Ignore case when matching `string` to `pattern` |'
  prefs: []
  type: TYPE_TB
- en: fopen
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`resource fopen(string` *path*`, string` *mode*`[, bool` *include* `[, resource`
    *context*`]])`'
  prefs: []
  type: TYPE_NORMAL
- en: Opens the file specified by *path* and returns a file resource handle to the
    open file. If *path* begins with `http://`, an HTTP connection is opened and a
    file pointer to the start of the response is returned. If *path* begins with `ftp://`,
    an FTP connection is opened and a file pointer to the start of the file is returned;
    the remote server must support passive FTP.
  prefs: []
  type: TYPE_NORMAL
- en: If *path* is `php://stdin`, `php://stdout`, or `php://stderr`, a file pointer
    to the appropriate stream is returned.
  prefs: []
  type: TYPE_NORMAL
- en: 'The parameter *mode* specifies the permissions to open the file with. It must
    be one of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `r` | Open the file for reading; file pointer will be at beginning of file.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `r+` | Open the file for reading and writing; file pointer will be at beginning
    of file. |'
  prefs: []
  type: TYPE_TB
- en: '| `w` | Open the file for writing. If the file exists, it will be truncated
    to zero length; if the file doesn’t already exist, it will be created. |'
  prefs: []
  type: TYPE_TB
- en: '| `w+` | Open the file for reading and writing. If the file exists, it will
    be truncated to zero length; if the file doesn’t already exist, it will be created.
    The file pointer starts at the beginning of the file. |'
  prefs: []
  type: TYPE_TB
- en: '| `a` | Open the file for writing. If the file exists, the file pointer will
    be at the end of the file; if the file does not exist, it is created. |'
  prefs: []
  type: TYPE_TB
- en: '| `a+` | Open the file for reading and writing. If the file exists, the file
    pointer will be at the end of the file; if the file does not exist, it is created.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `x` | Create and open file for writing only; place the file pointer at the
    beginning of the file. |'
  prefs: []
  type: TYPE_TB
- en: '| `x+` | Create and open file for reading and writing. |'
  prefs: []
  type: TYPE_TB
- en: '| `c` | Open the file for writing only. If the file does not exist, it is created.
    If it exists, it is not truncated (as is the case with `w`), nor does the call
    to this function fail (as is the case with `x`). The file pointer is positioned
    at the beginning of the file. |'
  prefs: []
  type: TYPE_TB
- en: '| `c+` | Open the file for reading and writing. |'
  prefs: []
  type: TYPE_TB
- en: If *include* is specified and is `true`, `fopen()` tries to locate the file
    in the current *include* path.
  prefs: []
  type: TYPE_NORMAL
- en: If any error occurs while attempting to open the file, `false` is returned.
  prefs: []
  type: TYPE_NORMAL
- en: forward_static_call
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`mixed forward_static_call(callable` *function*`[, mixed` *parameter1*`[, ...
    mixed` *parameterN*`]])`'
  prefs: []
  type: TYPE_NORMAL
- en: Calls the function named *function* in the current object’s context with the
    parameters provided. If *function* includes a class name, it uses late static
    binding to find the appropriate class for the method. Returns the value returned
    by the function.
  prefs: []
  type: TYPE_NORMAL
- en: forward_static_call_array
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`mixed forward_static_call_array(callable` *function*`, array` *parameters*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Calls the function named *function* in the current object’s context with the
    parameters in the array *parameters*. If *function* includes a class name, it
    uses late static binding to find the appropriate class for the method. Returns
    the value returned by the function.
  prefs: []
  type: TYPE_NORMAL
- en: fpassthru
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int fpassthru(resource` *handle*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Outputs the file pointed to by *handle* and closes the file. The file is output
    from the current file pointer location to EOF. If any error occurs, `false` is
    returned; if the operation is successful, `true` is returned.
  prefs: []
  type: TYPE_NORMAL
- en: fprintf
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int fprintf(resource` *handle*`, string` *format*`[, mixed` *value1*`[, ...`
    *valueN*`]])`'
  prefs: []
  type: TYPE_NORMAL
- en: Writes a string created by filling *format* with the given arguments to the
    stream resource *handle*. See `printf()` for more information on using this function.
  prefs: []
  type: TYPE_NORMAL
- en: fputcsv
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int fputcsv(resource` *handle*`[, array` *fields*`[, string` *delimiter*`[,
    string` *enclosure*`]]])`'
  prefs: []
  type: TYPE_NORMAL
- en: Formats the items contained in *fields* in comma-separated values (CSV) format
    and writes the result to the file handle *handle*. If supplied, *delimiter* is
    a single character used to delimit the values for the line instead of commas.
    If supplied, *enclosure* is a single character that is used to enclose values
    (by default, the double quote character, `"`). Returns the length of the string
    written, or `false` if a failure occurred.
  prefs: []
  type: TYPE_NORMAL
- en: fread
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string fread(int` *handle*`, int` *length*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Reads *length* bytes from the file referenced by *handle* and returns them as
    a string. If fewer than *length* bytes are available before EOF is reached, the
    bytes up to EOF are returned.
  prefs: []
  type: TYPE_NORMAL
- en: fscanf
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`mixed fscanf(resource` *handle*`, string` *format*`[, string` *name1*`[, ...
    string` *nameN*`]])`'
  prefs: []
  type: TYPE_NORMAL
- en: Reads data from the file referenced by *handle* and returns a value from it
    based on *format*. For more information on how to use this function, see `sscanf`.
  prefs: []
  type: TYPE_NORMAL
- en: If the optional *name1* through *nameN* parameters are not given, the values
    scanned from the file are returned as an array; otherwise, they are put into the
    variables named by *name1* through *nameN*.
  prefs: []
  type: TYPE_NORMAL
- en: fseek
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int fseek(resource` *handle*`, int` *offset*`[, int` *from*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Moves the file pointer in *handle* to the byte *offset*. If *from* is specified,
    it determines how to move the file pointer. *from* must be one of the following
    values:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `SEEK_SET` | Sets the file pointer to the byte *offset* (the default) |'
  prefs: []
  type: TYPE_TB
- en: '| `SEEK_CUR` | Sets the file pointer to the current location plus *offset*
    bytes |'
  prefs: []
  type: TYPE_TB
- en: '| `SEEK_END` | Sets the file pointer to EOF minus *offset* bytes |'
  prefs: []
  type: TYPE_TB
- en: This function returns `0` if the function was successful and `−1` if the operation
    failed.
  prefs: []
  type: TYPE_NORMAL
- en: fsockopen
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`resource fsockopen(string` *host*`, int` *port*`[, int` *error*`[, string`
    *message*`[, float` *timeout*`]]])`'
  prefs: []
  type: TYPE_NORMAL
- en: Opens a TCP or UDP connection to a remote *host* on a specific *port*. By default,
    TCP is used; to connect via UDP, *host* must begin with the protocol `udp://`.
    If specified, *timeout* indicates the length of time in seconds to wait before
    timing out.
  prefs: []
  type: TYPE_NORMAL
- en: If the connection is successful, a virtual file pointer is returned, which can
    be used with functions such as `fgets()` and `fputs()`. If the connection fails,
    `false` is returned. If *error* and *message* are supplied, they are set to the
    error number and error string, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: fstat
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array fstat(resource` *handle*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns an associative array of information about the file referenced by *handle*.
    The following values (given here with their numeric and key indices) are included
    in the array:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `dev` (`0`) | The device on which the file resides |'
  prefs: []
  type: TYPE_TB
- en: '| `ino` (`1`) | The file’s inode |'
  prefs: []
  type: TYPE_TB
- en: '| `mode` (`2`) | The mode with which the file was opened |'
  prefs: []
  type: TYPE_TB
- en: '| `nlink` (`3`) | The number of links to this file |'
  prefs: []
  type: TYPE_TB
- en: '| `uid` (`4`) | The user ID of the file’s owner |'
  prefs: []
  type: TYPE_TB
- en: '| `gid` (`5`) | The group ID of the file’s owner |'
  prefs: []
  type: TYPE_TB
- en: '| `rdev` (`6`) | The device type (if the file is on an inode device) |'
  prefs: []
  type: TYPE_TB
- en: '| `size` (`7`) | The file’s size (in bytes) |'
  prefs: []
  type: TYPE_TB
- en: '| `atime` (`8`) | The time of last access (in Unix timestamp format) |'
  prefs: []
  type: TYPE_TB
- en: '| `mtime` (`9`) | The time of last modification (in Unix timestamp format)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `ctime` (`10`) | The time the file was created (in Unix timestamp format)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `blksize` (`11`) | The blocksize (in bytes) for the filesystem |'
  prefs: []
  type: TYPE_TB
- en: '| `blocks` (`12`) | The number of blocks allocated to the file |'
  prefs: []
  type: TYPE_TB
- en: ftell
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int ftell(resource` *handle*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the byte offset to which the file referenced by *handle* is set. If
    an error occurs, returns `false`.
  prefs: []
  type: TYPE_NORMAL
- en: ftruncate
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool ftruncate(resource` *handle*`, int` *length*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Truncates the file referenced by *handle* to *length* bytes. Returns `true`
    if the operation is successful and `false` if not.
  prefs: []
  type: TYPE_NORMAL
- en: func_get_arg
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`mixed func_get_arg(int` *index*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the *index* element in the function argument array. If called outside
    a function, or if *index* is greater than the number of arguments in the argument
    array, `func_get_arg()` generates a warning and returns `false`.
  prefs: []
  type: TYPE_NORMAL
- en: func_get_args
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array func_get_args()`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the array of arguments given to the function as an indexed array. If
    called outside a function, `func_get_args()` returns `false` and generates a warning.
  prefs: []
  type: TYPE_NORMAL
- en: func_num_args
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int func_num_args()`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the number of arguments passed to the current user-defined function.
    If called outside a function, `func_num_args()` returns `false` and generates
    a warning.
  prefs: []
  type: TYPE_NORMAL
- en: function_exists
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool function_exists(string` *function*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns `true` if a function with *function* has been defined (both user-defined
    and built-in functions are checked), and `false` otherwise. The comparison to
    check for a matching function is case-insensitive.
  prefs: []
  type: TYPE_NORMAL
- en: fwrite
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int fwrite(resource` *handle*`, string` *string*`[, int` *length*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Writes *string* to the file referenced by *handle*. The file must be open with
    write privileges. If *length* is given, only that many bytes of the string will
    be written. Returns the number of bytes written, or `−1` on error.
  prefs: []
  type: TYPE_NORMAL
- en: gc_collect_cycles
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int gc_collect_cycles()`'
  prefs: []
  type: TYPE_NORMAL
- en: Performs a garbage collection cycle and returns the number of references that
    were freed. Does nothing if garbage collection is not currently enabled.
  prefs: []
  type: TYPE_NORMAL
- en: gc_disable
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`void gc_disable()`'
  prefs: []
  type: TYPE_NORMAL
- en: Disables the garbage collector. If the garbage collector was on, performs a
    collection prior to disabling it.
  prefs: []
  type: TYPE_NORMAL
- en: gc_enable
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`void gc_enable()`'
  prefs: []
  type: TYPE_NORMAL
- en: Enables the garbage collector; typically, only very long-running scripts can
    benefit from the garbage collector.
  prefs: []
  type: TYPE_NORMAL
- en: gc_enabled
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool gc_enabled()`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns `true` if the garbage collector is currently enabled, and `false` if
    it’s disabled.
  prefs: []
  type: TYPE_NORMAL
- en: get_browser
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`mixed get_browser([string` *name*`[, bool` *return_array*`]])`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns an object containing information about the user’s current browser, as
    found in `$HTTP_USER_AGENT`, or the browser identified by the user agent *name*.
    The information is gleaned from the *browscap.ini* file. The version of the browser
    and various capabilities of the browser—such as whether or not the browser supports
    frames, cookies, and so on—are returned in the object. If `return_array` is `true`,
    an array will be returned rather than an object.
  prefs: []
  type: TYPE_NORMAL
- en: get_called_class
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string get_called_class()`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the name of the class that a static method was called on via late static
    binding, or `false` if called outside a class static method.
  prefs: []
  type: TYPE_NORMAL
- en: get_cfg_var
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string get_cfg_var(string` *name*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the value of the PHP configuration variable *name*. If *name* does not
    exist, `get_cfg_var()` returns `false`. Only those configuration variables set
    in a configuration file, as returned by `cfg_file_path()`, are returned by this
    function; compile-time settings and Apache configuration file variables are not
    returned.
  prefs: []
  type: TYPE_NORMAL
- en: get_class
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string get_class(object` *object*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the name of the class of which the given object is an instance. The
    class name is returned as a lowercase string. If *object* is not an object, then
    `false` is returned.
  prefs: []
  type: TYPE_NORMAL
- en: get_class_methods
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array get_class_methods(mixed` *class*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: If the parameter is a string, returns an array containing the names of each
    method defined for the specified *class*. If the parameter is an object, this
    function returns the methods defined in the class of which the object is an instance.
  prefs: []
  type: TYPE_NORMAL
- en: get_class_vars
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array get_class_vars(string` *class*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns an associative array of default properties for the given *class*. For
    each property, an element with a key of the property name and a value of the default
    value is added to the array. Properties that do not have default values are not
    returned in the array.
  prefs: []
  type: TYPE_NORMAL
- en: get_current_user
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string get_current_user()`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the name of the user under whose privileges the current PHP script is
    executing.
  prefs: []
  type: TYPE_NORMAL
- en: get_declared_classes
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array get_declared_classes()`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns an array containing the name of each defined class. This includes any
    classes defined in extensions currently loaded in PHP.
  prefs: []
  type: TYPE_NORMAL
- en: get_declared_interfaces
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array get_declared_interfaces()`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns an array containing the name of each declared interface. This includes
    any interfaces declared in extensions currently loaded in PHP and built-in interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: get_declared_traits
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array get_declared_traits()`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns an array containing the name of each defined trait. This includes any
    traits defined in extensions currently loaded in PHP.
  prefs: []
  type: TYPE_NORMAL
- en: get_defined_constants
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array get_defined_constants([bool` *categories*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns an associative array of all constants defined by extensions and the
    `define()` function and their values. If *categories* is set and is `true`, the
    associative array contains subarrays, one for each category of constant.
  prefs: []
  type: TYPE_NORMAL
- en: get_defined_functions
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array get_defined_functions()`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns an array containing the name of each defined function. The returned
    array is an associative array with two keys, `internal` and `user`. The value
    of the first key is an array containing the names of all internal PHP functions;
    the value of the second key is an array containing the names of all user-defined
    functions.
  prefs: []
  type: TYPE_NORMAL
- en: get_defined_vars
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array get_defined_vars()`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns an array of all variables defined in the environment, server, global,
    and local scopes.
  prefs: []
  type: TYPE_NORMAL
- en: get_extension_funcs
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array get_extension_funcs(string` *name*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns an array of functions provided by the extension specified by *name*.
  prefs: []
  type: TYPE_NORMAL
- en: get_headers
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array get_headers(string` *url*`[, int` *format*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns an array of headers that are sent by the remote server for the page
    given in *url*. If *format* is `0` or not set, the headers are returned in a simple
    array, with each entry in the array corresponding to a single header. If `format`
    is set and is `1`, an associative array is returned with keys and values corresponding
    to the header fields.
  prefs: []
  type: TYPE_NORMAL
- en: get_html_translation_table
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array get_html_translation_table([int` *which*`[, int` *style*`[, string`
    *encoding*`]]])`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns the translation table used by either `htmlspecialchars()` or `htmlentities()`.
    If *which* is `HTML_ENTITIES`, the table used by `htmlentities()` is returned;
    if *which* is `HTML_SPECIALCHARS`, the table used by `htmlspecialchars()` is returned.
    Optionally, you can specify which quotes style you want returned; the possible
    values are the same as those in the translation functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `ENT_COMPAT` (default) | Converts double quotes, but not single quotes |'
  prefs: []
  type: TYPE_TB
- en: '| `ENT_NOQUOTES` | Does not convert either double quotes or single quotes |'
  prefs: []
  type: TYPE_TB
- en: '| `ENT_QUOTES` | Converts both single and double quotes |'
  prefs: []
  type: TYPE_TB
- en: '| `ENT_HTML401` | Table for HTML 4.01 entities |'
  prefs: []
  type: TYPE_TB
- en: '| `ENT_XML1` | Table for XML 1 entities |'
  prefs: []
  type: TYPE_TB
- en: '| `ENT_XHTML` | Table for XHTML entities |'
  prefs: []
  type: TYPE_TB
- en: '| `ENT_HTML5` | Table for HTML 5 entities |'
  prefs: []
  type: TYPE_TB
- en: 'The `encoding` optional parameter has the following possible selections:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `ISO-8859-1` | Western European, Latin-1. |'
  prefs: []
  type: TYPE_TB
- en: '| `ISO-8859-5` | Cyrillic charset (Latin/Cyrillic), rarely used. |'
  prefs: []
  type: TYPE_TB
- en: '| `ISO-8859-15` | Western European, Latin-9\. Adds the Euro sign, French and
    Finnish letters missing in Latin-1. |'
  prefs: []
  type: TYPE_TB
- en: '| `UTF-8` | ASCII compatible multibyte 8-bit Unicode. |'
  prefs: []
  type: TYPE_TB
- en: '| `cp866` | DOS-specific Cyrillic charset. |'
  prefs: []
  type: TYPE_TB
- en: '| `cp1251` | Windows-specific Cyrillic charset. |'
  prefs: []
  type: TYPE_TB
- en: '| `cp1252` | Windows-specific charset for Western European. |'
  prefs: []
  type: TYPE_TB
- en: '| `KOI8-R` | Russian. |'
  prefs: []
  type: TYPE_TB
- en: '| `BIG5` | Traditional Chinese, mainly used in Taiwan. |'
  prefs: []
  type: TYPE_TB
- en: '| `GB2312` | Simplified Chinese, national standard character set. |'
  prefs: []
  type: TYPE_TB
- en: '| `BIG5-HKSCS` | Big5 with Hong Kong extensions, Traditional Chinese. |'
  prefs: []
  type: TYPE_TB
- en: '| `Shift_JIS` | Japanese. |'
  prefs: []
  type: TYPE_TB
- en: '| `EUC-JP` | Japanese. |'
  prefs: []
  type: TYPE_TB
- en: '| `MacRoman` | Charset that was used by macOS. |'
  prefs: []
  type: TYPE_TB
- en: '| `""` | An empty string activates detection from script encoding (Zend multibyte),
    `default_charset`, and current locale, in this order. Not recommended. |'
  prefs: []
  type: TYPE_TB
- en: get_included_files
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array get_included_files()`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns an array of the files included into the current script by `include()`,
    `include_once()`, `require()`, and `require_once()`.
  prefs: []
  type: TYPE_NORMAL
- en: get_include_path
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string get_include_path()`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns the value of the include path configuration option, giving you a list
    of include path locations. If you want to split the returned value into individual
    entries, be sure to split on the `PATH_SEPARATOR` constant, which is set separately
    for Unix and Windows compiles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: get_loaded_extensions
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array get_loaded_extensions([ bool` *zend_extensions*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns an array containing the names of every extension compiled and loaded
    into PHP. If the `zend_extensions` option is `true`, only return the Zend extensions;
    it defaults to `false`.
  prefs: []
  type: TYPE_NORMAL
- en: get_meta_tags
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array get_meta_tags(string` *path*`[, int` *include*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Parses the file *path* and extracts any HTML meta tags it locates. Returns an
    associative array, the keys of which are `name` attributes for the meta tags,
    and the values of which are the appropriate values for the tags. The keys are
    in lowercase regardless of the case of the original attributes. If *include* is
    specified and `true`, the function searches for *path* in the include path.
  prefs: []
  type: TYPE_NORMAL
- en: getmygid
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int getmygid()`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the group ID for the PHP process executing the current script. If the
    group ID cannot be determined, `false` is returned.
  prefs: []
  type: TYPE_NORMAL
- en: getmyuid
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int getmyuid()`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the user ID for the PHP process executing the current script. If the
    user ID cannot be determined, `false` is returned.
  prefs: []
  type: TYPE_NORMAL
- en: get_object_vars
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array get_object_vars(object` *object*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns an associative array of the properties for the given *object*. For each
    property, an element with a key of the property name and a value of the current
    value is added to the array. Properties that do not have current values are not
    returned in the array, even if they are defined in the class.
  prefs: []
  type: TYPE_NORMAL
- en: get_parent_class
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string get_parent_class(mixed` *object*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the name of the parent class for the given *object*. If the object does
    not inherit from another class, returns an empty string.
  prefs: []
  type: TYPE_NORMAL
- en: get_resource_type
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string get_resource_type(resource` *handle*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns a string representing the type of the specified resource *handle*. If
    *handle* is not a valid resource, the function generates an error and returns
    `false`. The kinds of resources available are dependent on the extensions loaded,
    but include `file`, `mysql link`, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: getcwd
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string getcwd()`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the path of the PHP process’s current working directory.
  prefs: []
  type: TYPE_NORMAL
- en: getdate
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array getdate([int` *timestamp*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns an associative array containing values for various components for the
    given *timestamp* time and date. If no *timestamp* is given, the current date
    and time is used. A variation of the `date()` function. The array contains the
    following keys and values:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `seconds` | Seconds |'
  prefs: []
  type: TYPE_TB
- en: '| `minutes` | Minutes |'
  prefs: []
  type: TYPE_TB
- en: '| `hours` | Hours |'
  prefs: []
  type: TYPE_TB
- en: '| `mday` | Day of the month |'
  prefs: []
  type: TYPE_TB
- en: '| `wday` | Numeric day of the week (Sunday is `0`) |'
  prefs: []
  type: TYPE_TB
- en: '| `mon` | Month |'
  prefs: []
  type: TYPE_TB
- en: '| `year` | Year |'
  prefs: []
  type: TYPE_TB
- en: '| `yday` | Day of the year |'
  prefs: []
  type: TYPE_TB
- en: '| `weekday` | Name of the day of the week (Sunday through Saturday) |'
  prefs: []
  type: TYPE_TB
- en: '| `month` | Name of the month (January through December) |'
  prefs: []
  type: TYPE_TB
- en: getenv
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string getenv(string` *name*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the value of the environment variable *name*. If *name* does not exist,
    `getenv()` returns `false`.
  prefs: []
  type: TYPE_NORMAL
- en: gethostbyaddr
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string gethostbyaddr(string` *address*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the hostname of the machine with the IP address *address*. If no such
    address can be found, or if *address* doesn’t resolve to a hostname, *address*
    is returned.
  prefs: []
  type: TYPE_NORMAL
- en: gethostbyname
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string gethostbyname(string` *host*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the IP address for *host*. If no such host exists, *host* is returned.
  prefs: []
  type: TYPE_NORMAL
- en: gethostbynamel
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array gethostbynamel(string` *host*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns an array of IP addresses for *host*. If no such host exists, returns
    `false`.
  prefs: []
  type: TYPE_NORMAL
- en: gethostname
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string gethostname()`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the hostname of the machine running the current script.
  prefs: []
  type: TYPE_NORMAL
- en: getlastmod
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int getlastmod()`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the Unix timestamp value for the last modification date of the file
    containing the current script. If an error occurs while retrieving the information,
    returns `false`.
  prefs: []
  type: TYPE_NORMAL
- en: getmxrr
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool getmxrr(string` *host*`, array &`*hosts*`[, array &`*weights*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Searches DNS for all Mail Exchanger (MX) records for *host*. The results are
    put into the array *hosts*. If given, the weights for each MX record are put into
    *weights*. Returns `true` if any records are found and `false` if none are found.
  prefs: []
  type: TYPE_NORMAL
- en: getmyinode
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int getmyinode()`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the inode value of the file containing the current script. If an error
    occurs, returns `false`.
  prefs: []
  type: TYPE_NORMAL
- en: getmypid
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int getmypid()`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the process ID for the PHP process executing the current script. When
    PHP runs as a server module, any number of scripts may share the same process
    ID, so it is not necessarily a unique number.
  prefs: []
  type: TYPE_NORMAL
- en: getopt
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array getopt(string` *short_options*`[, array` *long_options*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Parses the command-line arguments list used to invoke the current script and
    returns an associative array of optional name/value pairs. The *short_options*
    and *long_options* parameters define the command-line arguments to parse.
  prefs: []
  type: TYPE_NORMAL
- en: The *short_options* parameter is a single string, with each character representing
    a single argument passed into the script via a single hyphen. For example, the
    short options string `"ar"` matches the command-line arguments `-a -r`. Any character
    followed by a single colon `:` requires a value to match, while any character
    followed by two colons `::` optionally includes a value to match. For example,
    `"a:r::x"` would match the command-line arguments `-aTest -r -x` but not `-a -r
    -x`.
  prefs: []
  type: TYPE_NORMAL
- en: The *long_options* parameter is an array of strings, with each element representing
    a single argument passed into the script via a double hyphen. For example, the
    element `"verbose"` matches the command-line argument `--verbose`. All parameters
    specified in the *long_options* parameter optionally match values in the command
    line separated from the option name with an equals sign. For example, `"verbose"`
    will match both `--verbose` and `--verbose=1`.
  prefs: []
  type: TYPE_NORMAL
- en: getprotobyname
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int getprotobyname(string` *name*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the protocol number associated with *name* in */etc/protocols*.
  prefs: []
  type: TYPE_NORMAL
- en: getprotobynumber
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string getprotobynumber(int` *protocol*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the protocol name associated with *protocol* in */etc/protocols*.
  prefs: []
  type: TYPE_NORMAL
- en: getrandmax
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int getrandmax()`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the largest value that can be returned by `rand()`.
  prefs: []
  type: TYPE_NORMAL
- en: getrusage
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array getrusage([int` *who*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns an associative array of information describing the resources being used
    by the process running the current script. If *who* is specified and is equal
    to `1`, information about the process’s children is returned. A list of the keys
    and descriptions of the values can be found under the `getrusage(2)` Unix command.
  prefs: []
  type: TYPE_NORMAL
- en: getservbyname
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int getservbyname(string` *service*`, string` *protocol*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the port associated with *service* in */etc/services*. *protocol* must
    be either TCP or UDP.
  prefs: []
  type: TYPE_NORMAL
- en: getservbyport
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string getservbyport(int` *port*`, string` *protocol*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the service name associated with *port* and *protocol* in */etc/services*.
    *protocol* must be either TCP or UDP.
  prefs: []
  type: TYPE_NORMAL
- en: gettimeofday
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`mixed gettimeofday([ bool` *return_float*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns an associative array containing information about the current time,
    as obtained through `gettimeofday(2)`. When `return_float` is set to `true`, a
    float is returned rather than an array.
  prefs: []
  type: TYPE_NORMAL
- en: 'The array contains the following keys and values:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `sec` | The current number of seconds since the Unix epoch |'
  prefs: []
  type: TYPE_TB
- en: '| `usec` | The current number of microseconds to add to the number of seconds
    |'
  prefs: []
  type: TYPE_TB
- en: '| `minuteswest` | The number of minutes west of Greenwich the current time
    zone is |'
  prefs: []
  type: TYPE_TB
- en: '| `dsttime` | The type of Daylight Saving Time correction to apply (during
    the appropriate time of year, a positive number if the time zone observes Daylight
    Saving Time) |'
  prefs: []
  type: TYPE_TB
- en: gettype
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string gettype(mixed` *value*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns a string description of the type of *value*. The possible values for
    *value* are `"boolean"`, `"integer"`, `"float"`, `"string"`, `"array"`, `"object"`,
    `"resource"`, `"NULL"`, and `"unknown type"`.
  prefs: []
  type: TYPE_NORMAL
- en: glob
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`globarray(string` *pattern*`[, int` *flags*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns a list of filenames matching the shell wildcard pattern given in *pattern*.
    The following characters and sequences make matches:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `*` | Matches any number of any character (equivalent to the regex pattern
    `.*`) |'
  prefs: []
  type: TYPE_TB
- en: '| `?` | Matches any one character (equivalent to the regex pattern `.`) |'
  prefs: []
  type: TYPE_TB
- en: 'For example, to process every JPEG file in a particular directory, you might
    write:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The *flags* value is a bitwise OR of any of the following values:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `GLOB_MARK` | Adds a slash to each item returned |'
  prefs: []
  type: TYPE_TB
- en: '| `GLOB_NOSORT` | Returns files in the same order as found in the directory
    itself. If this is not specified, the names are sorted by ASCII value |'
  prefs: []
  type: TYPE_TB
- en: '| `GLOB_NOCHECK` | If no files matching *pattern* are found, *pattern* is returned
    |'
  prefs: []
  type: TYPE_TB
- en: '| `GLOB_NOESCAPE` | Treat backslashes in *pattern* as backslashes, rather than
    as the start of an escape sequence |'
  prefs: []
  type: TYPE_TB
- en: '| `GLOB_BRACE` | In addition to the normal matches, strings in the form `{foo,
    bar, baz}` match either `"foo"`, `"bar"`, or `"baz"` |'
  prefs: []
  type: TYPE_TB
- en: '| `GLOB_ONLYDIR` | Returns only directories matching *pattern* |'
  prefs: []
  type: TYPE_TB
- en: '| `GLOB_ERR` | Stop on read errors |'
  prefs: []
  type: TYPE_TB
- en: gmdate
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string gmdate(string` *format*`[, int` *timestamp*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns a formatted string for a timestamp date and time. Identical to `date()`,
    except that it always uses Greenwich Mean Time (GMT) rather than the time zone
    specified on the local machine.
  prefs: []
  type: TYPE_NORMAL
- en: gmmktime
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int gmmktime(int` *hour*`, int` *minutes*`, int` *seconds*`, int` *month*`,
    int` *day*`, int` *year*`, int` *is_dst*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns a timestamp date and time value from the provided set of values. Identical
    to `mktime()`, except that the values represent a GMT time and date rather than
    one in the local time zone.
  prefs: []
  type: TYPE_NORMAL
- en: gmstrftime
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string gmstrftime(string` *format*`[, int` *timestamp*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Formats a GMT timestamp. See `strftime` for more information on how to use this
    function.
  prefs: []
  type: TYPE_NORMAL
- en: hash
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string hash(string` *algorithm*`, string` *data* `[, bool` *output*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Generates a hash value on the provided *data* based on the given *algorithm*.
    When *output* is set to `true`, defaults to `false`; the returned hash value is
    raw binary data. *Algorithm* values can be `md5`, `sha1`, `sha256`, and so on.
    See `hash_algos` for more algorithm information.
  prefs: []
  type: TYPE_NORMAL
- en: hash_algos
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array hash_algos(void)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns a numerically indexed array of all the supported hash algorithms.
  prefs: []
  type: TYPE_NORMAL
- en: hash_file
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string hash_file(string` *algorithm*`, string` *filename* `[, bool` *output*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Generates a hash value string on the contents of *filename* (URL for location
    of the file) based on the given *algorithm*. When *output* is set to `true`, defaults
    to `false`; the returned hash value is raw binary data. *Algorithm* values can
    be `md5`, `sha1`, `sha256`, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: header
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`void header(string` *header*`[, bool` *replace* `[, int` *http_response_code*`]])`'
  prefs: []
  type: TYPE_NORMAL
- en: Sends *header* as a raw HTTP header string; must be called before any output
    is generated (including blank lines—a common mistake). If the *header* is a `Location`
    header, PHP also generates the appropriate `REDIRECT` status code. If *replace*
    is specified and `false`, the header does not replace a header of the same name;
    otherwise, the header replaces any header of the same name.
  prefs: []
  type: TYPE_NORMAL
- en: header_remove
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`void header_remove([string` *header*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: If *header* is specified, removes the HTTP header with named *header* from the
    current response. If *header* is not specified, or is an empty string, removes
    all headers generated by the `header()` function from the current response. Note
    that the headers cannot be removed if they have already been sent to the client.
  prefs: []
  type: TYPE_NORMAL
- en: headers_list
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array headers_list()`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns an array of the HTTP response headers that have been prepared for sending
    (or have been sent) to the client.
  prefs: []
  type: TYPE_NORMAL
- en: headers_sent
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool headers_sent([ string &`*file* `[, int &`*line*`]])`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns `true` if the HTTP headers have already been sent. If they have not
    yet been sent, the function returns `false`. If *file* and *line* options are
    provided, the filename and the line number where the output began are placed in
    *file* and *line* variables.
  prefs: []
  type: TYPE_NORMAL
- en: hebrev
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string hebrev(string` *string*`[, int` *size*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Converts the logical Hebrew text *string* to visual Hebrew text. If the second
    parameter is specified, each line will contain no more than *size* characters;
    the function attempts to avoid breaking words.
  prefs: []
  type: TYPE_NORMAL
- en: hex2bin
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string hex2bin(string` *hex*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Converts *hex* to its binary value.
  prefs: []
  type: TYPE_NORMAL
- en: hexdec
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`number hexdec(string` *hex*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Converts *hex* to its decimal value. Up to a 32-bit number, or 2,147,483,647
    decimal (0x7FFFFFFF hexadecimal), can be converted.
  prefs: []
  type: TYPE_NORMAL
- en: highlight_file
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`mixed highlight_file(string` *filename* `[, bool` *return*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Prints a syntax-colored version of the PHP source file *filename* using PHP’s
    built-in syntax highlighter. Returns `true` if *filename* exists and is a PHP
    source file; otherwise, returns `false`. If *return* is `true`, the highlighted
    code is returned as a string rather than being sent to the output device.
  prefs: []
  type: TYPE_NORMAL
- en: highlight_string
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`mixed highlight_string(string` *source* `[, bool` *return*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Prints a syntax-colored version of the string *source* using PHP’s built-in
    syntax highlighter. Returns `true` if successful; otherwise, returns `false`.
    If *return* is `true`, then the highlighted code is returned as a string rather
    than being sent to the output device.
  prefs: []
  type: TYPE_NORMAL
- en: hrtime
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`mixed hrtime([bool` *get_as_number*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the system’s high-resolution time as an array, counted from an arbitrary
    point in time. The delivered timestamp is monotonic and cannot be adjusted. *get_as_number*
    returns as an array (`false`) or a number (`true`); defaults to `false`.
  prefs: []
  type: TYPE_NORMAL
- en: htmlentities
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string htmlentities(string` *string*`[, int` *style*`[, string` *encoding*
    `[, bool` *double_encode*`]]])`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Converts all characters in *string* that have special meaning in HTML and returns
    the resulting string. All entities defined in the HTML standard are converted.
    If supplied, *style* determines the manner in which quotes are translated. The
    possible values for *style* are:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `ENT_COMPAT` (default) | Converts double quotes, but not single quotes |'
  prefs: []
  type: TYPE_TB
- en: '| `ENT_NOQUOTES` | Does not convert either double quotes or single quotes |'
  prefs: []
  type: TYPE_TB
- en: '| `ENT_QUOTES` | Converts both single and double quotes |'
  prefs: []
  type: TYPE_TB
- en: '| `ENT_SUBSTITUTE` | Replace invalid code unit sequences with a Unicode Replacement
    Character |'
  prefs: []
  type: TYPE_TB
- en: '| `ENT_DISALLOWED` | Replace invalid code points for the given document type
    with a Unicode Replacement Character |'
  prefs: []
  type: TYPE_TB
- en: '| `ENT_HTML401` | Handle code as HTML 4.01 |'
  prefs: []
  type: TYPE_TB
- en: '| `ENT_XML1` | Handle code as XML 1 |'
  prefs: []
  type: TYPE_TB
- en: '| `ENT_XHTML` | Handle code as XHTML |'
  prefs: []
  type: TYPE_TB
- en: '| `ENT_HTML5` | Handle code as HTML 5 |'
  prefs: []
  type: TYPE_TB
- en: 'If supplied, *encoding* determines the final encoding for the characters. The
    possible values for *encoding* are:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `ISO-8859-1` | Western European, Latin-1 |'
  prefs: []
  type: TYPE_TB
- en: '| `ISO-8859-5` | Cyrillic charset (Latin/Cyrillic), rarely used |'
  prefs: []
  type: TYPE_TB
- en: '| `ISO-8859-15` | Western European, Latin-9\. Adds the Euro sign, French and
    Finnish letters missing in Latin-1. |'
  prefs: []
  type: TYPE_TB
- en: '| `UTF-8` | ASCII-compatible multi-byte 8-bit Unicode |'
  prefs: []
  type: TYPE_TB
- en: '| `cp866` | DOS-specific Cyrillic charset |'
  prefs: []
  type: TYPE_TB
- en: '| `cp1251` | Windows-specific Cyrillic charset |'
  prefs: []
  type: TYPE_TB
- en: '| `cp1252` | Windows-specific charset for Western European |'
  prefs: []
  type: TYPE_TB
- en: '| `KOI8-R` | Russian |'
  prefs: []
  type: TYPE_TB
- en: '| `BIG5` | Traditional Chinese, mainly used in Taiwan |'
  prefs: []
  type: TYPE_TB
- en: '| `GB2312` | Simplified Chinese, national standard character set |'
  prefs: []
  type: TYPE_TB
- en: '| `BIG5-HKSCS` | Big5 with Hong Kong extensions, Traditional Chinese |'
  prefs: []
  type: TYPE_TB
- en: '| `Shift_JIS` | Japanese |'
  prefs: []
  type: TYPE_TB
- en: '| `EUC-JP` | Japanese |'
  prefs: []
  type: TYPE_TB
- en: '| `MacRoman` | Charset that was used by Mac OS |'
  prefs: []
  type: TYPE_TB
- en: '| `""` | An empty string activates detection from script encoding (Zend multibyte),
    `default_charset`, and current locale, in this order. Not recommended. |'
  prefs: []
  type: TYPE_TB
- en: html_entity_decode
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string html_entity_decode(string` *string*`[, int` *style*`[, string` *encoding*`]])`'
  prefs: []
  type: TYPE_NORMAL
- en: Converts all HTML entities in *string* to the equivalent character. All entities
    defined in the HTML standard are converted. If supplied, *style* determines the
    manner in which quotes are translated. The possible values for *style* are the
    same as those for *htmlentities*.
  prefs: []
  type: TYPE_NORMAL
- en: If supplied, *encoding* determines the final encoding for the characters. The
    possible values for *encoding* are the same as those for *htmlentities*.
  prefs: []
  type: TYPE_NORMAL
- en: htmlspecialchars
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string htmlspecialchars(string` *string*`[, int` *style*`[, string` *encoding*`[,
    bool` *double_encode*`]]])`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Converts characters in *string* that have special meaning in HTML and returns
    the resulting string. A subset of all HTML entities covering the most common characters
    is used to perform the translation. If supplied, *style* determines the manner
    in which quotes are translated. The characters translated are:'
  prefs: []
  type: TYPE_NORMAL
- en: Ampersand (`&`) becomes `&amp;`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Double quotes (`"`) become `&quot;`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Single quote (`'`) becomes `&#039;`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Less than sign (`<`) becomes `&lt;`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Greater than sign (`>`) becomes `&gt;`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The possible values for *style* are the same as those for *htmlentities*. If
    supplied, *encoding* determines the final encoding for the characters. The possible
    values for *encoding* are the same as those for *htmlentities*. When *double_encode*
    is turned off, PHP will not encode existing *htmlentities*.
  prefs: []
  type: TYPE_NORMAL
- en: htmlspecialchars_decode
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string htmlspecialchars_decode(string` *string*`[, int` *style*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Converts HTML entities in *string* to characters. A subset of all HTML entities
    covering the most common characters is used to perform the translation. If supplied,
    *style* determines the manner in which quotes are translated. See `htmlentities()`
    for the possible values for *style*. The characters translated are those found
    in `htmlspecialchars()`.
  prefs: []
  type: TYPE_NORMAL
- en: http_build_query
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string http_build_query(mixed` *values*`[, string` *prefix* `[, string` *arg_separator*
    `[, int` *enc_type*`]]])`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns a URL-encoded query string from *values*. The array values can be either
    numerically indexed or associative (or a combination). Because strictly numeric
    names may be illegal in some languages interpreting the query string on the other
    side (PHP, for example), if you use numeric indices in values, you should also
    provide *prefix*. The value of *prefix* is prepended to all numeric names in the
    resulting query string. The *arg_separator* allows for assigning a customized
    delimiter and the *enc_type* option allows for selecting different encoding types.
  prefs: []
  type: TYPE_NORMAL
- en: hypot
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`float hypot(float` *x*`, float` *y*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Calculates and returns the length of the hypotenuse of a right-angle triangle
    whose other sides have lengths *x* and *y*.
  prefs: []
  type: TYPE_NORMAL
- en: idate
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int idate(string` *format*`[, int` *timestamp*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Formats a time and date as an integer according to the *format* string provided
    in the first parameter. If the second parameter is not specified, the current
    time and date is used. The following characters are recognized in the *format*
    string:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `B` | Swatch internet time |'
  prefs: []
  type: TYPE_TB
- en: '| `d` | Day of the month |'
  prefs: []
  type: TYPE_TB
- en: '| `h` | Hour in 12-hour format |'
  prefs: []
  type: TYPE_TB
- en: '| `H` | Hour in 24-hour format |'
  prefs: []
  type: TYPE_TB
- en: '| `i` | Minutes |'
  prefs: []
  type: TYPE_TB
- en: '| `I` | `1` if Daylight Saving Time; `0` otherwise |'
  prefs: []
  type: TYPE_TB
- en: '| `j` | Day of the month (e.g., 1 through 31) |'
  prefs: []
  type: TYPE_TB
- en: '| `L` | `0` if the year is not a leap year; `1` if it is |'
  prefs: []
  type: TYPE_TB
- en: '| `m` | Month (1 through 12) |'
  prefs: []
  type: TYPE_TB
- en: '| `s` | Seconds |'
  prefs: []
  type: TYPE_TB
- en: '| `t` | Number of days in the month, from 28 to 31 |'
  prefs: []
  type: TYPE_TB
- en: '| `U` | Seconds since the Unix epoch |'
  prefs: []
  type: TYPE_TB
- en: '| `w` | Numeric day of the week, starting with `0` for Sunday |'
  prefs: []
  type: TYPE_TB
- en: '| `W` | Numeric week of the year according to ISO 8601 |'
  prefs: []
  type: TYPE_TB
- en: '| `Y` | Year with four digits (e.g., 1998) |'
  prefs: []
  type: TYPE_TB
- en: '| `y` | Year with one or two digits (e.g., 98) |'
  prefs: []
  type: TYPE_TB
- en: '| `z` | Day of the year, from 1 through 365 |'
  prefs: []
  type: TYPE_TB
- en: '| `Z` | Time zone offset in seconds, from −43200 (far west of UTC) to 43200
    (far east of UTC) |'
  prefs: []
  type: TYPE_TB
- en: Any characters in the *format* string not matching one of the above are ignored.
    Although the character strings used in `idate` are similar to those in `date`,
    because `idate` returns an integer, in places where `date` would return a two-digit
    number with leading zero, the leading zero is not preserved; for example, `date('y');`
    will return `05` for a timestamp in 2005, while `idate('y');` will return `5`.
  prefs: []
  type: TYPE_NORMAL
- en: ignore_user_abort
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int ignore_user_abort([string` *ignore*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Sets whether the client disconnecting from the script should stop processing
    of the PHP script. If *ignore* is `true`, the script will continue processing,
    even after a client disconnect. Returns the current value; if *ignore* is not
    given, the current value is returned without a new value being set.
  prefs: []
  type: TYPE_NORMAL
- en: implode
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string implode(string` *separator*`, array` *strings*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns a string created by joining every element in *strings* with *separator*.
  prefs: []
  type: TYPE_NORMAL
- en: inet_ntop
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string inet_ntop(string` *address*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Unpacks the packed IPv4 or IPv6 IP address *address* and returns it as a human-readable
    string.
  prefs: []
  type: TYPE_NORMAL
- en: inet_pton
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string inet_pton(string` *address*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Packs the human-readable IP address *address* into a 32- or 128-bit value and
    returns it.
  prefs: []
  type: TYPE_NORMAL
- en: in_array
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool in_array(mixed` *value*`, array` *array*`[, bool` *strict*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns `true` if the given *value* exists in the *array*. If the third argument
    is provided and is `true`, the function will return `true` only if the element
    exists in the array and has the same type as the provided value (that is, `"1.23"`
    in the array will not match `1.23` as the argument). If the argument is not found
    in the array, the function returns `false`.
  prefs: []
  type: TYPE_NORMAL
- en: ini_get
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string ini_get(string` *variable*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the value for the configuration option *variable*. If *variable* does
    not exist, returns `false`.
  prefs: []
  type: TYPE_NORMAL
- en: ini_get_all
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array ini_get_all([string` *extension* `[, bool` *details*`]])`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns all configuration options as an associative array. If a valid *extension*
    is specified then only values pertaining to that named *extension* are returned.
    If *details* is `true` (default), then detail settings are retrieved. Each value
    returned in the array is an associative array with three keys:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `global_value` | The global value for the configuration option, as set in
    *php.ini* |'
  prefs: []
  type: TYPE_TB
- en: '| `local_value` | The local override for the configuration option, as set through
    `ini_set()`, for example |'
  prefs: []
  type: TYPE_TB
- en: '| `access` | A bitmask with the levels at which the value can be set (see `ini_set`
    for more information on access levels) |'
  prefs: []
  type: TYPE_TB
- en: ini_restore
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`void ini_restore(string` *variable*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Restores the value for the configuration option *variable*. This is done automatically
    when a script completes execution for all configuration options set using `ini_set()`
    during the script.
  prefs: []
  type: TYPE_NORMAL
- en: ini_set
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string ini_set(string` *variable*`, string` *value*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Sets the configuration option *variable* to *value*. Returns the previous value
    if successful, or `false` if not. The new value is kept for the duration of the
    current script and is restored after the script ends.
  prefs: []
  type: TYPE_NORMAL
- en: intdiv
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int intdiv (int` *dividend*`, int` *vdivisor*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the quotient of the division of *dividend* by *divisor*. The quotient
    is returned as an integer.
  prefs: []
  type: TYPE_NORMAL
- en: interface_exists
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool interface_exists(string` *name* `[, bool` *autoload_**interface*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns `true` if an interface named *name* has been defined and `false` otherwise.
    By default, the function will call `__autoload()` on the interface; if `autoload_interface`
    is set and is `false`, `__autoload()` will not be called.
  prefs: []
  type: TYPE_NORMAL
- en: intval
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int intval(mixed` *value*`[, int` *base*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the integer value for *value* using the optional base *base* (if unspecified,
    base-10 is used). If *value* is a nonscalar value (object or array), the function
    returns `0`.
  prefs: []
  type: TYPE_NORMAL
- en: ip2long
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int ip2long(string` *address*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Converts a dotted (standard format) IP address to an IPv4 address.
  prefs: []
  type: TYPE_NORMAL
- en: is_a
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool is_a(object` *object*`, string` *class* `[, bool` *allow_string*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns `true` if *object* is of the class *class*, or if its class has *class*
    as one of its parents; otherwise, returns `false`. If *allow_string* is `false`,
    then string *class* name as *object* is not allowed.
  prefs: []
  type: TYPE_NORMAL
- en: is_array
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool is_array(mixed` *value*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns `true` if *value* is an array; otherwise, returns `false`.
  prefs: []
  type: TYPE_NORMAL
- en: is_bool
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool is_bool(mixed` *value*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns `true` if *value* is a boolean; otherwise, returns `false`.
  prefs: []
  type: TYPE_NORMAL
- en: is_callable
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int is_callable(callable` *callback*`[, int` *lazy*`[, string` *name*`]])`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns `true` if *callback* is a valid callback, `false` otherwise. To be valid,
    *callback* must either be the name of a function or an array containing two values—an
    object and the name of a method on that object. If *lazy* is given and is `true`,
    the actual existence of the function in the first form, or that the first element
    in callback is an object with a method named the second element, is not checked.
    The arguments merely have to have the correct kind of values to qualify as `true`.
    If supplied, the final argument is filled with the callable name for the function—though
    in the case of the callback being a method on an object, the resulting name in
    *name* is not actually usable to call the function directly.
  prefs: []
  type: TYPE_NORMAL
- en: is_countable
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool is_countable(mixed` *variable*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Verify that the contents of *variable* is an [array](https://oreil.ly/rjM9i)
    or an object implementing [`Countable`](https://oreil.ly/b97Lx).
  prefs: []
  type: TYPE_NORMAL
- en: is_dir
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool is_dir(string` *path*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns `true` if *path* exists and is a directory; otherwise, returns `false`.
    This information is cached; you can clear the cache with `clearstatcache()`.
  prefs: []
  type: TYPE_NORMAL
- en: is_executable
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool is_executable(string` *path*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns `true` if *path* exists and is executable; otherwise, returns `false`.
    This information is cached; you can clear the cache with `clearstatcache()`.
  prefs: []
  type: TYPE_NORMAL
- en: is_file
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool is_file(string` *path*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns `true` if *path* exists and is a file; otherwise, returns `false`. This
    information is cached; you can clear the cache with `clearstatcache()`.
  prefs: []
  type: TYPE_NORMAL
- en: is_finite
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool is_finite(float` *value*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns `true` if *value* is not positive or negative infinity, and `false`
    otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: is_float
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool is_float(mixed` *value*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns `true` if *value* is a float; otherwise, returns `false`.
  prefs: []
  type: TYPE_NORMAL
- en: is_infinite
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool is_infinite(float` *value*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns `true` if *value* is positive or negative infinity, and `false` otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: is_int
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool is_int(mixed` *value*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns `true` if *value* is an integer; otherwise, returns `false`.
  prefs: []
  type: TYPE_NORMAL
- en: is_iterable
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool is_iterable(mixed` *value*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns `true` if *value* is an iterable pseudotype, an array, or a traversable
    object; otherwise, returns `false`.
  prefs: []
  type: TYPE_NORMAL
- en: is_link
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool is_link(string` *path*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns `true` if *path* exists and is a symbolic link file; otherwise, returns
    `false`. This information is cached; you can clear the cache with `clearstatcache()`.
  prefs: []
  type: TYPE_NORMAL
- en: is_nan
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool is_nan(float` *value*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns `true` if *value* is a “not a number” value, or `false` if *value* is
    a number.
  prefs: []
  type: TYPE_NORMAL
- en: is_null
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool is_null(mixed` *value*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns `true` if *value* is null (that is, the keyword `NULL`); otherwise,
    returns `false`.
  prefs: []
  type: TYPE_NORMAL
- en: is_numeric
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool is_numeric(mixed` *value*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns `true` if *value* is an integer, a floating-point value, or a string
    containing a number; otherwise, returns `false`.
  prefs: []
  type: TYPE_NORMAL
- en: is_object
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool is_object(mixed` *value*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns `true` if *value* is an object; otherwise, returns `false`.
  prefs: []
  type: TYPE_NORMAL
- en: is_readable
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool is_readable(string` *path*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns `true` if *path* exists and is readable; otherwise, returns `false`.
    This information is cached; you can clear the cache with `clearstatcache()`.
  prefs: []
  type: TYPE_NORMAL
- en: is_resource
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool is_resource(mixed` *value*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns `true` if *value* is a resource; otherwise, returns `false`.
  prefs: []
  type: TYPE_NORMAL
- en: is_scalar
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool is_scalar(mixed` *value*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns `true` if *value* is a scalar value—an integer, boolean, floating-point
    value, resource, or string. If *value* is not a scalar value, the function returns
    `false`.
  prefs: []
  type: TYPE_NORMAL
- en: is_string
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool is_string(mixed` *value*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns `true` if *value* is a string; otherwise, returns `false`.
  prefs: []
  type: TYPE_NORMAL
- en: is_subclass_of
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool is_subclass_of(object` *object*`, string` *class* `[, bool` *allow_string*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns `true` if *object* is an instance of the class *class* or an instance
    of a subclass of *class*. If not, the function returns `false`. If the *allow_string*
    parameter is set to `false`, *class* “as object” is not allowed.
  prefs: []
  type: TYPE_NORMAL
- en: is_uploaded_file
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool is_uploaded_file(string` *path*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns `true` if *path* exists and was uploaded to the web server using the
    `file` element in a web page form; otherwise, returns `false`. See [Chapter 8](ch08.xhtml#web_techniques)
    for more information on using uploaded files.
  prefs: []
  type: TYPE_NORMAL
- en: is_writable
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool is_writable(string` *path*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns `true` if *path* exists and is a directory; otherwise, returns `false`.
    This information is cached; you can clear the cache with `clearstatcache()`.
  prefs: []
  type: TYPE_NORMAL
- en: isset
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool isset(mixed` *value1*`)[, ... mixed` *valueN*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns `true` if *value*, a variable, has been set; if the variable has never
    been set or has been `unset()`, the function returns `false`. If multiple *values*
    are provided, then `isset` will return `true` only if they are all set.
  prefs: []
  type: TYPE_NORMAL
- en: json_decode
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`mixed json_decode(string` *json*`[, bool` *assoc* `[, int` *depth* `[, int`
    *options*`]]])`'
  prefs: []
  type: TYPE_NORMAL
- en: Takes a JSON-encoded string, *json*, and returns it as a converted PHP variable.
    If the JSON cannot be decoded, then `NULL` is returned. When *assoc* is `true`,
    objects will be converted into associative arrays. *depth* is user-controlled
    recursion level. *options* controls how some of the provided data in the string
    can be alternatively returned.
  prefs: []
  type: TYPE_NORMAL
- en: json_encode
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`mixed json_encode(mixed` *value* `[, int` *options* `[, int` *depth*`]])`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns a string containing the JSON representation of *value*. *options* controls
    how some of the provided data in the string can be alternatively returned. If
    *depth* is used, it must be greater than zero.
  prefs: []
  type: TYPE_NORMAL
- en: key
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`mixed key(array &`*array*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the key for the element currently pointed to by the internal array pointer.
  prefs: []
  type: TYPE_NORMAL
- en: krsort
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int krsort(array` *array*`[, int` *flags*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Sorts an array by key in reverse order, maintaining the keys for the array values.
    The optional second parameter contains additional sorting flags. See [Chapter 5](ch05.xhtml#array)
    and `sort` for more information on using this function.
  prefs: []
  type: TYPE_NORMAL
- en: ksort
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int ksort(array` *array*`[, int` *flags*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Sorts an array by key, maintaining the keys for the array values. The optional
    second parameter contains additional sorting flags. See [Chapter 5](ch05.xhtml#array)
    and `sort` for more information on using this function.
  prefs: []
  type: TYPE_NORMAL
- en: lcfirst
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string lcfirst(string` *string*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns *string* with the first character, if alphabetic, converted to lowercase.
    The table used for converting characters is locale-specific.
  prefs: []
  type: TYPE_NORMAL
- en: lcg_value
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`float lcg_value()`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns a pseudorandom float number between 0 and 1, inclusive, using a linear
    congruential number generator.
  prefs: []
  type: TYPE_NORMAL
- en: lchgrp
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool lchgrp(string` *path*`, mixed` *group*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Changes the group for the symlink *path* to *group*; PHP must have appropriate
    privileges for this function to work. Returns `true` if the change was successful
    and `false` if not.
  prefs: []
  type: TYPE_NORMAL
- en: lchown
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool lchown(string` *path*`, mixed` *user*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Changes ownership for the symlink *path* to the user named *user*. PHP must
    have appropriate privileges (generally, root) for the function to operate. Returns
    `true` if the change was successful and `false` if not.
  prefs: []
  type: TYPE_NORMAL
- en: levenshtein
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int levenshtein(string` *one*`, string` *two*`[, int` *insert*`, int` *replace*`,int`
    *delete*`]) int levenshtein(string` *one*`, string` *two*`[, mixed` *callback*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Calculates the Levenshtein distance between two strings. This is the number
    of characters you have to replace, insert, or delete to transform *one* into *two*.
    By default, replacements, inserts, and deletes have the same cost, but you can
    specify different costs with *insert*, *replace*, and *delete*. In the second
    form, just the total cost of inserts, replaces, and deletes are returned, not
    broken down.
  prefs: []
  type: TYPE_NORMAL
- en: link
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool link(string` *path*`, string` *new*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Creates a hard link to *path* at the path *new*. Returns `true` if the link
    was successfully created and `false` if not.
  prefs: []
  type: TYPE_NORMAL
- en: linkinfo
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int linkinfo(string` *path*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns `true` if *path* is a link and if the file referenced by *path* exists.
    Returns `false` if *path* is not a link, if the file referenced by it does not
    exist, or if an error occurs.
  prefs: []
  type: TYPE_NORMAL
- en: list
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array list(mixed` *value1*`[, ...` *valueN*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Assigns a set of variables from elements in an array. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '`list` is actually a language construct.'
  prefs: []
  type: TYPE_NORMAL
- en: localeconv
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array localeconv()`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns an associative array of information about the current locale’s numeric
    and monetary formatting. The array contains the following elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `decimal_point` | Decimal-point character |'
  prefs: []
  type: TYPE_TB
- en: '| `thousands_sep` | Separator character for thousands |'
  prefs: []
  type: TYPE_TB
- en: '| `grouping` | Array of numeric groupings; indicates where the number should
    be separated using the thousands separator character |'
  prefs: []
  type: TYPE_TB
- en: '| `int_curr_symbol` | International currency symbol (e.g., USD) |'
  prefs: []
  type: TYPE_TB
- en: '| `currency_symbol` | Local currency symbol (e.g., $) |'
  prefs: []
  type: TYPE_TB
- en: '| `mon_decimal_point` | Decimal-point character for monetary values |'
  prefs: []
  type: TYPE_TB
- en: '| `mon_thousands_sep` | Separator character for thousands in monetary values
    |'
  prefs: []
  type: TYPE_TB
- en: '| `positive_sign` | Sign for positive values |'
  prefs: []
  type: TYPE_TB
- en: '| `negative_sign` | Sign for negative values |'
  prefs: []
  type: TYPE_TB
- en: '| `int_frac_digits` | International fractional digits |'
  prefs: []
  type: TYPE_TB
- en: '| `frac_digits` | Local fractional digits |'
  prefs: []
  type: TYPE_TB
- en: '| `p_cs_precedes` | `true` if the local currency symbol precedes a positive
    value; `false` if it follows the value |'
  prefs: []
  type: TYPE_TB
- en: '| `p_sep_by_space` | `true` if a space separates the local currency symbol
    from a positive value |'
  prefs: []
  type: TYPE_TB
- en: '| `p_sign_posn` | `0` if parentheses surround the value and currency symbol
    for positive values, `1` if the sign precedes the currency symbol and value, `2`
    if the sign follows the currency symbol and value, `3` if the sign precedes the
    currency symbol, and `4` if the sign follows the currency symbol |'
  prefs: []
  type: TYPE_TB
- en: '| `n_cs_precedes` | `true` if the local currency symbol precedes a negative
    value; `false` if it follows the value |'
  prefs: []
  type: TYPE_TB
- en: '| `n_sep_by_space` | `true` if a space separates the local currency symbol
    from a negative value |'
  prefs: []
  type: TYPE_TB
- en: '| `n_sign_posn` | `0` if parentheses surround the value and currency symbol
    for negative values, `1` if the sign precedes the currency symbol and value, `2`
    if the sign follows the currency symbol and value, `3` if the sign precedes the
    currency symbol, and `4` if the sign follows the currency symbol |'
  prefs: []
  type: TYPE_TB
- en: localtime
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array localtime([int` *timestamp*`[, bool` *associative*`]])`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns an array of values as given by the C function of the same name. The
    first argument is the timestamp; if the second argument is provided and is `true`,
    the values are returned as an associative array. If the second argument is not
    provided or is `false`, a numeric array is returned. The keys and values returned
    are:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `tm_sec` | Seconds |'
  prefs: []
  type: TYPE_TB
- en: '| `tm_min` | Minutes |'
  prefs: []
  type: TYPE_TB
- en: '| `tm_hour` | Hour |'
  prefs: []
  type: TYPE_TB
- en: '| `tm_mday` | Day of the month |'
  prefs: []
  type: TYPE_TB
- en: '| `tm_mon` | Month of the year |'
  prefs: []
  type: TYPE_TB
- en: '| `tm_year` | Number of years since 1900 |'
  prefs: []
  type: TYPE_TB
- en: '| `tm_wday` | Day of the week |'
  prefs: []
  type: TYPE_TB
- en: '| `tm_yday` | Day of the year |'
  prefs: []
  type: TYPE_TB
- en: '| `tm_isdst` | `1` if Daylight Saving Time was in effect at the date and time
    |'
  prefs: []
  type: TYPE_TB
- en: If a numeric array is returned, the values are in the order given above.
  prefs: []
  type: TYPE_NORMAL
- en: log
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`float log(float` *number* `[, float` *base*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the natural log of *number*. The *base* option controls the logarithmic
    base that will be used; it defaults to *e*, which is a natural logarithm.
  prefs: []
  type: TYPE_NORMAL
- en: log10
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`float log10(float` *number*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the base-10 logarithm of *number*.
  prefs: []
  type: TYPE_NORMAL
- en: log1p
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`float log1p(float` *number*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the `log(1 +` *number*`)`, computed in such a way that the returned
    value is accurate even when *number* is close to zero.
  prefs: []
  type: TYPE_NORMAL
- en: long2ip
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string long2ip(string` *address*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Converts an IPv4 address to a dotted (standard format) address.
  prefs: []
  type: TYPE_NORMAL
- en: lstat
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array lstat(string` *path*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns an associative array of information about the file *path*. If *path*
    is a symbolic link, information about *path* is returned, rather than information
    about the file to which *path* points. See `fstat` for a list of the values returned
    and their meanings.
  prefs: []
  type: TYPE_NORMAL
- en: ltrim
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string ltrim(string` *string*`[, string` *characters*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns *string* with all characters in *characters* stripped from the beginning.
    If *characters* is not specified, the characters stripped are `\n`, `\r`, `\t`,
    `\v`, `\0`, and spaces.
  prefs: []
  type: TYPE_NORMAL
- en: mail
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool mail(string` *recipient*`, string` *subject*`, string` *message*`[, string`
    *headers* `[, string` *parameters*`]])`'
  prefs: []
  type: TYPE_NORMAL
- en: Sends *message* to *recipient* via email with the subject *subject* and returns
    `true` if the message was successfully sent and `false` if it wasn’t. If given,
    *headers* is added to the end of the headers generated for the message, allowing
    you to add cc:, bcc:, and other headers. To add multiple headers, separate them
    with `\n` characters (or `\r\n` characters on Windows servers). Finally, if specified,
    *parameters* is added to the parameters of the call to the mailer program used
    to send the mail.
  prefs: []
  type: TYPE_NORMAL
- en: max
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`mixed max(mixed` *value1*`[, mixed` *value2*`[, ... mixed` *valueN*`]])`'
  prefs: []
  type: TYPE_NORMAL
- en: If *value1* is an array, returns the largest number found in the values of the
    array. If not, returns the largest number found in the arguments.
  prefs: []
  type: TYPE_NORMAL
- en: md5
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string md5(string` *string* `[, bool` *binary*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Calculates the MD5 encryption hash of *string* and returns it. If the *binary*
    option is `true`, then the `MD5` hash returned is in raw binary format (length
    of 16); *binary* defaults to `false`, thus making `md5` return a full 32-character
    hex string.
  prefs: []
  type: TYPE_NORMAL
- en: md5_file
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string md5_file(string` *path*`[, bool` *binary*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Calculates and returns the MD5 encryption hash for the file at *path*. An MD5
    hash is a 32-character hexadecimal value that can be used to checksum a file’s
    data. If *binary* is supplied and is `true`, the result is sent as a 16-bit binary
    value instead.
  prefs: []
  type: TYPE_NORMAL
- en: memory_get_peak_usage
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int memory_get_peak_usage([bool` *actual*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the peak memory usage so far, in bytes, of the currently running script.
    If *actual* is specified and `true`, returns the actual bytes allocated; otherwise,
    it returns the bytes allocated through PHP’s internal memory allocation routines.
  prefs: []
  type: TYPE_NORMAL
- en: memory_get_usage
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int memory_get_usage([bool` *actual*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the current memory usage, in bytes, of the currently running script.
    If *actual* is specified and `true`, returns the actual bytes allocated; otherwise,
    it returns the bytes allocated through PHP’s internal memory allocation routines.
  prefs: []
  type: TYPE_NORMAL
- en: metaphone
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string metaphone(string` *string*`, int` *max_phonemes*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Calculates the metaphone key for *string*. The maximum number of phonemes to
    use in calculating the value is given in *max_phonemes*. Similar-sounding English
    words generate the same key.
  prefs: []
  type: TYPE_NORMAL
- en: method_exists
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool method_exists(object` *object*`, string` *name*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns `true` if the object contains a method with the name given in the second
    parameter, and `false` otherwise. The method may be defined in the class of which
    the object is an instance, or in any superclass of that class.
  prefs: []
  type: TYPE_NORMAL
- en: microtime
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`mixed microtime([ bool` *get_as_float*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns a string in the format *microseconds seconds*, where *seconds* is the
    number of seconds since the Unix epoch (January 1, 1970), and *microseconds* is
    the microseconds portion of the time since the Unix epoch. If *get_as_float* is
    `true`, a float will be returned instead of a string.
  prefs: []
  type: TYPE_NORMAL
- en: min
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`mixed min(mixed` *value1*`[, mixed` *value2*`[, ... mixed` *valueN*`]])`'
  prefs: []
  type: TYPE_NORMAL
- en: If *value1* is an array, returns the smallest number found in the values of
    the array. If not, returns the smallest number found in the arguments.
  prefs: []
  type: TYPE_NORMAL
- en: mkdir
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool mkdir(string` *path*`[, int` *mode* `[, bool` *recursive* `[, resource`
    *context*`]]])`'
  prefs: []
  type: TYPE_NORMAL
- en: Creates the directory *path* with *mode* permissions. The mode is expected to
    be an octal number such as `0755`. An integer value such as `755` or a string
    value such as `"u+x"` will not work as expected. Returns `true` if the operation
    was successful and `false` if not. If recursive is used, it allows for the creation
    of nested directories.
  prefs: []
  type: TYPE_NORMAL
- en: mktime
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int mktime(int` *hours*`, int` *minutes*`, int` *seconds*`, int` *month*`,
    int` *day*`, int` *year* `[, int` *is_dst*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the Unix timestamp value corresponding to the parameters, which are
    supplied in the order *hours*, *minutes*, *seconds*, *month*, *day*, *year*, and
    (optionally) whether the value is in Daylight Saving Time. This timestamp is the
    number of seconds elapsed between the Unix epoch and the given date and time.
  prefs: []
  type: TYPE_NORMAL
- en: The order of the parameters is different from that of the standard Unix `mktime()`
    call, to make it simpler to leave out unneeded arguments. Any arguments left out
    are given the current local date and time.
  prefs: []
  type: TYPE_NORMAL
- en: move_uploaded_file
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool move_uploaded_file(string` *from*`, string` *to*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Moves the file *from* to the new location *to*. The function moves the file
    only if *from* was uploaded by an HTTP `POST`. If *from* does not exist or is
    not an uploaded file, or if any other error occurs, `false` is returned; if the
    operation is successful, `true` is returned.
  prefs: []
  type: TYPE_NORMAL
- en: mt_getrandmax
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int mt_getrandmax()`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the largest value that can be returned by `mt_rand()`.
  prefs: []
  type: TYPE_NORMAL
- en: mt_rand
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int mt_rand([int` *min*`, int` *max*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns a random number from *min* to *max*, inclusive, generated using the
    Mersenne Twister pseudorandom number generator. If *min* and *max* are not provided,
    returns a random number from 0 to the value returned by `mt_getrandmax()`.
  prefs: []
  type: TYPE_NORMAL
- en: mt_srand
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`void mt_srand(int` *seed*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Seeds the Mersenne Twister generator with *seed*. You should call this function
    with a varying number, such as that returned by `time()`, before making calls
    to `mt_rand()`.
  prefs: []
  type: TYPE_NORMAL
- en: natcasesort
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`void natcasesort(array` *array*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Sorts the elements in the given array using a case-insensitive *natural order*
    algorithm; see `natsort` for more information.
  prefs: []
  type: TYPE_NORMAL
- en: natsort
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool natsort(array` *array*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Sorts the values of the array using “natural order”: numeric values are sorted
    in the manner expected by language, rather than the often bizarre order in which
    computers insist on putting them (ASCII ordered). For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: next
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`mixed next(array` *array*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Increments the internal pointer to the element after the current element and
    returns the value of the element to which the internal pointer is now set. If
    the internal pointer already points beyond the last element in the array, the
    function returns `false`.
  prefs: []
  type: TYPE_NORMAL
- en: Be careful when iterating over an array using this function—if an array contains
    an empty element or an element with a key value of `0`, a value equivalent to
    `false` is returned, causing the loop to end. If an array might contain empty
    elements or an element with a key of `0`, use the `each` function instead of a
    loop with `next`.
  prefs: []
  type: TYPE_NORMAL
- en: nl_langinfo
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string nl_langinfo(int` *item*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the string containing the information for *item* in the current locale;
    *item* is one of a number of different values such as day names, time format strings,
    and so on. The actual possible values are different on different implementations
    of the C library; see `<langinfo.h>` on your machine for the values on your OS.
  prefs: []
  type: TYPE_NORMAL
- en: nl2br
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string nl2br(string` *string* `[, bool` *xhtml_lb*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns a string created by inserting `<br />` before all newline characters
    in *string*. If *xhtml_lb* is `true`, then `nl2br` will use XHTML-compatible line
    breaks.
  prefs: []
  type: TYPE_NORMAL
- en: number_format
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string number_format(float` *number*`[, int` *precision*`[, string` *decimal_separator*`,
    string` *thousands_separator*`]])`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Creates a string representation of *number*. If *precision* is given, the number
    is rounded to that many decimal places; the default is no decimal places, creating
    an integer. If *decimal_separator* and *thousands_separator* are provided, they
    are used as the decimal-place character and thousands separator, respectively.
    They default to the English locale versions (`.` and `,`). For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: If rounding occurs, proper rounding is performed, which may not be what you
    expect (see `round`).
  prefs: []
  type: TYPE_NORMAL
- en: ob_clean
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`void ob_clean()`'
  prefs: []
  type: TYPE_NORMAL
- en: Discards the contents of the output buffer. Unlike `ob_end_clean()`, the output
    buffer is not closed.
  prefs: []
  type: TYPE_NORMAL
- en: ob_end_clean
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool ob_end_clean()`'
  prefs: []
  type: TYPE_NORMAL
- en: Turns off output buffering and empties the current buffer without sending it
    to the client. See [Chapter 15](ch15.xhtml#application_techniques) for more information
    on using the output buffer.
  prefs: []
  type: TYPE_NORMAL
- en: ob_end_flush
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool ob_end_flush()`'
  prefs: []
  type: TYPE_NORMAL
- en: Sends the current output buffer to the client and stops output buffering. See
    [Chapter 15](ch15.xhtml#application_techniques) for more information on using
    the output buffer.
  prefs: []
  type: TYPE_NORMAL
- en: ob_flush
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`void ob_flush()`'
  prefs: []
  type: TYPE_NORMAL
- en: Sends the contents of the output buffer to the client and discards the contents.
    Unlike calling `ob_end_flush()`, the output buffer itself is not closed.
  prefs: []
  type: TYPE_NORMAL
- en: ob_get_clean
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string ob_get_clean()`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the contents of the output buffer and ends output buffering.
  prefs: []
  type: TYPE_NORMAL
- en: ob_get_contents
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string ob_get_contents()`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the current contents of the output buffer; if buffering has not been
    enabled with a previous call to `ob_start()`, returns `false`. See [Chapter 15](ch15.xhtml#application_techniques)
    for more information on using the output buffer.
  prefs: []
  type: TYPE_NORMAL
- en: ob_get_flush
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string ob_get_flush()`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the contents of the output buffer, flushes the output buffer to the
    client, and ends output buffering.
  prefs: []
  type: TYPE_NORMAL
- en: ob_get_length
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int ob_get_length()`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the length of the current output buffer, or `false` if output buffering
    isn’t enabled. See [Chapter 15](ch15.xhtml#application_techniques) for more information
    on using the output buffer.
  prefs: []
  type: TYPE_NORMAL
- en: ob_get_level
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int ob_get_level()`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the count of nested output buffers, or `0` if output buffering is not
    currently active.
  prefs: []
  type: TYPE_NORMAL
- en: ob_get_status
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array ob_get_status([bool` *verbose*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns status information about the current output buffer. If *verbose* is
    supplied and is `true`, returns information about all nested output buffers.
  prefs: []
  type: TYPE_NORMAL
- en: ob_gzhandler
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string ob_gzhandler(string` *buffer*`[, int` *mode*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: 'This function *gzip*-compresses output before it is sent to the browser. You
    don’t call this function directly. Rather, it is used as a handler for output
    buffering using the `ob_start()` function. To enable *gzip*-compression, call
    `ob_start()` with this function’s name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: ob_implicit_flush
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`void ob_implicit_flush([int` *flag*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: If *flag* is `true` or unspecified, turns on output buffering with implicit
    flushing. When implicit flushing is enabled, the output buffer is cleared and
    sent to the client after any output (such as the `printf()` and `echo()` functions).
    See [Chapter 15](ch15.xhtml#application_techniques) for more information on using
    the output buffer.
  prefs: []
  type: TYPE_NORMAL
- en: ob_list_handlers
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array ob_list_handlers()`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns an array with the names of the active output handlers. If PHP’s built-in
    output buffering is enabled, the array contains the value `default output handler`.
    If no output handlers are active, it returns an empty array.
  prefs: []
  type: TYPE_NORMAL
- en: ob_start
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool ob_start([string` *callback* `[, int` *chunk* `[, bool` *erase*`]]])`'
  prefs: []
  type: TYPE_NORMAL
- en: Turns on output buffering, which causes all output to be accumulated in a buffer
    instead of being sent directly to the browser. If *callback* is specified, it
    is a function (called before sending the output buffer to the client) that can
    modify the data in any way; the `ob_gzhandler()` function is provided to compress
    the output buffer in a client-aware manner. The *chunk* option can be used to
    trigger the flushing of the buffer when the buffer size equals the chunk number.
    If the *erase* option is set to `false`, then the buffer will not be deleted until
    the end of the script. See [Chapter 15](ch15.xhtml#application_techniques) for
    more information on using the output buffer.
  prefs: []
  type: TYPE_NORMAL
- en: octdec
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`number octdec(string` *octal*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Converts *octal* to its decimal value. Up to a 32-bit number, or 2,147,483,647
    decimal (017777777777 octal), can be converted.
  prefs: []
  type: TYPE_NORMAL
- en: opendir
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`resource opendir(string` *path*`[, resource context])`'
  prefs: []
  type: TYPE_NORMAL
- en: Opens the directory *path* and returns a directory handle for the path that
    is suitable for use in subsequent `readdir()`, `rewinddir()`, and `closedir()`
    calls. If *path* is not a valid directory, if permissions do not allow the PHP
    process to read the directory, or if any other error occurs, `false` is returned.
  prefs: []
  type: TYPE_NORMAL
- en: openlog
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool openlog(string` *identity*`, int` *options*`, int` *facility*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Opens a connection to the system logger. Each message sent to the logger with
    a subsequent call to `syslog()` is prepended by *identity*. Various options can
    be specified by *options*; `OR` any options you want to include. The valid options
    are:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `LOG_CONS` | If an error occurs while writing to the system log, write the
    error to the system console |'
  prefs: []
  type: TYPE_TB
- en: '| `LOG_NDELAY` | Open the system log immediately |'
  prefs: []
  type: TYPE_TB
- en: '| `LOG_ODELAY` | Delay opening the system log until the first message is written
    to it |'
  prefs: []
  type: TYPE_TB
- en: '| `LOG_PERROR` | Print this message to standard error in addition to writing
    it to the system log |'
  prefs: []
  type: TYPE_TB
- en: '| `LOG_PID` | Include the PID in each message |'
  prefs: []
  type: TYPE_TB
- en: 'The third parameter, *facility*, tells the system log what kind of program
    is logging to the system log. The following facilities are available:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `LOG_AUTH` | Security and authorization errors (deprecated; if `LOG_AUTHPRIV`
    is available, use it instead) |'
  prefs: []
  type: TYPE_TB
- en: '| `LOG_AUTHPRIV` | Security and authorization errors |'
  prefs: []
  type: TYPE_TB
- en: '| `LOG_CRON` | Clock daemon (*cron* and *at*) errors |'
  prefs: []
  type: TYPE_TB
- en: '| `LOG_DAEMON` | Errors for system daemons not given their own codes |'
  prefs: []
  type: TYPE_TB
- en: '| `LOG_KERN` | Kernel errors |'
  prefs: []
  type: TYPE_TB
- en: '| `LOG_LPR` | Line printer subsystem errors |'
  prefs: []
  type: TYPE_TB
- en: '| `LOG_MAIL` | Mail errors |'
  prefs: []
  type: TYPE_TB
- en: '| `LOG_NEWS` | USENET news system errors |'
  prefs: []
  type: TYPE_TB
- en: '| `LOG_SYSLOG` | Errors generated internally by *syslogd* |'
  prefs: []
  type: TYPE_TB
- en: '| `LOG_AUTHPRIV` | Security and authorization errors |'
  prefs: []
  type: TYPE_TB
- en: '| `LOG_USER` | Generic user-level errors |'
  prefs: []
  type: TYPE_TB
- en: '| `LOG_UUCP` | UUCP errors |'
  prefs: []
  type: TYPE_TB
- en: ord
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int ord(string` *string*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the ASCII value of the first character in *string*.
  prefs: []
  type: TYPE_NORMAL
- en: output_add_rewrite_var
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool output_add_rewrite_var(string` *name*`, string` *value*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Begins using the value rewriting output handler by appending the name and value
    to all HTML anchor elements and forms. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: output_reset_rewrite_vars
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool output_reset_rewrite_vars()`'
  prefs: []
  type: TYPE_NORMAL
- en: Resets the value writing output handler; if the value writing output handler
    was in effect, any still unflushed output will no longer be affected by rewriting
    even if put into the buffer before this call.
  prefs: []
  type: TYPE_NORMAL
- en: pack
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string pack(string` *format*`, mixed` *arg1*`[, mixed` *arg2*`[, ... mixed`
    *argN*`]])`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Creates a binary string containing packed versions of the given arguments according
    to format. Each character may be followed by a number of arguments to use in that
    format, or an asterisk (`*`), which uses all arguments to the end of the input
    data. If no repeater argument is specified, a single argument is used for the
    format character. The following characters are meaningful in the *format* string:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `a` | NUL-byte-padded string |'
  prefs: []
  type: TYPE_TB
- en: '| `A` | Space-padded string |'
  prefs: []
  type: TYPE_TB
- en: '| `h` | Hexadecimal string, with the low nibble first |'
  prefs: []
  type: TYPE_TB
- en: '| `H` | Hexadecimal string, with the high nibble first |'
  prefs: []
  type: TYPE_TB
- en: '| `c` | Signed char |'
  prefs: []
  type: TYPE_TB
- en: '| `C` | Unsigned char |'
  prefs: []
  type: TYPE_TB
- en: '| `s` | 16-bit, machine-dependent byte-ordered signed short |'
  prefs: []
  type: TYPE_TB
- en: '| `S` | 16-bit, machine-dependent byte-ordered unsigned short |'
  prefs: []
  type: TYPE_TB
- en: '| `n` | 16-bit, big-endian byte-ordered unsigned short |'
  prefs: []
  type: TYPE_TB
- en: '| `v` | 16-bit, little-endian byte-ordered unsigned short |'
  prefs: []
  type: TYPE_TB
- en: '| `i` | Machine-dependent size and byte-ordered signed integer |'
  prefs: []
  type: TYPE_TB
- en: '| `I` | Machine-dependent size and byte-ordered unsigned integer |'
  prefs: []
  type: TYPE_TB
- en: '| `l` | 32-bit, machine-dependent byte-ordered signed long |'
  prefs: []
  type: TYPE_TB
- en: '| `L` | 32-bit, machine-dependent byte-ordered unsigned long |'
  prefs: []
  type: TYPE_TB
- en: '| `N` | 32-bit, big-endian byte-ordered unsigned long |'
  prefs: []
  type: TYPE_TB
- en: '| `V` | 32-bit, little-endian byte-ordered unsigned long |'
  prefs: []
  type: TYPE_TB
- en: '| `f` | Float in machine-dependent size and representation |'
  prefs: []
  type: TYPE_TB
- en: '| `d` | Double in machine-dependent size and representation |'
  prefs: []
  type: TYPE_TB
- en: '| `x` | NUL-byte |'
  prefs: []
  type: TYPE_TB
- en: '| `X` | Back up one byte |'
  prefs: []
  type: TYPE_TB
- en: '| `@` | Fill to absolute position (given by the repeater argument) with NUL-bytes
    |'
  prefs: []
  type: TYPE_TB
- en: parse_ini_file
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array parse_ini_file(string` *filename*`[, bool` *process_sections*`[, int`
    *scanner_mode*`]])`'
  prefs: []
  type: TYPE_NORMAL
- en: Loads *filename*—which must be a file in the standard *php.ini* format—and returns
    the values contained in it as an associative array, or `false` if the file could
    not be parsed. If *process_sections* is set and is `true`, a multidimensional
    array with values for the sections in the file is returned. The *scanner_mode*
    option is either `INI_SCANNER_NORMAL`, the default, or `INI_SCANNER_RAW`, indicating
    that the function should not parse option values.
  prefs: []
  type: TYPE_NORMAL
- en: parse_ini_string
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array parse_ini_string(string` *config*`[, bool` *process_sections*`[, int`
    *scanner_mode*`]])`'
  prefs: []
  type: TYPE_NORMAL
- en: Parses a string in the *php.ini* format and returns the values contained in
    it in an associative array, or `false` if the string could not be parsed. If *process_sections*
    is set and is `true`, a multidimensional array with values for the sections in
    the file is returned. The *scanner_mode* option is either `INI_SCANNER_NORMAL`,
    the default, or `INI_SCANNER_RAW`, indicating that the function should not parse
    option values.
  prefs: []
  type: TYPE_NORMAL
- en: parse_str
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`void parse_str(string` *string*`[, array` *variables*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Parses *string* as if coming from an HTTP `POST` request, setting variables
    in the local scope to the values found in the string. If *variables* is given,
    the array is set with keys and values from the string.
  prefs: []
  type: TYPE_NORMAL
- en: parse_url
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`mixed parse_url(string` *url*`)[, int` *component*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns an associative array of the component parts of *url*. The array contains
    the following values:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `fragment` | The named anchor in the URL |'
  prefs: []
  type: TYPE_TB
- en: '| `host` | The host |'
  prefs: []
  type: TYPE_TB
- en: '| `pass` | The user’s password |'
  prefs: []
  type: TYPE_TB
- en: '| `path` | The requested path (which may be a directory or a file) |'
  prefs: []
  type: TYPE_TB
- en: '| `port` | The port to use for the protocol |'
  prefs: []
  type: TYPE_TB
- en: '| `query` | The query information |'
  prefs: []
  type: TYPE_TB
- en: '| `scheme` | The protocol in the URL, such as “http” |'
  prefs: []
  type: TYPE_TB
- en: '| `user` | The user given in the URL |'
  prefs: []
  type: TYPE_TB
- en: 'The array will not contain values for components not specified in the URL.
    For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: If the component option is provided, then just that particular component of
    the URL will be returned.
  prefs: []
  type: TYPE_NORMAL
- en: passthru
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`void passthru(string` *command*`[, int` *return*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Executes *command* via the shell and outputs the results of the command into
    the page. If *return* is specified, it is set to the return status of the command.
    If you want to capture the results of the command, use `exec()`.
  prefs: []
  type: TYPE_NORMAL
- en: pathinfo
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`mixed pathinfo(string` *path*`[, int` *options*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns an associative array containing information about *path*. If the *options*
    parameter is given, it specifies a particular element to be returned. `PATHINFO_DIRNAME`,
    `PATHINFO_BASENAME`, `PATHINFO_EXTENSION`, and `PATHINFO_FILENAME` are valid *options*
    values.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following elements are in the returned array:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `dirname` | The directory in which *path* is contained. |'
  prefs: []
  type: TYPE_TB
- en: '| `basename` | The basename (see `basename`) of *path*, including the file’s
    extension. |'
  prefs: []
  type: TYPE_TB
- en: '| `extension` | The extension, if any, on the file’s name. Does not include
    the period at the beginning of the extension. |'
  prefs: []
  type: TYPE_TB
- en: pclose
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int pclose(resource` *handle*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Closes the pipe referenced by *handle*. Returns the termination code of the
    process that was run in the pipe.
  prefs: []
  type: TYPE_NORMAL
- en: pfsockopen
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`resource pfsockopen(string` *host*`, int` *port*`[, int` *error*`[, string`
    *message* `[, float` *timeout*`]]])`'
  prefs: []
  type: TYPE_NORMAL
- en: Opens a persistent TCP or UDP connection to a remote *host* on a specific *port*.
    By default, TCP is used; to connect via UDP, *host* must begin with `udp://`.
    If specified, *timeout* indicates the length of time in seconds to wait before
    timing out.
  prefs: []
  type: TYPE_NORMAL
- en: If the connection is successful, the function returns a virtual file pointer
    that can be used with functions such as `fgets()` and `fputs()`. If the connection
    fails, it returns `false`. If *error* and *message* are supplied, they are set
    to the error number and error string, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: Unlike `fsockopen()`, the socket opened by this function does not close automatically
    after completing a read or write operation on it; you must close it explicitly
    with a call to `fsclose()`.
  prefs: []
  type: TYPE_NORMAL
- en: php_ini_loaded_file
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string php_ini_loaded_file()`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the path of the current *php.ini* file if there is one, or `false` otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: php_ini_scanned_files
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string php_ini_scanned_files()`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns a string containing the names of the configuration files parsed when
    PHP started up. The files are returned in a comma-separated list. If the compile-time
    configuration option `--with-config-file-scan-dir` was not set, `false` is returned
    instead.
  prefs: []
  type: TYPE_NORMAL
- en: php_logo_guid
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string php_logo_guid()`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns an ID that you can use to link to the PHP logo. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: php_sapi_name
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string php_sapi_name()`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns a string describing the server API under which PHP is running—for example,
    `"cgi"` or `"apache"`.
  prefs: []
  type: TYPE_NORMAL
- en: php_strip_whitespace
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string php_strip_whitespace(string` *path*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns a string containing the source from the file *path* with whitespace
    and comment tokens stripped.
  prefs: []
  type: TYPE_NORMAL
- en: php_uname
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string php_uname(string` *mode*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns a string describing the operating system under which PHP is running.
    The *mode* parameter is a single character used to control what is returned. The
    possible values are:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `a` (default) | All modes included (`s`, `n`, `r`, `v`, `m`) |'
  prefs: []
  type: TYPE_TB
- en: '| `s` | Name of the operating system |'
  prefs: []
  type: TYPE_TB
- en: '| `n` | The hostname |'
  prefs: []
  type: TYPE_TB
- en: '| `r` | Release name |'
  prefs: []
  type: TYPE_TB
- en: '| `v` | Version information |'
  prefs: []
  type: TYPE_TB
- en: '| `m` | Machine type |'
  prefs: []
  type: TYPE_TB
- en: phpcredits
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool phpcredits([int` *what*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Outputs information about PHP and its developers; the information that is displayed
    is based on the value of *what*. To use more than one option, `OR` the values
    together. The possible values of *what* are:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `CREDITS_ALL` (default) | All credits except `CREDITS_SAPI` |'
  prefs: []
  type: TYPE_TB
- en: '| `CREDITS_GENERAL` | General credits about PHP |'
  prefs: []
  type: TYPE_TB
- en: '| `CREDITS_GROUP` | A list of the core PHP developers |'
  prefs: []
  type: TYPE_TB
- en: '| `CREDITS_DOCS` | Information about the documentation team |'
  prefs: []
  type: TYPE_TB
- en: '| `CREDITS_MODULES` | A list of the extension modules currently loaded and
    the authors for each |'
  prefs: []
  type: TYPE_TB
- en: '| `CREDITS_SAPI` | A list of the server API modules and the authors for each
    |'
  prefs: []
  type: TYPE_TB
- en: '| `CREDITS_FULLPAGE` | Indicates that the credits should be returned as a full
    HTML page, rather than just a fragment of HTML code. Must be used in conjunction
    with one or more other options—for example, `phpcredits(CREDITS_MODULES &#124;
    CREDITS_FULLPAGE)` |'
  prefs: []
  type: TYPE_TB
- en: phpinfo
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool phpinfo([int` *what*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Outputs a great deal of information about the state of the current PHP environment,
    including loaded extensions, compilation options, version, server information,
    and so on. If specified, *what* can limit the output to specific pieces of information;
    *what* may contain several options `OR`ed together. The possible values of *what*
    are:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `INFO_ALL` (default) | All information |'
  prefs: []
  type: TYPE_TB
- en: '| `INFO_GENERAL` | General information about PHP |'
  prefs: []
  type: TYPE_TB
- en: '| `INFO_CREDITS` | Credits for PHP, including the authors |'
  prefs: []
  type: TYPE_TB
- en: '| `INFO_CONFIGURATION` | Configuration and compilation options |'
  prefs: []
  type: TYPE_TB
- en: '| `INFO_MODULES` | Currently loaded extensions |'
  prefs: []
  type: TYPE_TB
- en: '| `INFO_ENVIRONMENT` | Information about the PHP environment |'
  prefs: []
  type: TYPE_TB
- en: '| `INFO_VARIABLES` | A list of the current variables and their values |'
  prefs: []
  type: TYPE_TB
- en: '| `INFO_LICENSE` | The PHP license |'
  prefs: []
  type: TYPE_TB
- en: phpversion
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string phpversion(string` *extension*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the version of the currently running PHP parser. If the *extension*
    option is used, by naming a particular extension, the version information about
    that extension is all that is returned.
  prefs: []
  type: TYPE_NORMAL
- en: pi
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`float pi()`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns an approximate value of pi (3.14159265359).
  prefs: []
  type: TYPE_NORMAL
- en: popen
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`resource popen(string` *command*`, string` *mode*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Opens a pipe to a process executed by running *command* on the shell.
  prefs: []
  type: TYPE_NORMAL
- en: 'The parameter *mode* specifies the permissions to open the file with, which
    can only be unidirectional (that is, for reading or writing only). *mode* must
    be one of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `r` | Open file for reading; file pointer will be at beginning of file |'
  prefs: []
  type: TYPE_TB
- en: '| `w` | Open file for writing. If the file exists, it will be truncated to
    zero length; if the file doesn’t already exist, it will be created |'
  prefs: []
  type: TYPE_TB
- en: If any error occurs while attempting to open the pipe, `false` is returned.
    If not, the resource handle for the pipe is returned.
  prefs: []
  type: TYPE_NORMAL
- en: pow
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`number pow(number` *base*`, number` *exponent*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns *base* raised to the *exponent* power. When possible, the return value
    is an integer; if not, it is a float.
  prefs: []
  type: TYPE_NORMAL
- en: prev
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`mixed prev(array` *array*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Moves the internal pointer to the element before its current location and returns
    the value of the element to which the internal pointer is now set. If the internal
    pointer is already set to the first element in the array, returns `false`. Be
    careful when iterating over an array using this function—if an array has an empty
    element or an element with a key value of `0`, a value equivalent to `false` is
    returned, causing the loop to end. If an array might contain empty elements or
    an element with a key of `0`, use the `each()` function instead of a loop with
    `prev()`.
  prefs: []
  type: TYPE_NORMAL
- en: print_r
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`mixed print_r(mixed` *value*`[, bool` *return*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Outputs *value* in a human-readable manner. If *value* is a string, integer,
    or float, the value itself is output; if it is an array, the keys and elements
    are shown; and if it is an object, the keys and values for the object are displayed.
    This function returns `true`. If *return* is set to `true`, then the output is
    returned rather than displayed.
  prefs: []
  type: TYPE_NORMAL
- en: printf
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int printf(string` *format*`[, mixed` *arg1* `...])`'
  prefs: []
  type: TYPE_NORMAL
- en: Outputs a string created by using *format* and the given arguments. The arguments
    are placed into the string in various places denoted by special markers in the
    *format* string.
  prefs: []
  type: TYPE_NORMAL
- en: Each marker starts with a percent sign (`%`) and consists of the following elements,
    in order. Except for the type specifier, the specifiers are all optional. To include
    a percent sign in the string, use `%%`.
  prefs: []
  type: TYPE_NORMAL
- en: An optional sign specifier that forces a sign (– or +) to be used on a number.
    By default, only the – sign is used on a number if it’s negative. Additionally,
    this specifier forces positive numbers to have the + sign attached.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A padding specifier denoting the character to use to pad the results to the
    appropriate string size (given below). Either `0`, a space, or any character prefixed
    with a single quote may be specified; padding with spaces is the default.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An alignment specifier. By default, the string is padded to make it right-justified.
    To make it left-justified, specify a dash (`–`) here.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The minimum number of characters this element should contain. If the result
    would be less than this number of characters, the preceding specifiers determine
    the behavior to pad to the appropriate width.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For floating-point numbers, a precision specifier consisting of a period and
    a number; this dictates how many decimal digits will be displayed. For types other
    than float, this specifier is ignored.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally, a type specifier. This specifier tells `printf()` what type of data
    is being handed to the function for this marker. There are eight possible types:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| `b` | The argument is an integer and is displayed as a binary number |'
  prefs: []
  type: TYPE_TB
- en: '| `c` | The argument is an integer and is displayed as the character with that
    value |'
  prefs: []
  type: TYPE_TB
- en: '| `d` | The argument is an integer and is displayed as a decimal number |'
  prefs: []
  type: TYPE_TB
- en: '| `f` | The argument is a float and is displayed as a floating-point number
    |'
  prefs: []
  type: TYPE_TB
- en: '| `o` | The argument is an integer and is displayed as an octal (base-8) number
    |'
  prefs: []
  type: TYPE_TB
- en: '| `s` | The argument is treated and displayed as a string |'
  prefs: []
  type: TYPE_TB
- en: '| `x` | The argument is an integer and is displayed as a hexadecimal (base-16)
    number; lowercase letters are used |'
  prefs: []
  type: TYPE_TB
- en: '| `X` | Same as `x`, except uppercase letters are used |'
  prefs: []
  type: TYPE_TB
- en: proc_close
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int proc_close(resource` *handle*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Closes the process referenced by *handle* and previously opened by `proc_open()`.
    Returns the termination code of the process.
  prefs: []
  type: TYPE_NORMAL
- en: proc_get_status
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array proc_get_status(resource` *handle*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns an associative array containing information about the process *handle*,
    previously opened by `proc_open()`. The array contains the following values:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `command` | The command string this process was opened with |'
  prefs: []
  type: TYPE_TB
- en: '| `pid` | The process ID |'
  prefs: []
  type: TYPE_TB
- en: '| `running` | `true` if the process is currently running, and `false` otherwise
    |'
  prefs: []
  type: TYPE_TB
- en: '| `signaled` | `true` if the process has been terminated by an uncaught signal,
    and `false` otherwise |'
  prefs: []
  type: TYPE_TB
- en: '| `stopped` | `true` if the process has been stopped by a signal, and `false`
    otherwise |'
  prefs: []
  type: TYPE_TB
- en: '| `exitcode` | If the process has terminated, the exit code from the process,
    and `–1` otherwise |'
  prefs: []
  type: TYPE_TB
- en: '| `termsig` | The signal that caused the process to be terminated if `signaled`
    is `true`, and `undefined` otherwise |'
  prefs: []
  type: TYPE_TB
- en: '| `stopsig` | The signal that caused the process to be stopped if `stopped`
    is `true`, and `undefined` otherwise |'
  prefs: []
  type: TYPE_TB
- en: proc_nice
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool proc_nice(int` *increment*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Changes the priority of the process executing the current script by *increment*.
    A negative value raises the priority of the process, while a positive value lowers
    the priority of the process. Returns `true` if the operation was successful, and
    `false` otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: proc_open
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`resource proc_open(string` *command*`, array` *descriptors*`, array` *pipes*`[,
    string` *dir*`[, array` *env*`[, array` *options*`]]])`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Opens a pipe to a process executed by running *command* on the shell, with
    a variety of options. The descriptors parameter must be an array with three elements—in
    order, they describe the `stdin`, `stdout`, and `stderr` descriptors. For each,
    specify either an array containing two elements or a stream resource. In the first
    case, if the first element is `"pipe"`, the second element is either `"r"` to
    read from the pipe or `"w"` to write to the pipe. If the first is `"file"`, the
    second must be a filename. The *pipes* array is filled with an array of file pointers
    corresponding to the processes’ descriptors. If *dir* is specified, the process
    has its current working directory set to that path. If *env* is specified, the
    process has its environment set up with the values from that array. Finally, *options*
    contains an associative array with additional options. The following options can
    be set in the array:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `suppress_errors` | If set and `true`, suppresses errors generated by the
    process (Windows only) |'
  prefs: []
  type: TYPE_TB
- en: '| `bypass_shell` | If set and `true`, bypasses *cmd.exe* when running the process
    |'
  prefs: []
  type: TYPE_TB
- en: '| `context` | If set, specifies the stream context when opening files |'
  prefs: []
  type: TYPE_TB
- en: If any error occurs while attempting to open the process, `false` is returned.
    If not, the resource handle for the process is returned.
  prefs: []
  type: TYPE_NORMAL
- en: proc_terminate
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool proc_terminate(resource` *handle*`[, int` *signal*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Signals to the process referenced by *handle* and previously opened by `proc_open()`
    that it should terminate. If *signal* is supplied, the process is sent that signal.
    The call returns immediately, which may be prior to the process finishing termination.
    To poll for a process’s status, use `proc_get_status()`. Returns `true` if the
    operation was successful, and `false` otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: property_exists
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool property_exists(mixed` *class*`, string` *name*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns `true` if the object or *class* has a data member named *name* defined
    on it, and `false` if it does not.
  prefs: []
  type: TYPE_NORMAL
- en: putenv
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool putenv(string` *setting*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Sets an environment variable using *setting*, which is typically in the form
    *name* `=` *value*. Returns `true` if successful and `false` if not.
  prefs: []
  type: TYPE_NORMAL
- en: quoted_printable_decode
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string quoted_printable_decode(string` *string*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Decodes *string*, which is data encoded using the quoted printable encoding,
    and returns the resulting string.
  prefs: []
  type: TYPE_NORMAL
- en: quoted_printable_encode
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string quoted_printable_encode(string` *string*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns *string* formatted in quoted printable encoding. See RFC 2045 for a
    description of the encoding format.
  prefs: []
  type: TYPE_NORMAL
- en: quotemeta
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string quotemeta(string` *string*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Escapes instances of certain characters in *string* by appending a backslash
    (`\`) to them and returns the resulting string. The following characters are escaped:
    period (`.`), backslash (`\`), plus sign (`+`), asterisk (`*`), question mark
    (`?`), brackets (`[` and `]`), caret (`^`), parentheses (`(` and `)`), and dollar
    sign (`$`).'
  prefs: []
  type: TYPE_NORMAL
- en: rad2deg
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`float rad2deg(float` *number*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Converts *number* from radians to degrees and returns the result.
  prefs: []
  type: TYPE_NORMAL
- en: rand
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int rand([int` *min*`, int` *max*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns a random number from *min* to *max*, inclusive. If the *min* and *max*
    parameters are not provided, returns a random number from 0 to the value returned
    by the `getrandmax()` function.
  prefs: []
  type: TYPE_NORMAL
- en: random_bytes
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string random_bytes(int` *length*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Generates an arbitrary *length* string of cryptographic random bytes that are
    suitable for cryptographic use, such as when generating salts, keys, or initialization
    vectors.
  prefs: []
  type: TYPE_NORMAL
- en: random_int
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int random_int(int` *min,* `int` *max*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Generates cryptographic random integers that can be used where unbiased results
    are mandatory, such as when mixing “balls” for Bingo. *Min* sets the lowest value
    range to be returned (must be `PHP_INT_MIN` or greater), *max* sets the highest
    (must be `PHP_INT_MAX` or lower).
  prefs: []
  type: TYPE_NORMAL
- en: range
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array range(mixed` *first*`, mixed` *second*`[, number` *step*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Creates and returns an array containing integers or characters from *first*
    to *second*, inclusive. If *second* is smaller than *first*, the sequence is returned
    in reverse order. If *step* is provided, then the created array will have the
    specified step gaps in it.
  prefs: []
  type: TYPE_NORMAL
- en: rawurldecode
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string rawurldecode(string` *url*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns a string created from decoding the URI-encoded *url*. Sequences of characters
    beginning with a `%` followed by a hexadecimal number are replaced with the literal
    the sequence represents.
  prefs: []
  type: TYPE_NORMAL
- en: rawurlencode
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string rawurlencode(string` *url*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns a string created by URI encoding *url*. Certain characters are replaced
    by sequences of characters beginning with a `%` followed by a hexadecimal number;
    for example, spaces are replaced with `%20`.
  prefs: []
  type: TYPE_NORMAL
- en: readdir
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string readdir([resource` *handle*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the name of the next file in the directory referenced by *handle*. If
    not specified, *handle* defaults to the last directory handle resource returned
    by `opendir()`. The order in which files in a directory are returned by calls
    to `readdir()` is undefined. If there are no more files in the directory to return,
    `readdir()` returns `false`.
  prefs: []
  type: TYPE_NORMAL
- en: readfile
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int readfile(string` *path*`[, bool` *include*`[, resource` *context*`]])`'
  prefs: []
  type: TYPE_NORMAL
- en: Reads the file at *path*, in the streams context *context* if provided, and
    outputs the contents. If *include* is specified and is `true`, the include path
    is searched for the file. If *path* begins with `http://`, an HTTP connection
    is opened and the file is read from it. If *path* begins with `ftp://`, an FTP
    connection is opened and the file is read from it; the remote server must support
    passive FTP.
  prefs: []
  type: TYPE_NORMAL
- en: This function returns the number of bytes output.
  prefs: []
  type: TYPE_NORMAL
- en: readlink
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string readlink(string` *path*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the path contained in the symbolic link file *path*. If *path* does
    not exist or is not a symbolic link file, or if any other error occurs, the function
    returns `false`.
  prefs: []
  type: TYPE_NORMAL
- en: realpath
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string realpath(string` *path*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Expands all symbolic links, resolves references to `/./` and `/../`, removes
    extra `/` characters in *path*, and returns the result.
  prefs: []
  type: TYPE_NORMAL
- en: realpath_cache_get
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array realpath_cache_get()`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns the contents of the `realpath` cache as an associative array. The key
    for each item is the path name, and the value for each item is an associative
    array containing values that have been cached for the path. The possible values
    include:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `expires` | The time when this cache entry will expire |'
  prefs: []
  type: TYPE_TB
- en: '| `is_dir` | Whether this path represents a directory or not |'
  prefs: []
  type: TYPE_TB
- en: '| `key` | A unique ID for the cache entry |'
  prefs: []
  type: TYPE_TB
- en: '| `realpath` | The resolved path for the path |'
  prefs: []
  type: TYPE_TB
- en: realpath_cache_size
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int realpath_cache_size()`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the size in bytes the `realpath` cache currently occupies in memory.
  prefs: []
  type: TYPE_NORMAL
- en: register_shutdown_function
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`void register_shutdown_function(callable` *function*`[, mixed` *arg1* `[,
    mixed` *arg2* `[, ... mixed` *argN*`]]])`'
  prefs: []
  type: TYPE_NORMAL
- en: Registers a shutdown function. The function is called when the page completes
    processing with the given arguments. You can register multiple shutdown functions,
    and they will be called in the order in which they were registered. If a shutdown
    function contains an exit command, functions registered after that function will
    not be called.
  prefs: []
  type: TYPE_NORMAL
- en: Because the shutdown function is called after the page has completely processed,
    you cannot add data to the page with `print()`, `echo()`, or similar functions
    or commands.
  prefs: []
  type: TYPE_NORMAL
- en: register_tick_function
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool register_tick_function(callable` *function*`[, mixed` *arg1* `[, mixed`
    *arg2* `[, ... mixed` *argN*`]]])`'
  prefs: []
  type: TYPE_NORMAL
- en: Registers the function *name* to be called on each tick. The function is called
    with the given arguments. Obviously, registering a tick function can have a serious
    impact on the performance of your script. Returns `true` if the operation was
    successful, and `false` otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: rename
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool rename(string` *old*`, string` *new*`[, resource` *context*`]))`'
  prefs: []
  type: TYPE_NORMAL
- en: Renames the file *old*, using the streams context *context* if provided, to
    *new*; returns `true` if the renaming was successful and `false` if not.
  prefs: []
  type: TYPE_NORMAL
- en: reset
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`mixed reset(array` *array*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Resets the *array*’s internal pointer to the first element and returns the value
    of that element.
  prefs: []
  type: TYPE_NORMAL
- en: restore_error_handler
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool restore_error_handler()`'
  prefs: []
  type: TYPE_NORMAL
- en: Reverts to the error handler in place prior to the most recent call to `set_error_``handler()`
    and returns `true`.
  prefs: []
  type: TYPE_NORMAL
- en: restore_exception_handler
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool restore_exception_handler()`'
  prefs: []
  type: TYPE_NORMAL
- en: Reverts to the exception handler in place prior to the most recent call to `set_``exception_handler()`
    and returns `true`.
  prefs: []
  type: TYPE_NORMAL
- en: rewind
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int rewind(resource` *handle*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Sets the file pointer for *handle* to the beginning of the file. Returns `true`
    if the operation was successful and `false` if not.
  prefs: []
  type: TYPE_NORMAL
- en: rewinddir
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`void rewinddir([resource` *handle*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Sets the file pointer for *handle* to the beginning of the list of files in
    the directory. If not specified, *handle* defaults to the last directory handle
    resource returned by `opendir()`.
  prefs: []
  type: TYPE_NORMAL
- en: rmdir
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int rmdir(string` *path*`[, resource` *context*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Removes the directory *path*, using the streams context *context* if provided.
    If the directory is not empty, or the PHP process does not have appropriate permissions,
    or if any other error occurs, `false` is returned. If the directory is successfully
    deleted, `true` is returned.
  prefs: []
  type: TYPE_NORMAL
- en: round
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`float round(float` *number*`[, int` *precision*`[, int` *mode*`]])`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns the integer value nearest to *number* at the *precision* number of
    decimal places. The default for precision is `0` (integer rounding). The *mode*
    parameter dictates the method of rounding used:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `PHP_ROUND_HALF_UP` (default) | Round up |'
  prefs: []
  type: TYPE_TB
- en: '| `PHP_ROUND_HALF_DOWN` | Round down |'
  prefs: []
  type: TYPE_TB
- en: '| `PHP_ROUND_HALF_EVEN` | Round up if the significant digits are even |'
  prefs: []
  type: TYPE_TB
- en: '| `PHP_ROUND_HALF_ODD` | Round down if the significant digits are odd |'
  prefs: []
  type: TYPE_TB
- en: rsort
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`void rsort(array` *array*`[, int` *flags*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Sorts an array in reverse order by value. The optional second parameter contains
    additional sorting flags. See [Chapter 5](ch05.xhtml#array) and `unserialize()`
    for more information on using this function.
  prefs: []
  type: TYPE_NORMAL
- en: rtrim
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string rtrim(string` *string*`[, string` *characters*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns *string* with all characters in *characters* stripped from the end.
    If *characters* is not specified, the characters stripped are `\n`, `\r`, `\t`,
    `\v`, `\0`, and spaces.
  prefs: []
  type: TYPE_NORMAL
- en: scandir
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array scandir(string` *path* `[, int` *sort_order* `[, resource` *context*`]])`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns an array of filenames existing at *path*, in the streams context *context*
    if provided, or `false` if an error occurred. The filenames are sorted according
    to the *sort_order* parameter, which is one of the following types:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `SCANDIR_SORT_ASCENDING` (default) | Sort ascending |'
  prefs: []
  type: TYPE_TB
- en: '| `SCANDIR_SORT_DESCENDING` | Sort descending |'
  prefs: []
  type: TYPE_TB
- en: '| `SCANDIR_SORT_NONE` | Perform no sorting (the resulting order is undefined)
    |'
  prefs: []
  type: TYPE_TB
- en: serialize
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string serialize(mixed` *value*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns a string containing a binary data representation of *value*. This string
    can be used to store the data in a database or file, for example, and later restored
    using `unserialize()`. Except for resources, any kind of value can be serialized.
  prefs: []
  type: TYPE_NORMAL
- en: set_error_handler
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string set_error_handler(string` *function*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Sets the named function as the current error handler, or unsets the current
    error handler if *function* is `NULL`. The error-handler function is called whenever
    an error occurs; the function can do whatever it wants, but typically will print
    an error message and clean up after a critical error happens.
  prefs: []
  type: TYPE_NORMAL
- en: The user-defined function is called with two parameters, an error code and a
    string describing the error. Three additional parameters may also be supplied—the
    filename in which the error occurred, the line number at which the error occurred,
    and the context in which the error occurred (which is an array pointing to the
    active symbol table).
  prefs: []
  type: TYPE_NORMAL
- en: '`set_error_handler()` returns the name of the previously installed error-handler
    function, or `false` if an error occurred while setting the error handler (e.g.,
    when *function* doesn’t exist).'
  prefs: []
  type: TYPE_NORMAL
- en: set_exception_handler
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`callable set_exception_handler(callable` *function*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Sets the named function as the current exception handler. The exception handler
    is called whenever an exception is thrown in a `try...catch` block, but is not
    caught; the function can do whatever it wants, but typically will print an error
    message and clean up after a critical error happens.
  prefs: []
  type: TYPE_NORMAL
- en: The user-defined function is called with one parameter—the exception object
    that was thrown.
  prefs: []
  type: TYPE_NORMAL
- en: '`set_exception_handler()` returns the previously installed exception-handler
    function, an empty string if no previous handler was set, or `false` if an error
    occurred while setting the error handler (e.g., when *function* doesn’t exist).'
  prefs: []
  type: TYPE_NORMAL
- en: set_include_path
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string set_include_path(string` *path*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Sets the include path configuration option; it lasts until the end of the script’s
    execution, or until a call to `restore_include_path` in the script. Returns the
    value of the previous include path.
  prefs: []
  type: TYPE_NORMAL
- en: set_time_limit
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`void set_time_limit(int` *timeout*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Sets the timeout for the current script to *timeout* seconds and restarts the
    timeout timer. By default, the timeout is set to 30 seconds or the value for `max_execution_time`
    set in the current configuration file. If a script does not finish executing within
    the time provided, a fatal error is generated and the script is killed. If *timeout*
    is `0`, the script will never time out.
  prefs: []
  type: TYPE_NORMAL
- en: setcookie
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`void setcookie(string` *name*`[, string` *value*`[, int` *expiration*`[, string`
    *path* `[, string` *domain*`[, bool` *is_secure*`]]]]])`'
  prefs: []
  type: TYPE_NORMAL
- en: Generates a cookie and passes it along with the rest of the header information.
    Because cookies are set in the HTTP header, `setcookie()` must be called before
    any output is generated.
  prefs: []
  type: TYPE_NORMAL
- en: If only *name* is specified, the cookie with that name is deleted from the client.
    The *value* argument specifies a value for the cookie to take, *expiration* is
    a Unix timestamp value defining a time the cookie should expire, and the *path*
    and *domain* parameters define a domain for the cookie to be associated with.
    If *is_secure* is `true`, the cookie will be transmitted only over a secure HTTP
    connection.
  prefs: []
  type: TYPE_NORMAL
- en: setlocale
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string setlocale(mixed` *category*`, string` *locale*`[, string` *locale*`,
    ...]) string setlocale(mixed` *category*`, array` *locale*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Sets the locale for *category* functions to *locale*. Returns the current locale
    after being set, or `false` if the locale cannot be set. Any number of options
    for *category* can be added (or `OR`ed) together. The following options are available:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `LC_ALL` (default) | All of the following categories |'
  prefs: []
  type: TYPE_TB
- en: '| `LC_COLLATE` | String comparisons |'
  prefs: []
  type: TYPE_TB
- en: '| `LC_CTYPE` | Character classification and conversion |'
  prefs: []
  type: TYPE_TB
- en: '| `LC_MONETARY` | Monetary functions |'
  prefs: []
  type: TYPE_TB
- en: '| `LC_NUMERIC` | Numeric functions |'
  prefs: []
  type: TYPE_TB
- en: '| `LC_TIME` | Time and date formatting |'
  prefs: []
  type: TYPE_TB
- en: If *locale* is `0` or the empty string, the current locale is unaffected.
  prefs: []
  type: TYPE_NORMAL
- en: setrawcookie
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`void setrawcookie(string` *name*`[, string` *value*`[, int` *expiration*`[,
    string` *path* `[, string` *domain*`[, bool` *is_secure*`]]]]])`'
  prefs: []
  type: TYPE_NORMAL
- en: Generates a cookie and passes it along with the rest of the header information.
    Because cookies are set in the HTTP header, `setcookie()` must be called before
    any output is generated.
  prefs: []
  type: TYPE_NORMAL
- en: If only *name* is specified, the cookie with that name is deleted from the client.
    The *value* argument specifies a value for the cookie to take—unlike `setcookie()`,
    the value specified here is not URL-encoded before being sent, *expiration* is
    a Unix timestamp value defining a time the cookie should expire, and the *path*
    and *domain* parameters define a domain for the cookie to be associated with.
    If *is_secure* is `true`, the cookie will be transmitted only over a secure HTTP
    connection.
  prefs: []
  type: TYPE_NORMAL
- en: settype
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool settype(mixed` *value*`, string` *type*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Converts *value* to the given *type*. Possible types are `"boolean"`, `"integer"`,
    `"float"`, `"string"`, `"array"`, and `"object"`. Returns `true` if the operation
    was successful and `false` if not. Using this function is the same as typecasting
    *value* to the appropriate type.
  prefs: []
  type: TYPE_NORMAL
- en: sha1
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string sha1(string` *string*`[, bool` *binary*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Calculates the `sha1` encryption hash of *string* and returns it. If *binary*
    is set and is `true`, the raw binary is returned instead of a hex string.
  prefs: []
  type: TYPE_NORMAL
- en: sha1_file
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string sha1_file(string` *path*`[, bool` *binary*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Calculates and returns the `sha1` encryption hash for the file at *path*. A
    `sha1` hash is a 40-character hexadecimal value that can be used to checksum a
    file’s data. If *binary* is supplied and is `true`, the result is sent as a 20-bit
    binary value instead.
  prefs: []
  type: TYPE_NORMAL
- en: shell_exec
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string shell_exec(string` *command*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Executes *command* via the shell and returns the output from the command’s result.
    This function is called when you use the backtick operator (`` ` ``).
  prefs: []
  type: TYPE_NORMAL
- en: shuffle
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`void shuffle(array` *array*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Rearranges the values in *array* into a random order. Keys for the values are
    lost.
  prefs: []
  type: TYPE_NORMAL
- en: similar_text
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int similar_text(string` *one*`, string` *two*`[, float` *percent*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Calculates the similarity between the strings *one* and *two*. If passed by
    reference, *percent* gets the percent by which the two strings differ.
  prefs: []
  type: TYPE_NORMAL
- en: sin
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`float sin(float` *value*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the sine of *value* in radians.
  prefs: []
  type: TYPE_NORMAL
- en: sinh
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`float sinh(float` *value*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the hyperbolic sine of *value* in radians.
  prefs: []
  type: TYPE_NORMAL
- en: sleep
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int sleep(int` *time*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Pauses execution of the current script for *time* seconds. Returns `0` if the
    operation was successful, or `false` otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: sort
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool sort(array` *array*`[, int` *flags*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Sorts the values in the given *array* in ascending order. For more control
    over the behavior of the sort, provide the second parameter, which is one of the
    following values:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `SORT_REGULAR` (default) | Compare the items normally |'
  prefs: []
  type: TYPE_TB
- en: '| `SORT_NUMERIC` | Compare the items numerically |'
  prefs: []
  type: TYPE_TB
- en: '| `SORT_STRING` | Compare the items as strings |'
  prefs: []
  type: TYPE_TB
- en: '| `SORT_LOCALE_STRING` | Compare the items as strings using the current locale
    sorting rules |'
  prefs: []
  type: TYPE_TB
- en: '| `SORT_NATURAL` | Compare the items as strings using “natural ordering” |'
  prefs: []
  type: TYPE_TB
- en: '| `SORT_FLAG_CASE` | Combine with `SORT_STRING` or `SORT_NATURAL` using a bitwise
    `OR` operation to sort using case-insensitive comparison |'
  prefs: []
  type: TYPE_TB
- en: Returns `true` if the operation was successful, and `false` otherwise. See [Chapter 5](ch05.xhtml#array)
    for more information on using this function.
  prefs: []
  type: TYPE_NORMAL
- en: soundex
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string soundex(string` *string*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Calculates and returns the soundex key of *string*. Words that are pronounced
    similarly (and begin with the same letter) have the same soundex key.
  prefs: []
  type: TYPE_NORMAL
- en: sprintf
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string sprintf(string` *format*`[, mixed` *value1*`[, ... mixed` *valueN*`]])`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns a string created by filling *format* with the given arguments. See `printf()`
    for more information on using this function.
  prefs: []
  type: TYPE_NORMAL
- en: sqrt
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`float sqrt(float` *number*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the square root of *number*.
  prefs: []
  type: TYPE_NORMAL
- en: srand
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`void srand([int` *seed*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Seeds the standard pseudorandom number generator with *seed*, or with a random
    seed if none is provided.
  prefs: []
  type: TYPE_NORMAL
- en: sscanf
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`mixed sscanf(string` *string*`, string` *format*`[, mixed` *variableN* `...])`'
  prefs: []
  type: TYPE_NORMAL
- en: Parses *string* for values of types given in *format*; the values found are
    either returned in an array or, if *variable1* through *variableN* (which must
    be variables passed by reference) are given, in those variables.
  prefs: []
  type: TYPE_NORMAL
- en: 'The *format* string is the same as that used in `sprintf()`. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: stat
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array stat(string` *path*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns an associative array of information about the file *path*. If *path*
    is a symbolic link, information about the file *path* references is returned.
    See `fstat` for a list of the values returned and their meanings.
  prefs: []
  type: TYPE_NORMAL
- en: str_getcsv
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array str_getcsv(string` *input*`[, string` *delimiter*`[, string` *enclosure*
    `[, string` *escape*`]]]])`'
  prefs: []
  type: TYPE_NORMAL
- en: Parses a string as a comma-separated values (CSV) list and returns it as an
    array of values. If supplied, *delimiter* is used to delimit the values for the
    line instead of commas. If supplied, *enclosure* is a single character that is
    used to enclose values (by default, the double-quote character, `"`). *escape*
    sets the escape character to use; the default is a backslash, `\`.
  prefs: []
  type: TYPE_NORMAL
- en: str_ireplace
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`mixed str_ireplace(mixed` *search*`, mixed` *replace*`, mixed` *string*`[,
    int &`*count*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Performs a case-insensitive search for all occurrences of *search* in *string*
    and replaces them with *replace*. If all three parameters are strings, a string
    is returned. If *string* is an array, the replacement is performed for every element
    in the array and an array of results is returned. If *search* and *replace* are
    both arrays, elements in *search* are replaced with the elements in *replace*
    with the same numeric indices. Finally, if *search* is an array and *replace*
    is a string, any occurrence of any element in *search* is changed to *replace*.
    If supplied, *count* is filled with the number of instances replaced.
  prefs: []
  type: TYPE_NORMAL
- en: str_pad
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string str_pad(string` *string*`, string` *length*`[, string` *pad*`[, int`
    *type*`]])`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Pads *string* using *pad* until it is at least *length* characters and returns
    the resulting string. By specifying *type*, you can control where the padding
    occurs. The following values for *type* are accepted:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `STR_PAD_RIGHT` (default) | Pad to the right of *string* |'
  prefs: []
  type: TYPE_TB
- en: '| `STR_PAD_LEFT` | Pad to the left of *string* |'
  prefs: []
  type: TYPE_TB
- en: '| `STR_PAD_BOTH` | Pad on either side of *string* |'
  prefs: []
  type: TYPE_TB
- en: str_repeat
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string str_repeat(string` *string*`, int` *count*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns a string consisting of *count* copies of *string* appended to each other.
    If *count* is not greater than zero, an empty string is returned.
  prefs: []
  type: TYPE_NORMAL
- en: str_replace
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`mixed str_replace(mixed` *search*`, mixed` *replace*`, mixed` *string*`[,
    int &`*count*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Searches for all occurrences of *search* in *string* and replaces them with
    *replace*. If all three parameters are strings, a string is returned. If *string*
    is an array, the replacement is performed for every element in the array and an
    array of results is returned. If *search* and *replace* are both arrays, elements
    in *search* are replaced with the elements in *replace* with the same numeric
    indices. Finally, if *search* is an array and *replace* is a string, any occurrence
    of any element in *search* is changed to *replace*. If supplied, *count* is filled
    with the number of instances replaced.
  prefs: []
  type: TYPE_NORMAL
- en: str_rot13
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string str_rot13(string` *string*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Converts *string* to its `rot13` version and returns the resulting string.
  prefs: []
  type: TYPE_NORMAL
- en: str_shuffle
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string str_shuffle(string` *string*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Rearranges the characters in *string* into a random order and returns the resulting
    string.
  prefs: []
  type: TYPE_NORMAL
- en: str_split
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array str_split(string` *string*`[, int` *length*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Splits *string* into an array of characters, each containing *length* characters;
    if *length* is not specified, it defaults to `1`.
  prefs: []
  type: TYPE_NORMAL
- en: str_word_count
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`mixed str_word_count(string` *string*`[, int` *format*`[, string` *characters*`]])`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Counts the number of words in *string* using locale-specific rules. The value
    of *format* dictates the returned value:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `0` (default) | The number of words found in *string* |'
  prefs: []
  type: TYPE_TB
- en: '| `1` | An array of all words found in *string* |'
  prefs: []
  type: TYPE_TB
- en: '| `2` | An associative array, with keys being the positions and values being
    the words found at those positions in *string* |'
  prefs: []
  type: TYPE_TB
- en: If *characters* is specified, it provides additional characters that are considered
    to be inside words (that is, are not word boundaries).
  prefs: []
  type: TYPE_NORMAL
- en: strcasecmp
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int strcasecmp(string` *one*`, string` *two*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Compares two strings; returns a number less than zero if *one* is less than
    *two*, `0` if the two strings are equal, and a number greater than zero if *one*
    is greater than *two*. The comparison is case-insensitive—that is, “Alphabet”
    and “alphabet” are considered equal.
  prefs: []
  type: TYPE_NORMAL
- en: strcmp
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int strcmp(string` *one*`, string` *two*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Compares two strings; returns a number less than zero if *one* is less than
    *two*, `0` if the two strings are equal, and a number greater than zero if *one*
    is greater than *two*. The comparison is case-sensitive—that is, “Alphabet” and
    “alphabet” are not considered equal.
  prefs: []
  type: TYPE_NORMAL
- en: strcoll
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int strcoll(string` *one*`, string` *two*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Compares two strings using the rules of the current locale; returns a number
    less than zero if *one* is less than *two*, `0` if the two strings are equal,
    and a number greater than zero if *one* is greater than *two*. The comparison
    is case-sensitive—that is, “Alphabet” and “alphabet” are not considered equal.
  prefs: []
  type: TYPE_NORMAL
- en: strcspn
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int strcspn(string` *string*`, string` *characters*`[, int` *offset*`[, int`
    *length*`]])`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the length of the subset of *string* starting at *offset*, examining
    a maximum of *length* characters, to the first instance of a character from *characters*.
  prefs: []
  type: TYPE_NORMAL
- en: strftime
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string strftime(string` *format*`[, int` *timestamp*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Formats a time and date according to the *format* string provided in the first
    parameter and the current locale. If the second parameter is not specified, the
    current time and date is used. The following characters are recognized in the
    *format* string:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `%a` | Name of the day of the week as a three-letter abbreviation (e.g.,
    Mon) |'
  prefs: []
  type: TYPE_TB
- en: '| `%A` | Name of the day of the week (e.g., Monday) |'
  prefs: []
  type: TYPE_TB
- en: '| `%b` | Name of the month as a three-letter abbreviation (e.g., Aug) |'
  prefs: []
  type: TYPE_TB
- en: '| `%B` | Name of the month (e.g., August) |'
  prefs: []
  type: TYPE_TB
- en: '| `%c` | Date and time in the preferred format for the current locale |'
  prefs: []
  type: TYPE_TB
- en: '| `%C` | The last two digits of the century |'
  prefs: []
  type: TYPE_TB
- en: '| `%d` | Day of the month as two digits, including a leading zero if necessary
    (e.g., 01 through 31) |'
  prefs: []
  type: TYPE_TB
- en: '| `%D` | Same as `%m/%d/%y` |'
  prefs: []
  type: TYPE_TB
- en: '| `%e` | Day of the month as two digits, including a leading space if necessary
    (e.g., 1 through 31) |'
  prefs: []
  type: TYPE_TB
- en: '| `%h` | Same as `%b` |'
  prefs: []
  type: TYPE_TB
- en: '| `%H` | Hour in 24-hour format, including a leading zero if necessary (e.g.,
    00 through 23) |'
  prefs: []
  type: TYPE_TB
- en: '| `%I` | Hour in 12-hour format (e.g., 1 through 12) |'
  prefs: []
  type: TYPE_TB
- en: '| `%j` | Day of the year, including leading zeros as necessary (e.g., 001 through
    366) |'
  prefs: []
  type: TYPE_TB
- en: '| `%m` | Month, including a leading zero if necessary (e.g., 01 through 12)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `%M` | Minutes |'
  prefs: []
  type: TYPE_TB
- en: '| `%n` | The newline character (`\n`) |'
  prefs: []
  type: TYPE_TB
- en: '| `%p` | am or pm |'
  prefs: []
  type: TYPE_TB
- en: '| `%r` | Same as `%I:%M:%S %p` |'
  prefs: []
  type: TYPE_TB
- en: '| `%R` | Same as `%H:%M:%S` |'
  prefs: []
  type: TYPE_TB
- en: '| `%S` | Seconds |'
  prefs: []
  type: TYPE_TB
- en: '| `%t` | The tab character (`\t`) |'
  prefs: []
  type: TYPE_TB
- en: '| `%T` | Same as `%H:%M:%S` |'
  prefs: []
  type: TYPE_TB
- en: '| `%u` | Numeric day of the week, starting with 1 for Monday |'
  prefs: []
  type: TYPE_TB
- en: '| `%U` | Numeric week of the year, starting with the first Sunday |'
  prefs: []
  type: TYPE_TB
- en: '| `%V` | ISO 8601:1998 numeric week of the year—Week 1 starts on the Monday
    of the first week that has at least four days |'
  prefs: []
  type: TYPE_TB
- en: '| `%W` | Numeric week of the year, starting with the first Monday |'
  prefs: []
  type: TYPE_TB
- en: '| `%w` | Numeric day of the week, starting with 0 for Sunday |'
  prefs: []
  type: TYPE_TB
- en: '| `%x` | The preferred date format for the current locale |'
  prefs: []
  type: TYPE_TB
- en: '| `%X` | The preferred time format for the current locale |'
  prefs: []
  type: TYPE_TB
- en: '| `%y` | Year with two digits (e.g., 98) |'
  prefs: []
  type: TYPE_TB
- en: '| `%Y` | Year with four digits (e.g., 1998) |'
  prefs: []
  type: TYPE_TB
- en: '| `%Z` | Time zone or name or abbreviation |'
  prefs: []
  type: TYPE_TB
- en: '| `%%` | The percent sign (`%`) |'
  prefs: []
  type: TYPE_TB
- en: stripcslashes
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string stripcslashes(string` *string*`, string` *characters*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Converts instances of *characters* after a backslash in *string* by removing
    the backslash before them. You can specify ranges of characters by separating
    them by two periods; for example, to unescape characters between `a` and `q`,
    use `"a..q"`. Multiple characters and ranges can be specified in *characters*.
    The `stripcslashes()` function is the inverse of `addcslashes()`.
  prefs: []
  type: TYPE_NORMAL
- en: stripslashes
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string stripslashes(string` *string*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Converts instances of escape sequences that have special meaning in SQL queries
    in *string* by removing the backslash before them. Single quotes (`'`), double
    quotes (`"`), backslashes (`\`), and the NUL-byte (`"\0"`) are escaped. This function
    is the inverse of `addslashes()`.
  prefs: []
  type: TYPE_NORMAL
- en: strip_tags
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string strip_tags(string` *string*`[, string` *allowed*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Removes PHP and HTML tags from *string* and returns the result. The *allowed*
    parameter can be specified to not remove certain tags. The string should be a
    comma-separated list of the tags to ignore; for example, `"<b>,<i>"` will leave
    bold and italic tags.
  prefs: []
  type: TYPE_NORMAL
- en: stripos
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int stripos(string` *string*`, string` *value*`[, int` *offset*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the position of the first occurrence of *value* in *string* using case-insensitive
    comparison. If specified, the function begins its search at position *offset*.
    Returns `false` if *value* is not found.
  prefs: []
  type: TYPE_NORMAL
- en: stristr
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string stristr(string` *string*`, string` *search*`[, int` *before*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the portion of *string* from the first occurrence of *search* using
    case-insensitive comparison until the end of *string*, or from the first occurrence
    of *search* until the beginning of *string* if *before* is specified and `true`.
    If *search* is not found, the function returns `false`. If *search* contains more
    than one character, only the first is used.
  prefs: []
  type: TYPE_NORMAL
- en: strlen
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int strlen(string` *string*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the number of characters in *string*.
  prefs: []
  type: TYPE_NORMAL
- en: strnatcasecmp
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int strnatcasecmp(string` *one*`, string` *two*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Compares two strings; returns a number less than zero if *one* is less than
    *two*, `0` if the two strings are equal, and a number greater than zero if *one*
    is greater than *two*. The comparison is case-insensitive—that is, “Alphabet”
    and “alphabet” are considered equal. The function uses a “natural order” algorithm—numbers
    in the strings are compared more naturally than computers normally do. For example,
    the values `"1"`, `"10"`, and `"2"` are sorted in that order by `strcmp()`, but
    `strnatcasecmp()` orders them `"1"`, `"2"`, and `"10"`. This function is a case-insensitive
    version of `strnatcmp()`.
  prefs: []
  type: TYPE_NORMAL
- en: strnatcmp
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int strnatcmp(string` *one*`, string` *two*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Compares two strings; returns a number less than zero if *one* is less than
    *two*, `0` if the two strings are equal, and a number greater than zero if *one*
    is greater than *two*. The comparison is case-sensitive—that is, “Alphabet” and
    “alphabet” are not considered equal. The `strnatcmp()` function uses a “natural
    order” algorithm—numbers in the strings are compared more naturally than computers
    normally do. For example, the values `"1"`, `"10"`, and `"2"` are sorted in that
    order by `strcmp()`, but `strnatcmp()` orders them `"1"`, `"2"`, and `"10"`.
  prefs: []
  type: TYPE_NORMAL
- en: strncasecmp
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int strncasecmp(string` *one*`, string` *two*`, int` *length*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Compares two strings; returns a number less than zero if *one* is less than
    *two*, `0` if the two strings are equal, and a number greater than zero if *one*
    is greater than *two*. The comparison is case-insensitive—that is, “Alphabet”
    and “alphabet” are considered equal. This function is a case-insensitive version
    of `strcmp()`. If either string is shorter than *length* characters, the length
    of that string determines how many characters are compared.
  prefs: []
  type: TYPE_NORMAL
- en: strncmp
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int strncmp(string` *one*`, string` *two*`[, int` *length*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Compares two strings; returns a number less than zero if *one* is less than
    *two*, `0` if the two strings are equal, and a number greater than zero if *one*
    is greater than *two*. The comparison is case-sensitive—that is, “Alphabet” and
    “alphabet” are not considered equal. If specified, no more than *length* characters
    are compared. If either string is shorter than *length* characters, the length
    of that string determines how many characters are compared.
  prefs: []
  type: TYPE_NORMAL
- en: strpbrk
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string strpbrk(string` *string*`, string` *characters*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns a string consisting of the substring of *string*, starting from the
    position of the first instance of a character from *characters* in *string* to
    the end of the string, or `false` if none of the characters in *characters* is
    found in *string*.
  prefs: []
  type: TYPE_NORMAL
- en: strpos
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int strpos(string` *string*`, string` *value*`[, int` *offset*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the position of the first occurrence of *value* in *string*. If specified,
    the function begins its search at position *offset*. Returns `false` if *value*
    is not found.
  prefs: []
  type: TYPE_NORMAL
- en: strptime
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array strptime(string` *date*`, string` *format*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parses a time and date according to the *format* string and the current locale.
    The format uses the same format as `strftime()`. Returns an associative array
    with information about the parsed time containing the following elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `tm_sec` | Seconds |'
  prefs: []
  type: TYPE_TB
- en: '| `tm_min` | Minutes |'
  prefs: []
  type: TYPE_TB
- en: '| `tm_hour` | Hours |'
  prefs: []
  type: TYPE_TB
- en: '| `tm_mday` | Day of the month |'
  prefs: []
  type: TYPE_TB
- en: '| `tm_wday` | Numeric day of the week (Sunday is 0) |'
  prefs: []
  type: TYPE_TB
- en: '| `tm_mon` | Month |'
  prefs: []
  type: TYPE_TB
- en: '| `tm_year` | Year |'
  prefs: []
  type: TYPE_TB
- en: '| `tm_yday` | Day of the year |'
  prefs: []
  type: TYPE_TB
- en: '| `unparsed` | The portion of *date* that was not parsed according to the given
    format |'
  prefs: []
  type: TYPE_TB
- en: strrchr
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string strrchr(string` *string*`, string` *character*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the portion of *string* from the last occurrence of *character* until
    the end of *string*. If *character* is not found, the function returns `false`.
    If *character* contains more than one character, only the first is used.
  prefs: []
  type: TYPE_NORMAL
- en: strrev
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string strrev(string` *string*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns a string containing the characters of *string* in reverse order.
  prefs: []
  type: TYPE_NORMAL
- en: strripos
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int strripos(string` *string*`, string` *search*`[, int` *offset*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the position of the last occurrence of *search* in *string* using a
    case-insensitive search, or `false` if *search* is not found. If specified and
    positive, the search begins *offset* characters from the start of *string*. If
    specified and negative, the search begins *offset* characters from the end of
    *string*. This function is a case-insensitive version of `strrpos()`.
  prefs: []
  type: TYPE_NORMAL
- en: strrpos
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int strrpos(string` *string*`, string` *search*`[, int` *offset*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the position of the last occurrence of *search* in *string*, or `false`
    if *search* is not found. If specified and positive, the search begins *offset*
    characters from the start of *string*. If specified and negative, the search begins
    *offset* characters from the end of *string*.
  prefs: []
  type: TYPE_NORMAL
- en: strspn
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int strspn(string` *string*`, string` *characters*`[, int` *offset*`[, int`
    *length*`]])`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the length of the substring in *string* that consists solely of characters
    in *characters*. If *offset* is positive, the search starts at that character;
    if it is negative, the substring starts at the character *offset* characters from
    the string’s end. If *length* is given and is positive, that many characters from
    the start of the substring are checked. If *length* is given and is negative,
    the check ends *length* characters from the end of *string*.
  prefs: []
  type: TYPE_NORMAL
- en: strstr
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string strstr(string` *string*`, string` *character*`[, bool` *before*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the portion of *string* from the first occurrence of *character* until
    the end of *string*, or from the first occurrence of *character* until the beginning
    of *string* if *before* is specified and `true`. If *character* is not found,
    the function returns `false`. If *character* contains more than one character,
    only the first is used.
  prefs: []
  type: TYPE_NORMAL
- en: strtok
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string strtok(string` *string*`, string` *token*`) string strtok(string` *token*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Breaks *string* into tokens separated by any of the characters in *token* and
    returns the next token found. The first time you call `strtok()` on a string,
    use the first function prototype; afterward, use the second, providing only the
    tokens. The function contains an internal pointer for each string it is called
    with. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: strtolower
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string strtolower(string` *string*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns *string* with all alphabetic characters converted to lowercase. The
    table used for converting characters is locale-specific.
  prefs: []
  type: TYPE_NORMAL
- en: strtotime
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int strtotime(string` *time*`[, int` *timestamp*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Converts an English description of a time and date into a Unix timestamp value.
    Optionally, a *timestamp* can be given that the function uses as the “now” value;
    if this value is omitted, the current date and time is used. Returns `false` if
    the value could not be converted into a valid timestamp.
  prefs: []
  type: TYPE_NORMAL
- en: 'The descriptive string can be in a number of formats. For example, all of the
    following will work:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: strtoupper
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string strtoupper(string` *string*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns *string* with all alphabetic characters converted to uppercase. The
    table used for converting characters is locale-specific.
  prefs: []
  type: TYPE_NORMAL
- en: strtr
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string strtr(string` *string*`, string` *from*`, string` *to*`) string strtr(string`
    *string*`, array` *replacements*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: When given three arguments, returns a string created by translating in *string*
    every occurrence of a character in *from* to the character in *to* with the same
    position. When given two arguments, returns a string created by translating occurrences
    of the keys in *replacements* in *string* with the corresponding values in *replacements*.
  prefs: []
  type: TYPE_NORMAL
- en: strval
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string strval(mixed` *value*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the string equivalent for *value*. If value is an object and that object
    implements the `__toString()` method, it returns the value of that method. Otherwise,
    if *value* is an object that doesn’t implement `__toString()` or is an array,
    the function returns an empty string.
  prefs: []
  type: TYPE_NORMAL
- en: substr
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string substr(string` *string*`, int` *offset*`[, int` *length*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the substring of *string*. If *offset* is positive, the substring starts
    at that character; if it is negative, the substring starts at the character *offset*
    characters from the string’s end. If *length* is given and is positive, that many
    characters from the start of the substring are returned. If *length* is given
    and is negative, the substring ends *length* characters from the end of *string*.
    If *length* is not given, the substring contains all characters to the end of
    *string*.
  prefs: []
  type: TYPE_NORMAL
- en: substr_compare
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int substr_compare(string` *first*`, string` *second*`, string` *offset*`[,
    int` *length*`[, bool` *case_insensitivity*`]])`'
  prefs: []
  type: TYPE_NORMAL
- en: Compares *first*, starting at the position *offset*, to *second*. If *length*
    is specified, a maximum of that many characters are compared. Finally, if *case_insensitivity*
    is specified and `true`, the comparison is case-insensitive. Returns a number
    less than zero if the substring of *first* is less than *second*, `0` if they
    are equal, and a number greater than zero if the substring of *first* is greater
    than *second*.
  prefs: []
  type: TYPE_NORMAL
- en: substr_count
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int substr_count(string` *string*`, string` *search*`[, int` *offset*`[, int`
    *length*`]])`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the number of times *search* appears in *string*. If *offset* is provided,
    the search begins at that character offset for at most *length* characters, or
    until the end of the string if *length* is not provided.
  prefs: []
  type: TYPE_NORMAL
- en: substr_replace
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string substr_replace(mixed` *string*`, mixed` *replace*`, mixed` *offset*`[,
    mixed` *length*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Replaces a substring in *string* with *replace*. The substring replaced is selected
    using the same rules as those of `substr()`. If string is an array, replacements
    take place on each string within the array. In this case, *replace*, *offset*,
    and *length* can either be scalar values, which are used for all strings in *string*,
    or arrays of values to be used for each corresponding value in *string*.
  prefs: []
  type: TYPE_NORMAL
- en: symlink
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool symlink(string` *path*`, string` *new*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Creates a symbolic link to *path* at the path *new*. Returns `true` if the link
    was successfully created and `false` if not.
  prefs: []
  type: TYPE_NORMAL
- en: syslog
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool syslog(int` *priority*`, string` *message*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Sends an error message to the system logging facility. On Unix systems, this
    is `syslog(3)`; on Windows NT, the messages are logged in the NT Event Log. The
    message is logged with the given *priority*, which is one of the following (listed
    in decreasing order of priority):'
  prefs: []
  type: TYPE_NORMAL
- en: '| `LOG_EMERG` | Error has caused the system to be unstable |'
  prefs: []
  type: TYPE_TB
- en: '| `LOG_ALERT` | Error notes a situation that requires immediate action |'
  prefs: []
  type: TYPE_TB
- en: '| `LOG_CRIT` | Error is a critical condition |'
  prefs: []
  type: TYPE_TB
- en: '| `LOG_ERR` | Error is a general error condition |'
  prefs: []
  type: TYPE_TB
- en: '| `LOG_WARNING` | Error message is a warning |'
  prefs: []
  type: TYPE_TB
- en: '| `LOG_NOTICE` | Error message is a normal, but significant, condition |'
  prefs: []
  type: TYPE_TB
- en: '| `LOG_INFO` | Error is an informational message that requires no action |'
  prefs: []
  type: TYPE_TB
- en: '| `LOG_DEBUG` | Error is for debugging only |'
  prefs: []
  type: TYPE_TB
- en: If *message* contains the characters `%m`, they are replaced with the current
    error message, if any is set. Returns `true` if the logging succeeded and `false`
    if a failure occurred.
  prefs: []
  type: TYPE_NORMAL
- en: system
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string system(string` *command*`[, int &`*return*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Executes *command* via the shell and returns the last line of output from the
    command’s result. If *return* is specified, it is set to the return status of
    the command.
  prefs: []
  type: TYPE_NORMAL
- en: sys_getloadavg
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array sys_getloadavg()`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns an array containing the load average of the machine running the current
    script, sampled over the last 1, 5, and 15 minutes.
  prefs: []
  type: TYPE_NORMAL
- en: sys_get_temp_dir
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string sys_get_temp_dir()`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the path of the directory where temporary files, such as those created
    by `tmpfile()` and `tempname()`, are created.
  prefs: []
  type: TYPE_NORMAL
- en: tan
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`float tan(float` *value*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the tangent of *value* in radians.
  prefs: []
  type: TYPE_NORMAL
- en: tanh
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`float tanh(float` *value*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the hyperbolic tangent of *value* in radians.
  prefs: []
  type: TYPE_NORMAL
- en: tempnam
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string tempnam(string` *path*`, string` *prefix*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Generates and returns a unique filename in the directory *path*. If *path* does
    not exist, the resulting temporary file may be located in the system’s temporary
    directory. The filename is prefixed with *prefix*. Returns `false` if the operation
    could not be performed.
  prefs: []
  type: TYPE_NORMAL
- en: time
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int time()`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the number of seconds since the Unix epoch (January 1, 1970, 00:00:00
    GMT).
  prefs: []
  type: TYPE_NORMAL
- en: time_nanosleep
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool time_nanosleep(int` *seconds*`, int` *nanoseconds*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Pauses execution of the current script for *seconds* seconds and *nanoseconds*
    nanoseconds. Returns `true` on success and `false` on a failure; if the delay
    was interrupted by a signal, an associative array containing the following values
    is returned instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `seconds` | Number of seconds remaining |'
  prefs: []
  type: TYPE_TB
- en: '| `nanoseconds` | Number of nanoseconds remaining |'
  prefs: []
  type: TYPE_TB
- en: time_sleep_until
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool time_sleep_until(float` *timestamp*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Pauses execution of the current script until the time *timestamp* passes. Returns
    `true` on success and `false` on a failure.
  prefs: []
  type: TYPE_NORMAL
- en: timezone_name_from_abbr
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string timezone_name_from_abbr(string` *name*`[, int` *gmtOffset*`[, int`
    *dst*`]])`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the name of a time zone given in *name*, or `false` if no appropriate
    time zone could be found. If given, *gmtOffset* is an integer offset from GMT
    used as a hint to find the appropriate time zone. If given, *dst* indicates whether
    the time zone has Daylight Saving Time or not as a hint to find the appropriate
    time zone.
  prefs: []
  type: TYPE_NORMAL
- en: timezone_version_get
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string timezone_version_get()`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the version of the current time zone database.
  prefs: []
  type: TYPE_NORMAL
- en: tmpfile
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int tmpfile()`'
  prefs: []
  type: TYPE_NORMAL
- en: Creates a temporary file with a unique name, opens it with read-write privileges,
    and returns a resource to the file, or `false` if an error occurred. The file
    is automatically deleted when closed with `fclose()` or at the end of the current
    script.
  prefs: []
  type: TYPE_NORMAL
- en: token_get_all
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array token_get_all(string` *source*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Parses the PHP code *source* into PHP language tokens and returns them as an
    array. Each element in the array contains a single character token or a three-element
    array containing, in order, the token index, the source string representing the
    token, and the line number the *source* appeared in source.
  prefs: []
  type: TYPE_NORMAL
- en: token_name
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string token_name(int` *token*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the symbolic name of the PHP language token identified by *token*.
  prefs: []
  type: TYPE_NORMAL
- en: touch
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool touch(string` *path*`[, int` *touch_time*`[, int` *access_time*`]])`'
  prefs: []
  type: TYPE_NORMAL
- en: Sets the modification date of *path* to *touch_time* (a Unix timestamp value)
    and the access time of *path* to *access_time*. If not specified, *touch_time*
    defaults to the current time, while *access_time* defaults to *touch_time* (or
    the current time if that value is also not supplied). If the file does not exist,
    it is created. Returns `true` if the function completed without error and `false`
    if an error occurred.
  prefs: []
  type: TYPE_NORMAL
- en: trait_exists
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool trait_exists(string` *name*`[, bool` *autoload*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns `true` if a trait with the same name as the string has been defined;
    if not, it returns `false`. The comparison for trait names is case-insensitive.
    If `autoload` is set and is `true`, the autoloader attempts to load the trait
    before checking its existence.
  prefs: []
  type: TYPE_NORMAL
- en: trigger_error
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`void trigger_error(string` *error*`[, int` *type*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Triggers an error condition; if the type is not given, it defaults to `E_USER_NOTICE`.
    The following types are valid:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `E_USER_ERROR` | User-generated error |'
  prefs: []
  type: TYPE_TB
- en: '| `E_USER_WARNING` | User-generated warning |'
  prefs: []
  type: TYPE_TB
- en: '| `E_USER_NOTICE` (default) | User-generated notice |'
  prefs: []
  type: TYPE_TB
- en: '| `E_USER_DEPRECATED` | User-generated deprecated call warning |'
  prefs: []
  type: TYPE_TB
- en: If longer than 1,024 characters, *error* is truncated to 1,024 characters.
  prefs: []
  type: TYPE_NORMAL
- en: trim
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string trim(string` *string*`[, string` *characters*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns *string* with every whitespace character in *characters* stripped from
    the beginning and end of the string. You can specify a range of characters to
    strip using `..` within the string. For example, `"a..z"` would strip each lowercase
    alphabetical character. If *characters* is not supplied, `\n`, `\r`, `\t`, `\x0B`,
    `\0`, and spaces are stripped.
  prefs: []
  type: TYPE_NORMAL
- en: uasort
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool uasort(array` *array*`, callable` *function*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Sorts an array using a user-defined function, maintaining the keys for the values.
    See [Chapter 5](ch05.xhtml#array) and `usort()` for more information on using
    this function. Returns `true` if the array was successfully sorted, and `false`
    otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: ucfirst
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string ucfirst(string` *string*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns *string* with the first character, if alphabetic, converted to uppercase.
    The table used for converting characters is locale-specific.
  prefs: []
  type: TYPE_NORMAL
- en: ucwords
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string ucwords(string` *string*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns *string* with the first character of each word, if alphabetic, converted
    to uppercase. The table used for converting characters is locale-specific.
  prefs: []
  type: TYPE_NORMAL
- en: uksort
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool uksort(array` *array*`, callable` *function*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Sorts an array by keys using a user-defined function, maintaining the keys for
    the values. See [Chapter 5](ch05.xhtml#array) and `usort()` for more information
    on using this function. Returns `true` if the array was successfully sorted, and
    `false` otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: umask
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int umask([int` *mask*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Sets PHP’s default permissions to the value *mask* `& 0777` and returns the
    previous mask if successful, or `false` if an error occurred. The previous default
    permissions are restored at the end of the current script. If *mask* is not supplied,
    the current permissions are returned.
  prefs: []
  type: TYPE_NORMAL
- en: When running on a multithreaded web server (e.g., Apache), use `chmod()` after
    creating a file to change its permissions, rather than this function.
  prefs: []
  type: TYPE_NORMAL
- en: uniqid
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string uniqid([string` *prefix*`[, bool` *more_entropy*`]])`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns a unique identifier, prefixed with *prefix*, based on the current time
    in microseconds. If *more_entropy* is specified and is `true`, additional random
    characters are added to the end of the string. The resulting string is either
    13 characters (if *more_entropy* is unspecified or `false`) or 23 characters (if
    *more_entropy* is `true`) long.
  prefs: []
  type: TYPE_NORMAL
- en: unlink
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int unlink(string` *path*`[, resource` *context*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Deletes the file *path*, using the streams context *context* if provided. Returns
    `true` if the operation was successful and `false` if not.
  prefs: []
  type: TYPE_NORMAL
- en: unpack
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`array unpack(string` *format*`, string` *data*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns an array of values retrieved from the binary string *data*, which was
    previously packed using the `pack()` function and the format *format*. See `pack()`
    for a listing of the format codes to use within *format*.
  prefs: []
  type: TYPE_NORMAL
- en: unregister_tick_function
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`void unregister_tick_function(string` *name*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Removes the function *name*, previously set using `register_tick_function()`,
    as a tick function. It will no longer be called during each tick.
  prefs: []
  type: TYPE_NORMAL
- en: unserialize
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`mixed unserialize(string` *data*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the value stored in *data*, which must be a value previously serialized
    using `serialize()`. If the value is an object and that object has a `__wakeup()`
    method, that method is called on the object immediately after reconstructing the
    object.
  prefs: []
  type: TYPE_NORMAL
- en: unset
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`void unset(mixed` *var*`[, mixed` *var2*`[, ... mixed` *varN*`]])`'
  prefs: []
  type: TYPE_NORMAL
- en: Destroys the given variables. A global variable called within function scope
    only `unset`s the local copy of that variable; to destroy a global variable, you
    must call `unset` on the value in the `$GLOBALS` array instead. A variable in
    function scope passed by reference destroys only the local copy of that variable.
  prefs: []
  type: TYPE_NORMAL
- en: urldecode
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string urldecode(string` *url*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns a string created from decoding the URI-encoded *url*. Sequences of characters
    beginning with a `%` followed by a hexadecimal number are replaced with the literal
    the sequence represents. In addition, plus signs (`+`) are replaced with spaces.
    See also `rawurlencode()`, which is identical except for its handling of spaces.
  prefs: []
  type: TYPE_NORMAL
- en: urlencode
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string urlencode(string` *url*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns a string created by URI encoding *url*. All nonalphanumeric characters
    except dash (`–`), underscore (`_`), and period (`.`) characters in *url* are
    replaced by a sequence of characters beginning with a `%` followed by a hexadecimal
    number; for example, slashes (`/`) are replaced with `%2F`. In addition, any spaces
    in *url* are replaced by plus signs (`+`). See also `rawurlencode()`, which is
    identical except for its handling of spaces.
  prefs: []
  type: TYPE_NORMAL
- en: usleep
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`void usleep(int` *time*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Pauses execution of the current script for *time* microseconds.
  prefs: []
  type: TYPE_NORMAL
- en: usort
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`bool usort(array` *array*`, callable` *function*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Sorts an array using a user-defined function. The supplied function is called
    with two parameters. It should return an integer less than zero if the first argument
    is less than the second, `0` if the first and second arguments are equal, and
    an integer greater than zero if the first argument is greater than the second.
    The sort order of two elements that compare equal is undefined. See [Chapter 5](ch05.xhtml#array)
    for more information on using this function.
  prefs: []
  type: TYPE_NORMAL
- en: Returns `true` if the function was successful in sorting the array, and `false`
    otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: var_dump
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`void var_dump(mixed` *name*`[, mixed` *name2*`[, ... mixed` *nameN*`]])`'
  prefs: []
  type: TYPE_NORMAL
- en: Outputs information about *name*, *name2*, and so on. Information output includes
    the variable’s type, value, and, if an object, all public, private, and protected
    properties of the object. Arrays’ and objects’ contents are output in a recursive
    fashion.
  prefs: []
  type: TYPE_NORMAL
- en: var_export
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`mixed var_export(mixed` *expression*`[, bool` *variable_representation*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the PHP code representation of *expression*. If *variable_representation*
    is set and is `true`, *expression*’s actual value is returned.
  prefs: []
  type: TYPE_NORMAL
- en: version_compare
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`mixed version_compare(string` *one*`, string` *two*`[, string` *operator*`])`'
  prefs: []
  type: TYPE_NORMAL
- en: Compares two version strings and returns `−1` if *one* is less than *two*, `0`
    if they are equal, and `1` if *one* is greater than *two*. The version strings
    are split into each numeric or string part, then compared as *string_value* `<
    "dev" < "alpha"` or `"a" < "beta"` or `"b" < "rc" <` *numeric_value* `< "pl"`
    or `"p"`.
  prefs: []
  type: TYPE_NORMAL
- en: If *operator* is specified, the operator is used to make a comparison between
    the version strings, and the value of the comparison using that operator is returned.
    The possible operators are `<` or `lt`; `<=` or `le`; `>` or `gt`; `>=` or `ge`;
    `==`, `=`, or `eq`; and `!=`, `<>`, and `ne`.
  prefs: []
  type: TYPE_NORMAL
- en: vfprintf
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int vfprintf(resource` *stream*`, string` *format*`, array` *values*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Writes a string created by filling *format* with the arguments given in the
    array *values* to the stream *stream* and returns the length of the string sent.
    See `printf()` for more information on using this function.
  prefs: []
  type: TYPE_NORMAL
- en: vprintf
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`void vprintf(string` *format*`, array` *values*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Prints a string created by filling *format* with the arguments given in the
    array *values*. See `printf()` for more information on using this function.
  prefs: []
  type: TYPE_NORMAL
- en: vsprintf
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string vsprintf(string` *format*`, array` *values*`)`'
  prefs: []
  type: TYPE_NORMAL
- en: Creates and returns a string created by filling *format* with the arguments
    given in the array *values*. See `printf()` for more information on using this
    function.
  prefs: []
  type: TYPE_NORMAL
- en: wordwrap
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string wordwrap(string` *string*`[, int` *length*`[, string` *postfix*`[,
    bool` *force*`]]])`'
  prefs: []
  type: TYPE_NORMAL
- en: Inserts *postfix* into *string* every *length* characters and at the end of
    the string and returns the resulting string. While inserting breaks, the function
    attempts to not break in the middle of a word. If not specified, *postfix* defaults
    to `\n` and *size* defaults to `75`. If *force* is given and is `true`, the string
    is always wrapped to the given length (this makes the function behave the same
    as `chunk_split()`).
  prefs: []
  type: TYPE_NORMAL
- en: zend_thread_id
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`int zend_thread_id()`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns a unique identifier for the thread of the currently running PHP process.
  prefs: []
  type: TYPE_NORMAL
- en: zend_version
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`string zend_version()`'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the version of the Zend engine in the currently running PHP process.
  prefs: []
  type: TYPE_NORMAL
