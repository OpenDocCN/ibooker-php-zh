- en: Chapter 17\. Debugging PHP
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第17章。PHP调试
- en: Debugging is an acquired skill. As is often said in the development world, “You
    are given all the rope you should ever need; just attempt to tie a pretty bow
    with it rather than getting yourself hanged.” It naturally stands to reason that
    the more debugging you do, the more proficient you will become. Of course, you
    will also get some excellent hints from your server environment when your code
    does not deliver what you were expecting. Before we get too deep into debugging
    concepts, however, we need to look at the bigger picture and discuss these programming
    environments. Every development shop has its own setup and its own way of doing
    things, so what we’ll be covering here reflects the ideal conditions, also known
    as best practices.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 调试是一种获得的技能。正如在开发界经常说的，“你被给予了你所需的所有绳索；只是试图用它打个漂亮的蝴蝶结而不是让自己被绞死。” 很自然地可以推断，您进行的调试越多，您将变得越熟练。当然，当您的代码未能达到预期时，您的服务器环境也会为您提供一些很好的提示。然而，在深入讨论调试概念之前，我们需要看看更大的画面，并讨论这些编程环境。每个开发店铺都有自己的设置和做事方式，因此我们将在此处涵盖的内容反映了理想条件，也称为最佳实践。
- en: 'PHP development in a utopian world has at least three separate environments
    in which work is being done: development, staging, and production. We’ll explore
    each in turn in the following sections.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在理想的世界中，PHP开发至少有三种单独的环境进行工作：开发、演示和生产。我们将在接下来的部分逐一探讨每一个。
- en: The Development Environment
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发环境
- en: The development environment is a place where the raw code is created without
    fear of server crashes or peer ridicule. This should be a place where concepts
    and theories are proven or disproven, where code can be created experimentally.
    Therefore, the error-reporting environmental feedback should be as verbose as
    possible. All error reporting should be logged and at the same time also sent
    to the output device (the browser). All warnings should be as sensitive and descriptive
    as possible.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 开发环境是一个可以在其中创建原始代码而无需担心服务器崩溃或同行嘲笑的地方。这应该是验证或证伪概念和理论、可以实验性地创建代码的地方。因此，错误报告的环境反馈应尽可能详尽。所有错误报告都应记录，并同时发送到输出设备（浏览器）。所有警告应尽可能敏感和详细。
- en: Note
  id: totrans-5
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Later in this chapter, [Table 17-1](#php_error_directives_for_server_environ)
    compares the recommended server settings for each of the three environments as
    it relates to debugging and error reporting.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章稍后的部分，将会比较每个三种环境下关于调试和错误报告相关的推荐服务器设置，[表17-1](#php_error_directives_for_server_environ)。
- en: The location of this development environment can be debated. However, if your
    company has the resources, then a separate server should be established for this
    purpose with full code management (e.g., SVN, aka Subversion, or Git) in place.
    If the resources are not available, then a development PC can serve this purpose
    via a `localhost`-style setup. This `localhost` environment can be advantageous
    in and of itself in the sense that you may want to try something completely off-the-wall,
    and by coding on a standalone PC you can be fully experimental without affecting
    a common development server or anyone else’s code base.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 可以辩论这个开发环境的位置。但是，如果您的公司有资源，那么应该建立一个专用服务器，用于这一目的，并建立完整的代码管理（例如SVN，即Subversion，或Git）。如果资源不足，则可以通过`localhost`风格的设置使用开发PC来完成此目的。从这个`localhost`环境本身来看，这可以是有利的，因为您可能想尝试一些完全不同寻常的东西，通过在独立的PC上编码，您可以完全实验性地进行，而不会影响常用开发服务器或任何其他人的代码库。
- en: You can create `localhost` environments with the Apache web server, or Microsoft’s
    Internet Information Services (IIS), as a manual process. There are a few all-in-one
    environments that can be utilized as well; Zend Server CE (Community Edition)
    is a great example.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用Apache Web服务器或Microsoft的Internet Information Services (IIS)手动创建`localhost`环境。也有一些可以使用的一体化环境；Zend
    Server CE（社区版）是一个很好的例子。
- en: No matter what setup you have for raw development, be sure to give your developers
    full freedom to do what they want without fear of reprimand. This gives them the
    confidence to be as innovative as possible, and no one gets “hurt.”
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您为原始开发设置了什么，都要确保给予开发人员充分的自由，让他们无需担心受到责备而可以自由发挥。这样可以增强他们创新的信心，而且没有人会“受伤”。
- en: Note
  id: totrans-10
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: There are at least two alternatives to setting up a local environment on your
    own PC. The first one is, as of PHP 5.4, a [built-in web server](http://bit.ly/TI0xTU).
    This option saves on downloading and installing full Apache or IIS web server
    products for `localhost` purposes.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 至少有两种在您自己的PC上设置本地环境的替代方法。第一种是，从PHP 5.4开始，有一个[内置的Web服务器](http://bit.ly/TI0xTU)。这个选项节省了下载和安装完整Apache或IIS
    Web服务器产品以用于`localhost`目的的时间。
- en: Second, there are now hosts (pun intended) of sites that allow for cloud development.
    [Zend](http://www.phpcloud.com) offers one for free as a testing and development
    environment.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 第二，现在有许多允许云端开发的站点（名字有点双关）。[Zend](http://www.phpcloud.com)提供了一个免费的测试和开发环境。
- en: The Staging Environment
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 暂存环境
- en: The staging environment should mimic the production environment as closely as
    possible. Although this is sometimes hard to achieve, the more closely you can
    mimic the production environment, the better. You will be able to see how your
    code reacts in an area that is protected but also simulates the real production
    environment. The staging environment is often where the end user or client can
    test out new features or functionality, giving feedback and stress-testing code,
    without fear of affecting production code.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 暂存环境应尽可能地模仿生产环境。尽管这有时很难实现，但您模仿生产环境越接近，效果就越好。您将能够看到您的代码在一个受保护但也模拟真实生产环境的区域中的反应。暂存环境通常是最终用户或客户可以测试新功能或功能的地方，提供反馈并对代码进行压力测试，而不用担心影响生产代码。
- en: Note
  id: totrans-15
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: As testing and experimentation progress, your staging area (at least from a
    data perspective) will eventually grow more distinct from the production environment.
    So it is a good practice to have procedures in place that will replace the staging
    area with production information from time to time. The set times will be different
    for each company or development shop depending on features being created, release
    cycles, and so on.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 随着测试和实验的进展，您的暂存区域（至少从数据的角度来看）最终会与生产环境变得更加不同。因此，建立定期用生产信息替换暂存区域的程序是一个好习惯。不同公司或开发商的设置时间会因所创建的功能、发布周期等因素而异。
- en: 'If resources permit, you should consider having two separate staging environments:
    one for developers (coding peers) and the other for client testing. Feedback from
    these two types of users is quite often very different and very telling. Server
    error reporting and feedback should be kept to a minimum here as well, to duplicate
    production as closely as possible.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果资源允许，您应该考虑有两个独立的暂存环境：一个供开发者（编码同行）使用，另一个供客户测试使用。来自这两种用户的反馈往往非常不同且非常有价值。这里的服务器错误报告和反馈也应该尽量减少，以尽可能地模拟生产环境。
- en: The Production Environment
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生产环境
- en: The production environment, from an error-reporting perspective, needs to be
    as tightly controlled as possible. You want to fully control what the end user
    sees and experiences. Things like SQL failures and code syntax warnings should
    never be seen by the client, if at all possible. Your code base, of course, should
    be well mitigated by this time (assuming you’ve been using the two aforementioned
    environments properly and religiously), but sometimes errors and bugs can still
    get through to production. If you’re going to fail in production, you want to
    fail as gracefully and as *quietly* as possible.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 从错误报告的角度来看，生产环境需要尽可能严格地控制。您希望完全控制最终用户看到和体验到的内容。如果可能的话，不应让客户看到像SQL失败和代码语法警告这样的东西。当然，您的代码库在此时应该已经做好了充分的缓解措施（假设您已经正确而虔诚地使用了前述的两个环境），但有时错误和漏洞仍可能出现在生产中。如果在生产中出现问题，您希望以尽可能优雅和*安静*的方式失败。
- en: Note
  id: totrans-20
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Consider using 404 page redirects and `try...catch` structures to redirect errors
    and failures to a safe landing area in the production environment. See [Chapter 2](ch02.xhtml#language_basics)
    for proper coding styles of the `try...catch` syntax.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑使用404页面重定向和`try...catch`结构，将错误和失败重定向到生产环境中的安全着陆区域。参见[第2章](ch02.xhtml#language_basics)了解`try...catch`语法的正确编码风格。
- en: At the very least, all error reporting should be suppressed and sent to the
    logfiles in the production environment.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 至少，所有的错误报告都应该在生产环境中被抑制并发送到日志文件中。
- en: php.ini Settings
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: php.ini设置
- en: There are a few environment-wide settings to consider for each type of server
    you’re using to develop your code. First, we’ll offer a brief summary of what
    these are, and then we’ll list the recommended settings for each of the three
    coding environments.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要考虑每种服务器类型的全局环境设置以开发您的代码。首先，我们将简要总结这些设置，然后列出每种编码环境的推荐设置。
- en: '`display_errors`'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`display_errors`'
- en: An on-off toggle that controls the display of any errors encountered by PHP.
    This should be set to `0` (off) for production environments.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 控制 PHP 遇到任何错误时显示的开关。在生产环境中应设置为`0`（关闭）。
- en: '`error_reporting`'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`error_reporting`'
- en: This is a setting of predefined constants that will report to the error log
    and/or the web browser any errors that PHP encounters. There are 16 different
    individual constants that can be set within this directive, and certain ones can
    be used collectively. The most common ones are `E_ALL`, for reporting all errors
    and warnings of any kind; `E_WARNING`, for only showing warnings (nonfatal errors)
    to the browser; and `E_DEPRECATED`, to display runtime notice warnings about code
    that will fail in future versions of PHP because some functionality is scheduled
    to be ended (like `register_globals` was). An example of these being used in combination
    is `E_ALL & ~E_NOTICE`, which tells PHP to report all errors except the generated
    notices. A full listing of these defined constants can be found on the [PHP website](https://oreil.ly/N2AaV).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一组预定义常量的设置，将向错误日志和/或 Web 浏览器报告 PHP 遇到的任何错误。此指令可以设置 16 种不同的单独常量，并且某些常量可以集体使用。最常见的是
    `E_ALL`，用于报告所有类型的错误和警告；`E_WARNING`，仅向浏览器显示警告（非致命错误）；以及 `E_DEPRECATED`，用于显示关于将来版本中将会失败的代码的运行时通知警告（例如
    `register_globals`）。这些常量的组合使用示例是 `E_ALL & ~E_NOTICE`，它告诉 PHP 报告除生成通知外的所有错误。可以在
    [PHP 网站](https://oreil.ly/N2AaV) 找到所有这些定义常量的完整列表。
- en: '`error_log`'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`error_log`'
- en: The path to the location of the error log. The error log is a text-based file
    located on the server at the path location that records all errors in text form.
    This could be *apache2/logs* in the case of an Apache server.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 错误日志的存储位置路径。错误日志是位于服务器上的文本文件，记录以文本形式出现的所有错误。例如，在 Apache 服务器中可能是 *apache2/logs*。
- en: '`variables_order`'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`variables_order`'
- en: Sets the order of precedence in which the superglobal arrays are loaded with
    information. The default order is `EGPCS`, meaning the environment (`$_ENV`) array
    is loaded first, then the `GET` (`$_GET`) array, then the `POST` (`$_POST`) array,
    then the cookie (`$_COOKIE`) array, and finally the server (`$_SERVER`) array.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 设置超全局数组加载信息的优先顺序。默认顺序为 `EGPCS`，即首先加载环境（`$_ENV`）数组，然后是 `GET`（`$_GET`）数组，接着是 `POST`（`$_POST`）数组，然后是
    cookie（`$_COOKIE`）数组，最后是服务器（`$_SERVER`）数组。
- en: '`request_order`'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`request_order`'
- en: Describes the order in which PHP registers `GET`, `POST`, and cookie variables
    into the `$_REQUEST` array. Registration is done from left to right, and newer
    values override older values.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 描述 PHP 将 `GET`、`POST` 和 cookie 变量注册到 `$_REQUEST` 数组中的顺序。注册是从左到右进行的，较新的值会覆盖较旧的值。
- en: '`zend.assertions`'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`zend.assertions`'
- en: Determines whether assertions are run and throw errors. When disabled, the conditions
    in calls to `assert()` are never run (thus, any side effects they might have do
    not happen).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 确定是否运行断言并抛出错误。当禁用时，调用 `assert()` 中的条件永不运行（因此，它们可能产生的任何副作用都不会发生）。
- en: '`assert.exception`'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`assert.exception`'
- en: Determines whether the exception system is enabled. By default, this is on in
    both development and production environments, and is generally the preferred way
    to handle error conditions.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 确定是否启用异常系统。默认情况下，在开发和生产环境中都是开启的，并且通常是处理错误条件的首选方式。
- en: Additional settings can be used as well; for example, you can use `ignore_repeated_errors`
    if you are concerned with your logfile getting too large. This directive can suppress
    repeating errors being logged, but only from the same line of code in the same
    file. This could be useful if you are debugging a looping section of code and
    an error is occurring somewhere within it.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以使用其他设置；例如，如果担心日志文件过大，可以使用`ignore_repeated_errors`。该指令可以抑制相同代码行中重复记录的错误，但仅限于同一文件中的同一行。如果您正在调试代码的循环部分并且其中某处发生错误，这可能会很有用。
- en: 'PHP also allows you to alter certain INI settings from their server-wide settings
    during the execution of your code. This can be a quick way to turn on some error
    reporting and display the results on screen, but it is still not recommended in
    a production environment. You could do this in the staging environment if desired.
    One example is to turn on all the error reporting and display any reported errors
    to the browser in a single suspect file. To do so, insert the following two commands
    at the top of the file:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: PHP 还允许您在代码执行期间修改某些 INI 设置，从而改变其服务器范围的设置。这是在一个疑难文件中打开某些错误报告并将结果显示在屏幕上的快速方法，但在生产环境中仍不建议使用。如果需要，可以在暂存环境中执行此操作。例如，打开所有错误报告并在浏览器中显示任何报告的错误。要执行此操作，请在文件顶部插入以下两个命令：
- en: '[PRE0]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `error_reporting()` function allows you to override the level of reported
    errors, and the `ini_set()` function allows you to change *php.ini* settings.
    Again, not all INI settings can be altered, so be sure to check the [PHP website](https://oreil.ly/ILGqh)
    for what can and cannot be changed at runtime.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`error_reporting()` 函数允许您覆盖报告的错误级别，而 `ini_set()` 函数允许您更改 *php.ini* 设置。再次强调，并非所有INI设置都可以更改，请务必查看
    [PHP 网站](https://oreil.ly/ILGqh) 了解可以和不可以在运行时更改的内容。'
- en: As promised earlier, [Table 17-1](#php_error_directives_for_server_environ)
    lists the PHP directives and their recommendations for each of the three basic
    server environments.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '如前所述，[Table 17-1](#php_error_directives_for_server_environ) 列出了 PHP 指令及其在三种基本服务器环境中的建议。 '
- en: Table 17-1\. PHP error directives for server environments
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Table 17-1\. PHP 服务器环境的错误指令
- en: '| PHP directive | Development | Staging | Production |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| PHP 指令 | 开发 | 暂存 | 生产 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `display_errors` | On | Either setting, depending on desired outcome | Off
    |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| `display_errors` | 打开 | 根据期望结果选择其中一个设置 | 关闭 |'
- en: '| `error_reporting` | `E_ALL` | `E_ALL & ~E_WARNING & ~E_DEPRECATED` | `E_ALL
    & ~E_DEPRECATED & ~E_STRICT` |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| `error_reporting` | `E_ALL` | `E_ALL & ~E_WARNING & ~E_DEPRECATED` | `E_ALL
    & ~E_DEPRECATED & ~E_STRICT` |'
- en: '| `error_log` | */logs* folder | */logs* folder | */logs* folder |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| `error_log` | */logs* 文件夹 | */logs* 文件夹 | */logs* 文件夹 |'
- en: '| `variables_order` | EGPCS | GPCS | GPCS |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| `variables_order` | EGPCS | GPCS | GPCS |'
- en: '| `request_order` | GP | GP | GP |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| `request_order` | GP | GP | GP |'
- en: Error Handling
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 错误处理
- en: Error handling is an important part of any real-world application. PHP provides
    a number of mechanisms that you can use to handle errors, both during the development
    process and once your application is in a production environment.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 错误处理是任何实际应用的重要部分。PHP 提供了多种机制，可用于处理错误，无论是在开发过程中还是应用在生产环境中。
- en: Error Reporting
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 错误报告
- en: Normally, when an error occurs in a PHP script, the error message is inserted
    into the script’s output. If the error is fatal, the script execution stops.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，当 PHP 脚本发生错误时，错误消息会插入到脚本的输出中。如果错误是致命的，则脚本执行会停止。
- en: 'There are three levels of conditions: notices, warnings, and errors. A *notice*
    that occurs during a script’s execution might indicate an error, but it could
    also occur during normal execution (e.g., a script trying to access a variable
    that has not been set). A *warning* indicates a nonfatal error condition; typically,
    warnings are displayed when you call a function with invalid arguments. Scripts
    will continue executing after issuing a warning. An *error* indicates a fatal
    condition from which the script cannot recover. A *parse error* is a specific
    kind of error that occurs when a script is syntactically incorrect. All errors
    except parse errors are runtime errors.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 条件有三个级别：通知、警告和错误。脚本执行中发生的 *通知* 可能表明错误，但也可能在正常执行过程中发生（例如，脚本尝试访问尚未设置的变量）。*警告*
    表示非致命错误条件；通常在调用具有无效参数的函数时显示警告。发出警告后，脚本将继续执行。*错误* 表示脚本无法恢复的致命条件。*解析错误* 是一种特定类型的错误，当脚本语法错误时发生。除解析错误外，所有错误均为运行时错误。
- en: It’s recommended that you treat all notices, warnings, and errors as if they
    were errors; this helps prevent mistakes such as using variables before they have
    legitimate values.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 建议将所有通知、警告和错误视为错误处理；这有助于防止诸如在变量具有合法值之前使用它们等错误。
- en: By default, all conditions except runtime notices are caught and displayed to
    the user. You can change this behavior globally in your *php.ini* file with the
    `error_reporting` option. You can also locally change the error-reporting behavior
    in a script using the `error_reporting()` function.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，除了运行时通知外的所有条件都会被捕获并显示给用户。您可以在*php.ini*文件中全局更改此行为，使用`error_reporting`选项。您还可以在脚本中使用`error_reporting()`函数局部更改错误报告行为。
- en: 'With both the `error_reporting` option and the `error_reporting()` function,
    you specify the conditions that are caught and displayed by using the various
    bitwise operators to combine different constant values, as listed in [Table 17-2](#error_reporting_values).
    For example, this indicates all error-level options:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`error_reporting`选项和`error_reporting()`函数，您可以使用不同的位操作符将各种常量值组合起来指定要捕获和显示的条件，如[表17-2](#error_reporting_values)中所列。例如，这表示所有错误级别选项：
- en: '[PRE1]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'while this indicates all options except runtime notices:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这表示除运行时通知外的所有选项：
- en: '[PRE2]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If you set the `track_errors` option on in your *php.ini* file, a description
    of the current error is stored in `$PHP_ERRORMSG`.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在你的*php.ini*文件中设置了`track_errors`选项，当前错误的描述将存储在`$PHP_ERRORMSG`中。
- en: Table 17-2\. Error-reporting values
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 表17-2\. 错误报告值
- en: '| Value | Meaning |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| Value | Meaning |'
- en: '| --- | --- |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `E_ERROR` | Runtime errors |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| `E_ERROR` | 运行时错误 |'
- en: '| `E_WARNING` | Runtime warnings |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| `E_WARNING` | 运行时警告 |'
- en: '| `E_PARSE` | Compile-time parse errors |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| `E_PARSE` | 编译时解析错误 |'
- en: '| `E_NOTICE` | Runtime notices |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| `E_NOTICE` | 运行时通知 |'
- en: '| `E_CORE_ERROR` | Errors generated internally by PHP |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| `E_CORE_ERROR` | PHP内部生成的错误 |'
- en: '| `E_CORE_WARNING` | Warnings generated internally by PHP |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| `E_CORE_WARNING` | PHP内部生成的警告 |'
- en: '| `E_COMPILE_ERROR` | Errors generated internally by the Zend scripting engine
    |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| `E_COMPILE_ERROR` | Zend脚本引擎内部生成的错误 |'
- en: '| `E_COMPILE_WARNING` | Warnings generated internally by the Zend scripting
    engine |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| `E_COMPILE_WARNING` | Zend脚本引擎内部生成的警告 |'
- en: '| `E_USER_ERROR` | Runtime errors generated by a call to `trigger_error()`
    |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| `E_USER_ERROR` | 通过调用`trigger_error()`生成的运行时错误 |'
- en: '| `E_USER_WARNING` | Runtime warnings generated by a call to `trigger_error()`
    |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| `E_USER_WARNING` | 通过调用`trigger_error()`生成的运行时警告 |'
- en: '| `E_USER_NOTICE` | Runtime notices generated by a call to `trigger_error()`
    |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| `E_USER_NOTICE` | 通过调用`trigger_error()`生成的运行时通知 |'
- en: '| `E_ALL` | All of the above options |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| `E_ALL` | 上述所有选项 |'
- en: Exceptions
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 异常
- en: Many PHP functions now throw exceptions instead of fatally exiting operation.
    Exceptions allow a script to continue execution even after an error—when the exception
    occurs, an object that’s a subclass of the `BaseException` class is created, then
    thrown. A thrown exception must be “caught” by code following the throwing code.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，许多PHP函数抛出异常而不是致命退出操作。异常允许脚本在出现错误后继续执行——当异常发生时，会创建一个`BaseException`类的子类对象，然后抛出。抛出的异常必须由跟随抛出代码的代码“捕获”。
- en: '[PRE3]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You should include an exception handler to catch exceptions from any method
    that throws them. Any uncaught exceptions will cause the script to cease execution.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该包含一个异常处理程序来捕获任何抛出异常的方法中的异常。任何未捕获的异常都会导致脚本停止执行。
- en: Error Suppression
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 错误抑制
- en: 'You can disable error messages for a single expression by putting the error
    suppression operator `@` before the expression. For example:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过在表达式之前放置错误抑制运算符`@`来禁用单个表达式的错误消息。例如：
- en: '[PRE4]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Without the error suppression operator, the expression would normally halt execution
    of the script with a “divide by zero” error. As shown here, the expression does
    nothing, although in other cases, your program might be in an unknown state if
    you simply ignore errors that would otherwise cause the program to halt. The error
    suppression operator cannot trap parse errors, only the various types of runtime
    errors.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 没有错误抑制运算符，表达式通常会因“除以零”错误而停止脚本的执行。如下所示，该表达式什么也不做，尽管在其他情况下，如果简单地忽略本应使程序停止的错误，则你的程序可能处于未知状态。错误抑制运算符不能捕获解析错误，只能捕获各种类型的运行时错误。
- en: Of course, the downside to suppressing errors is that you won’t know they’re
    there. You’re much better off handling potential error conditions properly; see
    “Triggering Errors” for an example.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，抑制错误的缺点是你不会知道它们的存在。最好正确处理潜在的错误条件；例如，查看“触发错误”中的示例。
- en: 'To turn off error reporting entirely, use:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 要完全关闭错误报告，请使用：
- en: '[PRE5]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This function ensures that, regardless of the errors PHP encounters while processing
    and executing your script, no errors will be sent to the client (except parse
    errors, which cannot be suppressed). Of course, it doesn’t stop those errors from
    occurring. Better options for controlling which error messages are displayed in
    the client are shown in the section “Defining Error Handlers”.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数确保无论PHP在处理和执行脚本时遇到什么错误，都不会将错误发送给客户端（除了无法被抑制的解析错误）。当然，这并不能阻止这些错误的发生。更好的控制客户端显示哪些错误消息的选项在“定义错误处理程序”部分中展示。
- en: Triggering Errors
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 触发错误
- en: 'You can throw an error from within a script with the `assertion()` function:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`assertion()`函数从脚本中抛出错误：
- en: '[PRE6]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The first parameter is the condition that must be `true` to not trigger the
    assertion; the second (optional) parameter is the message.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数是必须为`true`以不触发断言的条件；第二个（可选）参数是消息。
- en: 'Triggering errors is useful when you’re writing your own functions for sanity-checking
    the parameters. For example, here’s a function that divides one number by another
    and throws an error if the second parameter is `0`:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 当您编写自己的函数来检查参数的健全性时，触发错误是很有用的。例如，这里有一个函数，它将一个数字除以另一个数字，并在第二个参数为`0`时抛出错误：
- en: '[PRE7]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'When a call to `assert()` is triggered, an `AssertionException`—an exception
    extending `ErrorException` with a severity of `E_ERROR`—is thrown. In some cases,
    you might want to throw an error of a type that extends `AssertionException`.
    You can do so by providing an exception as the message parameter instead of a
    string:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用`assert()`时触发时，会抛出一个`AssertionException`——一个扩展了`ErrorException`且严重性为`E_ERROR`的异常。在某些情况下，您可能希望抛出一个扩展`AssertionException`类型的错误。您可以通过将异常作为消息参数而不是字符串来实现：
- en: '[PRE8]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Defining Error Handlers
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义错误处理程序
- en: If you want better error control than just hiding any errors (and you usually
    do), you can supply PHP with an error handler. The error handler is called when
    a condition of any kind is encountered, and can do anything you want it to, from
    logging information to a file to pretty-printing the error message. The basic
    process is to create an error-handling function and register it with `set_error_handler()`.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望比仅仅隐藏任何错误更好地控制错误（通常是这样），您可以提供PHP一个错误处理程序。当遇到任何种类的条件时，将调用错误处理程序，并且可以执行您希望执行的任何操作，从将信息记录到文件到漂亮地打印错误消息。基本过程是创建一个错误处理函数并使用`set_error_handler()`注册它。
- en: The function you declare can take in either two or five parameters. The first
    two parameters are the error code and a string describing the error. The final
    three parameters, if your function accepts them, are the filename in which the
    error occurred, the line number at which the error occurred, and a copy of the
    active symbol table at the time the error occurred. Your error handler should
    check the current level of errors being reported with `error_reporting()` and
    act appropriately.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 您声明的函数可以接受两个或五个参数。前两个参数是错误代码和描述错误的字符串。如果您的函数接受它们，最后三个参数是发生错误的文件名、错误发生的行号以及错误发生时的活动符号表的副本。您的错误处理程序应该使用`error_reporting()`检查当前报告的错误级别，并相应地采取行动。
- en: The call to `set_error_handler()` returns the current error handler. You can
    restore the previous error handler either by calling `set_error_handler()` with
    the returned value when your script is done with its own error handler, or by
    calling the `restore_error_handler()` function.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 调用`set_error_handler()`会返回当前的错误处理程序。当您的脚本使用完自己的错误处理程序时，可以通过使用返回的值调用`set_error_handler()`来恢复先前的错误处理程序，或者通过调用`restore_error_handler()`函数来恢复。
- en: 'The following code shows how to use an error handler to format and print errors:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码显示了如何使用错误处理程序格式化和打印错误：
- en: '[PRE9]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Logging in error handlers
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在错误处理程序中记录
- en: 'PHP provides the built-in function `error_log()` to log errors to the myriad
    places where administrators like to put them:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: PHP提供了内置函数`error_log()`来将错误记录到管理员喜欢放置它们的各种地方：
- en: '[PRE10]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The first parameter is the error message. The second parameter specifies where
    the error is logged: a value of `0` logs the error via PHP’s standard error-logging
    mechanism; a value of `1` emails the error to the *destination* address, optionally
    adding any *extra_headers* to the message; a value of `3` appends the error to
    the *destination* file.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数是错误消息。第二个参数指定错误记录的位置：`0` 的值通过PHP的标准错误记录机制记录错误；`1` 的值将错误电邮发送至*目标*地址，可选地添加任何*额外的头部*到消息；`3`
    的值将错误追加到*目标*文件中。
- en: 'To save an error using PHP’s logging mechanism, call `error_log()` with a type
    of `0`. By changing the value of `error_log` in your *php.ini* file, you can change
    which file to log into. If you set `error_log` to `syslog`, the system logger
    is used instead. For example:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用PHP的日志记录机制保存错误，请调用`error_log()`并使用类型`0`。通过更改*php.ini*文件中的`error_log`值，您可以更改要记录的文件。如果将`error_log`设置为`syslog`，则将使用系统记录器。例如：
- en: '[PRE11]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'To send an error via email, call `error_log()` with a type of `1`. The third
    parameter is the email address to which to send the error message, and an optional
    fourth parameter can be used to specify additional email headers. Here’s how to
    send an error message by email:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 要通过电子邮件发送错误，请调用`error_log()`并使用类型`1`。第三个参数是要发送错误消息的电子邮件地址，可选的第四个参数可用于指定附加的电子邮件头。以下是通过电子邮件发送错误消息的方法：
- en: '[PRE12]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Finally, to log to a file, call `error_log()` with a type of `3`. The third
    parameter specifies the name of the file to log into:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，要记录到文件中，请调用`error_log()`并使用类型`3`。第三个参数指定要记录的文件名：
- en: '[PRE13]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[Example 17-1](#example_oneseven_onedot_log_rolling_err) shows an example of
    an error handler that writes logs into a file and rotates the logfile when it
    gets above 1 KB.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 17-1](#example_oneseven_onedot_log_rolling_err)展示了一个将日志写入文件并在日志文件超过1 KB时进行轮换的错误处理程序示例。'
- en: Example 17-1\. Log-rolling error handler
  id: totrans-116
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 17-1\. 日志滚动错误处理程序
- en: '[PRE14]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Generally, while you are working on a site, you will want errors shown directly
    in the pages in which they occur. However, once the site goes live, it doesn’t
    make much sense to show internal error messages to visitors. A common approach
    is to use something like this in your *php.ini* file once your site goes live:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，在您网站上工作时，您希望直接在出错的页面上显示错误。然而，一旦网站上线，向访问者显示内部错误消息就没有太多意义了。一个常见的方法是在您的*php.ini*文件中使用以下内容，一旦您的网站上线：
- en: '[PRE15]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This tells PHP to never show any errors, but instead to log them to the location
    specified by the `error_log` directive.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这告诉PHP永远不显示任何错误，而是将它们记录到`error_log`指令指定的位置。
- en: Output buffering in error handlers
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 错误处理程序中的输出缓冲
- en: Using a combination of output buffering and an error handler, you can send different
    content to the user depending on whether various error conditions occur. For example,
    if a script needs to connect to a database, you can suppress output of the page
    until the script successfully connects to the database.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 使用输出缓冲和错误处理程序的组合，可以根据各种错误条件发送不同的内容给用户。例如，如果脚本需要连接到数据库，则可以在脚本成功连接到数据库之前抑制页面的输出。
- en: '[Example 17-2](#example_oneseven_twodot_output_bufferin) shows the use of output
    buffering to delay output of a page until it has been generated successfully.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 17-2](#example_oneseven_twodot_output_bufferin)展示了使用输出缓冲来延迟页面输出，直到成功生成页面为止。'
- en: Example 17-2\. Output buffering to handle errors
  id: totrans-124
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 17-2\. 输出缓冲以处理错误
- en: '[PRE16]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In [Example 17-2](#example_oneseven_twodot_output_bufferin), after we start
    the `<body>` element, we register the error handler and begin output buffering.
    If we cannot connect to the database (or if anything else goes wrong in the subsequent
    PHP code), the heading and table are not displayed. Instead, the user sees only
    the error message. If no errors are raised by the PHP code, however, the user
    simply sees the HTML page.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在[示例 17-2](#example_oneseven_twodot_output_bufferin)中，我们在开始`<body>`元素后注册错误处理程序并开始输出缓冲。如果无法连接到数据库（或在随后的PHP代码中发生任何其他错误），则不显示标题和表格。用户只会看到错误消息。但是，如果PHP代码没有引发错误，用户将只看到HTML页面。
- en: Manual Debugging
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 手动调试
- en: Once you get a few good years of development time under your belt, you should
    be able to get at least 75% of your debugging done on a purely visual basis. What
    of the other 25%, and the more difficult segments of code that you need to work
    through? You can tackle some of it by using a great code development environment
    like Zend Studio for Eclipse or Komodo. These advanced IDEs can help with syntax
    checking and some simple logical problems and warnings.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您有了几年的开发经验，您应该能够至少通过纯视觉方式完成至少75%的调试工作。另外的25%和您需要解决的更困难的代码段呢？您可以通过使用像Zend Studio
    for Eclipse或Komodo这样的优秀代码开发环境来解决一些问题。这些先进的IDE可以帮助进行语法检查和一些简单的逻辑问题和警告。
- en: 'You can do the next level of debugging (again, you’ll do most of this in the
    development environment) by echoing values out onto the screen. This will catch
    a lot of logic errors that may be dependent on the contents of variables. For
    example, how would you be able to easily see the value of the third iteration
    of a `for...next` loop? Consider the following code:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过将值 `echo` 到屏幕上完成下一级别的调试（再次强调，大部分工作将在开发环境中完成）。这将捕捉依赖于变量内容的许多逻辑错误。例如，您如何轻松地查看
    `for...next` 循环的第三次迭代的值？考虑以下代码：
- en: '[PRE17]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The easiest way is to interrupt the loop conditionally and `echo` out the value
    at the time; alternatively, you can wait until the loop is completed, as in this
    case since the loop is building an array. Here are some examples of how to determine
    that third iteration value (remember that array keys start with 0):'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的方法是在循环有条件地中断并 `echo` 出该时间的值；或者，您可以等待循环完成，就像在本例中一样，因为循环正在构建一个数组。以下是确定第三次迭代值的示例（请记住数组键从0开始）：
- en: '[PRE18]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Here we are simply inserting a test (`if` statement) that will send a particular
    value to the browser when that condition is met. If you are having SQL syntax
    problems or failures, you can also `echo` the raw statement out to the browser
    and copy it into the SQL interface (*phpMyAdmin*, for example) and execute the
    code that way to see if any SQL error messages are returned.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们只是简单地插入一个测试（`if` 语句），当满足条件时，将特定值发送到浏览器。如果您遇到 SQL 语法问题或失败，您还可以将原始语句 `echo`
    到浏览器中，并将其复制到 SQL 界面（例如 *phpMyAdmin*）中执行代码，以查看是否返回任何 SQL 错误消息。
- en: If we want to see the entire array at the end of this loop, and what values
    it contains in each of its elements, we can still use the `echo` statement, but
    it would be tedious and cumbersome to write `echo` statements for each one. Rather,
    we can use the `var_dump()` function. The extra advantage of `var_dump()` is that
    it also tells us the data type of each element of the array. The output is not
    necessarily pretty, but it is informative. You can copy the output into a text
    editor and use it to clean up the look of the output.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要在循环结束时查看整个数组以及每个元素包含的值，我们仍然可以使用 `echo` 语句，但为每个元素编写 `echo` 语句会很麻烦和复杂。相反，我们可以使用
    `var_dump()` 函数。`var_dump()` 的额外优势是它还告诉我们数组每个元素的数据类型。输出不一定漂亮，但信息丰富。您可以将输出复制到文本编辑器中，并用其清理输出的外观。
- en: 'Of course you can use `echo` and `var_dump()` in concert as the need arises.
    Here is an example of the raw `var_dump()` output:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你可以根据需要同时使用 `echo` 和 `var_dump()`。以下是 `var_dump()` 原始输出的示例：
- en: '[PRE19]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Note
  id: totrans-137
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: 'There are two other ways to send simple data to the browser: the `print` language
    construct and the `print_r()` function. `print` is merely an alternative to `echo`
    (except that it returns a value of `1`), while `print_r()` sends information to
    the browser in a human-readable format. You can think of `print_r()` as an alternative
    to `var_dump()`, except that the output on an array would not send out each element’s
    data type. The output for this code:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 发送简单数据到浏览器有另外两种方法：`print` 语言结构和 `print_r()` 函数。`print` 只是 `echo` 的另一种选择（除了返回
    `1` 的值），而 `print_r()` 以人类可读的格式将信息发送到浏览器。可以将 `print_r()` 看作是 `var_dump()` 的替代品，不过在数组的输出时不会显示每个元素的数据类型。此代码的输出如下：
- en: '[PRE20]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'would look like this (notice the formatting accomplished by the `<pre>` tags):'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 如下所示（请注意由 `<pre>` 标签完成的格式化）：
- en: '[PRE21]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Error Logs
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 错误日志
- en: 'You will find many helpful descriptions in the error logfile. As mentioned
    previously, you should be able to locate the file under the web server’s installation
    folder in a folder called *logs*. You should make it part of your debugging routine
    to check this file for helpful clues as to what might be amiss. Here is just a
    sample of the verbosity of an error logfile:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在错误日志文件中找到许多有用的描述。如前所述，您应该能够在名为 *logs* 的文件夹中找到位于 Web 服务器安装文件夹下的文件。将检查此文件作为调试例行程序的一部分，以获取有关可能出现问题的提示。以下是错误日志文件详细信息的样本：
- en: '[PRE22]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: As you can see, there are a few different types of errors being reported here—notices,
    warnings, deprecation notices, and a fatal error—with their respective timestamps,
    file locations, and the line on which the error occurred.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，此处报告了几种不同类型的错误：通知、警告、弃用通知和致命错误，以及它们各自的时间戳、文件位置和发生错误的行数。
- en: Note
  id: totrans-146
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Depending on your environment, some commercial server space providers do not
    grant access for security reasons, so you may not have access to the logfile.
    Be sure to select a production provider that grants you access to the logfile.
    Additionally, note that the log can be and often is moved outside the web server’s
    installation folder. On Ubuntu, for example, the default is in */var/logs/apache2/*.log*.
    Check the web server’s configuration if you can’t locate the log.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您的环境，一些商业服务器空间提供商出于安全原因不允许访问，因此您可能无法访问日志文件。请确保选择一个可以访问日志文件的生产提供商。此外，请注意日志可能被移出Web服务器的安装文件夹。例如，在Ubuntu上，默认路径是
    */var/logs/apache2/*.log*。如果找不到日志，请检查Web服务器的配置。
- en: IDE Debugging
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IDE调试
- en: For more complex debugging issues, you would be best served to use a debugger
    that can be found in a good integrated development environment (IDE). We will
    be showing you a debug session example with Zend Studio for Eclipse. Other IDEs,
    like Komodo and PhpED, have built-in debuggers, so they can also be used for this
    purpose.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 对于更复杂的调试问题，最好使用可以在良好的集成开发环境（IDE）中找到的调试器。我们将展示使用Zend Studio for Eclipse的调试会话示例。其他如Komodo和PhpED的IDE也内置了调试器，因此也可以用于此目的。
- en: Zend Studio has an entire Debug Perspective setup for debugging purposes, as
    shown in [Figure 17-1](#the_default_debug_perspective_in_zend_s).
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: Zend Studio针对调试目的设置了完整的调试透视图，如图[17-1](#the_default_debug_perspective_in_zend_s)所示。
- en: '![The default Debug Perspective in Zend Studio](Images/php4_1701.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![Zend Studio中的默认调试透视图](Images/php4_1701.png)'
- en: Figure 17-1\. The default Debug Perspective in Zend Studio
  id: totrans-152
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图17-1\. Zend Studio中的默认调试透视图
- en: To get your bearings with this debugger, open the Run menu. It shows all the
    options you can try when in the debug process—stepping into and over code segments,
    running to a cursor location, restarting the session from the beginning, and just
    simply letting your code run until it fails or ends, to name a few.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 要熟悉此调试器，请打开运行菜单。它显示了在调试过程中可以尝试的所有选项——步入和跳过代码段，运行到光标位置，从头重新启动会话，或者简单地让您的代码运行直到失败或结束，等等。
- en: Note
  id: totrans-154
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注
- en: In Zend Studio for Eclipse, you can even debug JavaScript code with the right
    setup!
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在Eclipse中的Zend Studio中，您甚至可以通过正确的设置来调试JavaScript代码！
- en: Check the many debug views in this product as well; you can watch the variables
    (both superglobals and user-defined) as they change over the course of code execution.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 请确保查看本产品中的多个调试视图；您可以在代码执行过程中观察变量（包括超全局变量和用户定义的变量）的变化。
- en: Breakpoints can also be set (and suspended) anywhere in the PHP code, so you
    can run to a certain location in your code and view the overall situation at that
    particular moment. Two other handy views are Debug Output and Browser Output,
    which present the output of the code as the debugger runs through it. The Debug
    Output view presents the output in the format you would see if you had selected
    View Source in a browser, showing the raw HTML as it is being generated. The Browser
    Output view displays the executing code as it would appear in a browser. The neat
    thing about both of these views is that they’re populated as the code executes,
    so if you are stopped at a breakpoint halfway through your code file, they display
    only the information generated up to that point.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在PHP代码中，还可以设置（和暂停）断点，因此您可以运行到代码中的某个位置并查看该特定时刻的整体情况。另外还有两个便利的视图是调试输出和浏览器输出，它们展示了调试器运行时代码的输出情况。调试输出视图以您在浏览器中选择“查看源代码”的格式呈现输出，显示生成的原始HTML。浏览器输出视图显示了代码在浏览器中执行的样子。这两个视图的好处在于它们在代码执行时填充数据，因此如果您在代码文件的中间某处停在断点上，它们只显示生成到那一点的信息。
- en: '[Figure 17-2](#the_debugger_in_action_with_watch_expre) shows an example of
    the sample code from earlier in this chapter (with an added `echo` statement within
    the `for` loop so that you can see the output as it is being created) run in the
    debugger. The two main variables (`$j` and `$sample`) are being tracked in the
    Expressions view, and the Browser Output and Debug Output views display their
    content at a stopped location in the code.'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '[图17-2](#the_debugger_in_action_with_watch_expre) 展示了本章早些时候示例代码（在 `for` 循环中添加了
    `echo` 语句，以便您看到生成的输出）在调试器中运行的示例。主要变量 `$j` 和 `$sample` 在表达式视图中被跟踪，并且浏览器输出和调试输出视图显示了它们在代码中停止位置的内容。'
- en: '![The debugger in action with watch expressions defined](Images/php4_1702.png)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![调试器使用监视表达式定义](Images/php4_1702.png)'
- en: Figure 17-2\. The debugger in action with watch expressions defined
  id: totrans-160
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 17-2\. 调试器在执行时定义的监视表达式
- en: Additional Debugging Techniques
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他调试技术
- en: There are more advanced techniques that can be used for debugging, but they
    are beyond the scope of this chapter. Two such techniques are profiling and unit
    testing. If you have a large web system that requires a lot of server resources,
    you should certainly look into the benefits of these two techniques, as they can
    make your code base more fault-tolerant and efficient.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 有更高级的技术可以用于调试，但超出了本章的范围。两种这样的技术是性能分析和单元测试。如果你有一个需要大量服务器资源的大型网络系统，你应该深入了解这两种技术的好处，因为它们可以使你的代码库更具容错性和效率。
- en: What’s Next
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下一步
- en: Up next, we’ll explore writing Unix and Windows cross-platform scripts, and
    provide a brief introduction to hosting your PHP sites on Windows servers.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将探讨编写 Unix 和 Windows 跨平台脚本，并简要介绍如何在 Windows 服务器上托管你的 PHP 网站。
