- en: Chapter 11\. PDF
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章 PDF
- en: Adobe’s Portable Document Format (PDF) is a popular way to get a consistent
    look, both on screen and in print, for documents. This chapter shows you how to
    dynamically create PDF files with text, graphics, links, and more. Doing so opens
    the door to many applications. You can create almost any kind of business document,
    including form letters, invoices, and receipts. In addition, you can automate
    most paperwork by overlaying text onto a scan of the paper form and saving the
    result as a PDF file.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Adobe的便携式文档格式（PDF）是一种在屏幕和打印输出中获得一致外观的流行方式，本章将向您展示如何动态创建包含文本、图形、链接等内容的PDF文件。这样做将为许多应用程序打开大门。您几乎可以创建任何类型的商业文档，包括格式信、发票和收据。此外，您还可以通过将文本叠加到纸质表格的扫描副本上并将结果保存为PDF文件来自动化大部分文书工作。
- en: PDF Extensions
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PDF扩展
- en: PHP has several libraries for generating PDF documents. This chapter’s examples
    use the popular [FPDF library](http://www.fpdf.org), a set of PHP code you include
    in your scripts with the `require()` function—it doesn’t require any server-side
    configuration or support, so you can use it even without support from your host.
    The basic concepts, structure, and features of a PDF file should be common to
    all the PDF libraries, however.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: PHP有几个用于生成PDF文档的库。本章的示例使用流行的[FPDF库](http://www.fpdf.org)，这是一组PHP代码，您可以通过`require()`函数包含在脚本中——它不需要任何服务器端配置或支持，因此即使在没有主机支持的情况下也可以使用。但是，PDF文件的基本概念、结构和特性应该适用于所有的PDF库。
- en: Note
  id: totrans-4
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Another PDF-generating library, [TCPDF](https://tcpdf.org), is better at handling
    HTML special characters and UTF-8 multilanguage output than FPDF. Look it up if
    you need that capability. The methods you’ll use are `writeHTMLCell()` and `writeHTML()`.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个生成PDF的库，[TCPDF](https://tcpdf.org)，在处理HTML特殊字符和UTF-8多语言输出方面比FPDF更强大。如果您需要这种功能，请查看它。您将使用的方法是`writeHTMLCell()`和`writeHTML()`。
- en: Documents and Pages
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文档和页面
- en: A PDF document is made up of a number of pages, each of which contains text
    and/or images. This section shows you how to create a document, add pages in that
    document, write text to the pages, and send the pages back to the browser when
    you’re done.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: PDF文档由多个页面组成，每个页面包含文本和/或图像。本节将向您展示如何创建文档、在文档中添加页面、向页面写入文本，并在完成后将页面发送回浏览器。
- en: Note
  id: totrans-8
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: The examples in this chapter assume that you have at least the Adobe PDF document
    viewer installed as an add-on to your web browser. These examples will not work
    otherwise. You can get the add-on from the [Adobe website](https://oreil.ly/xXA3k).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章示例假设您至少已将Adobe PDF文档查看器安装为浏览器的附加组件。否则，这些示例将无法运行。您可以从[Adobe网站](https://oreil.ly/xXA3k)获取该附加组件。
- en: A Simple Example
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个简单的示例
- en: Let’s start with a simple PDF document. [Example 11-1](#example_oneone_onedot_quotation_markhel)
    writes the text “Hello Out There!” to a page and then displays the resulting PDF
    document.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从一个简单的PDF文档开始。[示例 11-1](#example_oneone_onedot_quotation_markhel)将文本“Hello
    Out There！”写入一个页面，然后显示生成的PDF文档。
- en: Example 11-1\. “Hello Out There!” in PDF
  id: totrans-12
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例11-1。“PDF中的Hello Out There！”
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[Example 11-1](#example_oneone_onedot_quotation_markhel) follows the basic
    steps involved in creating a PDF document: creating a new PDF object instance,
    creating a page, setting a valid font for the PDF text, and writing the text to
    a “cell” on the page. [Figure 11-1](#quotation_markhello_out_thereexclamatio)
    shows the output of [Example 11-1](#example_oneone_onedot_quotation_markhel).'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 11-1](#example_oneone_onedot_quotation_markhel)展示了创建PDF文档的基本步骤：创建一个新的PDF对象实例、创建一个页面、为PDF文本设置有效的字体，并将文本写入页面上的“单元格”中。[图 11-1](#quotation_markhello_out_thereexclamatio)展示了[示例 11-1](#example_oneone_onedot_quotation_markhel)的输出。'
- en: '![“Hello Out There!” PDF example](Images/php4_1101.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![“Hello Out There！”PDF示例](Images/php4_1101.png)'
- en: Figure 11-1\. “Hello Out There!” PDF example
  id: totrans-16
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图11-1。“PDF中的Hello Out There！”示例
- en: Initializing the Document
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 初始化文档
- en: In [Example 11-1](#example_oneone_onedot_quotation_markhel), we started by making
    a reference to the FPDF library with the `require()` function. Then the code created
    a new instance of the FPDF object. Note that all the calls to the new FPDF instance
    are object-oriented calls to methods in that object. (Refer to [Chapter 6](ch06.xhtml#objects-id00032)
    if you have trouble with the examples in this chapter.) After you have created
    the new instance of the FPDF object, you’ll need to add at least one page to the
    object, so the `AddPage()` method is called. Next, you need to set the font for
    the output you are about to generate with the `SetFont()` call. Then, using the
    `cell()` method call, you can send the output to your created document. To send
    all your work to the browser, simply use the `output()` method.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在[示例 11-1](#example_oneone_onedot_quotation_markhel)中，我们首先通过`require()`函数引用了FPDF库。然后代码创建了FPDF对象的新实例。请注意，对新FPDF实例的所有调用都是该对象中方法的面向对象调用。（如果您在本章中的示例中遇到问题，请参阅[第6章](ch06.xhtml#objects-id00032)。）创建了FPDF对象的新实例后，您需要向对象添加至少一页，因此调用了`AddPage()`方法。接下来，您需要为即将生成的输出设置字体，使用`SetFont()`调用。然后，使用`cell()`方法调用，您可以将输出发送到创建的文档。要将所有工作发送到浏览器，只需使用`output()`方法。
- en: Outputting Basic Text Cells
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 输出基本文本单元格
- en: 'In the FPDF library, a *cell* is a rectangular area on the page that you can
    create and control. This cell can have a height, width, and border, and of course
    it can contain text. The basic syntax for the `cell()` method is as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在FPDF库中，*单元格*是页面上的一个矩形区域，您可以创建并控制它。该单元格可以具有高度、宽度和边框，并且当然可以包含文本。`cell()`方法的基本语法如下：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The first option is the width, then the height, and then the text to be output.
    This is followed by the border, the new line control, its alignment, any fill
    color for the text, and finally whether you want the text to be an HTML link.
    So, for example, if we want to change our original example to have a border and
    be center-aligned, we would change the cell code to the following:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个选项是宽度，然后是高度，接着是要输出的文本。然后是边框，换行控制，文本的对齐方式，文本的填充颜色，最后是是否希望文本成为HTML链接。例如，如果我们想要更改我们的原始示例以具有边框并且居中对齐，我们将更改`cell()`代码如下：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You’ll use the `cell()` method extensively when generating PDF documents with
    FPDF, so you’d be well served by taking some time to learn the ins and outs of
    this method. We will cover most of them in this chapter.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用FPDF生成PDF文档时，您将广泛使用`cell()`方法，因此最好花一些时间了解此方法的细节。我们将在本章中涵盖大部分内容。
- en: Text
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文本
- en: Text is the heart of a PDF file. Accordingly, there are many options for changing
    its appearance and layout. In this section, we’ll discuss the coordinate system
    used in PDF documents, functions for inserting text and changing text attributes,
    and font usage.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 文本是PDF文件的核心。因此，有许多选项可更改其外观和布局。在本节中，我们将讨论PDF文档中使用的坐标系统、插入文本和更改文本属性的功能，以及字体的使用。
- en: Coordinates
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 坐标
- en: The origin (0, 0) in a PDF document with the FPDF library is in the top-left
    corner of the defined page. All of the measurements are specified in points, millimeters,
    inches, or centimeters. A point (the default) is equal to 1/72 of an inch, or
    0.35 mm. In [Example 11-2](#example_oneone_twodot_demonstrating_coo), we change
    the defaults of the page dimensions to inches with the `FPDF()` class instantiation-constructor
    method. The other options with this call are the orientation of the page (portrait
    or landscape) and the page size (typically Legal or Letter). The full options
    of this instantiation are shown in [Table 11-1](#fpdf_options).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在FPDF库中，PDF文档的原点（0, 0）位于定义页面的左上角。所有的测量单位都是以点、毫米、英寸或厘米来指定的。点（默认）等于1/72英寸，或0.35毫米。在[示例 11-2](#example_oneone_twodot_demonstrating_coo)中，我们使用`FPDF()`类的实例化构造方法将页面尺寸的默认值更改为英寸。此调用的其他选项包括页面的方向（纵向或横向）和页面大小（通常是Legal或Letter）。该实例化的所有选项显示在[表 11-1](#fpdf_options)中。
- en: Table 11-1\. FPDF options
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 表11-1\. FPDF选项
- en: '| `FPDF()` constructor parameters | Parameter options |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| `FPDF()`构造函数参数 | 参数选项 |'
- en: '| --- | --- |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Orientation | `P` (portrait; default) `L` (landscape) |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| 方向 | `P`（纵向；默认）`L`（横向）|'
- en: '| Units of measurement | `pt` (point, or 1/72 of an inch; default) `in` (inch)'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '| 测量单位 | `pt`（点，或1/72英寸，默认）`in`（英寸）'
- en: '`mm` (millimeter)'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`mm`（毫米）'
- en: '`cm` (centimeter) |'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`cm`（厘米）|'
- en: '| Page size | `Letter` (default) `Legal`'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '| 页面尺寸 | `Letter`（默认）`Legal`'
- en: '`A5`'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`A5`'
- en: '`A3`'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`A3`'
- en: '`A4` or a customizable size (see FPDF documentation) |'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`A4`或可自定义尺寸（请参阅FPDF文档）|'
- en: Also in [Example 11-2](#example_oneone_twodot_demonstrating_coo), we use the
    `ln()` method call to manage what line of the page we are on. The `ln()` method
    can take an optional argument, instructing it how many units (i.e., the unit of
    measurement defined in the constructor call) to move. In our case, we’ve defined
    the page to be in inches, so we’re moving through the document in measurement
    units of inches. Further, since we’ve defined the page to be in inches, the coordinates
    for the `cell()` method are also rendered in inches.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在[示例 11-2](#example_oneone_twodot_demonstrating_coo)中，我们使用`ln()`方法调用来管理页面的当前行。`ln()`方法可以带有一个可选参数，指示它移动多少个单位（即构造函数调用中定义的度量单位）。在我们的情况下，我们将页面定义为以英寸为单位，因此我们在文档中以英寸为单位移动。此外，由于我们将页面定义为以英寸为单位，因此`cell()`方法的坐标也以英寸为单位呈现。
- en: Note
  id: totrans-41
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注
- en: This is not really the ideal approach for building a PDF page because you don’t
    have as fine-grained control with inches as you would with points or millimeters.
    We’ve used inches in this instance so that the examples can be seen more clearly.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不是构建PDF页面的理想方法，因为使用英寸单位时，您无法像使用点或毫米单位那样精细控制。在此示例中，我们使用英寸单位以便更清楚地看到示例。
- en: '[Example 11-2](#example_oneone_twodot_demonstrating_coo) puts text in the corners
    and center of a page.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 11-2](#example_oneone_twodot_demonstrating_coo)将文本放置在页面的角落和中心。'
- en: Example 11-2\. Demonstrating coordinates and line management
  id: totrans-44
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 11-2\. 演示坐标和线条管理
- en: '[PRE3]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The output of [Example 11-2](#example_oneone_twodot_demonstrating_coo) is shown
    in [Figure 11-2](#coordinate_and_line_control_demo_output).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 11-2](#example_oneone_twodot_demonstrating_coo)的输出显示在[图 11-2](#coordinate_and_line_control_demo_output)中。'
- en: '![Coordinate and line control demo output](Images/php4_1102.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![坐标和线条控制演示输出](Images/php4_1102.png)'
- en: Figure 11-2\. Coordinate and line control demo output
  id: totrans-48
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 11-2\. 坐标和线条控制演示输出
- en: 'So let’s analyze this code a little. After we define the page with the constructor,
    we see these lines of code:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们稍微分析一下这段代码。在我们用构造函数定义页面之后，我们看到了以下代码行：
- en: '[PRE4]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The first `cell()` method call tells the PDF class to start at the top coordinates
    (0,0) and write out the left-justified text “Top Left!” with no border, and to
    insert a line break at the end of the output. The next `cell()` method call prompts
    the creation of a cell six inches wide, again starting on the lefthand side of
    the page, with a half-inch-high border and the right-justified text “Top Right!”
    We then tell the PDF class to move down 4½ inches on the page with the `ln(4.5)`
    statement, and continue the output generation from that point. As you can see,
    there are a lot of possible combinations with the `cell()` and `ln()` methods
    alone. But that is not all that the FPDF library can do.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个`cell()`方法调用告诉PDF类从顶部坐标（0,0）开始，并输出左对齐文本“Top Left!”，无边框，并在输出结束时插入换行符。接下来的`cell()`方法调用会创建一个宽度为六英寸的单元格，再次从页面左侧开始，带有半英寸高的边框和右对齐文本“Top
    Right!”。然后，我们告诉PDF类在页面上向下移动4½英寸，并从那一点继续生成输出。正如您所见，单凭`cell()`和`ln()`方法就有许多可能的组合。但FPDF库的功能远不止这些。
- en: Text Attributes
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文本属性
- en: 'There are three common ways to alter the appearance of text: bold, underline,
    and italics. In [Example 11-3](#example_oneone_twodot_demonstrating_fon) the `SetFont()`
    method (introduced earlier in the chapter) is used to alter the formatting of
    the outgoing text. Note that these alterations in the text’s appearance are not
    exclusive (i.e., you can use them in any combination) and that the font name is
    changed in the last `SetFont()` call.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 有三种常见的修改文本外观的方法：粗体、下划线和斜体。在[示例 11-3](#example_oneone_twodot_demonstrating_fon)中，使用`SetFont()`方法（在本章前面介绍过）来改变输出文本的格式。请注意，这些文本外观的修改并非互斥（即，可以任意组合使用），并且在最后一个`SetFont()`调用中更改了字体名称。
- en: Example 11-3\. Demonstrating font attributes
  id: totrans-54
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 11-3\. 演示字体属性
- en: '[PRE5]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Also, in this code the constructor has been called with no attributes passed
    into it, using the default values of portrait, points, and letter. The output
    of [Example 11-3](#example_oneone_twodot_demonstrating_fon) is shown in [Figure 11-3](#changing_font_typescomma_sizescomma_and).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在这段代码中，构造函数是以无参数形式调用的，使用了纵向、点数和信件的默认值。[示例 11-3](#example_oneone_twodot_demonstrating_fon)的输出显示在[图 11-3](#changing_font_typescomma_sizescomma_and)中。
- en: '![Changing font types, sizes, and attributes](Images/php4_1103.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![改变字体类型、大小和属性](Images/php4_1103.png)'
- en: Figure 11-3\. Changing font types, sizes, and attributes
  id: totrans-58
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 11-3\. 改变字体类型、大小和属性
- en: 'The available font styles that come with FPDF are:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: FPDF提供的可用字体样式包括：
- en: '`Courier` (fixed-width)'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Courier`（等宽字体）'
- en: '`Helvetica` or `Arial` (synonymous; sans serif)'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Helvetica`或`Arial`（同义词；无衬线字体）'
- en: '`Times` (serif)'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Times`（衬线字体）'
- en: '`Symbol` (symbols)'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Symbol`（符号）'
- en: '`ZapfDingbats` (symbols)'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ZapfDingbats`（符号）'
- en: You can include any other font family for which you have the definition file
    by using the `AddFont()` method.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`AddFont()`方法包含任何其他您具有定义文件的字体系列。
- en: Of course, this wouldn’t be any fun at all if you couldn’t change the color
    of the text that you’re outputting to the PDF definition. Enter the `SetTextColor()`
    method. This method takes the existing font definition and simply changes the
    color of the text. Be sure to call this method before you use the `cell()` method
    so that the content of the cell can be changed. The color parameters are combinations
    of red, green, and blue numeric constants from `0` (none) to `255` (full color).
    If you do not pass in the second and third parameters, then the first number will
    be a shade of gray with red, green, and blue values equal to the single passed
    value. [Example 11-4](#example_oneone_fourdot_demonstrating_co) shows how this
    can be employed.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，如果您不能改变输出到PDF定义中的文本的颜色，那将毫无乐趣可言。这时就需要用到`SetTextColor()`方法了。该方法接受现有的字体定义，并简单地改变文本的颜色。务必在使用`cell()`方法之前调用此方法，以便可以更改单元格的内容。颜色参数是由红、绿和蓝的数字常量组合而成，范围从`0`（无色）到`255`（全彩色）。如果您不传入第二和第三个参数，则第一个数字将是一个灰度，其红、绿和蓝值均等于传入的单个值。[示例 11-4](#example_oneone_fourdot_demonstrating_co)展示了如何应用此方法。
- en: Example 11-4\. Demonstrating color attributes
  id: totrans-67
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 11-4\. 展示颜色属性
- en: '[PRE6]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[Figure 11-4](#adding_color_to_the_text_output) is the result of the code in
    [Example 11-4](#example_oneone_fourdot_demonstrating_co).'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 11-4](#adding_color_to_the_text_output) 是[示例 11-4](#example_oneone_fourdot_demonstrating_co)中代码的结果。'
- en: '![Adding color to the text output](Images/php4_1104.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![添加颜色到文本输出](Images/php4_1104.png)'
- en: Figure 11-4\. Adding color to the text output
  id: totrans-71
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: Figure 11-4\. 添加颜色到文本输出
- en: Page Headers, Footers, and Class Extension
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 页面头部、页脚和类扩展
- en: 'So far we’ve looked only at what can be output to the PDF page in small quantities.
    We did this intentionally, to show you the variety of what you can do within a
    controlled environment. Now we need to expand what the FPDF library can do. Remember
    that this library actually is just a class definition provided for your use and
    extension, the latter of which we’ll look at now. Since FPDF is indeed a class
    definition, all we have to do to extend it is to use the object command that is
    native to PHP, like this:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们只看了PDF页面中少量输出的内容。我们特意这样做是为了向您展示在受控环境中可以做什么的多样性。现在我们需要扩展FPDF库的功能。请记住，这个库实际上只是一个供您使用和扩展的类定义，我们现在来看看后者。由于FPDF确实是一个类定义，我们只需使用PHP中原生的对象命令来扩展它，就像这样：
- en: '[PRE7]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Here we take the `FPDF` class and extend it with a new name of `MyPDF`. Then
    we can extend any of the methods in the object. We can even add more methods to
    our class extension if we so desire, but more on that later. The first two methods
    that we’ll look at are extensions of existing empty methods that are predefined
    in the parent of the `FPDF` class: `header()` and `footer()`. These methods, as
    their names imply, generate page headers and footers for each page in your PDF
    document. [Example 11-5](#example_oneone_fivedot_defining_header), which is rather
    long, shows the definition of these two methods. You will notice only a few newly
    used methods; the most significant is `AliasNbPages()`, which is used simply to
    track the overall page count in the PDF document before it is sent to the browser.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将`FPDF`类扩展为一个名为`MyPDF`的新类。然后，我们可以扩展对象中的任何方法。如果愿意，我们甚至可以向我们的类扩展中添加更多方法，但这一点稍后再谈。我们将首先查看的两个方法是现有的空方法的扩展，这些空方法在`FPDF`类的父类中预定义：`header()`和`footer()`。这些方法的功能正如它们的名称所示，为PDF文档中的每一页生成页面头和页脚。[示例 11-5](#example_oneone_fivedot_defining_header)相当长，展示了这两个方法的定义。您会注意到只有少数新使用的方法；其中最重要的是`AliasNbPages()`，它简单地用于在PDF文档发送到浏览器之前跟踪整体页面计数。
- en: Example 11-5\. Defining header and footer methods
  id: totrans-76
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 11-5\. 定义头部和尾部方法
- en: '[PRE8]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The results of [Example 11-5](#example_oneone_fivedot_defining_header) are shown
    in [Figure 11-5](#fpdf_header_and_footer_addition). This is a shot of both pages
    side by side to show you the page count in the footers and the page number at
    the top of the page(s) after page 1\. The header has a cell with some coloring
    (for cosmetic effect); of course, you don’t have to use colors if you don’t want
    to.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 11-5](#example_oneone_fivedot_defining_header)的结果显示在[图 11-5](#fpdf_header_and_footer_addition)中。这是两页并排显示的截图，显示页脚中的页数和第一页顶部的页码。页眉有一个带有一些着色的单元格（用于美观效果）；当然，如果您不想使用颜色，您也可以不使用。'
- en: '![FPDF header and footer addition](Images/php4_1105.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![FPDF 头部和页脚添加](Images/php4_1105.png)'
- en: Figure 11-5\. FPDF header and footer addition
  id: totrans-80
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 11-5\. FPDF 头部和页脚添加
- en: Images and Links
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图片和链接
- en: The FPDF library can also handle image insertion and control links within the
    PDF document or externally to outside web addresses. Let’s first look at how FPDF
    allows you to insert graphics into your document. Perhaps you’re building a PDF
    document that uses your company logo and you want to make a banner to print at
    the top of each page. We can use the `header()` and `footer()` methods that we
    defined in the previous section to do this. Once we have an image file to use,
    we simply call the `image()` method to place the image in the PDF document.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: FPDF库还可以处理PDF文档内部或外部的图像插入和链接控制。让我们首先看看FPDF如何允许您将图形插入到文档中。也许您正在构建一个使用公司标志的PDF文档，并希望制作一个横幅以打印在每一页的顶部。我们可以使用前面定义的`header()`和`footer()`方法来实现这一点。一旦我们有要使用的图像文件，我们只需调用`image()`方法将图像放置在PDF文档中即可。
- en: 'The new `header()` method code looks like this:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 新的`header()`方法代码如下：
- en: '[PRE9]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: As you can see, the `image()` method’s parameters are the filename of the image
    to use, the *x* coordinate at which to start the image output, the *y* coordinate,
    and the width and height of the image. If you don’t specify the width and height,
    then FPDF will do its best to render the image at the *x* and *y* coordinates
    that you specified. The code has changed a little in other areas as well. We removed
    the fill color parameter from the `cell()` method call even though we still have
    the fill color method called. This makes the box area around the header cell white
    so that we can insert the image without hassle.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所见，`image()`方法的参数是要使用的图像文件名，开始图像输出的*x*坐标，*y*坐标，以及图像的宽度和高度。如果您没有指定宽度和高度，FPDF将尽其所能在指定的*x*和*y*坐标处呈现图像。代码在其他方面也有所更改。我们从`cell()`方法调用中删除了填充颜色参数，尽管我们仍然调用了填充颜色方法。这使得头部单元格周围的框区域为白色，以便我们可以轻松插入图像。
- en: The output of this new header with the image inserted is shown in [Figure 11-6](#pdf_page_header_with_inserted_image_fil).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这个新标题插入图像的头部输出显示在[图 11-6](#pdf_page_header_with_inserted_image_fil)中。
- en: '![PDF page header with inserted image file](Images/php4_1106.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![插入图像文件的PDF页面头部](Images/php4_1106.png)'
- en: Figure 11-6\. PDF page header with inserted image file
  id: totrans-88
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 11-6\. 插入图像文件的PDF页面头部
- en: 'This section also has links in its title, so now let’s turn our attention to
    how to use FPDF to add links to PDF documents. FPDF can create two kinds of links:
    an *internal* link (i.e., one within the PDF document to another location within
    the same document, such as two pages later) and an *external* link to a web URL.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 本节标题中还有链接，现在让我们来看看如何使用FPDF在PDF文档中添加链接。FPDF可以创建两种类型的链接：*内部*链接（即PDF文档内部到同一文档的另一个位置，比如两页后）和*外部*链接到Web
    URL。
- en: An internal link is created in two parts. First you define the starting point,
    or origin, for the link, and then you set the anchor, or destination, for where
    the link will go when it is clicked. To set a link’s origin, use the `addLink()`
    method. This method will return a handle that you need to use when creating the
    destination portion of the link. To set the destination, use the `setLink()` method,
    which takes the origin’s link handle as its parameter so that it can perform the
    join between the two steps.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 内部链接分为两部分创建。首先，您定义链接的起点或原点，然后设置链接被点击时要去的锚点或目的地。要设置链接的起点，请使用`addLink()`方法。此方法将返回一个句柄，您需要在创建链接的目的部分使用该句柄。要设置目的地，请使用`setLink()`方法，该方法以起始链接句柄作为其参数，以便它可以执行两步之间的连接。
- en: An external URL type link can be created in two ways. If you are using an image
    as a link, you will need to use the `image()` method. If you want to use straight
    text as a link, you’ll need to use the `cell()` or `write()` method. We use the
    `write()` method in this example.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过两种方式创建外部URL类型的链接。如果您使用图像作为链接，需要使用`image()`方法。如果要使用纯文本作为链接，需要使用`cell()`或`write()`方法。在本例中，我们使用`write()`方法。
- en: Both internal and external links are shown in [Example 11-6](#example_oneone_sixdot_creating_internal).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 11-6](#example_oneone_sixdot_creating_internal) 中显示了内部和外部链接。'
- en: Example 11-6\. Creating internal and external links
  id: totrans-93
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 11-6\. 创建内部和外部链接
- en: '[PRE10]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The two-page output that this code produces is shown in Figures [11-7](#first_page_of_linked_pdf_document)
    and [11-8](#second_page_of_linked_pdf_document_with).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码生成的两页输出显示在图[11-7](#first_page_of_linked_pdf_document) 和图[11-8](#second_page_of_linked_pdf_document_with)
    中。
- en: '![First page of linked PDF document](Images/php4_1107.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![链接PDF文档的第一页](Images/php4_1107.png)'
- en: Figure 11-7\. First page of linked PDF document
  id: totrans-97
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: Figure 11-7\. 链接PDF文档的第一页
- en: '![Second page of linked PDF document with URL links](Images/php4_1108.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![链接PDF文档的第二页，包含URL链接](Images/php4_1108.png)'
- en: Figure 11-8\. Second page of linked PDF document with URL links
  id: totrans-99
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: Figure 11-8\. 链接PDF文档的第二页，包含URL链接
- en: Tables and Data
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表格和数据
- en: So far we’ve looked only at PDF materials that are static in nature. But PHP,
    being what it is, does so much more than static processes. In this section, we’ll
    combine some data from a database (using a MySQL example of the database information
    from [Chapter 9](ch09.xhtml#databases-id00007)) and FPDF’s ability to generate
    tables.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们只看到了静态PDF材料。但是PHP的功能远不止静态处理。在本节中，我们将结合数据库中的一些数据（使用数据库信息的MySQL示例来自[第9章](ch09.xhtml#databases-id00007)）和FPDF生成表格的能力。
- en: Note
  id: totrans-102
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Be sure to reference the database file structures available in [Chapter 9](ch09.xhtml#databases-id00007)
    to follow along in this section.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 请确保参考[第9章](ch09.xhtml#databases-id00007) 中提供的数据库文件结构，以便在本节中跟随进展。
- en: '[Example 11-7](#example_oneone_sevendot_generating_a_ta) is, again, a little
    lengthy. However, it is well commented, so read through it here first; we’ll cover
    the highlights after the listing.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 11-7](#example_oneone_sevendot_generating_a_ta) 稍微有些冗长。不过，它有详细的注释，请先阅读这里的内容；我们将在列表后面介绍要点。'
- en: Example 11-7\. Generating a table
  id: totrans-105
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 11-7\. 生成表格
- en: '[PRE11]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We are using the database connection and building two arrays to send to the
    `build`​`Table()` custom method of this extended class. Inside the `buildTable()`
    method, we set colors and font attributes for the table header. Then, we send
    out the headers based on the first passed-in array. There is another array called
    `$width` used to set the column widths in the calls to `cell()`.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在使用数据库连接并构建两个数组，将其发送到此扩展类的`build`​`Table()`自定义方法。在`buildTable()`方法中，我们为表头设置颜色和字体属性。然后，根据第一个传入的数组发送表头。还有一个称为`$width`的数组，用于在调用`cell()`时设置列宽。
- en: After the table header is sent out, we use the `$data` array containing the
    database information and walk through that array with a `foreach` loop. Notice
    here that the `cell()` method is using `'LR'` for its `border` parameter. This
    inserts borders on the left and right of the cell in question, thus effectively
    adding the sides to the table rows. We also add a URL link to the second column
    just to show you that it can be done in concert with the table row construction.
    Lastly, we use a `$fill` variable to flip back and forth so that the background
    color will alternate as the table is built row by row.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在发送表格头之后，我们使用包含数据库信息的`$data`数组，并通过`foreach`循环遍历该数组。请注意，此处的`cell()`方法在其`border`参数中使用了`'LR'`。这会在所涉及的单元格左右添加边框，从而有效地为表行添加边框。我们还在第二列中添加了一个URL链接，以演示它可以与表行构建一起完成。最后，我们使用`$fill`变量来交替切换，使表格行逐行建立时背景色会交替变化。
- en: The last call to the `cell()` method in this `buildTable()` method is used to
    draw the bottom of the table and close off the columns.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 此`buildTable()`方法中对`cell()`方法的最后一次调用用于绘制表格底部并关闭列。
- en: The result of this code is shown in [Figure 11-9](#fpdf_generated_table_based_on_database).
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码的结果显示在[Figure 11-9](#fpdf_generated_table_based_on_database)中。
- en: '![FPDF-generated table based on database information with active URL links](Images/php4_1109.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![基于数据库信息生成的FPDF表格，包含活动URL链接](Images/php4_1109.png)'
- en: Figure 11-9\. FPDF-generated table based on database information with active
    URL links
  id: totrans-112
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: Figure 11-9\. 基于数据库信息生成的FPDF表格，包含活动URL链接
- en: What’s Next
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接下来做什么
- en: There are quite a few other features of FPDF that are not covered in this chapter.
    Be sure to go to the [library’s website](http://www.fpdf.org) to see other examples
    of what it can help you accomplish. There are code snippets and fully functional
    scripts available there as well as a discussion forum—all designed to help you
    become an FPDF expert.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这一章中没有涵盖的FPDF的其他功能还有很多。请务必访问[库的网站](http://www.fpdf.org)，查看它能帮助你完成的其他示例。那里还有代码片段和完全功能的脚本，以及一个讨论论坛，全部旨在帮助你成为FPDF的专家。
- en: In the next chapter we’ll be switching gears a little to explore the interactions
    between PHP and XML. We will be covering some of the techniques that can be used
    to “consume” XML and how to parse it with a built-in library called SimpleXML.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将稍微调整一下方向，探讨PHP与XML之间的交互。我们将涵盖一些技术，可以用来“消费”XML，并且介绍如何使用一个名为SimpleXML的内置库来解析它。
