- en: Chapter 18\. PHP on Disparate Platforms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many reasons to use PHP on a Windows system, but the most common is
    that you want to develop web applications on your Windows desktop. PHP development
    on Windows is just as doable these days as it is on a Unix platform. PHP plays
    very well on Windows, and PHP’s supporting cast of server and add-on tools is
    just as Windows-friendly. Having a PHP system working on any of its supported
    platforms is simply a matter of preference. Setting up and developing with a PHP
    environment on Windows is very easy to do, as PHP is extremely cross-platform
    friendly, and installation and configuration are becoming simpler all the time.
    The relatively recent appearance on the market of Zend Server CE (Community Edition)
    for multiple platforms has been a wonderful help in establishing a common installation
    platform on all the major operating systems.
  prefs: []
  type: TYPE_NORMAL
- en: Writing Portable Code for Windows and Unix
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the main reasons for running PHP on Windows is to develop locally before
    deploying in a production environment. As many production servers are Unix-based,
    it is important to consider writing your applications so that they can operate
    on any operating platform with minimal fuss.
  prefs: []
  type: TYPE_NORMAL
- en: Potential problem areas include applications that rely on external libraries,
    use native file I/O and security features, access system devices, fork or spawn
    threads, communicate via sockets, use signals, spawn external executables, or
    generate platform-specific graphical user interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: The good news is that cross-platform development has been a major goal as PHP
    has evolved. For the most part, PHP scripts should be ported from Windows to Unix
    with few problems. However, there are instances where you can run into trouble
    when porting your scripts. For instance, some functions that were implemented
    very early in the life of PHP had to be mimicked for use under Windows. Other
    functions may be specific to the web server under which PHP is running.
  prefs: []
  type: TYPE_NORMAL
- en: Determining the Platform
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To design with portability in mind, you may want to first test for the platform
    on which the script is running. PHP defines the constant `PHP_OS`, which contains
    the name of the operating system on which the PHP parser is executing. Possible
    values for the `PHP_OS` constant include `"HP-UX"`, `"Darwin"` (macOS), `"Linux"`,
    `"SunOS"`, `"WIN32"`, and `"WINNT"`. You may also want to consider the `php_uname()`
    built-in function; it returns even more operating system information.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code shows how to test for a Windows platform:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is an example of the output for the `php_uname()` function as executed
    on a Windows 7 i5 laptop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Handling Paths Across Platforms
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PHP understands the use of backward or forward slashes on Windows platforms,
    and can even handle paths that use both. PHP also recognizes the forward slash
    when accessing Windows Universal Naming Convention (UNC) paths (i.e., *//machine_name/path/to/file*).
    For example, these two lines are equivalent:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Navigating the Server Environment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The constant superglobal array `$_SERVER` provides server and execution environment
    information. Here is a partial listing of what it contains:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: To see all of the information available within this global array, check out
    its [documentation](http://bit.ly/WlqcjH).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you know the specific information you are looking for, you can request
    it directly like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Sending Mail
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'On Unix systems, you can configure the `mail()` function to use *sendmail*
    or *Qmail* to send messages. When running PHP under Windows, you can use sendmail
    by installing it and setting the `sendmail_path` in *php.ini* to point at the
    executable. It is likely more convenient, however, to simply point the Windows
    version of PHP to an SMTP server that will accept you as a known mail client:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: For an even simpler email solution, you can use the comprehensive [PHPMailer
    library](https://oreil.ly/PbUPO), which not only simplifies sending email from
    Windows platforms but is completely cross-platform and works on Unix systems as
    well.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: End-of-Line Handling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Windows text files have lines that end in `\r\n`, whereas Unix text files have
    lines that end in `\n`. PHP processes files in binary mode, so it does not automatically
    convert from Windows line terminators to their Unix equivalents.
  prefs: []
  type: TYPE_NORMAL
- en: PHP on Windows sets the standard output, standard input, and standard error
    file handlers to binary mode and thus does not do any translations for you. This
    is important for handling the binary input often associated with `POST` messages
    from web servers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your program’s output goes to standard output, and you will have to specifically
    place Windows line terminators in the output stream if you want them there. One
    way to handle this is to define an end-of-line (EOL) constant and output functions
    that use it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: A simpler way of handling this is through the `PHP_EOL` constant, which automatically
    determines the end-of-line string for the server’s system. (Note, however, that
    the server system and the desired EOL marker may not be the same in all cases.)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: End-of-File Handling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Windows text files end in a Control-Z (`\x1A`), whereas Unix stores file-length
    information separately from the file’s data. PHP recognizes the end-of-file (EOF)
    character of the platform on which it is running; thus, the `feof()` function
    works for reading Windows text files.
  prefs: []
  type: TYPE_NORMAL
- en: Using External Commands
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PHP uses the default command shell of Windows for process manipulation. Only
    rudimentary Unix shell redirections and pipes are available under Windows (e.g.,
    separate redirection of standard output and standard error is not possible), and
    the quoting rules are entirely different. The Windows shell does not *glob* (i.e.,
    replace arguments containing wildcard markers with the list of files that match
    the wildcards). Whereas on Unix you can say `system("someprog php*.php")`, on
    Windows you must build the list of filenames yourself using `opendir()` and `readdir()`.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing Platform-Specific Extensions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are currently well over 80 extensions for PHP covering a wide range of
    services and functionality. Only about half of these are available for both Windows
    and Unix platforms. Only a handful of extensions, such as the COM, .NET, and IIS
    extensions, are specific to Windows. If an extension you use in your scripts is
    not currently available under Windows, you need to either port that extension
    or convert your scripts to use an extension that is available under Windows.
  prefs: []
  type: TYPE_NORMAL
- en: In some cases, some functions are not available under Windows even though the
    module as a whole is available.
  prefs: []
  type: TYPE_NORMAL
- en: Windows PHP does not support signal handling, forking, or multithreaded scripts.
    A Unix PHP script that uses these features cannot be ported to Windows. Instead,
    you should rewrite the script to not depend on those features.
  prefs: []
  type: TYPE_NORMAL
- en: Interfacing with COM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: COM allows you to control other Windows applications. You can send file data
    to Excel, have it draw a graph, and export the graph as a GIF image. You could
    also use Word to format the information you receive from a form and then print
    an invoice as a record. After a brief introduction to COM terminology, this section
    shows you how to interact with both Word and Excel.
  prefs: []
  type: TYPE_NORMAL
- en: Background
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: COM is a remote procedure call (RPC) mechanism with a few object-oriented features.
    It provides a way for the calling program (the *controller*) to talk to another
    program (the COM server, or *object*), regardless of where it resides. If the
    underlying code is local to the same machine, the technology is COM; if it’s remote,
    it’s Distributed COM (DCOM). If the underlying code is a dynamic link library
    (DLL), and the code is loaded into the same process space, the COM server is referred
    to as an in-process, or *inproc*, server. If the code is a complete application
    that runs in its own process space, it’s known as an out-of-process server, or
    *local server application*.
  prefs: []
  type: TYPE_NORMAL
- en: Object Linking and Embedding (OLE) is the overall marketing term for Microsoft’s
    early technology that allowed one object to embed another object. For instance,
    you could embed an Excel spreadsheet in a Word document. Developed during the
    days of Windows 3.1, OLE 1.0 was limited because it used a technology known as
    Dynamic Data Exchange (DDE) to communicate between programs. DDE wasn’t very powerful,
    and if you wanted to edit an Excel spreadsheet embedded in a Word file, Excel
    had to be open and running.
  prefs: []
  type: TYPE_NORMAL
- en: OLE 2.0 replaced DDE with COM as the underlying communication method. Using
    OLE 2.0, you can now paste an Excel spreadsheet right into a Word document and
    edit the Excel data inline. Using OLE 2.0, the controller can pass complex messages
    to the COM server. For our examples, the controller will be our PHP script, and
    the COM server will be one of the typical MS Office applications. In the following
    sections, we will provide some tools for approaching this type of integration.
  prefs: []
  type: TYPE_NORMAL
- en: To whet your appetite and show you how powerful COM can be, [Example 18-1](#example_oneeight_onedot_creating_a_word)
    shows how you would start Word and add “Hello World” to the initially empty document.
  prefs: []
  type: TYPE_NORMAL
- en: Example 18-1\. Creating a Word file in PHP (word_com_sample.php)
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This code file will have to be executed from the command line in order to work
    correctly, as shown in [Figure 18-1](#calling_the_word_sample_in_the_command).
    Once you see the output string of `all done!`, you can look for the file in the
    Save As folder and open it with Word to see what it looks like.
  prefs: []
  type: TYPE_NORMAL
- en: '![Calling the Word sample in the command window](Images/php4_1801.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 18-1\. Calling the Word sample in the command window
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The actual Word file should look something like [Figure 18-2](#the_word_file_as_created_by_php).
  prefs: []
  type: TYPE_NORMAL
- en: '![The Word file as created by PHP](Images/php4_1802.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 18-2\. The Word file as created by PHP
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: PHP Functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PHP provides an interface into COM through a small set of function calls. Most
    of these are low-level functions that require detailed knowledge of COM that is
    beyond the scope of this chapter. An object of the `COM` class represents a connection
    to a COM server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'For most OLE automation, the most difficult task is converting a Visual Basic
    method call to something similar in PHP. For instance, this is VBScript to insert
    text into a Word document:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The same line in PHP is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: API Specifications
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To determine object hierarchy and parameters for a product such as Word, you
    might visit the Microsoft developer site and search for the specification for
    the Word object that interests you. Another alternative is to use both Microsoft’s
    online VB scripting help and Word’s supported macro language. Using these together
    will help you understand the order of parameters, as well as the desired values
    for a given task.
  prefs: []
  type: TYPE_NORMAL
