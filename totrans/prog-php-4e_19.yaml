- en: Chapter 18\. PHP on Disparate Platforms
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第18章 PHP在不同平台上
- en: There are many reasons to use PHP on a Windows system, but the most common is
    that you want to develop web applications on your Windows desktop. PHP development
    on Windows is just as doable these days as it is on a Unix platform. PHP plays
    very well on Windows, and PHP’s supporting cast of server and add-on tools is
    just as Windows-friendly. Having a PHP system working on any of its supported
    platforms is simply a matter of preference. Setting up and developing with a PHP
    environment on Windows is very easy to do, as PHP is extremely cross-platform
    friendly, and installation and configuration are becoming simpler all the time.
    The relatively recent appearance on the market of Zend Server CE (Community Edition)
    for multiple platforms has been a wonderful help in establishing a common installation
    platform on all the major operating systems.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多理由在Windows系统上使用PHP，但最常见的是你想在Windows桌面上开发Web应用程序。如今，在Windows上开发PHP与在Unix平台上一样可行。PHP在Windows上表现得非常出色，PHP的服务器和附加工具也非常适合Windows。在任何支持的平台上设置和开发PHP环境只是个人偏好的问题。随着时间的推移，PHP非常友好地支持跨平台，安装和配置变得越来越简单。在多个平台上提供Zend
    Server CE（社区版）的相对较新产品已经在建立一个共同的安装平台上大有帮助。
- en: Writing Portable Code for Windows and Unix
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为Windows和Unix编写可移植代码
- en: One of the main reasons for running PHP on Windows is to develop locally before
    deploying in a production environment. As many production servers are Unix-based,
    it is important to consider writing your applications so that they can operate
    on any operating platform with minimal fuss.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在部署到生产环境之前在本地开发，是在Windows上运行PHP的主要原因之一。由于许多生产服务器是基于Unix的，因此编写应用程序时要考虑使其在任何操作平台上都能以最少的麻烦运行。
- en: Potential problem areas include applications that rely on external libraries,
    use native file I/O and security features, access system devices, fork or spawn
    threads, communicate via sockets, use signals, spawn external executables, or
    generate platform-specific graphical user interfaces.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 潜在的问题领域包括依赖外部库的应用程序，使用本地文件I/O和安全功能，访问系统设备，分叉或生成线程，通过套接字通信，使用信号，生成特定于平台的图形用户界面的外部可执行文件。
- en: The good news is that cross-platform development has been a major goal as PHP
    has evolved. For the most part, PHP scripts should be ported from Windows to Unix
    with few problems. However, there are instances where you can run into trouble
    when porting your scripts. For instance, some functions that were implemented
    very early in the life of PHP had to be mimicked for use under Windows. Other
    functions may be specific to the web server under which PHP is running.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 好消息是随着PHP的发展，跨平台开发已成为主要目标。大部分情况下，PHP脚本应该可以从Windows移植到Unix而无大碍。然而，在移植脚本时可能会遇到问题的情况也是有的。例如，PHP早期实现的一些函数在Windows下必须进行模仿。其他函数可能特定于PHP运行的Web服务器。
- en: Determining the Platform
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 确定平台
- en: To design with portability in mind, you may want to first test for the platform
    on which the script is running. PHP defines the constant `PHP_OS`, which contains
    the name of the operating system on which the PHP parser is executing. Possible
    values for the `PHP_OS` constant include `"HP-UX"`, `"Darwin"` (macOS), `"Linux"`,
    `"SunOS"`, `"WIN32"`, and `"WINNT"`. You may also want to consider the `php_uname()`
    built-in function; it returns even more operating system information.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到可移植性，你可能首先想要测试脚本运行的平台。PHP定义了常量`PHP_OS`，其中包含PHP解析器正在执行的操作系统的名称。`PHP_OS`常量的可能值包括`"HP-UX"`，`"Darwin"`（macOS），`"Linux"`，`"SunOS"`，`"WIN32"`和`"WINNT"`。你可能还想考虑内置函数`php_uname()`；它返回更多的操作系统信息。
- en: 'The following code shows how to test for a Windows platform:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码显示如何测试Windows平台：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here is an example of the output for the `php_uname()` function as executed
    on a Windows 7 i5 laptop:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是在Windows 7 i5笔记本电脑上执行`php_uname()`函数的输出示例：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Handling Paths Across Platforms
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 跨平台处理路径
- en: 'PHP understands the use of backward or forward slashes on Windows platforms,
    and can even handle paths that use both. PHP also recognizes the forward slash
    when accessing Windows Universal Naming Convention (UNC) paths (i.e., *//machine_name/path/to/file*).
    For example, these two lines are equivalent:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: PHP理解在Windows平台上使用反斜杠或正斜杠，甚至可以处理同时使用两者的路径。PHP在访问Windows Universal Naming Convention
    (UNC)路径（即*//machine_name/path/to/file*）时也识别正斜杠。例如，以下两行是等效的：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Navigating the Server Environment
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 浏览服务器环境
- en: 'The constant superglobal array `$_SERVER` provides server and execution environment
    information. Here is a partial listing of what it contains:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 常量超全局数组`$_SERVER`提供服务器和执行环境信息。以下是其部分内容列表：
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: To see all of the information available within this global array, check out
    its [documentation](http://bit.ly/WlqcjH).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看此全局数组中可用的所有信息，请查看其[文档](http://bit.ly/WlqcjH)。
- en: 'Once you know the specific information you are looking for, you can request
    it directly like so:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您知道正在寻找的具体信息，您可以直接请求如下：
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Sending Mail
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发送邮件
- en: 'On Unix systems, you can configure the `mail()` function to use *sendmail*
    or *Qmail* to send messages. When running PHP under Windows, you can use sendmail
    by installing it and setting the `sendmail_path` in *php.ini* to point at the
    executable. It is likely more convenient, however, to simply point the Windows
    version of PHP to an SMTP server that will accept you as a known mail client:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unix系统上，您可以配置`mail()`函数以使用*sendmail*或*Qmail*发送消息。在Windows下运行PHP时，您可以通过安装sendmail并在*php.ini*中设置`sendmail_path`指向可执行文件来使用sendmail。然而，更方便的做法可能是简单地将Windows版本的PHP指向一个接受您作为已知邮件客户端的SMTP服务器：
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: For an even simpler email solution, you can use the comprehensive [PHPMailer
    library](https://oreil.ly/PbUPO), which not only simplifies sending email from
    Windows platforms but is completely cross-platform and works on Unix systems as
    well.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 对于更简单的电子邮件解决方案，您可以使用全面的[PHPMailer库](https://oreil.ly/PbUPO)，它不仅简化了从Windows平台发送电子邮件的过程，而且完全跨平台，在Unix系统上同样有效。
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: End-of-Line Handling
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 行尾处理
- en: Windows text files have lines that end in `\r\n`, whereas Unix text files have
    lines that end in `\n`. PHP processes files in binary mode, so it does not automatically
    convert from Windows line terminators to their Unix equivalents.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Windows文本文件的行以`\r\n`结尾，而Unix文本文件的行以`\n`结尾。PHP在二进制模式下处理文件，因此不会自动将Windows行终止符转换为Unix等效的终止符。
- en: PHP on Windows sets the standard output, standard input, and standard error
    file handlers to binary mode and thus does not do any translations for you. This
    is important for handling the binary input often associated with `POST` messages
    from web servers.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: PHP在Windows上将标准输出、标准输入和标准错误文件处理器设置为二进制模式，因此不会为您进行任何转换。这对于处理通常与来自Web服务器的`POST`消息相关联的二进制输入至关重要。
- en: 'Your program’s output goes to standard output, and you will have to specifically
    place Windows line terminators in the output stream if you want them there. One
    way to handle this is to define an end-of-line (EOL) constant and output functions
    that use it:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 您的程序输出到标准输出，如果希望在输出流中放置Windows行终止符，您将需要专门设置。处理此问题的一种方法是定义一个行尾（EOL）常量和使用它的输出函数：
- en: '[PRE7]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: A simpler way of handling this is through the `PHP_EOL` constant, which automatically
    determines the end-of-line string for the server’s system. (Note, however, that
    the server system and the desired EOL marker may not be the same in all cases.)
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 更简单的处理方法是通过`PHP_EOL`常量，它会自动确定服务器系统的行尾字符串。（但是请注意，并非所有情况下服务器系统和所需的EOL标记相同。）
- en: '[PRE8]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: End-of-File Handling
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文件末尾处理
- en: Windows text files end in a Control-Z (`\x1A`), whereas Unix stores file-length
    information separately from the file’s data. PHP recognizes the end-of-file (EOF)
    character of the platform on which it is running; thus, the `feof()` function
    works for reading Windows text files.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Windows文本文件以控制字符Z（`\x1A`）结尾，而Unix则将文件长度信息单独存储在文件数据之外。PHP会识别运行平台的文件结束（EOF）字符；因此，`feof()`函数适用于读取Windows文本文件。
- en: Using External Commands
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用外部命令
- en: PHP uses the default command shell of Windows for process manipulation. Only
    rudimentary Unix shell redirections and pipes are available under Windows (e.g.,
    separate redirection of standard output and standard error is not possible), and
    the quoting rules are entirely different. The Windows shell does not *glob* (i.e.,
    replace arguments containing wildcard markers with the list of files that match
    the wildcards). Whereas on Unix you can say `system("someprog php*.php")`, on
    Windows you must build the list of filenames yourself using `opendir()` and `readdir()`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: PHP在Windows上使用默认的命令shell进行进程操作。在Windows下仅支持基本的Unix shell重定向和管道（例如，不支持将标准输出和标准错误分开重定向），且引号规则完全不同。Windows
    shell不会进行通配符扩展（即不会用匹配通配符的文件列表替换包含通配符标记的参数）。在Unix上可以使用`system("someprog php*.php")`，但在Windows上您必须使用`opendir()`和`readdir()`自行构建文件名列表。
- en: Accessing Platform-Specific Extensions
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 访问平台特定的扩展
- en: There are currently well over 80 extensions for PHP covering a wide range of
    services and functionality. Only about half of these are available for both Windows
    and Unix platforms. Only a handful of extensions, such as the COM, .NET, and IIS
    extensions, are specific to Windows. If an extension you use in your scripts is
    not currently available under Windows, you need to either port that extension
    or convert your scripts to use an extension that is available under Windows.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 目前有超过 80 个用于 PHP 的扩展，涵盖了广泛的服务和功能。其中大约一半的扩展同时适用于 Windows 和 Unix 平台。只有少数扩展，比如
    COM、.NET 和 IIS 扩展，是专门针对 Windows 的。如果你在脚本中使用的扩展在 Windows 下不可用，你需要将该扩展移植过去，或者修改你的脚本以使用在
    Windows 下可用的扩展。
- en: In some cases, some functions are not available under Windows even though the
    module as a whole is available.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，即使整个模块可用，某些函数在 Windows 下也可能不可用。
- en: Windows PHP does not support signal handling, forking, or multithreaded scripts.
    A Unix PHP script that uses these features cannot be ported to Windows. Instead,
    you should rewrite the script to not depend on those features.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Windows PHP 不支持信号处理、分叉或多线程脚本。使用这些功能的 Unix PHP 脚本不能直接移植到 Windows。相反，你应该重写脚本，不依赖于这些功能。
- en: Interfacing with COM
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与 COM 交互
- en: COM allows you to control other Windows applications. You can send file data
    to Excel, have it draw a graph, and export the graph as a GIF image. You could
    also use Word to format the information you receive from a form and then print
    an invoice as a record. After a brief introduction to COM terminology, this section
    shows you how to interact with both Word and Excel.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: COM 允许你控制其他 Windows 应用程序。你可以将文件数据发送给 Excel，让其绘制图表，并将图表导出为 GIF 图像。你还可以使用 Word
    格式化表单接收到的信息，然后打印发票作为记录。在介绍了 COM 术语后，本节将向你展示如何与 Word 和 Excel 交互。
- en: Background
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 背景
- en: COM is a remote procedure call (RPC) mechanism with a few object-oriented features.
    It provides a way for the calling program (the *controller*) to talk to another
    program (the COM server, or *object*), regardless of where it resides. If the
    underlying code is local to the same machine, the technology is COM; if it’s remote,
    it’s Distributed COM (DCOM). If the underlying code is a dynamic link library
    (DLL), and the code is loaded into the same process space, the COM server is referred
    to as an in-process, or *inproc*, server. If the code is a complete application
    that runs in its own process space, it’s known as an out-of-process server, or
    *local server application*.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: COM 是一种远程过程调用（RPC）机制，具有少量面向对象的特性。它提供了一种方法，使调用程序（*控制器*）能够与另一个程序（COM 服务器或*对象*）通信，无论其位于何处。如果底层代码是本地的，该技术称为
    COM；如果是远程的，称为分布式 COM（DCOM）。如果底层代码是动态链接库（DLL），并且代码加载到同一进程空间中，则 COM 服务器称为进程内服务器（*inproc*）。如果代码是运行在自己的进程空间中的完整应用程序，则称为进程外服务器应用程序（*local
    server application*）。
- en: Object Linking and Embedding (OLE) is the overall marketing term for Microsoft’s
    early technology that allowed one object to embed another object. For instance,
    you could embed an Excel spreadsheet in a Word document. Developed during the
    days of Windows 3.1, OLE 1.0 was limited because it used a technology known as
    Dynamic Data Exchange (DDE) to communicate between programs. DDE wasn’t very powerful,
    and if you wanted to edit an Excel spreadsheet embedded in a Word file, Excel
    had to be open and running.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 对象链接与嵌入（OLE）是微软早期技术的总称，允许一个对象嵌入到另一个对象中。例如，你可以将 Excel 电子表格嵌入到 Word 文档中。OLE 1.0
    开发于 Windows 3.1 时期，使用了称为动态数据交换（DDE）的技术来在程序间进行通信，但由于 DDE 功能有限。如果你想编辑嵌入在 Word 文件中的
    Excel 电子表格，必须同时打开 Excel 并让其运行。
- en: OLE 2.0 replaced DDE with COM as the underlying communication method. Using
    OLE 2.0, you can now paste an Excel spreadsheet right into a Word document and
    edit the Excel data inline. Using OLE 2.0, the controller can pass complex messages
    to the COM server. For our examples, the controller will be our PHP script, and
    the COM server will be one of the typical MS Office applications. In the following
    sections, we will provide some tools for approaching this type of integration.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: OLE 2.0 用 COM 取代了 DDE 作为底层通信方法。使用 OLE 2.0，你现在可以直接将 Excel 电子表格粘贴到 Word 文档中，并在
    Word 中内联编辑 Excel 数据。使用 OLE 2.0，控制器可以向 COM 服务器发送复杂的消息。在我们的示例中，控制器将是我们的 PHP 脚本，而
    COM 服务器将是典型的 MS Office 应用程序之一。在接下来的章节中，我们将提供一些工具来处理这种类型的集成。
- en: To whet your appetite and show you how powerful COM can be, [Example 18-1](#example_oneeight_onedot_creating_a_word)
    shows how you would start Word and add “Hello World” to the initially empty document.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 为了激发您的兴趣并展示COM的强大功能，[示例18-1](#example_oneeight_onedot_creating_a_word)展示了如何启动Word并向初始空文档添加“Hello
    World”。
- en: Example 18-1\. Creating a Word file in PHP (word_com_sample.php)
  id: totrans-48
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例18-1\. 在PHP中创建Word文件（word_com_sample.php）
- en: '[PRE9]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This code file will have to be executed from the command line in order to work
    correctly, as shown in [Figure 18-1](#calling_the_word_sample_in_the_command).
    Once you see the output string of `all done!`, you can look for the file in the
    Save As folder and open it with Word to see what it looks like.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 为了正确执行此代码文件，必须从命令行执行它，如[图18-1](#calling_the_word_sample_in_the_command)所示。一旦看到输出字符串`all
    done!`，您可以在“另存为”文件夹中找到该文件，并使用Word打开查看其内容。
- en: '![Calling the Word sample in the command window](Images/php4_1801.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![在命令窗口中调用Word示例](Images/php4_1801.png)'
- en: Figure 18-1\. Calling the Word sample in the command window
  id: totrans-52
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图18-1\. 在命令窗口中调用Word示例
- en: The actual Word file should look something like [Figure 18-2](#the_word_file_as_created_by_php).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 实际的Word文件应该看起来像[图18-2](#the_word_file_as_created_by_php)。
- en: '![The Word file as created by PHP](Images/php4_1802.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![PHP创建的Word文件](Images/php4_1802.png)'
- en: Figure 18-2\. The Word file as created by PHP
  id: totrans-55
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图18-2\. PHP创建的Word文件
- en: PHP Functions
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PHP函数
- en: 'PHP provides an interface into COM through a small set of function calls. Most
    of these are low-level functions that require detailed knowledge of COM that is
    beyond the scope of this chapter. An object of the `COM` class represents a connection
    to a COM server:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: PHP通过一小组函数调用提供了对COM的接口。其中大多数是低级函数，需要对COM有详细的了解，这超出了本章的范围。`COM`类的对象表示与COM服务器的连接：
- en: '[PRE10]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'For most OLE automation, the most difficult task is converting a Visual Basic
    method call to something similar in PHP. For instance, this is VBScript to insert
    text into a Word document:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大多数OLE自动化来说，最困难的任务是将Visual Basic的方法调用转换为PHP中的类似内容。例如，这是VBScript向Word文档中插入文本的方法：
- en: '[PRE11]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The same line in PHP is:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在PHP中相同的行是：
- en: '[PRE12]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: API Specifications
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: API规范
- en: To determine object hierarchy and parameters for a product such as Word, you
    might visit the Microsoft developer site and search for the specification for
    the Word object that interests you. Another alternative is to use both Microsoft’s
    online VB scripting help and Word’s supported macro language. Using these together
    will help you understand the order of parameters, as well as the desired values
    for a given task.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 要确定像Word这样的产品的对象层次结构和参数，您可以访问Microsoft开发者网站并搜索您感兴趣的Word对象的规范。另一种选择是同时使用Microsoft的在线VB脚本帮助和Word支持的宏语言。这样一来，您可以理解参数的顺序以及给定任务所需的值。
