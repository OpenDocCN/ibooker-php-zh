- en: Chapter 12\. Form Handling
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第12章 表单处理
- en: One of the main ways that website users interact with PHP and MySQL is through
    HTML forms. These were introduced very early on in the development of the World
    Wide Web, in 1993—even before the advent of ecommerce—and have remained a mainstay
    ever since, due to their simplicity and ease of use, although formatting them
    can be a nightmare.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 网站用户与 PHP 和 MySQL 交互的主要方式之一是通过 HTML 表单。这些在互联网的早期开发中引入，1993 年甚至在电子商务出现之前就已经存在，并且由于其简单性和易用性而成为主流，尽管格式化它们可能会是一场噩梦。
- en: Of course, enhancements have been made over the years to add extra functionality
    to HTML form handling, so this chapter will bring you up to speed on the state
    of the art and show you the best ways to implement forms for good usability and
    security. Plus, as you will see a little later on, the HTML5 specification has
    further improved the use of forms.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，多年来对 HTML 表单处理进行了增强以添加额外功能，因此本章将使您了解技术的最新进展，并展示实施具有良好可用性和安全性的表单的最佳方法。另外，正如稍后您将看到的，HTML5
    规范进一步改进了表单的使用。
- en: Building Forms
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建表单
- en: Handling forms is a multipart process. First is the creation of a form into
    which a user can enter the required details. This data is then sent to the web
    server, where it is interpreted, often with some error checking. If the PHP code
    identifies one or more fields that require reentering, the form may be redisplayed
    with an error message. When the code is satisfied with the accuracy of the input,
    it takes some action that may often involve a database, such as entering details
    about a purchase.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 处理表单是一个多部分的过程。首先是创建一个用户可以输入所需详细信息的表单。然后，这些数据被发送到 Web 服务器，在那里进行解释，通常伴随一些错误检查。如果
    PHP 代码识别出一个或多个需要重新输入的字段，可能会重新显示表单并显示错误消息。当代码对输入的准确性感到满意时，它会执行某些操作，通常涉及数据库，如输入有关购买的详细信息。
- en: 'To build a form, you must have at least the following elements:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建一个表单，您至少必须有以下元素之一：
- en: An opening `<form>` and closing `</form>` tag
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个开头的`<form>`和结尾的`</form>`标签
- en: A submission type specifying either a GET or POST method
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指定使用 GET 或 POST 方法的提交类型
- en: One or more `input` fields
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个或多个 `input` 字段
- en: The destination URL to which the form data is to be submitted
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表单数据要提交的目标 URL
- en: '[Example 12-1](#formtestdotphpem_dasha_simple_php_form_h) shows a very simple
    form created with PHP, which you should type in and save as *formtest.php*.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 12-1](#formtestdotphpem_dasha_simple_php_form_h) 展示了一个用 PHP 创建的非常简单的表单，您应该键入并保存为
    *formtest.php*。'
- en: Example 12-1\. formtest.php—a simple PHP form handler
  id: totrans-11
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 12-1\. formtest.php ——一个简单的 PHP 表单处理程序
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The first thing to notice about this example is that, as you have already seen
    in this book, rather than dropping in and out of PHP code, the `echo <<<_END..._END`
    construct is used whenever multiline HTML must be output.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 关于这个示例的第一件事情是，正如您在本书中已经看到的，而不是在 PHP 代码中进出，`echo <<<_END..._END` 结构在必须输出多行 HTML
    时使用。
- en: Inside of this multiline output is some standard code for commencing an HTML
    document, displaying its title, and starting the body of the document. This is
    followed by the form, which is set to send its data using the POST method to the
    PHP program *formtest.php*, which is the name of the program itself.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个多行输出内部是一些标准代码，用于开始 HTML 文档、显示其标题，并启动文档的正文。然后是表单，设置为使用 POST 方法将其数据发送到名为 *formtest.php*
    的 PHP 程序，这就是程序本身的名称。
- en: 'The rest of the program just closes all the items it opened: the form, the
    body of the HTML document, and the PHP `echo <<<_END` statement. The result of
    opening this program in a web browser is shown in [Figure 12-1](#result_of_opening_formtestdotphp_in).'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 程序的其余部分只是关闭它打开的所有项目：表单、HTML 文档的正文以及 PHP `echo <<<_END` 语句。在 Web 浏览器中打开此程序的结果如
    [图 12-1](#result_of_opening_formtestdotphp_in) 所示。
- en: '![The result of opening formtest.php in a web browser](Images/pmj6_1201.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![在 Web 浏览器中打开 formtest.php 的结果](Images/pmj6_1201.png)'
- en: Figure 12-1\. The result of opening formtest.php in a web browser
  id: totrans-17
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图12-1\. 在 Web 浏览器中打开 formtest.php 的结果
- en: Retrieving Submitted Data
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检索提交的数据
- en: '[Example 12-1](#formtestdotphpem_dasha_simple_php_form_h) is only one part
    of the multipart form-handling process. If you enter a name and click the Submit
    Query button, absolutely nothing will happen other than the form being redisplayed
    (and the entered data lost). So now it’s time to add some PHP code to process
    the data submitted by the form.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 12-1](#formtestdotphpem_dasha_simple_php_form_h) 只是多部分表单处理过程的一部分。如果您输入一个名称并单击“提交查询”按钮，除了重新显示表单（和输入的数据丢失）之外，绝对什么都不会发生。所以现在是时候添加一些
    PHP 代码来处理表单提交的数据了。'
- en: '[Example 12-2](#updated_version_of_formtestdotphp) expands on the previous
    program to include data processing. Type it or modify *formtest.php* by adding
    in the new lines, save it as *formtest2.php*, and try the program for yourself.
    The result of running this program and entering a name is shown in [Figure 12-2](#formtestdotphp_with_data_handling).'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 12-2](#updated_version_of_formtestdotphp) 扩展了前一个程序，包括数据处理。键入或修改 *formtest.php*，通过添加新行保存为
    *formtest2.php*，并自行尝试该程序。运行该程序并输入名称的结果如 [图 12-2](#formtestdotphp_with_data_handling)
    所示。'
- en: Example 12-2\. Updated version of formtest.php
  id: totrans-21
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 12-2\. formtest.php 的更新版本
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![formtest.php with data handling](Images/pmj6_1202.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![带数据处理的 formtest.php](Images/pmj6_1202.png)'
- en: Figure 12-2\. formtest.php with data handling
  id: totrans-24
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 12-2\. 带数据处理的 formtest.php
- en: The only changes are a couple of lines at the start that check the `name` field
    of the `$_POST` associative array and echo it back to the user. [Chapter 11](ch11.xhtml#accessing_mysql_using_php)
    introduced the `$_POST` associative array, which contains an element for each
    field in an HTML form. In [Example 12-2](#updated_version_of_formtestdotphp),
    the input name used was `name` and the form method was POST, so the element `name`
    of the `$_POST` array contains the value in `$_POST['name']`.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一的变化是在开始时检查 `$_POST` 关联数组的 `name` 字段并将其回显给用户的几行代码。[第 11 章](ch11.xhtml#accessing_mysql_using_php)
    介绍了 `$_POST` 关联数组，它包含 HTML 表单中每个字段的元素。在 [示例 12-2](#updated_version_of_formtestdotphp)
    中，使用的输入名称是 `name`，表单方法是 POST，因此 `$_POST` 数组的 `name` 元素包含 `$_POST['name']` 中的值。
- en: The PHP `isset` function is used to test whether `$_POST['name']` has been assigned
    a value. If nothing was posted, the program assigns the value `(Not entered)`;
    otherwise, it stores the value that was entered. Then a single line has been added
    after the `<body>` statement to display that value, which is stored in `$name`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: PHP 的 `isset` 函数用于检测 `$_POST['name']` 是否已被赋值。如果没有任何内容被提交，程序会赋予值 `(Not entered)`；否则，它会存储输入的值。然后，在
    `<body>` 语句后添加了一行来显示存储在 `$name` 中的值。
- en: Default Values
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 默认值
- en: Sometimes it’s convenient to offer your site visitors a default value in a web
    form. For example, suppose you put up a loan repayment calculator widget on a
    real estate website. It could make sense to enter default values of, say, 15 years
    and 3% interest so that the user can simply type either the principal sum to borrow
    or the amount that they can afford to pay each month.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 有时在 Web 表单中为您的访问者提供默认值是很方便的。例如，假设您在房地产网站上放置了一个贷款还款计算器小部件。输入默认值，比如说，15 年和 3%
    的利率，使用户只需输入贷款总额或每月可支付金额即可。
- en: In this case, the HTML for those two values would be something like [Example 12-3](#setting_default_values).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，这两个值的 HTML 可能如 [示例 12-3](#setting_default_values) 所示。
- en: Example 12-3\. Setting default values
  id: totrans-30
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 12-3\. 设置默认值
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Take a look at the third and fourth inputs. By populating the `value` attribute,
    you display a default value in the field, which the users can then change if they
    wish. With sensible default values, you can often make your web forms more user-friendly
    by minimizing unnecessary typing. The result of the previous code looks like [Figure 12-3](#using_default_values_for_selected_form_f).
    Of course, this was created to illustrate default values, and, because the program
    *calc.php* has not been written, the form will return a 404 error message if you
    submit it.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下第三个和第四个输入。通过填充 `value` 属性，您可以在字段中显示默认值，用户可以在需要时更改。通过合理的默认值，您通常可以通过减少不必要的输入，使您的网络表单更加用户友好。之前代码的结果看起来像是
    [图 12-3](#using_default_values_for_selected_form_f)。当然，这是为了说明默认值而创建的，因为程序 *calc.php*
    还没有被编写，如果您提交它，表单将返回 404 错误消息。
- en: Default values are also used for hidden fields if you want to pass extra information
    from your web page to your program, in addition to what users enter. We’ll look
    at hidden fields later in this chapter.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望从您的网页向程序传递额外信息，除了用户输入的信息，也可以使用默认值来隐藏字段。我们将在本章后面讨论隐藏字段。
- en: '![Using default values for selected form fields](Images/pmj6_1203.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![使用所选表单字段的默认值](Images/pmj6_1203.png)'
- en: Figure 12-3\. Using default values for selected form fields
  id: totrans-35
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 12-3\. 使用所选表单字段的默认值
- en: Input Types
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 输入类型
- en: HTML forms are very versatile and allow you to submit a wide range of input
    types, from text boxes and text areas to checkboxes, radio buttons, and more.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: HTML表单非常灵活，允许您提交各种输入类型，从文本框和文本区域到复选框、单选按钮等。
- en: Text boxes
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文本框
- en: 'The input type you will probably use most often is the text box. It accepts
    a wide range of alphanumeric text and other characters in a single-line box. The
    general format of a text box input is as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能最常使用的输入类型是文本框。它接受单行框中的广泛字母数字文本和其他字符。文本框输入的一般格式如下：
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We’ve already covered the `name` and `value` attributes, but two more are introduced
    here: `size` and `maxlength`. The `size` attribute specifies the width of the
    box (in characters of the current font) as it should appear on the screen, and
    `maxlength` specifies the maximum number of characters that a user is allowed
    to enter into the field.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论了`name`和`value`属性，但在这里引入了两个新属性：`size`和`maxlength`。`size`属性指定框的宽度（以当前字体的字符数表示），`maxlength`指定用户允许输入的最大字符数。
- en: The only required attributes are `type`, which tells the web browser what type
    of input to expect, and `name`, for giving the input a name that will be used
    to process the field upon receipt of the submitted form.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一必需的属性是`type`，它告诉Web浏览器期望的输入类型，以及`name`，用于在接收提交的表单时处理字段的名称。
- en: Text areas
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文本区域
- en: 'When you need to accept input of more than a short line of text, use a text
    area. This is similar to a text box, but, because it allows multiple lines, it
    has some different attributes. Its general format looks like this:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 当您需要接受超过短行文本的输入时，请使用文本区域。它类似于文本框，但因为允许多行输入，因此具有一些不同的属性。其一般格式如下：
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The first thing to notice is that `<textarea>` has its own tag and is not a
    subtype of the `<input>` tag. It therefore requires a closing `</textarea>` to
    end input.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 首先要注意的是，`<textarea>`具有自己的标签，并不是`<input>`标签的子类型。因此，需要使用闭合标签`</textarea>`来结束输入。
- en: 'Instead of a default attribute, if you have default text to display, you must
    put it before the closing `</textarea>`, and it will then be displayed and be
    editable by the user:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有默认属性，但有要显示的默认文本，则必须将其放在闭合的`</textarea>`之前，然后用户可以看到并且可以编辑它：
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: To control the width and height, use the `cols` and `rows` attributes. Both
    use the character spacing of the current font to determine the size of the area.
    If you omit these values, a default input box will be created that will vary in
    dimensions depending on the browser used, so you should always define them to
    be certain about how your form will appear.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 要控制宽度和高度，请使用`cols`和`rows`属性。两者均使用当前字体的字符间距来确定区域的大小。如果省略这些值，将创建一个默认输入框，其尺寸将根据使用的浏览器而异，因此应始终定义它们，以确保表单的外观。
- en: Last, you can control how the text entered into the box will wrap (and how any
    such wrapping will be sent to the server) using the `wrap` attribute. [Table 12-1](#wrap_types_available_in_a_textarea_i)
    shows the wrap types available. If you leave out the `wrap` attribute, soft wrapping
    is used.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您可以使用`wrap`属性控制输入框中输入的文本如何换行（以及如何将此类换行发送到服务器）。[表 12-1](#wrap_types_available_in_a_textarea_i)显示了可用的换行类型。如果您省略了`wrap`属性，则使用软换行。
- en: Table 12-1\. The wrap types available in a *<textarea>* input
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 表 12-1\. *<textarea>* 输入中可用的换行类型
- en: '| Type | Action |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| 类型 | 动作 |'
- en: '| --- | --- |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `off` | Text does not wrap, and lines appear exactly as the user types them.
    |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| `off` | 文本不换行，行与用户输入的完全一样显示。 |'
- en: '| `soft` | Text wraps but is sent to the server as one long string without
    carriage returns and line feeds. |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| `soft` | 文本自动换行，但作为一个长字符串发送到服务器，不包含换行和换行符。 |'
- en: '| `hard` | Text wraps and is sent to the server in wrapped format with soft
    or hard returns and line feeds. |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| `hard` | 文本自动换行，并以软换行或硬换行及换行符的形式发送到服务器。 |'
- en: Checkboxes
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 复选框
- en: 'When you want to offer a number of different options to a user, from which
    they can select one or more items, checkboxes are the way to go. Here is the format
    to use:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 当您希望向用户提供多个不同选项以供选择时，复选框是一个不错的选择。以下是使用的格式：
- en: '[PRE6]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'By default, checkboxes are square. If you include the `checked` attribute,
    the box is already checked when the browser is displayed. The string you assign
    to the attribute should either be surrounded with double or single quotes or the
    value `"checked"`, or there should be no value assigned (just `checked`). If you
    don’t include the attribute, the box is shown unchecked. Here is an example of
    creating an unchecked box:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，复选框是方形的。如果包含`checked`属性，当浏览器显示时该框将已被选中。您为属性分配的字符串应该用双引号或单引号括起来，或者使用值`"checked"`，或者不赋值（只写`checked`）。如果不包括该属性，则该框显示为未选中。这里是一个创建未选中框的示例：
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If the user doesn’t check the box, no value will be submitted. But if they
    do, a value of `"on"` will be submitted for the field named `agree`. If you prefer
    to have your own value submitted instead of the word *on* (such as the number
    1), you could use the following syntax:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户不选中复选框，则不会提交任何值。但如果他们这样做，名为`agree`的字段将提交值`"on"`。如果您希望自己的值提交而不是单词*on*（比如数字1），您可以使用以下语法：
- en: '[PRE8]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'On the other hand, if you wish to offer a newsletter to your readers when submitting
    a form, you might want to have the checkbox already checked as the default value:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，如果您希望在提交表单时为读者提供一个通讯快讯，您可能希望复选框已默认为选中状态：
- en: '[PRE9]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: If you want to allow groups of items to be selected at one time, assign them
    all the same name. However, only the last item checked will be submitted, unless
    you pass an array as the name. For example, [Example 12-4](#offering_multiple_checkbox_choices)
    allows the user to select their favorite ice creams (see [Figure 12-4](#using_checkboxes_to_make_quick_selection)
    for how it displays in a browser).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望允许一次选择多个项目组，请为它们分配相同的名称。然而，只有最后一个选中的项目将被提交，除非您将数组作为名称传递。例如，[示例 12-4](#offering_multiple_checkbox_choices)允许用户选择他们喜欢的冰淇淋（请参见[图 12-4](#using_checkboxes_to_make_quick_selection)了解其在浏览器中的显示方式）。
- en: Example 12-4\. Offering multiple checkbox choices
  id: totrans-67
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 12-4\. 提供多个复选框选项
- en: '[PRE10]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![Using checkboxes to make quick selections](Images/pmj6_1204.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![使用复选框快速选择](Images/pmj6_1204.png)'
- en: Figure 12-4\. Using checkboxes to make quick selections
  id: totrans-70
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 12-4\. 使用复选框进行快速选择
- en: If only one of the checkboxes is selected, such as the second one, only that
    item will be submitted (the field named `ice` would be assigned the value `"Chocolate"`).
    But if two or more are selected, only the last value will be submitted, with prior
    values being ignored.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果只有一个复选框被选中，例如第二个，只有该项将被提交（名为`ice`的字段将被赋值为`"巧克力"`）。但是如果选择了两个或更多个，只有最后一个值将被提交，之前的值将被忽略。
- en: If you *want* exclusive behavior—so that only one item can be submitted—then
    you should use radio buttons instead (see the next section). Otherwise, to allow
    multiple submissions, you have to slightly alter the HTML, as in [Example 12-5](#submitting_multiple_values_with_an_array)
    (note the addition of the square brackets, `[]`, following the values of `ice`).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您*希望*实现独占行为——即只能提交一个项目——那么您应该使用单选按钮而不是复选框（请参见下一节）。否则，要允许多次提交，您必须稍微更改HTML，如[示例 12-5](#submitting_multiple_values_with_an_array)所示（请注意在`ice`值后添加方括号`[]`）。
- en: Example 12-5\. Submitting multiple values with an array
  id: totrans-73
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 12-5\. 使用数组提交多个值
- en: '[PRE11]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now when the form is submitted, if any of these items have been checked, an
    array called `ice` will be submitted that contains all the selected values. You
    can extract either the single submitted value or the array of values to a variable
    like this:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当表单被提交时，如果这些项目中有任何项目被选中，将提交一个名为`ice`的数组，其中包含所有选定的值。您可以像这样将单个提交的值或值数组提取到一个变量中：
- en: '[PRE12]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: If the field `ice` has been posted as a single value, `$ice` will be a single
    string, such as `"Strawberry"`. But if `ice` was defined in the form as an array
    (like in [Example 12-5](#submitting_multiple_values_with_an_array)), `$ice` will
    be an array, and its number of elements will be the number of values submitted.
    [Table 12-2](#seven_possible_sets_of_values_for_th) shows the seven possible sets
    of values that could be submitted by this HTML for one, two, or all three selections.
    In each case, an array of one, two, or three items is created.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果字段`ice`已经作为单个值发布，`$ice`将是一个单一的字符串，比如`"草莓"`。但是，如果`ice`在表单中被定义为数组（如在[示例 12-5](#submitting_multiple_values_with_an_array)中），`$ice`将是一个数组，并且其元素数量将是提交的值的数量。[表 12-2](#seven_possible_sets_of_values_for_th)展示了此HTML提交的一个、两个或三个选择的七个可能的值集合。在每种情况下，将创建一个包含一个、两个或三个项目的数组。
- en: Table 12-2\. The seven possible sets of values for the array `$ice`
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 表 12-2\. 数组`$ice`的七种可能值集合
- en: '| One value submitted | Two values submitted | Three values submitted |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| 提交一个值 | 提交两个值 | 提交三个值 |'
- en: '| --- | --- | --- |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '|'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE13]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '|'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE14]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '|'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE15]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '|'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: 'If `$ice` is an array, the PHP code to display its contents is quite simple
    and might look like this:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `$ice` 是一个数组，用于显示其内容的 PHP 代码非常简单，可能看起来像这样：
- en: '[PRE16]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This uses the standard PHP `foreach` construct to iterate through the array
    `$ice` and pass each element’s value into the variable `$item`, which is then
    displayed via the `echo` command. The `<br>` is just an HTML formatting device
    to force a new line after each flavor in the display.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这里使用标准的 PHP `foreach` 结构来迭代数组 `$ice` 并将每个元素的值传递到变量 `$item`，然后通过 `echo` 命令显示。`<br>`
    只是 HTML 格式设备，用于在显示中每种口味之后强制换行。
- en: Radio buttons
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 单选按钮
- en: Radio buttons are named after the push-in preset buttons found on many older
    radios, where any previously depressed button pops back up when another is pressed.
    They are used when you want only a single value to be returned from a selection
    of two or more options. All the buttons in a group must use the same name, and,
    because only a single value is returned, you do not have to pass an array.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 单选按钮得名于许多旧收音机上找到的推入预置按钮，其中任何先前按下的按钮在按下另一个按钮时会弹起。当您只想要从两个或多个选项的选择中返回单个值时使用。组中的所有按钮必须使用相同的名称，并且由于只返回一个值，您不必传递数组。
- en: For example, if your website offers a choice of delivery times for items purchased
    from your store, you might use HTML like that in [Example 12-6](#using_radio_buttons)
    (see [Figure 12-5](#selecting_a_single_value_with_radio_butt) to see how it displays).
    By default, radio buttons are round.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果您的网站为从您的商店购买的物品提供交货时间选择，您可以使用类似于 [示例 12-6](#using_radio_buttons) 中的 HTML（参见
    [图 12-5](#selecting_a_single_value_with_radio_butt) 了解其显示方式）。默认情况下，单选按钮是圆形的。
- en: Example 12-6\. Using radio buttons
  id: totrans-94
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 12-6\. 使用单选按钮
- en: '[PRE17]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '![Selecting a single value with radio buttons](Images/pmj6_1205.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![使用单选按钮选择单个值](Images/pmj6_1205.png)'
- en: Figure 12-5\. Selecting a single value with radio buttons
  id: totrans-97
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 12-5\. 使用单选按钮选择单个值
- en: Here, the second option of Noon–4pm has been selected by default. This default
    choice ensures that at least one delivery time will be chosen by the user, which
    they can change to one of the other two options if they prefer. Had one of the
    items not been already checked, the user might forget to select an option, and
    no value would be submitted at all for the delivery time.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，默认选择了第二个选项 Noon–4pm。此默认选择确保用户至少选择一个交货时间，如果他们喜欢，可以将其更改为其他两个选项之一。如果没有一个项目已经被选中，用户可能会忘记选择选项，而对于交货时间则根本不提交任何值。
- en: Hidden fields
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 隐藏字段
- en: 'Sometimes it is convenient to have hidden form fields so that you can keep
    track of the state of form entry. For example, you might wish to know whether
    a form has already been submitted. You can achieve this by adding some HTML in
    your PHP code, such as the following:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，拥有隐藏的表单字段会很方便，这样您可以跟踪表单输入的状态。例如，您可能希望知道表单是否已经提交过。您可以通过在 PHP 代码中添加一些 HTML
    来实现，例如以下内容：
- en: '[PRE18]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This is a simple PHP `echo` statement that adds an `input` field to the HTML
    form. Let’s assume the form was created outside the program and displayed to the
    user. The first time the PHP program receives the input, this line of code has
    not run, so there will be no field named `submitted`. The PHP program re-creates
    the form, adding the `input` field. So when the visitor resubmits the form, the
    PHP program receives it with the `submitted` field set to `"yes"`. The code can
    simply check whether the field is present:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的 PHP `echo` 语句，将一个 `input` 字段添加到 HTML 表单中。假设表单是在程序外创建并显示给用户的。第一次 PHP
    程序接收到输入时，这行代码还没有运行，因此不会有名为 `submitted` 的字段。PHP 程序重新创建表单，添加 `input` 字段。因此，当访问者重新提交表单时，PHP
    程序将收到带有 `submitted` 字段设置为 `"yes"` 的输入。代码可以简单地检查该字段是否存在：
- en: '[PRE19]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Hidden fields can also be useful for storing other details, such as a session
    ID string that you might create to identify a user, and so on.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 隐藏字段还可以用于存储其他详细信息，例如您可能创建用于识别用户的会话 ID 字符串等。
- en: Warning
  id: totrans-105
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: Never treat hidden fields as secure—because they are not. Someone could easily
    view the HTML containing them by using a browser’s View Source feature. A malicious
    attacker could also craft a post that removes, adds, or changes a hidden field.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 永远不要将隐藏字段视为安全的，因为它们并非如此。某人可以通过使用浏览器的“查看源代码”功能轻松查看包含它们的 HTML。恶意攻击者也可以制作一个帖子，以删除、添加或更改隐藏字段。
- en: <select>
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <select>
- en: 'The `<select>` tag lets you create a drop-down list of options, offering either
    single or multiple selections. It conforms to the following syntax:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`<select>`标签允许您创建一个包含单个或多个选择项的下拉列表。它遵循以下语法：'
- en: '[PRE20]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The attribute `size` is the number of lines to display before the dropdown is
    expanded. Clicking on the display causes a list to drop down, showing all the
    options. If you use the `multiple` attribute, a user can select multiple options
    from the list by pressing the Ctrl key when clicking. So, to ask a user for their
    favorite vegetable from a choice of five, you might use HTML like that in [Example 12-7](#using_select),
    which offers a single selection.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 属性`size`表示展开下拉列表前要显示的行数。单击显示内容时，将显示一个下拉列表，其中包含所有选项。如果使用`multiple`属性，用户可以按住 Ctrl
    键并单击以从列表中选择多个选项。例如，要求用户从五个选择中选择其最喜欢的蔬菜，您可以像[示例 12-7](#using_select)中的 HTML 那样使用单选。
- en: Example 12-7\. Using `<select>`
  id: totrans-111
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 12-7\. 使用`<select>`
- en: '[PRE21]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'This HTML offers five choices, with the first one, *Peas*, preselected (due
    to it being the first item). [Figure 12-6](#creating_a_drop-down_list_with_select)
    shows the output where the list has been clicked to drop it down, and the option
    *Carrots* has been highlighted. If you want to have a different default option
    offered first (such as *Beans*), use the `selected` attribute, like this:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 此 HTML 提供五个选项，第一个选项*Peas*被预先选择（因为它是第一个项目）。[图 12-6](#creating_a_drop-down_list_with_select)显示了单击列表以展开它，并且选项*Carrots*已被突出显示的输出。如果您想要提供不同的默认选项（如*Beans*），请使用`selected`属性，如下所示：
- en: '[PRE22]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '![Creating a drop-down list with select](Images/pmj6_1206.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![创建带有下拉选择的列表](Images/pmj6_1206.png)'
- en: Figure 12-6\. Creating a drop-down list with `<select>`
  id: totrans-116
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 12-6\. 创建一个带有`<select>`的下拉列表
- en: You can also allow users to select more than one item, as in [Example 12-8](#using_select_with_the_multiple_attribute).
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 用户也可以选择多个项目，例如[示例 12-8](#using_select_with_the_multiple_attribute)。
- en: Example 12-8\. Using `<select>` with the `multiple` attribute
  id: totrans-118
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 12-8\. 使用带有`multiple`属性的`<select>`
- en: '[PRE23]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This HTML is not very different; the `size` has been changed to `"5"`, and the
    attribute `multiple` has been added. But, as you can see from [Figure 12-7](#using_a_select_with_the_multiple_attribu),
    it is now possible for the user to select more than one option by using the Ctrl
    key when clicking. You can leave out the `size` attribute if you wish, and the
    output will be the same; however, with a larger list, the drop-down box may display
    more items, so I recommend that you pick a suitable number of rows and stick with
    it. I also recommend not using multiple select boxes smaller than two rows in
    height—some browsers may not correctly display the scroll bars needed to access
    them.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 此 HTML 并没有太大的不同；`size`已更改为`"5"`，并添加了`multiple`属性。但是，正如您从[图 12-7](#using_a_select_with_the_multiple_attribu)中看到的那样，用户现在可以通过在单击时按住
    Ctrl 键来选择多个选项。如果愿意，可以省略`size`属性，输出结果将相同；但是，对于更大的列表，下拉框可能会显示更多的项目，因此建议选择合适的行数并坚持使用。我还建议不要使用高度小于两行的多重选择框
    —— 一些浏览器可能无法正确显示所需的滚动条以访问它们。
- en: '![Using a select with the multiple attribute](Images/pmj6_1207.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![使用带有多重属性的选择](Images/pmj6_1207.png)'
- en: Figure 12-7\. Using a `<select>` with the `multiple` attribute
  id: totrans-122
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 12-7\. 使用带有`multiple`属性的`<select>`
- en: You can also use the `selected` attribute within a multiple select and can,
    in fact, have more than one option preselected if you wish.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在多选中使用`selected`属性，并且如果需要，可以预先选择多个选项。
- en: Labels
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 标签
- en: You can provide an even better user experience by utilizing the `<label>` tag.
    With it, you can surround a form element, making it selectable by clicking any
    visible part contained between the opening and closing `<label>` tags.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过使用`<label>`标签来提供更好的用户体验。使用它，您可以包围表单元素，使其可通过点击位于开放和关闭`<label>`标签之间的任何可见部分来选择。
- en: 'For instance, going back to the example of choosing a delivery time, you could
    allow the user to click the radio button itself *and* the associated text, like
    this:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，回到选择交货时间的示例，您可以允许用户同时单击单选按钮本身和相关文本，如下所示：
- en: '[PRE24]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The text will not be underlined like a hyperlink when you do this, but as the
    mouse pointer passes over it, it will change to an arrow instead of a text cursor,
    indicating that the whole item is clickable.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做时文本不会像超链接一样带有下划线，但当鼠标指针悬停在其上时，指针将变为箭头而不是文本光标，表示整个项是可点击的。
- en: The submit button
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提交按钮
- en: 'To match the type of form being submitted, you can change the text of the submit
    button to anything you like by using the `value` attribute, like this:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 为了匹配被提交的表单类型，你可以通过使用`value`属性将提交按钮的文本更改为任何你喜欢的内容，像这样：
- en: '[PRE25]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'You can also replace the standard text button with a graphic image of your
    choice, using HTML such as this:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用类似以下的HTML来用图像替换标准文本按钮：
- en: '[PRE26]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Sanitizing Input
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 清理输入
- en: Now we return to PHP programming. It can never be emphasized enough that handling
    user data is a security minefield, and it is essential to learn to treat all such
    data with the utmost caution from the start. It’s actually not that difficult
    to sanitize user input from potential hacking attempts, but it must be done.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们回到PHP编程。处理用户数据永远不能过分强调其安全性风险，从一开始就学会以最高的警惕性对待所有这些数据至关重要。事实上，清理用户输入以防止潜在的黑客攻击并不难，但必须做好。
- en: The first thing to remember is that regardless of what constraints you have
    placed in an HTML form to limit the types and sizes of inputs, it is a trivial
    matter for a hacker to use their browser’s View Source feature to extract the
    form and modify it to provide malicious input to your website.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 首先要记住的是，无论你在HTML表单中设置了什么限制来限制输入的类型和大小，对于黑客来说，使用浏览器的查看源代码功能提取表单并修改以提供恶意输入到你的网站是微不足道的事情。
- en: Therefore, you must never trust any variable that you fetch from either the
    `$_GET` or `$_POST` arrays until you have sanitized it. If you don’t, users may
    try to inject JavaScript into the data to interfere with your site’s operation,
    or even attempt to add MySQL commands to compromise your database.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在对从`$_GET`或`$_POST`数组中获取的任何变量进行彻底清理之前，你绝不能信任它们。如果不这样做，用户可能会尝试将JavaScript注入到数据中以干扰你网站的运行，甚至试图添加MySQL命令以威胁你的数据库。
- en: 'So, instead of just using code such as the following when reading in user input:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，不要仅仅在读取用户输入时使用如下代码：
- en: '[PRE27]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'you should also use one or more of the following lines of code. For example,
    to prevent escape characters from being injected into a string that will be presented
    to MySQL, use the following to escape all necessary characters and also add quotes
    to the start and end of the string. Remember that this function takes into account
    the current character set of a MySQL connection, so it must be used with a PDO
    connection object (in this instance, `$pdo`), as discussed in [Chapter 11](ch11.xhtml#accessing_mysql_using_php):'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 你还应该使用以下一个或多个代码行。例如，为了防止注入到将提交给MySQL的字符串中的转义字符，使用以下方法转义所有必要的字符，并在字符串的开头和结尾添加引号。记住，此函数考虑了MySQL连接的当前字符集，因此必须与PDO连接对象一起使用（在本例中为`$pdo`），如在[第11章](ch11.xhtml#accessing_mysql_using_php)讨论的那样：
- en: '[PRE28]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Note
  id: totrans-142
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Remember that the safest way to secure MySQL from hacking attempts is to use
    placeholders and prepared statements, as described in [Chapter 11](ch11.xhtml#accessing_mysql_using_php).
    If you do so for all accesses to MySQL, it becomes unnecessary to escape data
    being transferred into or out of the database. You will, however, still need to
    sanitize input when including it within HTML.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，确保MySQL免受黑客攻击的最安全方法是使用占位符和准备语句，如在[第11章](ch11.xhtml#accessing_mysql_using_php)中所述。如果你对所有对MySQL的访问都这样做了，那么在转移数据进出数据库时就不需要转义数据。然而，当在HTML中包含数据时，仍然需要对其进行清理。
- en: 'To get rid of unwanted slashes, you should first check whether PHP’s magic
    quotes feature is enabled (which will escape quotes by adding slashes), and if
    so call the `stripslashes` function like this:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 要消除不需要的斜杠，你应该首先检查是否启用了PHP的魔术引号功能（这将通过添加斜杠来转义引号），如果是，则调用`stripslashes`函数，如下所示：
- en: '[PRE29]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'And to remove any HTML from a string, use the following:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 要从字符串中删除任何HTML，请使用以下方法：
- en: '[PRE30]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: For example, this would change a string of interpretable HTML code like `<b>hi</b>`
    into `&lt;b&gt;hi&lt;/b&gt;`, which then displays as text and won’t be interpreted
    as HTML tags.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这将把像`<b>hi</b>`这样的可解释HTML代码字符串转换为`&lt;b&gt;hi&lt;/b&gt;`，然后显示为文本，而不会被解释为HTML标签。
- en: 'Finally, if you wish to strip HTML entirely from an input, use the following
    (but ensure you use it before calling `htmlentities`, which replaces any angle
    brackets used as part of HTML tags):'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果你希望完全从输入中删除HTML，请使用以下方法（但确保在调用`htmlentities`之前使用它，后者会替换任何用作HTML标签的尖括号）：
- en: '[PRE31]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: In fact, until you know exactly what sanitization you require for a program,
    [Example 12-9](#sanitizestring_and_sanitizemysql_fun) shows a pair of functions
    that brings all these checks together to provide a very good level of security.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，直到你确切地知道一个程序需要什么样的净化处理，[示例 12-9](#sanitizestring_and_sanitizemysql_fun)
    展示了一对函数，将所有这些检查结合在一起，提供了非常好的安全级别。
- en: Example 12-9\. The `sanitizeString` and `sanitizeMySQL` functions
  id: totrans-152
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 12-9\. `sanitizeString` 和 `sanitizeMySQL` 函数
- en: '[PRE32]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Add this code to the end of your PHP programs, and you can then call it for
    each user input to sanitize, like this:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 将此代码添加到您的 PHP 程序的末尾，然后您可以像这样调用它来对每个用户输入进行净化：
- en: '[PRE33]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Or, when you have an open MySQL connection and a PDO connection object (in
    this case, called `$pdo`):'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，当您拥有一个开放的 MySQL 连接和一个 PDO 连接对象（在本例中称为 `$pdo`）时：
- en: '[PRE34]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: An Example Program
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个示例程序
- en: Let’s look at how a real-life PHP program integrates with an HTML form by creating
    the program *convert.php* listed in [Example 12-10](#program_to_convert_values_between_fahr).
    Type it as shown and try it for yourself.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一个真实的 PHP 程序如何通过创建名为 *convert.php* 的程序与 HTML 表单集成，程序列出了 [示例 12-10](#program_to_convert_values_between_fahr)。按照示例输入并尝试运行它。
- en: Example 12-10\. A program to convert values between Fahrenheit and Celsius
  id: totrans-160
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 12-10\. 一个用于在华氏度和摄氏度之间转换值的程序
- en: '[PRE35]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: When you call up *convert.php* in a browser, the result should look something
    like [Figure 12-8](#temperature_conversion_program_in_ac).
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 当您在浏览器中调用 *convert.php* 时，结果应该看起来类似于 [图 12-8](#temperature_conversion_program_in_ac)。
- en: '![The temperature conversion program in action](Images/pmj6_1208.png)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![运行中的温度转换程序](Images/pmj6_1208.png)'
- en: Figure 12-8\. The temperature conversion program in action
  id: totrans-164
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 12-8\. 运行中的温度转换程序
- en: To break the program down, the first line initializes the variables `$c` and
    `$f` in case they do not get posted to the program. The next two lines fetch the
    values of either the field named `f` or the one named `c`, for an input Fahrenheit
    or Celsius value. If the user inputs both, the Celsius is simply ignored and the
    Fahrenheit value is converted. As a security measure, the new function `sanitizeString`
    from [Example 12-9](#sanitizestring_and_sanitizemysql_fun) is also used.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解析该程序，第一行初始化了变量 `$c` 和 `$f`，以防它们未被提交到程序。接下来的两行获取名为 `f` 或名为 `c` 的字段的值，用于输入的华氏度或摄氏度值。如果用户输入了两者，摄氏度值会被简单地忽略，而华氏度值会被转换。作为安全措施，还使用了来自
    [示例 12-9](#sanitizestring_and_sanitizemysql_fun) 的新函数 `sanitizeString`。
- en: So, having either submitted values or empty strings in both `$f` and `$c`, the
    next portion of code constitutes an `if...elseif...else` structure that first
    tests whether `$f` has a numeric value. If not, it checks `$c`; if `$c` does not
    have a numeric value either, the variable `$out` is set to the empty string (more
    on that in a moment).
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，无论 `$f` 和 `$c` 中是提交的值还是空字符串，代码的下一部分构成一个 `if...elseif...else` 结构，首先测试 `$f`
    是否具有数值。如果没有，它会检查 `$c`；如果 `$c` 也没有数值，变量 `$out` 被设置为空字符串（稍后详细介绍）。
- en: If `$f` is found to have a numeric value, the variable `$c` is assigned a simple
    mathematical expression that converts the value of `$f` from Fahrenheit to Celsius.
    The formula used is Celsius = (5 / 9) × (Fahrenheit – 32). The variable `$out`
    is then set to a message string explaining the conversion.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `$f` 被发现具有数值，变量 `$c` 被分配一个简单的数学表达式，用于将 `$f` 的值从华氏度转换为摄氏度。使用的公式是 摄氏度 = (5
    / 9) × (华氏度 – 32)。然后变量 `$out` 被设置为一个解释转换的消息字符串。
- en: On the other hand, if `$c` is found to have a numeric value, a complementary
    operation is performed to convert the value of `$c` from Celsius to Fahrenheit
    and assign the result to `$f`. The formula used is Fahrenheit = (9 / 5) × Celsius
    + 32\. As with the previous section, the string `$out` is then set to contain
    a message about the conversion.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，如果 `$c` 被发现具有数值，执行一个补充操作来将 `$c` 的值从摄氏度转换为华氏度，并将结果赋给 `$f`。使用的公式是 华氏度 = (9
    / 5) × 摄氏度 + 32。与前一节类似，字符串 `$out` 被设置为包含有关转换的消息。
- en: In both conversions, the PHP `intval` function is called to convert the result
    of the conversion to an integer value. It’s not necessary but looks better.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在两种转换中，调用 PHP 的 `intval` 函数将转换的结果转换为整数值。虽然这不是必需的，但看起来更好。
- en: With all the arithmetic done, the program now outputs the HTML, which starts
    with the basic head and title and then contains some introductory text before
    displaying the value of `$out`. If no temperature conversion was made, `$out`
    will have a value of `NULL` and nothing will be displayed, which is exactly what
    we want when the form hasn’t yet been submitted. But if a conversion was made,
    `$out` contains the result, which is displayed.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 所有算术运算完成后，程序现在输出 HTML，其中包含基本的头部和标题，然后是一些介绍性文本，然后显示 `$out` 的值。如果没有进行温度转换，`$out`
    将具有 `NULL` 的值，并且不会显示任何内容，这正是在表单尚未提交时所希望的。但是如果进行了转换，`$out` 包含结果，将会显示出来。
- en: After this, we come to the form, which is set to submit using the POST method
    to the program itself (represented by a pair of double quotation marks so that
    the file can be saved with any name). Within the form, there are two inputs for
    either a Fahrenheit or a Celsius value to be entered. A submit button with the
    text Convert is then displayed, and the form is closed.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在此之后，我们来到了表单，它设置为使用 POST 方法提交到程序本身（用一对双引号表示，以便文件可以以任何名称保存）。在表单内部，有两个输入框，用于输入华氏度或摄氏度的值。然后显示一个带有文本“Convert”的提交按钮，并关闭表单。
- en: After outputting the HTML to close the document, we come finally to the function
    `sanitizeString` from [Example 12-9](#sanitizestring_and_sanitizemysql_fun). Try
    playing with the example by inputting different values into the fields; for a
    bit of fun, can you find a value for which Fahrenheit and Celsius are the same?
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在输出 HTML 以关闭文档后，我们最终来到了来自 [示例 12-9](#sanitizestring_and_sanitizemysql_fun) 的函数
    `sanitizeString`。尝试通过输入不同的值来玩弄示例；为了有趣，您能找到一个华氏度和摄氏度相同的值吗？
- en: Note
  id: totrans-173
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: All the examples in this chapter have used the POST method to send form data.
    I recommend this, as it’s the neatest and most secure method. However, the forms
    can easily be changed to use the GET method, as long as values are fetched from
    the `$_GET` array instead of the `$_POST` array. Reasons to do this might include
    making the result of a search bookmarkable or directly linkable from another page.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的所有示例都使用 POST 方法发送表单数据。我建议使用这种方法，因为它既整洁又安全。但是，只要从 `$_GET` 数组中获取值而不是 `$_POST`
    数组，表单就可以轻松更改为使用 GET 方法。可能需要这样做的原因包括使搜索结果可书签化或直接从另一页链接。
- en: HTML5 Enhancements
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTML5 增强功能
- en: With HTML5, developers can draw on a number of useful enhancements to form handling
    to make using forms easier than ever, including new attributes; color, date, and
    time pickers; and new input types. You can always refer to *caniuse.com* to check
    how widely a feature has been implemented by the various browsers.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 HTML5，开发者可以利用一系列有用的增强功能来处理表单，使表单的使用比以往更加简便，包括新的属性；颜色、日期和时间选择器；以及新的输入类型。您可以随时参考
    *caniuse.com* 查看各种浏览器对某一功能的广泛实现情况。
- en: The autocomplete Attribute
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: autocomplete 属性
- en: You can apply the `autocomplete` attribute to the `<form>` element, or to any
    of the `color`, `date`, `email`, `password`, `range`, `search`, `tel`, `text`,
    or `url` types of the `<input>` element.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将 `autocomplete` 属性应用于 `<form>` 元素，或应用于 `<input>` 元素的 `color`、`date`、`email`、`password`、`range`、`search`、`tel`、`text`
    或 `url` 类型中的任何一个。
- en: 'With autocomplete enabled, previous user inputs are recalled and automatically
    entered into fields as suggestions. You can also disable this feature by turning
    autocomplete off. Here’s how to turn autocomplete on for an entire form but disable
    it for specific fields (highlighted in bold):'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 启用自动完成后，先前的用户输入将被召回并自动输入到字段中作为建议。您也可以通过关闭自动完成来禁用此功能。以下是如何为整个表单启用自动完成但对特定字段禁用它（用粗体标出）的方法：
- en: '[PRE36]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: The autofocus Attribute
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: autofocus 属性
- en: 'The `autofocus` attribute gives immediate focus to an element when a page loads.
    It can be applied to any `<input>`, `<textarea>`, or `<button>` element, like
    this:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '`autofocus` 属性在页面加载时立即将焦点设置到元素上。可以应用于任何 `<input>`、`<textarea>` 或 `<button>`
    元素，如下所示：'
- en: '[PRE37]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Note
  id: totrans-184
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Browsers that use touch interfaces (such as Android or iOS) usually ignore the
    `autofocus` attribute, leaving it to the user to tap on a field to give it focus;
    otherwise, the zooming, focusing, and pop-up keyboards this attribute would generate
    could quickly become very annoying.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 使用触摸界面的浏览器（如 Android 或 iOS）通常会忽略 `autofocus` 属性，使用户需点击字段以获取焦点；否则，这一属性可能会产生的缩放、聚焦和弹出键盘将会变得非常令人讨厌。
- en: Because this feature will cause the focus to move into an input element, the
    Backspace key will no longer take the user back a web page (although Alt-Left
    arrow and Alt-Right arrow will still move backward and forward within the browsing
    history).
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 因为此功能会导致焦点移动到输入元素中，所以退格键将不再将用户带回网页（尽管 Alt-左箭头和 Alt-右箭头仍将在浏览历史中向后和向前移动）。
- en: The placeholder Attribute
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: placeholder 属性
- en: 'The `placeholder` attribute lets you place into any blank input field a helpful
    hint to explain to users what they should enter. You use it like this:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '`placeholder` 属性允许您在任何空白输入字段中放置一个有用的提示，以解释用户应该输入什么。您可以像这样使用它：'
- en: '[PRE38]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: The input field will display the placeholder text as a prompt until the user
    starts typing, at which point the placeholder will disappear.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 输入字段将显示占位符文本作为提示，直到用户开始输入，此时占位符将消失。
- en: The required Attribute
  id: totrans-191
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: required 属性
- en: 'The `required` attribute ensures that a field has been completed before a form
    is submitted. Use it like this:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '`required` 属性确保在提交表单之前已填写字段。像这样使用它：'
- en: '[PRE39]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: When the browser detects an attempted form submission where there’s an uncompleted
    `required` input, a message is displayed, prompting the user to complete the field.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 当浏览器检测到尝试提交表单时存在未完成的 `required` 输入时，会显示一条消息，提示用户完成字段。
- en: Override Attributes
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 覆盖属性
- en: 'With override attributes, you can override form settings on an element-by-element
    basis. So, for example, using the `formaction` attribute, you can specify that
    a submit button should submit a form to a different URL from the one specified
    in the form itself, like the following (in which the default and overridden action
    URLs are bold):'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 使用覆盖属性，您可以逐元素地覆盖表单设置。例如，使用 `formaction` 属性，您可以指定提交按钮应将表单提交到与表单本身指定的不同 URL，如下所示（其中默认和被覆盖的操作
    URL 以粗体显示）：
- en: '[PRE40]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: HTML5 also brings support for the `formenctype`, `formmethod`, `formnovalidate`,
    and `formtarget` override attributes, which you can use in exactly the same manner
    as `formaction` to override one of these settings.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: HTML5 还支持 `formenctype`、`formmethod`、`formnovalidate` 和 `formtarget` 这些覆盖属性，您可以像使用
    `formaction` 一样使用它们来覆盖这些设置之一。
- en: The width and height Attributes
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: width 和 height 属性
- en: 'Using these new attributes, you can alter the displayed dimensions of an input
    image, like this:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些新属性，您可以更改输入图像的显示尺寸，像这样：
- en: '[PRE41]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: The min and max Attributes
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: min 和 max 属性
- en: 'With the `min` and `max` attributes, you can specify minimum and maximum values
    for inputs. You use the attributes like this:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `min` 和 `max` 属性，您可以指定输入的最小和最大值。您可以像这样使用这些属性：
- en: '[PRE42]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: The browser will then either offer up and down selectors for the range of values
    allowed or simply disallow values outside of that range.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，浏览器将为允许的值范围提供上下选择器，或者简单地禁止超出该范围的值。
- en: The step Attribute
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤属性
- en: 'Often used with `min` and `max`, the `step` attribute supports stepping through
    number or date values, like this:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 常与 `min` 和 `max` 一起使用，`step` 属性支持遍历数字或日期值，像这样：
- en: '[PRE43]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: When you are stepping through date or time values, each unit represents 1 second.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 当您遍历日期或时间值时，每个单位代表 1 秒。
- en: The form Attribute
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表单属性
- en: 'With HTML5, you no longer have to place `<input>` elements within `<form>`
    elements, because you can specify the form to which an input applies by supplying
    a `form` attribute. The following code shows a form being created, but with its
    input outside of the `<form>` and `</form>` tags:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 HTML5，您不再必须将 `<input>` 元素放置在 `<form>` 元素内，因为您可以通过提供 `form` 属性来指定输入适用于哪个表单。以下代码显示了创建表单的示例，但其输入位于
    `<form>` 和 `</form>` 标签之外：
- en: '[PRE44]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: To do this, you must give the form an ID using the `id` attribute and refer
    to this ID in the `form` attribute of the `input` element. This is most useful
    for adding hidden input fields, because you can’t control how the field is laid
    out inside the form, or for using JavaScript to modify forms and inputs on the
    fly.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，您必须使用 `id` 属性为表单指定一个 ID，并在 `input` 元素的 `form` 属性中引用此 ID。这对于添加隐藏的输入字段非常有用，因为您无法控制字段在表单内的布局，或者使用
    JavaScript 在运行时修改表单和输入。
- en: The list Attribute
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列表属性
- en: 'HTML5 supports attaching lists to inputs to enable users to easily select from
    a predefined list, which you can use like this:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: HTML5 支持将列表附加到输入框，以便用户可以轻松从预定义列表中进行选择，您可以像这样使用它：
- en: '[PRE45]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: The color Input Type
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 颜色输入类型
- en: 'The `color` input type calls up a color picker so that you can simply click
    the color of your choice. You use it like this:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '`color` 输入类型调用颜色选择器，以便您可以简单地点击您选择的颜色。您可以像这样使用它：'
- en: '[PRE46]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: The number and range Input Types
  id: totrans-220
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数字和范围输入类型
- en: 'The `number` and `range` input types restrict input to a number and optionally
    also specify an allowed range like this:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '`number` 和 `range` 输入类型限制输入为数字，并且还可以指定允许的范围，如下所示：'
- en: '[PRE47]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Date and Time Pickers
  id: totrans-223
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 日期和时间选择器
- en: 'When you choose an input type of `date`, `month`, `week`, `time`, `datetime`,
    or `datetime-local`, a picker will pop up on supported browsers from which the
    user can make a selection, like this one, which inputs the time:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 当您选择`date`、`month`、`week`、`time`、`datetime`或`datetime-local`输入类型时，在支持的浏览器上会弹出选择器，用户可以从中选择，例如，这个选择时间的输入：
- en: '[PRE48]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: The next chapter will show you how to use cookies and authentication to store
    users’ preferences and keep them logged in, and how to maintain a complete user
    session.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将向您展示如何使用 cookie 和认证来存储用户的偏好并保持登录状态，以及如何维护完整的用户会话。
- en: Questions
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: You can submit form data using either the POST or the GET method. Which associative
    arrays are used to pass this data to PHP?
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以使用 POST 或 GET 方法提交表单数据。用于将这些数据传递给 PHP 的关联数组是哪些？
- en: What is the difference between a text box and a text area?
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 文本框和文本区域有什么区别？
- en: If a form has to offer three choices to a user, each of which is mutually exclusive
    so that only one of the three can be selected, which input type would you use,
    given a choice between checkboxes and radio buttons?
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果一个表单必须向用户提供三个选择，每个选择都是互斥的，因此只能选择其中之一，那么在复选框和单选按钮之间选择时，您会使用哪种输入类型？
- en: How can you submit a group of selections from a web form using a single field
    name?
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何使用单个字段名提交 web 表单中的一组选择？
- en: How can you submit a form field without displaying it in the browser?
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何在浏览器中不显示的情况下提交表单字段？
- en: Which HTML tag is used to encapsulate a form element and supporting text or
    graphics, making the entire unit selectable with a mouse-click?
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用哪个 HTML 标签封装表单元素及其支持的文本或图形，使整个单元可用鼠标点击选择？
- en: Which PHP function converts HTML into a format that can be displayed but will
    not be interpreted as HTML by a browser?
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个 PHP 函数将 HTML 转换为可以显示但不会被浏览器解释为 HTML 的格式？
- en: What form attribute can be used to help users complete input fields?
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么表单属性可用于帮助用户完成输入字段？
- en: How can you ensure that an input is completed before a form gets submitted?
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何确保在提交表单之前完成输入？
- en: See [“Chapter 12 Answers”](app01_split_011.xhtml#chapter_12_answers) in the
    [Appendix A](app01_split_000.xhtml#solutions_to_the_chapter_questions) for the
    answers to these questions.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[“第12章答案”](app01_split_011.xhtml#chapter_12_answers)，位于[附录 A](app01_split_000.xhtml#solutions_to_the_chapter_questions)中，以查看这些问题的答案。
