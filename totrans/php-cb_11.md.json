["```php\nclass StringFilter extends php_user_filter\n{\n    private string $mode;\n\n    public function filter($in, $out, &$consumed, bool $closing): int\n    {\n        while ($bucket = stream_bucket_make_writeable($in)) { ![1](assets/1.png)\n            switch($this->mode) {\n                case 'lower':\n                    $bucket->data = strtolower($bucket->data);\n                    break;\n                case 'upper':\n                    $bucket->data = strtoupper($bucket->data);\n                    break;\n            }\n\n            $consumed += $bucket->datalen; ![2](assets/2.png)\n            stream_bucket_append($out, $bucket); ![3](assets/3.png)\n        }\n\n        return PSFS_PASS_ON; ![4](assets/4.png)\n    }\n\n    public function onCreate(): bool\n    {\n        switch($this->filtername) { ![5](assets/5.png)\n            case 'str.tolower':\n                $this->mode = 'lower';\n                return true;\n            case 'str.toupper':\n                $this->mode = 'upper';\n                return true;\n            default:\n                return false;\n        }\n    }\n}\n\nstream_filter_register('str.*', 'StringFilter'); ![6](assets/6.png)\n\n$fp = fopen('document.txt', 'w');\nstream_filter_append($fp, 'str.toupper'); ![7](assets/7.png)\n\nfwrite($fp, 'Hello' . PHP_EOL); ![8](assets/8.png)\nfwrite($fp, 'World' . PHP_EOL);\n\nfclose($fp);\n\necho file_get_contents('document.txt'); ![9](assets/9.png)\n```", "```php\n$fp = fopen('php://temp', 'rw');\n\nwhile (true) {\n    // Get data from some source\n\n    fputs($fp, $data);\n\n    if ($endOfData) {\n        break;\n    }\n}\n```", "```php\nrewind($fp);\n\nwhile (true) {\n    $data = fgets($fp);\n\n    if ($data === false) {\n        break;\n    }\n\n    echo $data;\n}\n\nfclose($fp);\n```", "```php\n$fp = fopen('php://temp', 'rw');\n\nfputs($fp, 'Hello world!'); ![1](assets/1.png)\n\nrewind($fp); ![2](assets/2.png)\necho fgets($fp) . PHP_EOL; ![3](assets/3.png)\n\n$fp2 = fopen('php://temp', 'rw'); ![4](assets/4.png)\nfputs($fp2, 'Goodnight moon.'); ![5](assets/5.png)\n\nrewind($fp); ![6](assets/6.png)\nrewind($fp2);\n\necho fgets($fp2) . PHP_EOL; ![7](assets/7.png)\necho fgets($fp) . PHP_EOL; ![8](assets/8.png)\n```", "```php\n$stdin = fopen('php://stdin', 'r');\n```", "```php\nif (empty($key = getenv('ENCRYPTION_KEY'))) { ![1](assets/1.png)\n    throw new Exception('No encryption key provided!');\n}\n\n$key = hex2bin($key);\nif (strlen($key) !== SODIUM_CRYPTO_STREAM_XCHACHA20_KEYBYTES) { ![2](assets/2.png)\n    throw new Exception('Invalid encryption key provided!');\n}\n\n$in = fopen('php://stdin', 'r'); ![3](assets/3.png)\n$filename = sprintf('encrypted-%s.bin', uniqid()); ![4](assets/4.png)\n$out = fopen($filename, 'w'); ![5](assets/5.png)\n\n[$state, $header] = sodium_crypto_secretstream_xchacha20poly1305_init_push($key); ![6](assets/6.png)\n\nfwrite($out, $header);\n\nwhile (!feof($in)) {\n    $text = fread($in, 8175);\n\n    if (strlen($text) > 0) {\n        $cipher = sodium_crypto_secretstream_xchacha20poly1305_push($state, $text);\n\n        fwrite($out, $cipher);\n    }\n}\n\nsodium_memzero($state);\n\nfclose($in);\nfclose($out);\n\necho sprintf('Wrote %s' . PHP_EOL, $filename);\n```", "```php\nif (empty($key = getenv('ENCRYPTION_KEY'))) {\n    throw new Exception('No encryption key provided!');\n}\n\n$key = hex2bin($key);\nif (strlen($key) !== SODIUM_CRYPTO_STREAM_XCHACHA20_KEYBYTES) {\n    throw new Exception('Invalid encryption key provided!');\n}\n\n$in = fopen('php://stdin', 'r');\n$filename = sprintf('decrypted-%s.txt', uniqid());\n$out = fopen($filename, 'w');\n\n$header = fread($in, SODIUM_CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_HEADERBYTES);\n$state = sodium_crypto_secretstream_xchacha20poly1305_init_pull($header, $key);\n\ntry {\n    while (!feof($in)) {\n        $cipher = fread($in, 8192);\n\n        [$plain, ] = sodium_crypto_secretstream_xchacha20poly1305_pull(\n            $state,\n            $cipher\n        );\n\n        if ($plain === false) {\n            throw new Exception('Error decrypting file!');\n        }\n\n        fwrite($out, $plain);\n    }\n} finally {\n    sodium_memzero($state);\n\n    fclose($in);\n    fclose($out);\n\n    echo sprintf('Wrote %s' . PHP_EOL, $filename);\n}\n```", "```php\n$stdout = fopen('php://stdout', 'w');\nfputs($stdout, 'Hello, world!');\n```", "```php\nfputs($stdout, 'Hello, world!');\necho 'Hello, world!';\n```", "```php\nif (empty($key = getenv('ENCRYPTION_KEY'))) {\n    throw new Exception('No encryption key provided!');\n}\n\n$key = hex2bin($key);\nif (strlen($key) !== SODIUM_CRYPTO_STREAM_XCHACHA20_KEYBYTES) {\n    throw new Exception('Invalid encryption key provided!');\n}\n\n$in = fopen('php://stdin', 'r');\n$out = fopen('php://stdout', 'w'); ![1](assets/1.png)\n$err = fopen('php://stderr', 'w'); ![2](assets/2.png)\n\n$header = fread($in, SODIUM_CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_HEADERBYTES);\n$state = sodium_crypto_secretstream_xchacha20poly1305_init_pull($header, $key);\n\nwhile (!feof($in)) {\n    $cipher = fread($in, 8192);\n\n    [$plain, ] = sodium_crypto_secretstream_xchacha20poly1305_pull(\n        $state,\n        $cipher\n    );\n\n    if ($plain === false) {\n        fwrite($err, 'Error decrypting file!'); ![3](assets/3.png)\n        exit(1);\n    }\n\n    fwrite($out, $plain);\n}\n\nsodium_memzero($state);\n\nfclose($in);\nfclose($out);\nfclose($err);\n```", "```php\n$source = fopen('document1.txt', 'r');\n$dest = fopen('destination.txt', 'w');\n\nstream_copy_to_stream($source, $destination);\n```", "```php\nif ($user->isAuthenticated()) {\n    $in = fopen('largeZipFile.zip', 'r'); ![1](assets/1.png)\n    $out = fopen('php://stdout', 'w');\n\n    stream_copy_to_stream($in, $out); ![2](assets/2.png)\n    exit; ![3](assets/3.png)\n}\n```", "```php\n$buffer = fopen('php://temp', 'w+'); ![1](assets/1.png)\nfwrite($buffer, '<html><head>');\n\n// ... Several hundred fwrite()s later ... \nfwrite($buffer, '</body></html>');\nrewind($buffer); ![2](assets/2.png)\n\n$output = fopen('php://stdout', 'w');\nstream_copy_to_stream($buffer, $output); ![3](assets/3.png)\nexit; ![4](assets/4.png)\n```", "```php\n$fp = fopen('compressed.txt', 'r'); ![1](assets/1.png)\nstream_filter_append($fp, 'convert.base64-decode'); ![2](assets/2.png)\nstream_filter_append($fp, 'zlib.inflate'); ![3](assets/3.png)\n\necho fread($fp, 1024) . PHP_EOL; ![4](assets/4.png)\n```", "```php\n$fp = fopen('compressed.txt', 'w');\n\nstream_filter_append($fp, 'zlib.deflate');\nstream_filter_append($fp, 'convert.base64-encode');\n\nfwrite($fp, 'Goodnight, moon!');\n```", "```php\nclass HexFilter extends php_user_filter\n{\n    private string $mode;\n\n    public function filter($in, $out, &$consumed, bool $closing): int\n    {\n        while ($bucket = stream_bucket_make_writeable($in)) {\n            switch ($this->mode) {\n                case 'encode':\n                    $bucket->data = bin2hex($bucket->data);\n                    break;\n                case 'decode':\n                    $bucket->data = hex2bin($bucket->data);\n                    break;\n                default:\n                    throw new Exception('Invalid encoding mode!');\n            }\n\n            $consumed += $bucket->datalen;\n            stream_bucket_append($out, $bucket);\n        }\n\n        return PSFS_PASS_ON;\n    }\n\n    public function onCreate(): bool\n    {\n        switch($this->filtername) {\n            case 'hex.decode':\n                $this->mode = 'decode';\n                return true;\n            case 'hex.encode':\n                $this->mode = 'encode';\n                return true;\n            default:\n                return false;\n        }\n    }\n}\n```", "```php\nstream_filter_register('hex.*', 'HexFilter'); ![1](assets/1.png)\n\n// Writing data $fp = fopen('compressed.txt', 'w');\n\nstream_filter_append($fp, 'zlib.deflate');\nstream_filter_append($fp, 'hex.encode');\n\nfwrite($fp, 'Hello, world!' . PHP_EOL);\nfwrite($fp, 'Goodnight, moon!');\n\nfclose($fp); ![2](assets/2.png)\n\n$fp2 = fopen('compressed.txt', 'r');\nstream_filter_append($fp2, 'hex.decode');\nstream_filter_append($fp2, 'zlib.inflate');\n\necho fread($fp2, 1024); ![3](assets/3.png)\n```", "```php\nclass VariableStream\n{\n    private int $position;\n    private string $name;\n    public $context;\n\n    function stream_open($path, $mode, $options, &$opened_path)\n    {\n        $url = parse_url($path);\n        $this->name = $url['host'];\n        $this->position = 0;\n\n        return true;\n    }\n\n    function stream_write($data)\n    {\n        $left = substr($GLOBALS[$this->name], 0, $this->position);\n        $right = substr($GLOBALS[$this->name], $this->position + strlen($data));\n        $GLOBALS[$this->name] = $left . $data . $right;\n        $this->position += strlen($data);\n        return strlen($data);\n    }\n}\n```", "```php\nif (!in_array('var', stream_get_wrappers())) {\n    stream_wrapper_register('var', 'VariableStream');\n}\n\n$varContainer = '';\n\n$fp = fopen('var://varContainer', 'w');\n\nfwrite($fp, 'Hello' . PHP_EOL);\nfwrite($fp, 'World' . PHP_EOL);\nfclose($fp);\n\necho $varContainer;\n```", "```php\n class streamWrapper {\n    public $context;\n\n    public __construct()\n\n    public dir_closedir(): bool\n\n    public dir_opendir(string $path, int $options): bool\n\n    public dir_readdir(): string\n\n    public dir_rewinddir(): bool\n\n    public mkdir(string $path, int $mode, int $options): bool\n\n    public rename(string $path_from, string $path_to): bool\n\n    public rmdir(string $path, int $options): bool\n\n    public stream_cast(int $cast_as): resource\n\n    public stream_close(): void\n\n    public stream_eof(): bool\n\n    public stream_flush(): bool\n\n    public stream_lock(int $operation): bool\n\n    public stream_metadata(string $path, int $option, mixed $value): bool\n\n    public stream_open(\n        string $path,\n        string $mode,\n        int $options,\n        ?string &$opened_path\n    ): bool\n\n    public stream_read(int $count): string|false\n\n    public stream_seek(int $offset, int $whence = SEEK_SET): bool\n\n    public stream_set_option(int $option, int $arg1, int $arg2): bool\n\n    public stream_stat(): array|false\n\n    public stream_tell(): int\n\n    public stream_truncate(int $new_size): bool\n\n    public stream_write(string $data): int\n\n    public unlink(string $path): bool\n\n    public url_stat(string $path, int $flags): array|false\n\n    public __destruct()\n}\n```"]