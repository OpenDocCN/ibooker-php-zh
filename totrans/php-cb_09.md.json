["```php\n$nonce = random_bytes(SODIUM_CRYPTO_SECRETBOX_NONCEBYTES); ![1](assets/1.png)\n\n$key = random_bytes(SODIUM_CRYPTO_SECRETBOX_KEYBYTES); ![2](assets/2.png)\n\n$message = 'This is a super secret communication!';\n\n$ciphertext = sodium_crypto_secretbox($message, $nonce, $key); ![3](assets/3.png)\n\n$output = bin2hex($nonce . $ciphertext); ![4](assets/4.png)\n\n// Decoding and decryption reverses the preceding steps $bytes = hex2bin($input); ![5](assets/5.png)\n$nonce = substr($bytes, 0, SODIUM_CRYPTO_SECRETBOX_NONCEBYTES);\n$ciphertext = substr($bytes, SODIUM_CRYPTO_SECRETBOX_NONCEBYTES);\n\n$plaintext = sodium_crypto_secretbox_open($ciphertext, $nonce, $key); ![6](assets/6.png)\n\nif ($plaintext === false) { ![7](assets/7.png)\n    throw new Exception('Unable to decrypt!');\n}\n```", "```php\n$bobKeypair = sodium_crypto_box_keypair(); ![1](assets/1.png)\n$bobPublic = sodium_crypto_box_publickey($bobKeypair); ![2](assets/2.png)\n$bobSecret = sodium_crypto_box_secretkey($bobKeypair);\n\n$nonce = random_bytes(SODIUM_CRYPTO_SECRETBOX_NONCEBYTES); ![3](assets/3.png)\n\n$message = 'Attack at dawn.';\n\n$alicePublic = '...'; ![4](assets/4.png)\n\n$keyExchange = sodium_crypto_box_keypair_from_secretkey_and_publickey( ![5](assets/5.png)\n    $bobSecret,\n    $alicePublic\n);\n\n$ciphertext = sodium_crypto_box($message, $nonce, $keyExchange); ![6](assets/6.png)\n\n$output = bin2hex($nonce . $ciphertext); ![7](assets/7.png)\n\n// Decrypting the message reverses the key exchange process $keyExchange2 = sodium_crypto_box_keypair_from_secretkey_and_publickey( ![8](assets/8.png)\n    $aliceSecret,\n    $bobPublic\n);\n\n$plaintext = sodium_crypto_box_open($ciphertext, $nonce, $keyExchange2); ![9](assets/9.png)\n\nif ($plaintext === false) { ![10](assets/10.png)\n    throw new Exception('Unable to decrypt!');\n}\n```", "```php\n$email = $_GET['email'];\n\n$filtered = filter_var($email, FILTER_VALIDATE_EMAIL);\n```", "```php\nfunction validate(string $data): mixed\n{\n    return filter_var($data, FILTER_VALIDATE_EMAIL);\n}\n\nvalidate('blah@example.com'); ![1](assets/1.png)\nvalidate('1234'); ![2](assets/2.png)\nvalidate('1234@example.com<test>'); ![3](assets/3.png)\n```", "```php\nfunction sanitize(string $data): mixed\n{\n    return filter_var($data, FILTER_SANITIZE_EMAIL);\n}\n\nsanitize('blah@example.com'); ![1](assets/1.png)\nsanitize('1234'); ![2](assets/2.png)\nsanitize('1234@example.com<test>'); ![3](assets/3.png)\n```", "```php\nfunction sanitizeQuantity(mixed $orderSize): int\n{\n    return filter_var(\n        $orderSize,\n        FILTER_VALIDATE_INT,\n        [\n            'options' => [\n                'min_range' => 1,\n                'max_range' => 25,\n                'default'   => 1,\n            ]\n        ]\n    );\n}\n\necho sanitizeQuantity(12) . PHP_EOL; ![1](assets/1.png)\necho sanitizeQuantity(-5) . PHP_EOL; ![2](assets/2.png)\necho sanitizeQuantity(100) . PHP_EOL; ![3](assets/3.png)\necho sanitizeQuantity('banana') . PHP_EOL; ![4](assets/4.png)\n```", "```php\n$db = new PDO($database_connection, getenv('DB_USER'), getenv('DB_PASS'));\n```", "```php\n<VirtualHost myhost>\n...\nSetEnv DB_USER \"database\"\nSetEnv DB_PASS \"password1234\"\n...\n</VirtualHost>\n```", "```php\nlocation / {\n    ...\n    fastcgi_param DB_USER database\n    fastcgi_param DB_PASS password1234\n    ...\n}\n```", "```php\nDB_USER=database\nDB_PASS=password1234\n```", "```php\n$dotenv = Dotenv\\Dotenv::createImmutable(__DIR__);\n$dotenv->load();\n```", "```php\n$hash = password_hash($password, PASSWORD_DEFAULT);\n```", "```php\nif (password_verify($password, $hash)) {\n    // Create a valid session for the user ...\n}\n```", "```php\n$timeTarget = 0.5; // 500 milliseconds\n\n$cost = 8;\ndo {\n    $cost++;\n    $start = microtime(true);\n    password_hash('test', PASSWORD_BCRYPT, ['cost' => $cost]);\n    $end = microtime(true);\n} while(($end - $start) < $timeTarget);\n\necho \"Appropriate cost factor: {$cost}\" . PHP_EOL;\n```", "```php\n$key = hex2bin('faae9fa60060e32b3bbe5861c2ff290f' .\n               '2cd4008409aeb7c59cb3bad8a8e89512'); ![1](assets/1.png)\n\n$message = 'Look to my coming on the first light of ' .\n           'the fifth day, at dawn look to the east.';\n\n$nonce = random_bytes(SODIUM_CRYPTO_SECRETBOX_NONCEBYTES); ![2](assets/2.png)\n\n$ciphertext = sodium_crypto_secretbox($message, $nonce, $key); ![3](assets/3.png)\n$output = bin2hex($nonce . $ciphertext); ![4](assets/4.png)\n```", "```php\n$key = hex2bin('faae9fa60060e32b3bbe5861c2ff290f' .\n               '2cd4008409aeb7c59cb3bad8a8e89512'); ![1](assets/1.png)\n\n$encrypted = '8b9225c935592a5e95a9204add5d09db' .\n             'b7b6473a0aa59c107b65f7d5961b720e' .\n             '7fc285bd94de531e05497143aee854e2' .\n             '918ba941140b70c324efb27c86313806' .\n             'e04f8e79da037df9e7cb24aa4bc0550c' .\n             'd7b2723cbb560088f972a408ffc973a6' .\n             '2be668e1ba1313e555ef4a95f0c1abd6' .\n             'f3d73921fafdd372'; ![2](assets/2.png)\n$raw = hex2bin($encrypted);\n\n$nonce = substr($raw, 0, SODIUM_CRYPTO_SECRETBOX_NONCEBYTES); ![3](assets/3.png)\n$ciphertext = substr($raw, SODIUM_CRYPTO_SECRETBOX_NONCEBYTES);\n\n$plaintext = sodium_crypto_secretbox_open($ciphertext, $nonce, $key);\nif ($plaintext === false) { ![4](assets/4.png)\n    echo 'Error decrypting message!' . PHP_EOL;\n} else {\n    echo $plaintext . PHP_EOL;\n}\n```", "```php\n$aliceKeypair = sodium_crypto_box_keypair();\n$alicePublic = sodium_crypto_box_publickey($aliceKeypair); ![1](assets/1.png)\n$alicePrivate = sodium_crypto_box_secretkey($aliceKeypair); ![2](assets/2.png)\n\n$bethKeypair = sodium_crypto_box_keypair(); ![3](assets/3.png)\n$bethPublic = sodium_crypto_box_publickey($bethKeypair);\n$bethPrivate = sodium_crypto_box_secretkey($bethKeypair);\n```", "```php\n$message = 'Follow the white rabbit';\n$nonce = random_bytes(SODIUM_CRYPTO_BOX_NONCEBYTES);\n$encryptionKey = sodium_crypto_box_keypair_from_secretkey_and_publickey(\n    $alicePrivate,\n    $bethPublic\n); ![1](assets/1.png)\n\n$ciphertext = sodium_crypto_box($message, $nonce, $encryptionKey); ![2](assets/2.png)\n\n$toBeth = bin2hex($nonce . $ciphertext); ![3](assets/3.png)\n```", "```php\n$fromAlice = hex2bin($toBeth);\n$nonce = substr($fromAlice, 0, SODIUM_CRYPTO_BOX_NONCEBYTES); ![1](assets/1.png)\n$ciphertext = substr($fromAlice, SODIUM_CRYPTO_BOX_NONCEBYTES);\n\n$decryptionKey = sodium_crypto_box_keypair_from_secretkey_and_publickey(\n    $bethPrivate,\n    $alicePublic\n); ![2](assets/2.png)\n\n$decrypted = sodium_crypto_box_open($ciphertext, $nonce, $decryptionKey); ![3](assets/3.png)\nif ($decrypted === false) { ![4](assets/4.png)\n    echo 'Error decrypting message!' . PHP_EOL;\n} else {\n    echo $decrypted . PHP_EOL;\n}\n```", "```php\ndefine('CHUNK_SIZE', 4096);\n\n$key = hex2bin('67794ec75c56ba386f944634203d4e86' .\n               '37e43c97857e3fa482bb9dfec1e44e70');\n\n[$state, $header] = sodium_crypto_secretstream_xchacha20poly1305_init_push($key); ![1](assets/1.png)\n\n$input = fopen('plaintext.txt', 'rb'); ![2](assets/2.png)\n$output = fopen('encrypted.txt', 'wb');\n\nfwrite($output, $header); ![3](assets/3.png)\n\n$fileSize = fstat($input)['size']; ![4](assets/4.png)\n\nfor ($i = 0; $i < $fileSize; $i += (CHUNK_SIZE - 17)) { ![5](assets/5.png)\n    $plain = fread($input, (CHUNK_SIZE - 17));\n    $cipher = sodium_crypto_secretstream_xchacha20poly1305_push($state, $plain); ![6](assets/6.png)\n\n    fwrite($output, $cipher);\n}\n\nsodium_memzero($state); ![7](assets/7.png)\n\nfclose($input);![8](assets/8.png)\nfclose($output);\n```", "```php\ndefine('CHUNK_SIZE', 4096);\n\n$key = hex2bin('67794ec75c56ba386f944634203d4e86' .\n               '37e43c97857e3fa482bb9dfec1e44e70');\n\n$input = fopen('encrypted.txt', 'rb');\n$output = fopen('decrypted.txt', 'wb');\n\n$header = fread($input, SODIUM_CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_HEADERBYTES); ![1](assets/1.png)\n\n$state = sodium_crypto_secretstream_xchacha20poly1305_init_pull($header, $key); ![2](assets/2.png)\n\n$fileSize = fstat($input)['size'];\ntry {\n    for (\n        $i = SODIUM_CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_HEADERBYTES;\n        $i < $fileSize;\n        $i += CHUNK_SIZE\n    ) { ![3](assets/3.png)\n        $cipher = fread($input, CHUNK_SIZE);\n\n        [$plain, ] = sodium_crypto_secretstream_xchacha20poly1305_pull(\n            $state,\n            $cipher\n        ); ![4](assets/4.png)\n\n        if ($plain === false) { ![5](assets/5.png)\n            throw new Exception('Error decrypting file!');\n        }\n        fwrite($output, $plain);\n    }\n} finally {\n    sodium_memzero($state); ![6](assets/6.png)\n\n    fclose($input);\n    fclose($output);\n}\n```", "```php\nfunction savePhoneNumber(int $userId, string $phone): void\n{\n    $db = getDatabase();\n\n    $statement = $db->prepare(\n        'INSERT INTO phones (user, number, nonce) VALUES (?, ?, ?)';\n    );\n\n    $key = hex2bin(getenv('ENCRYPTION_KEY'));\n    $nonce = random_bytes(SODIUM_CRYPTO_STREAM_XCHACHA20_NONCEBYTES);\n\n    $encrypted = sodium_crypto_stream_xchacha20_xor($phone, $nonce, $key);\n\n    $statement->execute([$userId, bin2hex($encrypted), bin2hex($nonce)]);\n}\n```", "```php\n$signSeed = hex2bin('eb656c282f46b45a814fcc887977675d' .\n                    'c627a5b1507ae2a68faecee147b77621'); ![1](assets/1.png)\n$signKeys = sodium_crypto_sign_seed_keypair($signSeed);\n\n$signSecret = sodium_crypto_sign_secretkey($signKeys);\n$signPublic = sodium_crypto_sign_publickey($signKeys);\n\n$message = 'Hello world!';\n$signed = sodium_crypto_sign($message, $signSecret);\n```", "```php\n$signSeed = hex2bin('eb656c282f46b45a814fcc887977675d' .\n                    'c627a5b1507ae2a68faecee147b77621');\n$signKeys = sodium_crypto_sign_seed_keypair($signSeed);\n\n$signSecret = sodium_crypto_sign_secretkey($signKeys);\n$signPublic = sodium_crypto_sign_publickey($signKeys);\n\n$message = 'Hello world!';\n$signature = sodium_crypto_sign_detached($message, $signSecret);\n```", "```php\n$signPublic = hex2bin('d58c47ddb986dcb2632aa5395e8962d3' .\n                      'e636ee236b38a8dc880e409c19374a5f');\n\n$message = sodium_crypto_sign_open($signed, $signPublic); ![1](assets/1.png)\n\nif ($message === false) { ![2](assets/2.png)\n    throw new Exception('Invalid signature on message!');\n}\n```", "```php\n$signPublic = hex2bin('d58c47ddb986dcb2632aa5395e8962d3' .\n                      'e636ee236b38a8dc880e409c19374a5f');\n\n$signature = hex2bin($_POST['signature']);\n$payload = $signature . $_POST['message'];\n\n$message = sodium_crypto_sign_open($payload, $signPublic);\n\nif ($message === false) {\n    throw new Exception('Invalid signature on message!');\n}\n```"]