- en: Chapter 17\. Helpers and Collections
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We’ve already covered many global functions throughout the book: these are
    little helpers that make it easier to perform common tasks, like `dispatch()`
    for jobs, `event()` for events, and `app()` for dependency resolution. We also
    talked a bit about Laravel’s collections, or arrays on steroids, in [Chapter 5](ch05.html#database_and_eloquent).'
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter we’ll cover some of the more common and powerful helpers and
    some of the basics of programming with collections. Many of the “helpers” in this
    section that once were global functions are now calls on facades; `array_first()`,
    the global function, has been replaced by `Arr::first()`, the auth call. So while
    these aren’t all *technically* helpers, as they’re not all global functions anymore,
    they still have the same position in our toolbox.
  prefs: []
  type: TYPE_NORMAL
- en: Helpers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can find a full list of the helpers Laravel offers in the [helpers docs](https://oreil.ly/vssfi),
    but we’re going to cover a few of the most useful functions here.
  prefs: []
  type: TYPE_NORMAL
- en: Arrays
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PHP’s native array manipulation functions give us a lot of power, but sometimes
    there are standard manipulations we want to make that require unwieldy loops and
    logic checks. Laravel’s array helpers make a few common array manipulations much
    simpler:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Arr::first(*$array, $callback, $default = null*)`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns the first array value that passes a test, defined in a callback closure.
    You can optionally set the default value as the third parameter. Here’s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '`Arr::get(*$array, $key, $default = null*)`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Makes it easy to get values out of an array, with two added benefits: it won’t
    throw an error if you ask for a key that doesn’t exist (and you can provide defaults
    with the third parameter), and you can use dot notation to traverse nested arrays.
    For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '`Arr::has(*$array, $keys*)`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Makes it easy to check whether an array has a particular value set using dot
    notation for traversing nested arrays. The `$keys` parameter can be a single entry
    or an array of entries, which will check whether every entry in the array exists:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '`Arr::hasAny(*$array, $keys*)`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Makes it easy to check whether an array has any of the specified keys using
    dot notation for traversing nested arrays. The `$keys` parameter can be a single
    key or an array of keys, which will check whether any of the keys exists in the
    array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '`Arr::pluck(*$array, $value, $key = null*)`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns an array of the values corresponding to the provided key:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want the returned array to be keyed by another value from the source
    array, you can pass that value’s dot-notated reference as the third parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '`Arr::random(*$array, $num = null*)`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns a random item from the provided array. If you provide a `$num` parameter,
    it will pull an array of that many results, randomly selected:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '`Arr::join(*$array, $glue, $finalGlue = ''''*)`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Joins the items from `$array` into a string, adding `$glue` between them. If
    `$finalGlue` is provided, it is added before the last element of the array, instead
    of `$glue`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Strings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Just like with arrays, there are some string manipulations and checks that
    are possible with native PHP functions, but that can be cumbersome. Laravel’s
    helpers make a few common string operations faster and simpler:'
  prefs: []
  type: TYPE_NORMAL
- en: '`e(*$string*)`'
  prefs: []
  type: TYPE_NORMAL
- en: 'An alias to `htmlentities`(); prepares a (often user-provided) string for safe
    echoing on an HTML page. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '`str(*$string*)`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Used for casting stringables; is an alias for `Str::of(*$string*)`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '`Str::startsWith(*$haystack, $needle*)`, `Str::endsWith(*$haystack, $needle*)`,
    `Str::contains(*$haystack, $needle, $ignoreCase*)`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns a Boolean indicating whether the provided `$haystack` string starts
    with, ends with, or contains the provided `$needle` string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '`Str::limit(*$value, $limit = 100, $end = ''...''*)`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Limits a string to the provided number of characters. If the string’s length
    is less than the limit, just returns the string; if it’s greater, trims to the
    number of characters provided and then appends either `...` or the provided `$end`
    string. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '`Str::words(*$value, $words = 100, $end = ''...''*)`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Limits a string to the provided number of words. If the string’s length is
    less than the number of words, just returns the string; if it’s greater, trims
    to the number of words provided and then appends either `...` or the provided
    `$end` string. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '`Str::before(*$subject, $search*)`, `Str::after(*$subject, $search*)`, `Str::beforeLast(*$subject,
    $search*)`, `Str::afterLast(*$subject, $search*)`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns the subsections of a string before or after another string, or the
    last instance of another string. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '`Str::is(*$pattern, $value*)`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns a Boolean indicating whether or not a given string matches a given
    pattern. The pattern can be a regex pattern, or you can use asterisks to indicate
    wildcard positions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: How to Pass a Regex to Str::is()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you’re curious about what regex patterns are acceptable to pass to `Str::is()`,
    check out the method definition here (shortened for space) to see how it works:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '`Str::isUuid(*$value*)`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Determines whether the value is a valid UUID:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '`Str::random(*$length = n*)`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns a random string of alphanumeric mixed-case characters of the length
    specified:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '`Str::slug(*$title, $separator = ''-'', $language = ''en''*)`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns a URL-friendly slug from a string—​often used for creating a URL segment
    for a name or title:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '`Str::plural(*$value, $count = n*)`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Converts a string to its plural form. This function currently only supports
    the English language:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '`__(*$key, $replace = [], $locale = null*)`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Translates the given translation string or translation key using your localization
    files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Application Paths
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you’re dealing with the filesystem, it can often be tedious to make links
    to certain directories for getting and saving files. These helpers give you quick
    access to find the fully qualified paths to some of the most important directories
    in your app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that each of these can be called with no parameters, but if a parameter
    is passed, it will be appended to the end of the normal directory string and returned
    as a whole:'
  prefs: []
  type: TYPE_NORMAL
- en: '`app_path(*$append = ''''*)`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns the path for the *app* directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '`base_path(*$path = ''''*)`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns the path for the root directory of your app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '`config_path(*$path = ''''*)`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns the path for configuration files in your app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '`database_path(*$path = ''''*)`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns the path for database files in your app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '`storage_path(*$path = ''''*)`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns the path for the *storage* directory in your app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '`lang_path(*$path = ''''*)`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns the path for the *lang* directory in your app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: URLs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Some frontend file paths are consistent but at times annoying to type—​for
    example, paths to assets—and it’s helpful to have convenient shortcuts to them,
    which we’ll cover here. But some can actually vary as route definitions move,
    so some of these helpers are vital in making sure all of your links and assets
    work correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: '`action(*$action*, *$parameters = []*, *$absolute = true*)`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Assuming a controller method has a single URL mapped to it, returns the correct
    URL given a controller and method name pair (separated by `@`) or using tuple
    notation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'If the controller method requires parameters, you can pass them in as the second
    parameter (as an array, if there’s more than one required parameter). You can
    key them if you want for clarity, but what matters is just that they’re in the
    right order:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: If you pass `false` to the third parameter, your links will generate as relative
    (*/people/3*) instead of absolute (*http://myapp.com/people/3*).
  prefs: []
  type: TYPE_NORMAL
- en: '`route(*$name*, *$parameters = []*, *$absolute = true*)`'
  prefs: []
  type: TYPE_NORMAL
- en: 'If a route has a name, returns the URL for that route:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'If the route definition requires parameters, you can pass them in as the second
    parameter (as an array if more than one parameter is required). Again, you can
    key them if you want for clarity, but what matters is just that they’re in the
    right order:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: If you pass `false` to the third parameter, your links will generate as relative
    instead of absolute.
  prefs: []
  type: TYPE_NORMAL
- en: '`url(*$string*)` and `secure_url(*$string*)`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Given any path string, converts to a fully qualified URL. (`secure_url()` is
    the same as `url()` but forces HTTPS):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'If no parameters are passed, this instead gives an instance of `Illuminate``\Routing``\UrlGenerator`,
    which makes method chaining possible:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Miscellaneous
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are a few other global helpers that I’d recommend getting familiar with.
    Of course, you should check out the [whole list](https://oreil.ly/vssfi), but
    the ones mentioned here are definitely worth taking a look at:'
  prefs: []
  type: TYPE_NORMAL
- en: '`abort(*$code, $message, $headers*)`, `abort_unless(*$boolean, $code, $message,
    $headers*)`, `abort_if(*$boolean, $code, $message, $headers*)`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Throws HTTP exceptions. `abort()` throws the exception defined, `abort_unless()`
    throws it if the first parameter is `false`, and `abort_if()` throws it if the
    first parameter is `true`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '`auth()`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns an instance of the Laravel authenticator. Like the `Auth` facade, you
    can use this to get the current user, to check for login state, and more:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '`back()`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Generates a “redirect back” response, sending the user to the previous location:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '`collect(*$array*)`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Takes an array and returns the same data, converted to a collection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: We’ll cover collections in just a bit.
  prefs: []
  type: TYPE_NORMAL
- en: '`config(*$key*)`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns the value for any dot-notated configuration item:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '`csrf_field()`, `csrf_token()`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns a full HTML hidden input field (`csrf_field()`) or just the appropriate
    token value (`csrf_token()`) for adding CSRF verification to your form submission:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '`dump(*$variable*)`, `dd(*$variable*...)`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Runs an output similar to `var_dump()` on all provided parameters; `dd()` also
    runs `exit()` to quit the application (this is used for debugging):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '`env(*$key*, *$default = null*)`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns the environment variable for the given key:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Remember, do not ever use `env()` outside of config files.
  prefs: []
  type: TYPE_NORMAL
- en: '`dispatch(*$job*)`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Dispatches a job:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '`event(*$event*)`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Fires an event:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '`old(*$key = null*, *$default = null*)`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns the old value (from the last user form submission) for this form key,
    if it exists:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '`redirect(*$path*)`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns a redirect response to the given path:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Without parameters, this generates an instance of the `Illuminate\Routing``\Redirector`
    class.
  prefs: []
  type: TYPE_NORMAL
- en: '`response(*$content*, *$status = 200*, *$headers*)`'
  prefs: []
  type: TYPE_NORMAL
- en: 'If passed with parameters, returns a prebuilt instance of `Response`. If passed
    with no parameters, it returns an instance of the `Response` factory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '`tap(*$value*, *$callback = null*)`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Calls the closure (the second argument), passing it the first argument, and
    then returns the first argument (instead of the output of the closure):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '`view(*$viewPath*)`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns a view instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '`fake()`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns an instance of Faker:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Collections
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Collections are one of the most powerful yet underappreciated tools Laravel
    provides. We covered them a bit in [“Eloquent Collections”](ch05.html#eloquent_collections),
    but here’s a quick recap.
  prefs: []
  type: TYPE_NORMAL
- en: Collections are essentially arrays with superpowers. The array-traversing methods
    you normally have to pass arrays into (`array_walk()`, `array_map()`, `array_reduce()`,
    etc.), all of which have confusingly inconsistent method signatures, are available
    as consistent, clean, chainable methods on every collection. You can get a taste
    of functional programming and map, reduce, and filter your way to cleaner code.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll cover some of the basics of Laravel’s collections and collection pipeline
    programming here, but for a much deeper overview, check out Adam Wathan’s book
    *Refactoring to Collections* (Gumroad).
  prefs: []
  type: TYPE_NORMAL
- en: The Basics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Collections are not a new idea within Laravel. Many languages make collection-style
    programming available on arrays out of the box, but with PHP we’re not quite so
    lucky.
  prefs: []
  type: TYPE_NORMAL
- en: Using PHP’s `array*()` functions, we can take the monstrosity shown in [Example 17-1](#commonforeach)
    and turn it into the slightly less monstrous monstrosity shown in [Example 17-2](#refactoring).
  prefs: []
  type: TYPE_NORMAL
- en: Example 17-1\. A common, but ugly, `foreach` loop
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Example 17-2\. Refactoring the `foreach` loop with native PHP functions
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we’ve gotten rid of a temporary variable (`$admins`) and converted one
    confusing `foreach` loop into two distinct actions: map and filter.'
  prefs: []
  type: TYPE_NORMAL
- en: The problem is, PHP’s array manipulation functions are awful and confusing.
    Just look at this example; `array_map()` takes the closure first and the array
    second, but `array_filter()` takes the array first and the closure second. In
    addition, if we added any complexity to this, we’d have functions wrapping functions
    wrapping functions. It’s a mess.
  prefs: []
  type: TYPE_NORMAL
- en: Laravel’s collections take the power of PHP’s array manipulation methods and
    give them a clean, fluent syntax—and they add many methods that don’t even exist
    in PHP’s array manipulation toolbox. Using the `collect()` helper method that
    turns an array into a Laravel collection, we can do what’s shown in [Example 17-3](#refactoringcoll).
  prefs: []
  type: TYPE_NORMAL
- en: Example 17-3\. Refactoring the `foreach` loop with Laravel’s collections
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: This isn’t the most extreme of examples. There are plenty of others where the
    reduction in lines of code and the increased simplicity would make an even stronger
    case. But this right here is *so common*.
  prefs: []
  type: TYPE_NORMAL
- en: Look at the original example and how muddy it is. It’s not entirely clear until
    you understand the entire code sample what any given piece is there for.
  prefs: []
  type: TYPE_NORMAL
- en: 'The biggest benefit collections provide, over anything else, is breaking the
    actions you’re taking to manipulate an array into simple, discrete, understandable
    tasks. You can now do something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'or something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Many of the examples we’ll look at in the rest of this chapter operate on this
    mythical `$users` collection we’ve started imagining here. Each entry in the `$users`
    array will represent a single human; they’ll likely all be array-accessible. The
    specific properties each user will have may vary a bit depending on the example.
    But any time you see this `$users` variable, know that that’s what we’re working
    with.
  prefs: []
  type: TYPE_NORMAL
- en: A Few Collection Operations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There’s much more you can do than what we’ve covered so far. I recommend you
    take a look at the [Laravel collections docs](https://oreil.ly/i83f4) to learn
    more about all the methods you can use, but to get you started, here are just
    a few of the core methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`all()`, `toArray()`'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you’d like to convert your collection to an array, you can do so with either
    `all()` or `toArray()`. `toArray()` flattens to arrays not just the collection
    but also any Eloquent objects underneath it. `all()` converts *only* the collection
    to an array; any Eloquent objects contained within the collection will be preserved
    as Eloquent objects. Here are a few examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: '`filter()`, `reject()`'
  prefs: []
  type: TYPE_NORMAL
- en: 'When you want to get a subset of your original collection by checking each
    item against a closure, you’ll use `filter()` (which keeps an item if the closure
    returns `true`) or `reject()` (which keeps an item if the closure returns `false`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: '`where()`'
  prefs: []
  type: TYPE_NORMAL
- en: '`where()` makes it easy to provide a subset of your original collection where
    a given key is equal to a given value. Anything you can do with `where()` you
    can also do with `filter()`, but it’s a shortcut for a common scenario:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '`whereNull()`, `whereNotNull()`'
  prefs: []
  type: TYPE_NORMAL
- en: '`whereNull()` makes it easy to provide a subset of your original collection
    where a given key is equal to `null`; `whereNotNull()` is the inverse:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '`first()`, `last()`'
  prefs: []
  type: TYPE_NORMAL
- en: If you want just a single item from your collection, you can use `first()` to
    pull from the beginning of the list or `last()` to pull from the end.
  prefs: []
  type: TYPE_NORMAL
- en: If you call `first()` or `last()` with no parameters, they’ll just give you
    the first or last item in the collection, respectively. But if you pass either
    a closure, they’ll instead give you the first or last item in the collection *that
    returns `true` when passed to that closure.*
  prefs: []
  type: TYPE_NORMAL
- en: 'Sometimes you’ll do this because you want the actual first or last item. But
    sometimes it’s the easiest way to get one item even if you only expect there to
    be one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: You can also pass a second parameter to each method, which is the default value
    and will be provided as a fallback if the closure doesn’t provide any results.
  prefs: []
  type: TYPE_NORMAL
- en: '`each()`'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you’d like to do something with each item of a collection, but it doesn’t
    include modifying the items or the collection itself, you can use `each()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: '`map()`'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you’d like to iterate over all the items in a collection, make changes to
    them, and return a new collection with all of your changes, you’ll want to use
    `map()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: '`reduce()`'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you’d like to get a single result from your collection, like a count or
    a string, you’ll probably want to use `reduce()`. This method works by taking
    an initial value (called the *carry*) and then allowing each item in the collection
    to change that value somehow. You can define an initial value for the carry, and
    a closure that accepts the current state of the carry, and then each item as parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: '`pluck()`'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to pull out just the values for a given key under each item in
    a collection, you can use `pluck()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: '`chunk()`, `take()`'
  prefs: []
  type: TYPE_NORMAL
- en: '`chunk()` makes it easy to split your collection into groups of a predefined
    size, and `take()` pulls just the provided number of items:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: '`takeUntil()`, `takeWhile()`'
  prefs: []
  type: TYPE_NORMAL
- en: '`takeUntil()` returns all items in the collection until the callback returns
    `true`. `takeWhile()` returns all items in the collection until the callback returns
    `false`. If the callback passed to `takeUntil()` never returns `true`, or if the
    callback passed to `takeWhile()` never returns `false`, the entire collection
    is returned:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: '`groupBy()`'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to group all of the items in your collection by the value of one
    of their properties, you can use `groupBy()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also pass a closure, and whatever you return from the closure will
    be what’s used to group the records:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: '`reverse()`, `shuffle()`'
  prefs: []
  type: TYPE_NORMAL
- en: '`reverse()` reverses the order of the items in your collection, and `shuffle()`
    randomizes them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: '`skip()`'
  prefs: []
  type: TYPE_NORMAL
- en: '`skip()` returns a new collection without the given number of items:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: '`skipUntil()`'
  prefs: []
  type: TYPE_NORMAL
- en: '`skipUntil()` skips items until the callback returns `true`. You can also pass
    in a value to `skipUntil`, and it will skip all values until the given value is
    found. If the value is never found or the callback never returns `true`, an empty
    collection is returned:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: '`skipWhile()`'
  prefs: []
  type: TYPE_NORMAL
- en: '`skipWhile()` skips items while the callback returns `true`. If the callback
    never returns `false`, an empty collection is returned:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: '`sort()`, `sortBy()`, `sortByDesc()`'
  prefs: []
  type: TYPE_NORMAL
- en: 'If your items are simple strings or integers, you can use `sort()` to sort
    them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'If they’re more complex, you can pass a string (representing the property)
    or a closure to `sortBy()` or `sortByDesc()` to define your sorting behavior:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: '`countBy()`'
  prefs: []
  type: TYPE_NORMAL
- en: '`countBy` counts every occurrence of each value in a collection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: Each key in the resulting collection is one of the original values; its paired
    value is the number of times that value occurred in the original collection.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `countBy` method also accepts a callback, which customizes the value that’s
    used to count each item in the collection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: '`count()`, `isEmpty()`, `isNotEmpty()`'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see how many items there are in your collection using `count()`, `isEmpty()`,
    or `isNotEmpty()` tell you whether there are items:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: '`avg()`, `sum()`'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you’re working with a collection of numbers, `avg()` and `sum()` do what
    their method names say and don’t require any parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'But if you’re working with arrays, you can pass the key of the property you’d
    like to pull from each array to operate on:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: '`join`'
  prefs: []
  type: TYPE_NORMAL
- en: '`join()` joins the collection values into a single output string, joining each
    with a provided string—like PHP’s `join()` method. You can also (optionally) customize
    the final concatenation operator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: Using Collections Outside of Laravel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Have you fallen in love with collections, and do you want to use them on your
    non-Laravel projects?
  prefs: []
  type: TYPE_NORMAL
- en: Just use the `composer require illuminate/collections` command and you’ll have
    the `Illuminate\S⁠u⁠p⁠p⁠o⁠r⁠t⁠\​C⁠o⁠l⁠l⁠e⁠c⁠t⁠i⁠o⁠n` class ready to use in your
    code—along with the `collect()` helper.
  prefs: []
  type: TYPE_NORMAL
- en: TL;DR
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Laravel provides a suite of global helper functions that simplify all sorts
    of tasks. They make it easier to manipulate and inspect arrays and strings, they
    facilitate generating paths and URLs, and they provide simple access to some consistent
    and vital functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Laravel’s collections are powerful tools that bring the possibility of collection
    pipelines to PHP.
  prefs: []
  type: TYPE_NORMAL
