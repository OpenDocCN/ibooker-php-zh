["```php\nphp artisan make:mail AssignmentCreated\n```", "```php\n<?php\n\nnamespace App\\Mail;\n\nuse Illuminate\\Bus\\Queueable;\nuse Illuminate\\Contracts\\Queue\\ShouldQueue;\nuse Illuminate\\Mail\\Mailable;\nuse Illuminate\\Mail\\Mailables\\Content;\nuse Illuminate\\Mail\\Mailables\\Envelope;\nuse Illuminate\\Queue\\SerializesModels;\n\nclass AssignmentCreated extends Mailable\n{\n    use Queueable, SerializesModels;\n\n    /**\n * Create a new message instance.\n */\n    public function __construct()\n    {\n        //\n    }\n\n    /**\n * Get the message envelope.\n */\n    public function envelope(): Envelope\n    {\n        return new Envelope(\n            subject: 'Assignment Created',\n        );\n    }\n\n    /**\n * Get the message content definition.\n */\n    public function content(): Content\n    {\n        return new Content(\n            view: 'view.name',\n        );\n    }\n\n    /**\n * Get the attachments for the message.\n *\n * @return array<int, \\Illuminate\\Mail\\Mailables\\Attachment>\n */\n    public function attachments(): array\n    {\n        return [];\n    }\n}\n```", "```php\n<?php\n\nnamespace App\\Mail;\n\nuse Illuminate\\Bus\\Queueable;\nuse Illuminate\\Contracts\\Queue\\ShouldQueue;\nuse Illuminate\\Mail\\Mailable;\nuse Illuminate\\Mail\\Mailables\\Address;\nuse Illuminate\\Mail\\Mailables\\Content;\nuse Illuminate\\Mail\\Mailables\\Envelope;\nuse Illuminate\\Queue\\SerializesModels;\n\nclass AssignmentCreated extends Mailable\n{\n    use Queueable, SerializesModels;\n\n    public function __construct(public $trainer, public $trainee) {}\n\n    public function envelope(): Envelope\n    {\n        return new Envelope(\n            subject: 'New assignment from ' . $this->trainer->name,\n            from: new Address($this->trainer->email, $this->trainer->name),\n        );\n    }\n\n    public function content(): Content\n    {\n        return new Content(\n            view: 'emails.assignment-created'\n        );\n    }\n\n    public function attachments(): array\n    {\n        return [];\n    }\n}\n```", "```php\n$mail = new AssignmentCreated($trainer, $trainee);\n\n// Simple\nMail::to($user)->send($mail);\n\n// With CC/BCC/etc.\nMail::to($user1))\n    ->cc($user2)\n    ->bcc($user3)\n    ->send($mail);\n\n// With string email address and collections\nMail::to('me@app.com')\n    ->bcc(User::all())\n    ->send($mail)\n```", "```php\n<!-- resources/views/emails/assignment-created.blade.php -->\n<p>Hey {{ $trainee->name }}!</p>\n\n<p>You have received a new training assignment from <b>{{ $trainer->name }}</b>.\nCheck out your <a href=\"{{ route('training-dashboard') }}\">training\ndashboard</a> now!</p>\n```", "```php\nuse Illuminate\\Mail\\Mailables\\Content;\n\npublic function content(): Content\n{\n    return new Content(\n        view: 'emails.assignment-created',\n        with: ['assignment' => $this->event->name],\n    );\n}\n```", "```php\npublic function content(): Content\n{\n    return new Content(\n        html: 'emails.assignment-created',\n        text: 'emails.assignment-created-text',\n    );\n}\n```", "```php\npublic function envelope(): Envelope\n{\n    return new Envelope(\n        subject: 'New assignment from ' . $this->trainer->name,\n        from: new Address($this->trainer->email, $this->trainer->name),\n    );\n}\n```", "```php\npublic function envelope(): Envelope\n{\n    return new Envelope(\n        subject: 'Howdy!',\n        view: 'emails.howdy',\n        using: [\n            function (Email $message) {\n                $message->setReplyTo('noreply@email.com');\n            },\n        ],\n    );\n}\n```", "```php\nuse Illuminate\\Mail\\Mailables\\Attachment;\n\n// Attach a file using the local filename\npublic function attachments(): array\n{\n    return [\n         Attachment::fromPath('/absolute/path/to/file'),\n    ];\n}\n\n// Attach a file using storage disks\npublic function attachments(): array\n{\n    return [\n        // Attach from default disk\n        Attachment::fromStorage('/path/to/file'),\n        // Attach from custom disk\n        Attachment::fromStorageDisk('s3', '/path/to/file'),\n    ];\n}\n\n// Attach a file passing the raw data\npublic function attachments(): array\n{\n    return [\n        Attachment::fromData(fn () => file_get_contents($this->pdf), 'whitepaper.pdf')\n            ->withMime('application/pdf'),\n    ];\n}\n```", "```php\n<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Contracts\\Mail\\Attachable;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Mail\\Attachment;\n\nclass Assignment extends Model implements Attachable\n{\n    /**\n * Get the attachable representation of the model.\n */\n    public function toMailAttachment(): Attachment\n    {\n        return Attachment::fromPath($this->pdf_path);\n    }\n}\n```", "```php\npublic function attachments(): array\n{\n    return [$this->assignment];\n}\n```", "```php\n<!-- emails/image.blade.php -->\nHere is an image:\n\n<img src=\"{{ $message->embed(storage_path('embed.jpg')) }}\">\n\nOr, the same image embedding the data:\n\n<img src=\"{{ $message->embedData(\n file_get_contents(storage_path('embed.jpg')), 'embed.jpg'\n) }}\">\n```", "```php\nphp artisan make:mail AssignmentCreated --markdown=emails.assignment-created\n```", "```php\nclass AssignmentCreated extends Mailable\n{\n    // ...\n\n    public function content(): Content\n    {\n        return new Content(\n            markdown: 'emails.assignment-created',\n        );\n    }\n}\n```", "```php\n{{-- resources/views/emails/assignment-created.blade.php --}}\n<x-mail::message>\n# Hey {{ $trainee->name }}!\n\nYou have received a new training assignment from **{{ $trainer->name }}**\n\n<x-mail::button :url=\"route('training-dashboard')\">\nView Your Assignment\n</x-mail::button>\n\nThanks,<br>\n{{ config('app.name') }}\n</x-mail::message>\n```", "```php\nphp artisan vendor:publish --tag=laravel-mail\n```", "```php\nRoute::get('preview-assignment-created-mailable', function () {\n    $trainer = Trainer::first();\n    $trainee = Trainee::first();\n\n    return new \\App\\Mail\\AssignmentCreated($trainer, $trainee);\n});\n```", "```php\nRoute::get('preview-notification', function () {\n    $trainer = Trainer::first();\n    $trainee = Trainee::first();\n\n    return (new App\\Notifications\\AssignmentCreated($trainer, $trainee))\n        ->toMail($trainee);\n});\n```", "```php\n Mail::to($user)->queue(new AssignmentCreated($trainer, $trainee));\n```", "```php\n $when = now()->addMinutes(30);\n Mail::to($user)->later($when, new AssignmentCreated($trainer,  $trainee));\n```", "```php\n$message = (new AssignmentCreated($trainer, $trainee))\n    ->onConnection('sqs')\n    ->onQueue('emails');\n\nMail::to($user)->queue($message);\n```", "```php\nMessage-ID: <04ee2e97289c68f0c9191f4b04fc0de1@localhost>\nDate: Tue, 17 May 2016 02:52:46 +0000\nSubject: Welcome to our app!\nFrom: Matt Stauffer <matt@mattstauffer.com>\nTo: freja@jensen.no\nMIME-Version: 1.0\nContent-Type: text/html; charset=utf-8\nContent-Transfer-Encoding: quoted-printable\n\nWelcome to our app!\n```", "```php\nMAIL_MAILER=smtp\nMAIL_HOST=mailtrap.io\nMAIL_PORT=2525\nMAIL_USERNAME=your_username_from_mailtrap_here\nMAIL_PASSWORD=your_password_from_mailtrap_here\nMAIL_ENCRYPTION=null\n```", "```php\nphp artisan make:notification WorkoutAvailable\n```", "```php\n<?php\n\nnamespace App\\Notifications;\n\nuse Illuminate\\Bus\\Queueable;\nuse Illuminate\\Notifications\\Notification;\nuse Illuminate\\Contracts\\Queue\\ShouldQueue;\nuse Illuminate\\Notifications\\Messages\\MailMessage;\n\nclass WorkoutAvailable extends Notification\n{\n    use Queueable;\n\n    /**\n * Create a new notification instance.\n */\n    public function __construct()\n    {\n        //\n    }\n\n    /**\n * Get the notification's delivery channels.\n *\n * @return array<int, string>\n */\n    public function via(object $notifiable): array\n    {\n        return ['mail'];\n    }\n\n    /**\n * Get the mail representation of the notification.\n */\n    public function toMail(object $notifiable): MailMessage\n    {\n        return (new MailMessage)\n                    ->line('The introduction to the notification.')\n                    ->action('Notification Action', url('/'))\n                    ->line('Thank you for using our application!');\n    }\n\n    /**\n * Get the array representation of the notification.\n *\n * @return array<string, mixed>\n */\n    public function toArray(object $notifiable): array\n    {\n        return [\n            //\n        ];\n    }\n}\n```", "```php\n...\nclass WorkoutAvailable extends Notification\n{\n    use Queueable;\n\n    public function __construct(public $workout) {}\n\n    public function via(object $notifiable): array\n    {\n        // This method doesn't exist on the User... we're going to make it up\n        return $notifiable->preferredNotificationChannels();\n    }\n\n    public function toMail(object $notifiable): MailMessage\n    {\n        return (new MailMessage)\n            ->line('You have a new workout available!')\n            ->action('Check it out now', route('workout.show', [$this->workout]))\n            ->line('Thank you for training with us!');\n    }\n\n    public function toArray(object $notifiable): array\n    {\n        return [];\n    }\n}\n```", "```php\npublic function via(object $notifiable): array\n{\n    return 'vonage';\n}\n```", "```php\npublic function via(object $notifiable): array\n{\n    return $notifiable->preferred_notification_channel;\n}\n```", "```php\nuse App\\Notifications\\WorkoutAvailable;\n...\nNotification::send($users, new WorkoutAvailable($workout));\n```", "```php\nuse App\\Notifications\\WorkoutAvailable;\n...\n$user->notify(new WorkoutAvailable($workout));\n```", "```php\n$delayUntil = now()->addMinutes(15);\n\n$user->notify((new WorkoutAvailable($workout))->delay($delayUntil));\n```", "```php\npublic function toMail(object $notifiable): MailMessage\n{\n    return (new MailMessage)\n        ->line('You have a new workout available!')\n        ->action('Check it out now', route('workouts.show', [$this->workout]))\n        ->line('Thank you for training with us!');\n}\n```", "```php\nphp artisan vendor:publish --tag=laravel-notifications\n```", "```php\nUser::first()->notifications->each(function ($notification) {\n    // Do something\n});\n```", "```php\nUser::first()->unreadNotifications->each(function ($notification) {\n    // Do something\n});\n```", "```php\n// Individual\nUser::first()->unreadNotifications->each(function ($notification) {\n    if ($condition) {\n        $notification->markAsRead();\n    }\n});\n\n// All\nUser::first()->unreadNotifications->markAsRead();\n```", "```php\ncomposer require laravel/vonage-notification-channel \\\n    guzzlehttp/guzzle\n```", "```php\ncomposer require laravel/slack-notification-channel\n```", "```php\n$mailable = new AssignmentCreated($trainer, trainee);\n\n$mailable->assertFrom('noreply@mytrainingapp.com');\n$mailable->assertTo('user@gmail.com');\n$mailable->assertHasCc('trainer@mytrainingapp.com');\n$mailable->assertHasBcc('records@mytrainingapp.com');\n$mailable->assertHasReplyTo('trainer@mytrainingap.com');\n$mailable->assertHasSubject('New assignment from Faith Elizabeth');\n$mailable->assertHasTag('assignments');\n$mailable->assertHasMetadata('clientId', 4);\n```", "```php\n$mailable->assertSeeInHtml($trainee->name);\n$mailable->assertSeeInHtml('You have received a new training assignment');\n$mailable->assertSeeInOrderInHtml(['Hey', 'You have received']);\n\n$mailable->assertSeeInText($trainee->name);\n$mailable->assertSeeInOrderInText(['Hey', 'You have received']);\n```", "```php\n$mailable->assertHasAttachment('/pdfs/assignment-24.pdf');\n$mailable->assertHasAttachment(Attachment::fromPath('/pdfs/assignment-24.pdf'));\n$mailable->assertHasAttachedData($pdfData, 'assignment-24.pdf', [\n    'mime' => 'application/pdf',\n]);\n$mailable->assertHasAttachmentFromStorage(\n    '/pdfs/assignment-24.pdf',\n    'assignment-24.pdf',\n    ['mime' => 'application/pdf']\n);\n$mailable->assertHasAttachmentFromStorageDisk(\n    's3',\n    '/pdfs/assignment-24.pdf',\n    'assignment-24.pdf',\n    ['mime' => 'application/pdf']\n);\n```", "```php\nMail::fake();\n\n// Call the code that sends the email\n\n// Assert that no mailables were sent\nMail::assertNothingSent();\n\n// Assert that a mailable was sent\nMail::assertSent(AssignmentCreated::class);\n\n// Assert a mailable was sent a certain number of times\nMail::assertSent(AssignmentCreated::class, 4);\n\n// Assert a mailable was not sent\nMail::assertNotSent(AssignmentCreated::class);\n\n// Assertions for queued emails\nMail::assertQueued(AssignmentCreated::class);\nMail::assertNotQueued(AssignmentCreated::class);\nMail::assertNothingQueued();\n```", "```php\nMail::assertSent(\n    AssignmentCreated::class,\n    function (AssignmentCreated $mail) use ($trainer, $trainee) {\n        return $mail->hasTo($trainee->email) &&\n            $mail->hasSubject('New assignment from ' . $trainer->name);\n    }\n);\n```", "```php\npublic function test_new_signups_triggers_admin_notification()\n{\n    Notification::fake();\n\n    Notification::assertSentTo($user, NewUsersSignedup::class,\n        function ($notification, $channels) {\n            return $notification->user->email == 'user-who-signed-up@gmail.com'\n            && $channels == ['mail'];\n    });\n\n    // Assert that the email was sent to a given user\n    Notification::assertSentTo(\n        [$user],\n        NewUsersSignedup::class\n    );\n\n    // You can also use assertNotSentTo()\n    Notification::assertNotSentTo(\n        [$userDidntSignUp], NewUsersSignedup::class\n    );\n}\n```"]