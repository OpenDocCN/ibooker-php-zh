["```php\nfunction add($a, $b)\n{\n    return $a + $b;\n}\n```", "```php\nadd(int $a,    int $b):   int ![1](assets/1.png)\nadd(float $a,  float $b): float ![2](assets/2.png)\nadd(int $a,    float $b): float ![3](assets/3.png)\nadd(float $a,  int $b):   float ![4](assets/4.png)\nadd(string $a, int $b):   int ![5](assets/5.png)\nadd(string $a, int $b):   float ![6](assets/6.png)\n```", "```php\n$start = hrtime(true);\n\ndoSomethingComputationallyExpensive();\n\n$totalTime = (hrtime(true) - $start) / 1e+9;\n\necho \"Function took {$totalTime} seconds.\" . PHP_EOL;\n```", "```php\nclass TimerDecorator\n{\n    private int $calls = 0;\n    private float $totalRuntime = 0.;\n\n    public function __construct(public $callback, private bool $verbose = false) {}\n\n    public function __invoke(...$args): mixed ![1](assets/1.png)\n    {\n        if (! is_callable($this->callback)) {\n            throw new ValueError('Class does not wrap a callable function!');\n        }\n\n        $this->calls += 1;\n        $start = hrtime(true); ![2](assets/2.png)\n\n        $value = call_user_func($this->callback, ...$args); ![3](assets/3.png)\n\n        $totalTime = (hrtime(true) - $start) / 1e+9;\n        $this->totalRuntime += $totalTime;\n\n        if ($this->verbose) {\n            echo \"Function took {$totalTime} seconds.\" . PHP_EOL; ![4](assets/4.png)\n        }\n\n        return $value; ![5](assets/5.png)\n    }\n\n    public function getMetrics(): array ![6](assets/6.png)\n    {\n        return [\n            'calls'   => $this->calls,\n            'runtime' => $this->totalRuntime,\n            'avg'     => $this->totalRuntime / $this->calls\n        ];\n    }\n}\n```", "```php\n$decorated = new TimerDecorator('doSomethingComputationallyExpensive');\n\n$decorated(); ![1](assets/1.png)\n\nvar_dump($decorated->getMetrics()); ![2](assets/2.png)\n```", "```php\n$decorated = new TimerDecorator('doSomethingComputationallyExpensive');\n\nfor ($i = 0; $i < 10; $i++) {\n    $decorated();\n}\n\nvar_dump($decorated->getMetrics());\n```", "```php\nclass DecoratorFriendly\n{\n    public static function doSomething()\n    {\n        // ...\n    }\n\n    public function doSomethingElse()\n    {\n        // ...\n    }\n}\n```", "```php\n$decoratedStatic = new TimerDecorator(['DecoratorFriendly', 'doSomething']); ![1](assets/1.png)\n$decoratedStatic(); ![2](assets/2.png)\n\nvar_dump($decoratedStatic->getMetrics());\n\n$instance = new DecoratorFriendly();\n\n$decoratedMember = new TimerDecorator([$instance, 'doSomethingElse']); ![3](assets/3.png)\n$decoratedMember(); ![4](assets/4.png)\n\nvar_dump($decoratedMember->getMetrics());\n```", "```php\n$start = microtime(true);\n\ndoSomethingComputationallyExpensive();\n\n$totalTime = microtime(true) - $start;\n\necho \"Function took {$totalTime} seconds.\" . PHP_EOL;\n```", "```php\n/**\n * @BeforeMethods(\"setUp\")\n */\nclass HashingBench\n{\n    private $string = '';\n\n    public function setUp(array $params): void\n    {\n        $this->string = str_repeat('X', $params['size']);\n    }\n\n    /**\n * @ParamProviders({\n *     \"provideAlgos\",\n *     \"provideStringSize\"\n * })\n */\n    public function benchAlgos($params): void\n    {\n        hash($params['algo'], $this->string);\n    }\n\n    public function provideAlgos()\n    {\n        foreach (array_slice(hash_algos(), 0, 20) as $algo) {\n            yield ['algo' => $algo];\n        }\n\n    }\n\n    public function provideStringSize() {\n        yield ['size' => 10];\n        yield ['size' => 100];\n        yield ['size' => 1000];\n    }\n\n}\n```", "```php\n$ ./bin/phpbench run --profile=examples --report=examples --filter=HashingBench\n```", "```php\n{\n    \"name\": \"phpcookbook/valueobjects\",\n    \"require-dev\": {\n        \"phpbench/phpbench\": \"^1.0\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"Cookbook\\\\\": \"src/\"\n        }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"Cookbook\\\\Tests\\\\\": \"tests/\"\n        }\n    },\n    \"minimum-stability\": \"dev\",\n    \"prefer-stable\": true\n}\n```", "```php\nnamespace Cookbook;\n\nclass ProtectedString implements \\JsonSerializable\n{\n    protected bool $valid = true;\n\n    public function __construct(protected ?string $value) {}\n\n    public function getValue(): ?string\n    {\n        return $this->value;\n    }\n\n    public function equals(ProtectedString $other): bool\n    {\n        return $this->value === $other->getValue();\n    }\n\n    protected function redacted(): string\n    {\n        return hash('sha256', $this->value, false);\n    }\n\n    public function isValid(): bool\n    {\n        return $this->valid;\n    }\n\n    public function __serialize(): array\n    {\n        return [\n            'value' => $this->redacted()\n        ];\n    }\n\n    public function __unserialize(array $serialized): void\n    {\n        $this->value = null;\n        $this->valid = false;\n    }\n\n    public function jsonSerialize(): mixed\n    {\n        return $this->redacted();\n    }\n\n    public function __toString()\n    {\n        return $this->redacted();\n    }\n\n    public function __debugInfo()\n    {\n        return [\n            'valid' => $this->valid,\n            'value' => $this->redacted()\n        ];\n    }\n}\n```", "```php\n{\n    \"$schema\": \"./vendor/phpbench/phpbench/phpbench.schema.json\",\n    \"runner.bootstrap\": \"vendor/autoload.php\"\n}\n```", "```php\nnamespace Cookbook\\Tests\\Benchmark;\n\nuse Cookbook\\ProtectedString;\n\nclass ProtectedStringBench\n{\n    public function benchSerialize()\n    {\n        $data = new ProtectedString('testValue');\n        $serialized = serialize($data);\n    }\n\n    public function benchJsonSerialize()\n    {\n        $data = new ProtectedString('testValue');\n        $serialized = json_encode($data);\n    }\n\n    public function benchStringTypecast()\n    {\n        $data = new ProtectedString('testValue');\n        $serialized = '' . $data;\n    }\n\n    public function benchVarExport()\n    {\n        $data = new ProtectedString('testValue');\n        ob_start();\n        var_dump($data);\n        $serialized = ob_end_clean();\n    }\n}\n```", "```php\n$ ./vendor/bin/phpbench run tests/Benchmark --report=default\n```", "```php\nopcache.memory_consumption=128\nopcache.interned_strings_buffer=8\nopcache.max_accelerated_files=4000\nopcache.revalidate_freq=60\nopcache.fast_shutdown=1\nopcache.enable=1\nopcache.enable_cli=1\n```", "```php\n$ php -S localhost:8080 -t public/ -dopcache.enable_cli=0 -dopcache.enable=0\n```", "```php\n$ php -S localhost:8080 -t public/ -dopcache.enable_cli=1 -dopcache.enable=1\n```", "```php\n$ composer create-project symfony/symfony-demo demosite\n$ cd demosite && composer install\n```", "```php\ncurl -s -w \"\\nLookup time:\\t%{time_namelookup}\\\n    \\nConnect time:\\t%{time_connect}\\\n    \\nPreXfer time:\\t%{time_pretransfer}\\\n    \\nStartXfer time:\\t%{time_starttransfer}\\\n    \\n\\nTotal time:\\t%{time_total}\\n\" -o /dev/null \\\n    http://localhost:8080\n```"]