- en: Chapter 1\. Introduction to PHP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PHP is a simple yet powerful language designed for creating HTML content. This
    chapter covers essential background on the PHP language. It describes the nature
    and history of PHP, which platforms it runs on, and how to configure it. This
    chapter ends by showing you PHP in action, with a quick walkthrough of several
    PHP programs that illustrate common tasks, such as processing form data, interacting
    with a database, and creating graphics.
  prefs: []
  type: TYPE_NORMAL
- en: What Does PHP Do?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'PHP can be used in two primary ways:'
  prefs: []
  type: TYPE_NORMAL
- en: Server-side scripting
  prefs: []
  type: TYPE_NORMAL
- en: PHP was originally designed to create dynamic web content, and it is still best
    suited for that task. To generate HTML, you need the PHP parser and a web server
    through which to send the coded document files. PHP has also become popular for
    generating dynamic content via database connections, XML documents, graphics,
    PDF files, and so much more.
  prefs: []
  type: TYPE_NORMAL
- en: Command-line scripting
  prefs: []
  type: TYPE_NORMAL
- en: PHP can run scripts from the command line, much like Perl, awk, or the Unix
    shell. You might use the command-line scripts for system administration tasks,
    such as backup and log parsing; even some CRON job–type scripts can be done this
    way (as nonvisual PHP tasks).
  prefs: []
  type: TYPE_NORMAL
- en: 'In this book, however, we concentrate on the first item: using PHP to develop
    dynamic web content.'
  prefs: []
  type: TYPE_NORMAL
- en: PHP runs on all major operating systems, from Unix variants (including Linux,
    FreeBSD, Ubuntu, Debian, and Solaris) to Windows and macOS. It can be used with
    all leading web servers, including the Apache, Nginx, and OpenBSD servers, to
    name a few; even cloud environments like Azure and Amazon are on the rise.
  prefs: []
  type: TYPE_NORMAL
- en: The language itself is extremely flexible. For example, you aren’t limited to
    outputting just HTML or other text files—any document format can be generated.
    PHP has built-in support for generating PDF files and GIF, JPEG, and PNG images.
  prefs: []
  type: TYPE_NORMAL
- en: One of PHP’s most significant features is its wide-ranging support for databases.
    PHP supports all major databases (including MySQL, PostgreSQL, Oracle, Sybase,
    MS-SQL, DB2, and ODBC-compliant databases), and even many obscure ones. Even the
    more recent NoSQL-style databases like CouchDB and MongoDB are also supported.
    With PHP, creating web pages with dynamic content from a database is remarkably
    simple.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, PHP provides a library of PHP code to perform common tasks, such as
    database abstraction, error handling, and so on, with the PHP Extension and Application
    Repository (PEAR). [PEAR](http://pear.php.net) is a framework and distribution
    system for reusable PHP components.
  prefs: []
  type: TYPE_NORMAL
- en: A Brief History of PHP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Rasmus Lerdorf first conceived of PHP in 1994, but the PHP that people use today
    is quite different from the initial version. To understand how PHP got where it
    is now, it is useful to know the historical evolution of the language. Here’s
    that story, with ample comments and emails from Rasmus himself.
  prefs: []
  type: TYPE_NORMAL
- en: The Evolution of PHP
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here is the PHP 1.0 announcement that was posted to the Usenet newsgroup (*comp.infosystems.www.authoring.cgi*)
    in June 1995:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Note that the URL and email address shown in this message are long gone. The
    language of this announcement reflects the concerns that people had at the time,
    such as password-protecting pages, easily creating forms, and accessing form data
    on subsequent pages. The announcement also illustrates PHP’s initial positioning
    as a framework for a number of useful tools.
  prefs: []
  type: TYPE_NORMAL
- en: The announcement talks only about the tools that came with PHP, but behind the
    scenes the goal was to create a framework to make it easy to extend PHP and add
    more tools. The business logic for these add-ons was written in C; a simple parser
    picked tags out of the HTML and called the various C functions. It was never really
    part of the plan to create a scripting language.
  prefs: []
  type: TYPE_NORMAL
- en: So what happened?
  prefs: []
  type: TYPE_NORMAL
- en: Rasmus started working on a rather large project for the University of Toronto
    that needed a tool to pull together data from various places and present a nice
    web-based administration interface. Of course, he used PHP for the task, but for
    performance reasons, the various small tools of PHP 1.0 had to be brought together
    better and integrated into the web server.
  prefs: []
  type: TYPE_NORMAL
- en: Initially, some hacks to the NCSA web server were made, to patch it to support
    the core PHP functionality. The problem with this approach was that as a user,
    you had to replace your web server software with this special, hacked-up version.
    Fortunately, Apache was also starting to gain momentum around this time, and the
    Apache API made it easier to add functionality like PHP to the server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Over the next year or so, a lot was done and the focus changed quite a bit.
    Here’s the PHP 2.0 (PHP/FI) announcement that was sent out in April 1996:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This was the first time the term *scripting language* was used. PHP 1.0’s simplistic
    tag-replacement code was replaced with a parser that could handle a more sophisticated
    embedded tag language. By today’s standards, the tag language wasn’t particularly
    sophisticated, but compared to PHP 1.0 it certainly was.
  prefs: []
  type: TYPE_NORMAL
- en: The main reason for this change was that few people who used PHP 1.0 were actually
    interested in using the C-based framework for creating add-ons. Most users were
    much more interested in being able to embed logic directly in their web pages
    for creating conditional HTML, custom tags, and other such features. PHP 1.0 users
    were constantly requesting the ability to add the hit-tracking footer or send
    different HTML blocks conditionally. This led to the creation of an `if` tag.
    Once you have `if`, you need `else` as well, and from there it’s a slippery slope
    to the point where, whether you want to or not, you end up writing an entire scripting
    language.
  prefs: []
  type: TYPE_NORMAL
- en: By mid-1997, PHP version 2.0 had grown quite a bit and had attracted a lot of
    users, but there were still some stability problems with the underlying parsing
    engine. The project was also still mostly a one-man effort, with a few contributions
    here and there. At this point, Zeev Suraski and Andi Gutmans in Tel Aviv, Israel,
    volunteered to rewrite the underlying parsing engine, and we agreed to make their
    rewrite the base for PHP version 3.0\. Other people also volunteered to work on
    other parts of PHP, and the project changed from a one-person effort with a few
    contributors to a true open source project with many developers around the world.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the PHP 3.0 announcement from June 1998:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: After the release of PHP 3.0, usage really started to take off. Version 4.0
    was prompted by a number of developers who were interested in making some fundamental
    changes to the architecture of PHP. These changes included abstracting the layer
    between the language and the web server, adding a thread-safety mechanism, and
    adding a more advanced, two-stage parse/execute tag-parsing system. This new parser,
    primarily written by Zeev and Andi, was named the Zend engine. After a lot of
    work by a lot of developers, PHP 4.0 was released on May 22, 2000.
  prefs: []
  type: TYPE_NORMAL
- en: As this book goes to press, PHP version 7.3 has been released for some time.
    There have already been a few minor “dot” releases, and the stability of this
    current version is quite high. As you will see in this book, there have been some
    major advances made in this version of PHP, primarily in code processing on the
    server side. Many other minor changes, function additions, and feature enhancements
    have also been incorporated.
  prefs: []
  type: TYPE_NORMAL
- en: The Widespread Use of PHP
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Figure 1-1](#php_usage_as_of_march_twozeroonenine) shows the [usage of PHP
    as compiled by W3Techs](http://bit.ly/XjyVZM) as of March 2019\. The most interesting
    piece of data here is that 79% of all the surveyed websites use it, and yet version
    5.0 is still the most widely used. If you look at the methodology used in the
    [W3Techs surveys](https://bit.ly/36QtdEF), you will see that they select the top
    10 million sites (based on traffic; website popularity) in the world. As is evident,
    PHP has a very broad adoption indeed!'
  prefs: []
  type: TYPE_NORMAL
- en: '![PHP usage as of March 2019](Images/php4_0101.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1-1\. PHP usage as of March 2019
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Installing PHP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned, PHP is available for many operating systems and platforms. Therefore,
    you are encouraged to consult the [PHP documentation](https://oreil.ly/FzRfm)
    to find the environment that most closely fits the one you will be using and follow
    the appropriate setup instructions.
  prefs: []
  type: TYPE_NORMAL
- en: From time to time, you may also want to change the way PHP is configured. To
    do that, you will have to change the PHP configuration file and restart your web
    (Apache) server. Each time you make a change to PHP’s environment, you will have
    to restart the web (Apache) server in order for those changes to take effect.
  prefs: []
  type: TYPE_NORMAL
- en: PHP’s configuration settings are usually maintained in a file called *php.ini*.
    The settings in this file control the behavior of PHP features, such as session
    handling and form processing. Later chapters refer to some of the *php.ini* options,
    but in general the code in this book does not require a customized configuration.
    See the [PHP documentation](https://oreil.ly/hqVvL) for more information on configuring
    *php.ini*.
  prefs: []
  type: TYPE_NORMAL
- en: A Walk Through PHP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PHP pages are generally HTML pages with PHP commands embedded in them. This
    is in contrast to many other dynamic web page solutions, which are scripts that
    generate HTML. The web server processes the PHP commands and sends their output
    (and any HTML from the file) to the browser. [Example 1-1](#example_one_onedot_hello_worlddotphp)
    shows a complete PHP page.
  prefs: []
  type: TYPE_NORMAL
- en: Example 1-1\. hello_world.php
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Save the contents of [Example 1-1](#example_one_onedot_hello_worlddotphp) to
    a file, *hello_world.php*, and point your browser to it. The results appear in
    [Figure 1-2](#output_of_hello_worlddotphp).
  prefs: []
  type: TYPE_NORMAL
- en: '![Output of hello_world.php](Images/php4_0102.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1-2\. Output of hello_world.php
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The PHP `echo` command produces output (the string “Hello, world!” in this case)
    inserted into the HTML file. In this example, the PHP code is placed between the
    `<?php` and `?>` tags. There are other ways to tag your PHP code—see [Chapter 2](ch02.xhtml#language_basics)
    for a full description.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration Page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The PHP function `phpinfo()` creates an HTML page full of information on how
    PHP was installed and is currently configured. You can use it to see whether you
    have particular extensions installed, or whether the *php.ini* file has been customized.
    [Example 1-2](#example_one_twodot_using_phpinfoleft_pa) is a complete page that
    displays the `phpinfo()` page.
  prefs: []
  type: TYPE_NORMAL
- en: Example 1-2\. Using phpinfo()
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[Figure 1-3](#partial_output_of_phpinfoleft_parenthes) shows the first part
    of the output of [Example 1-2](#example_one_twodot_using_phpinfoleft_pa).'
  prefs: []
  type: TYPE_NORMAL
- en: '![Partial output of phpinfo()](Images/php4_0103.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1-3\. Partial output of phpinfo()
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Forms
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Example 1-3](#example_one_threedot_processing_a_form) creates and processes
    a form. When the user submits the form, the information typed into the name field
    is sent back to this page via the `$_SERVER[''PHP_SELF'']` form action. The PHP
    code tests for a name field and displays a greeting if it finds one.'
  prefs: []
  type: TYPE_NORMAL
- en: Example 1-3\. Processing a form (form.php)
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The form and the message are shown in [Figure 1-4](#form_and_greeting_page).
  prefs: []
  type: TYPE_NORMAL
- en: '![Form and greeting page](Images/php4_0104.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1-4\. Form and greeting page
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: PHP programs access form values primarily through the `$_POST` and `$_GET` array
    variables. [Chapter 8](ch08.xhtml#web_techniques) discusses forms and form processing
    in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Databases
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PHP supports all the popular database systems, including MySQL, PostgreSQL,
    Oracle, Sybase, SQLite, and ODBC-compliant databases. [Figure 1-5](#a_mysql_book_list_query_run_through_a_p)
    shows part of a MySQL database query run through a PHP script, displaying the
    results of a book search on a book review site. It lists the book title, the year
    the book was published, and the book’s ISBN.
  prefs: []
  type: TYPE_NORMAL
- en: '![A MySQL book list query run through a PHP script](Images/php4_0105.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1-5\. A MySQL book list query run through a PHP script
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The code in [Example 1-4](#example_one_fourdot_querying_the_books) connects
    to the database, issues a query to retrieve all available books (with the `WHERE`
    clause), and produces a table as output for all returned results through a `while`
    loop.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The SQL code for this sample database is in the provided file *library.sql*.
    You can drop this code into MySQL after you create the library database and have
    the sample database at your disposal for testing out the following code sample
    as well as the related samples in [Chapter 9](ch09.xhtml#databases-id00007).
  prefs: []
  type: TYPE_NORMAL
- en: Example 1-4\. Querying the books database (booklist.php)
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Database-provided dynamic content drives the news, blog, and ecommerce sites
    at the heart of the web. More details on accessing databases from PHP are given
    in [Chapter 9](ch09.xhtml#databases-id00007).
  prefs: []
  type: TYPE_NORMAL
- en: Graphics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With PHP, you can easily create and manipulate images using the GD extension.
    [Example 1-5](#example_one_fivedot_dynamic_buttons_lef) provides a text entry
    field that lets the user specify the text for a button. It takes an empty button
    image file, and centers the text passed as the `GET` parameter `'message'` on
    it. The result is then sent back to the browser as a PNG image.
  prefs: []
  type: TYPE_NORMAL
- en: Example 1-5\. Dynamic buttons (graphic_example.php)
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The form generated by [Example 1-5](#example_one_fivedot_dynamic_buttons_lef)
    is shown in [Figure 1-6](#button_creation_form). The button created is shown in
    [Figure 1-7](#button_created).
  prefs: []
  type: TYPE_NORMAL
- en: '![Button creation form](Images/php4_0106.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1-6\. Button creation form
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '![Button created](Images/php4_0107.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1-7\. Button created
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: You can use GD to dynamically resize images, produce graphs, and much more.
    PHP also has several extensions to generate documents in Adobe’s popular PDF format.
    [Chapter 10](ch10.xhtml#graphic) covers dynamic image generation in depth, while
    [Chapter 11](ch11.xhtml#pdf) provides instruction on how to create Adobe PDF files.
  prefs: []
  type: TYPE_NORMAL
- en: What’s Next
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you’ve had a taste of what is possible with PHP, you are ready to learn
    how to program in the language. We start with its basic structure, with special
    focus given to user-defined functions, string manipulation, and object-oriented
    programming. Then we move to specific application areas, such as the web, databases,
    graphics, XML, and security. We finish with quick references to the built-in functions
    and extensions. Master these chapters, and you will have mastered PHP!
  prefs: []
  type: TYPE_NORMAL
