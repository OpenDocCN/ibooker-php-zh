["```php\n$candidates = [\n    22,\n    '15',\n    '12.7',\n    0.662,\n    'infinity',\n    INF,\n    0xDEADBEEF,\n    '10e10',\n    '15 apples',\n    '2,500'\n];\n\nforeach ($candidates as $candidate) {\n    $numeric = is_numeric($candidate) ? 'is' : 'is NOT';\n\n    echo \"The value '{$candidate}' {$numeric} numeric.\" . PHP_EOL;\n}\n```", "```php\nThe value '22' is numeric.\nThe value '15' is numeric.\nThe value '12.7' is numeric.\nThe value '0.662' is numeric.\nThe value 'infinity' is NOT numeric.\nThe value 'INF' is numeric.\nThe value '3735928559' is numeric.\nThe value '10e10' is numeric.\nThe value '15 apples' is NOT numeric.\nThe value '2,500' is NOT numeric.\n```", "```php\nfunction string_is_numeric(string $test): bool\n{\n    return $test === (string) floatval($test);\n}\n```", "```php\n$first = 22.19348234;\n$second = 22.19348230;\n\n$epsilon = 0.000001;\n\n$equal = abs($first - $second) < $epsilon; // true\n```", "```php\n$a = 0.17;\n$b = 1 - 0.83;\n\nvar_dump($a == $b); ![1](assets/1.png)\nvar_dump($a); ![2](assets/2.png)\nvar_dump($b); ![3](assets/3.png)\n```", "```php\nfunction float_equality(float $epsilon): callable\n{\n    return function(float $a, float $b) use ($epsilon): bool\n    {\n        return abs($a - $b) < $epsilon;\n    };\n}\n\n$tight_equality = float_equality(0.0000001);\n$loose_equality = float_equality(0.01);\n\nvar_dump($tight_equality(1.152, 1.152001)); ![1](assets/1.png)\nvar_dump($tight_equality(0.234, 0.2345)); ![2](assets/2.png)\nvar_dump($tight_equality(0.234, 0.244)); ![3](assets/3.png)\nvar_dump($loose_equality(1.152, 1.152001)); ![4](assets/4.png)\nvar_dump($loose_equality(0.234, 0.2345)); ![5](assets/5.png)\nvar_dump($loose_equality(0.234, 0.244)); ![6](assets/6.png)\n```", "```php\n$number = round(15.31415, 1);\n// 15.3\n```", "```php\n$number = ceil(15.3);\n// 16\n```", "```php\n$number = floor(15.3);\n// 15\n```", "```php\necho 'Rounding on 1.5' . PHP_EOL;\nvar_dump(round(1.5, mode: PHP_ROUND_HALF_UP));\nvar_dump(round(1.5, mode: PHP_ROUND_HALF_DOWN));\nvar_dump(round(1.5, mode: PHP_ROUND_HALF_EVEN));\nvar_dump(round(1.5, mode: PHP_ROUND_HALF_ODD));\n\necho 'Rounding on 2.5' . PHP_EOL;\nvar_dump(round(2.5, mode: PHP_ROUND_HALF_UP));\nvar_dump(round(2.5, mode: PHP_ROUND_HALF_DOWN));\nvar_dump(round(2.5, mode: PHP_ROUND_HALF_EVEN));\nvar_dump(round(2.5, mode: PHP_ROUND_HALF_ODD));\n```", "```php\nRounding on 1.5\nfloat(2)\nfloat(1)\nfloat(2)\nfloat(1)\nRounding on 2.5\nfloat(3)\nfloat(2)\nfloat(2)\nfloat(3)\n```", "```php\n// Random integer between 10 and 225, inclusive\n$random_number = random_int(10, 225);\n```", "```php\nfunction random_float(): float\n{\n    return random_int(0, PHP_INT_MAX) / PHP_INT_MAX;\n}\n```", "```php\nfunction random_float(int $min = 0, int $max = 1): float\n{\n    $rand = random_int(0, PHP_INT_MAX) / PHP_INT_MAX;\n\n    return ($max - $min) * $rand + $min;\n}\n```", "```php\nfunction generate_sequence(int $count = 10): array\n{\n    $array = [];\n\n    for ($i = 0; $i < $count; $i++) {\n        $array[] = mt_rand(0, 100);\n    }\n\n    return $array;\n}\n\nmt_srand(42);\n$first = generate_sequence();\n\nmt_srand(42);\n$second = generate_sequence();\n\nprint_r($first);\nprint_r($second);\n```", "```php\nArray\n(\n    [0] => 38\n    [1] => 32\n    [2] => 94\n    [3] => 55\n    [4] => 2\n    [5] => 21\n    [6] => 10\n    [7] => 12\n    [8] => 47\n    [9] => 30\n)\n```", "```php\n$choices = [\n    'Tony'  => 10,\n    'Steve' => 2,\n    'Peter' => 1,\n    'Wanda' => 4,\n    'Carol' => 6\n];\n\nfunction weighted_random_choice(array $choices): string\n{\n    arsort($choices);\n\n    $total_weight = array_sum(array_values($choices));\n    $selection = random_int(1, $total_weight);\n\n    $count = 0;\n    foreach ($choices as $choice => $weight) {\n        $count += $weight;\n        if ($count >= $selection) {\n            return $choice;\n        }\n    }\n\n    throw new Exception('Unable to make a choice!');\n}\n\nprint weighted_random_choice($choices);\n```", "```php\n$output = fopen('output.csv', 'w');\nfputcsv($output, ['selected']);\n\nforeach (range(0, 1000) as $i) {\n    $selection = weighted_random_choice($choices);\n    fputcsv($output, [$selection]);\n}\nfclose($output);\n```", "```php\n$log = log(5);\n// 1.6094379124341\n```", "```php\n$log2 = log(16, 2);\n// 4.0\n```", "```php\n// 2^5\n$power = pow(2, 5); // 32\n\n// 3^0.5\n$power = pow(3, 0.5); // 1.7320508075689\n\n// e^2\n$power = pow(M_E, 2); // 7.3890560989306\n```", "```php\n// 2^5\n$power = 2 ** 5; // 32\n\n// 3^0.5\n$power = 3 ** 0.5; // 1.7320508075689\n\n// e^2\n$power = M_E ** 2; // 7.3890560989306\n```", "```php\n$number = 25519;\nprint number_format($number);\n// 25,519\n\n$number = 64923.12\nprint number_format($number, 2);\n// 64,923.12\n```", "```php\n$number = 525600.23;\n\nprint number_format($number, 2, ',', '.');\n// 525.600,23\n```", "```php\n$number = 525600.23;\n\n$fmt = new NumberFormatter('da_DK', NumberFormatter::DEFAULT_STYLE);\nprint $fmt->format($number);\n// 525.600,23\n```", "```php\n$sum = gmp_pow(4096, 100);\nprint gmp_strval($sum);\n// 17218479456385750618067377696052635483579924745448689921733236816400\n// 74069124174561939748453723604617328637091903196158778858492729081666\n// 10249916098827287173446595034716559908808846798965200551239064670644\n// 19056526231345685268240569209892573766037966584735183775739433978714\n// 57858778270138079724077247764787455598671274627136289222751620531891\n// 4435913511141036261376\n```", "```php\n$add = 2 + 5;\n$add = gmp_add(2, 5);\n\n$sub = 23 - 2;\n$sub = gmp_sub(23, 2);\n\n$div = 15 / 4;\n$div = gmp_div(15, 4);\n\n$mul = 3 * 9;\n$mul = gmp_mul(3, 9);\n\n$pow = 4 ** 7;\n$pow = gmp_pow(4, 7);\n\n$mod = 93 % 4;\n$mod = gmp_mod(93, 4);\n\n$eq = 42 == (21 * 2);\n$eq = gmp_cmp(42, gmp_mul(21, 2));\n```", "```php\n// Base 10 (decimal) number\n$decimal = '240';\n\n// Convert from base 10 to base 16\n// $hex = 'f0'\n$hex = base_convert($decimal, 10, 16);\n```"]