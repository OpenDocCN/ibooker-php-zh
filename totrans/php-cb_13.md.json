["```php\nfunction dd(...$vars): void\n{\n    if (!in_array(\\PHP_SAPI, ['cli', 'phpdbg'], true) && !headers_sent()) {\n        header('HTTP/1.1 500 Internal Server Error');\n    }\n\n    foreach ($vars as $v) {\n        VarDumper::dump($v);\n    }\n\n    exit(1);\n}\n```", "```php\n$ sudo apt install php-xdebug\n```", "```php\n$ pecl install xdebug\n```", "```php\nfunction extractDomain(string $email): string\n{\n    $parts = explode('@', $email);\n\n    return $parts[1];\n}\n```", "```php\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class FunctionTest extends TestCase\n{\n    public function testSimpleDomainExtraction()\n    {\n        $this->assertEquals('example.com', extractDomain('php@example.com'));\n    }\n}\n```", "```php\n$ ./vendor/bin/phpunit tests\n```", "```php\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<phpunit bootstrap=\"vendor/autoload.php\"\n         backupGlobals=\"false\"\n         backupStaticAttributes=\"false\"\n         colors=\"true\"\n         convertErrorsToExceptions=\"true\"\n         convertNoticesToExceptions=\"true\"\n         convertWarningsToExceptions=\"true\"\n         processIsolation=\"false\"\n         stopOnFailure=\"false\">\n\n  <coverage>\n    <include>\n      <directory suffix=\".php\">src/</directory>\n    </include>\n  </coverage>\n\n  <testsuites>\n    <testsuite name=\"unit\">\n      <directory>tests</directory>\n    </testsuite>\n  </testsuites>\n\n  <php>\n    <env name=\"APP_ENV\" value=\"testing\"/>\n  </php>\n\n</phpunit>\n```", "```php\nfunction add($a, $b): mixed\n{\n    return $a + $b;\n}\n```", "```php\nfinal class FunctionTest extends TestCase\n{\n    // ...\n\n    /**\n * @dataProvider additionProvider\n */\n    public function testAdd($a, $b, $expected): void\n    {\n        $this->assertSame($expected, add($a, $b));\n    }\n\n    public function additionProvider(): array\n    {\n        return [\n            [2, 3, 5],\n            [2, 3.0, 5.0],\n            [2.0, '3', 5.0],\n            ['2', 3, 5]\n        ];\n    }\n}\n```", "```php\nfinal class FunctionTest extends TestCase\n{\n    // ...\n\n    /**\n * @dataProvider invalidAdditionProvider\n */\n    public function testInvalidInput($a, $b, $expected): void\n    {\n        $this->expectException(InvalidArgumentException::class);\n        add($a, $b);\n    }\n\n    public function invalidAdditionProvider(): array\n    {\n        return [\n            [1, 'invalid', null],\n            ['invalid', 1, null],\n            ['invalid', 'invalid', null]\n        ];\n    }\n}\n```", "```php\nfunction add($a, $b): mixed\n{\n    if (!is_numeric($a) || !is_numeric($b)) {\n        throw new InvalidArgumentException('Input must be numeric!');\n    }\n\n    return $a + $b;\n}\n```", "```php\n#!/usr/bin/env php\n<?php\n\necho \"Running tests.. \";\nexec('vendor/bin/phpunit', $output, $returnCode);\n\nif ($returnCode !== 0) {\n  echo PHP_EOL . implode($output, PHP_EOL) . PHP_EOL;\n  echo \"Aborting commit..\" . PHP_EOL;\n  exit(1);\n}\n\necho array_pop($output) . PHP_EOL;\n\nexit(0);\n```", "```php\n$ composer require --dev phpstan/phpstan\n```", "```php\n$ ./vendor/bin/phpstan analyze src tests\n```", "```php\n$ composer require monolog/monolog\n```", "```php\nuse Monolog\\Level;\nuse Monolog\\Logger;\nuse Monolog\\Handler\\StreamHandler;\n\n$logPath  = getenv('LOG_PATH')  ?? '/var/log/php/error.log';\n$logLevel = getenv('LOG_LEVEL') !== false\n            ? Level::from(intval(getenv('LOG_LEVEL')))\n            : Level::Warning;\n\n$logger = new Logger('default');\n$logger->pushHandler(new StreamHandler($logPath, $logLevel));\n\n$log->warning('Hello!');\n$log->error('World!');\n```", "```php\nenum LogLevel: int ![1](assets/1.png)\n{\n    case Debug   = 100;\n    case Info    = 200;\n    case Warning = 300;\n    case Error   = 400;\n}\n\n$logLevel = getenv('LOG_LEVEL') !== false ![2](assets/2.png)\n            ? LogLevel::from(intval(getenv('LOG_LEVEL')))\n            : LogLevel::Debug;\n\n// Some application code ... if (user_session_expired()) {\n    if ($logLevel >= LogLevel::Info) { ![3](assets/3.png)\n        error_log('User session expired. Logging out ...');\n    }\n\n    logout();\n    exit;\n}\n```", "```php\nuse Monolog\\Level;\nuse Monolog\\Logger;\nuse Monolog\\Handler\\StreamHandler;\nuse Monolog\\Processor\\IntrospectionProcessor;\n\n$logger = new Logger('default');\n$logger->pushHandler(new StreamHandler('/var/log/app.log', Level::Debug));\n$logger->pushProcessor(new IntrospectionProcessor());\n\n// ...\n\n$logger->debug('Something happened ...');\n```", "```php\n[2023-01-08T22:02:00.734710+00:00] default.DEBUG: Something happened ...\n[] {\"file\":\"/src/app.php\",\"line\":15,\"class\":null,\"callType\":null,\"function\":null}\n```", "```php\n$info = new stdClass;\n$info->name = 'Book Reader';\n$info->profession = 'PHP Developer';\n$info->favorites = ['PHP', 'MySQL', 'Linux'];\n\nvar_dump($info);\n```", "```php\nobject(stdClass)#1 (3) {\n  [\"name\"]=>\n  string(11) \"Book Reader\"\n  [\"profession\"]=>\n  string(13) \"PHP Developer\"\n  [\"favorites\"]=>\n  array(3) {\n    [0]=>\n    string(3) \"PHP\"\n    [1]=>\n    string(5) \"MySQL\"\n    [2]=>\n    string(5) \"Linux\"\n  }\n}\n```", "```php\n(object) array(\n   'name' => 'Book Reader',\n   'profession' => 'PHP Developer',\n   'favorites' =>\n  array (\n    0 => 'PHP',\n    1 => 'MySQL',\n    2 => 'Linux',\n  ),\n)\n```", "```php\nstdClass Object\n(\n    [name] => Book Reader\n    [profession] => PHP Developer\n    [favorites] => Array\n        (\n            [0] => PHP\n            [1] => MySQL\n            [2] => Linux\n        )\n)\n```", "```php\nob_start(); ![1](assets/1.png)\nvar_dump($info); ![2](assets/2.png)\n\n$contents = ob_get_clean(); ![3](assets/3.png)\n```", "```php\nstring(244) \"object(stdClass)#1 (3) {\n [\"name\"]=>\n string(11) \"Book Reader\"\n [\"profession\"]=>\n string(13) \"PHP Developer\"\n [\"favorites\"]=>\n array(3) {\n [0]=>\n string(3) \"PHP\"\n [1]=>\n string(5) \"MySQL\"\n [2]=>\n string(5) \"Linux\"\n }\n}\n\"\n```", "```php\n$ cd ~/public_html\n$ php -S localhost:8000\n```", "```php\n.3gp, .apk, .avi, .bmp, .css, .csv, .doc, .docx, .flac, .gif, .gz, .gzip, .htm,\n.html, .ics, .jpe, .jpeg, .jpg, .js, .kml, .kmz, .m4a, .mov, .mp3, .mp4, .mpeg,\n.mpg, .odp, .ods, .odt, .oga, .ogg, .ogv, .pdf, .png, .pps, .pptx, .qt, .svg,\n.swf, .tar, .text, .tif, .txt, .wav, .webm, .wmv, .xls, .xlsx, .xml, .xsl, .xsd,\nand .zip.\n```", "```php\nif (php_sapi_name() === 'cli-server') {\n    if (preg_match('/\\.(?:png|jpg|jpeg|gif)$/', $_SERVER[\"REQUEST_URI\"])) {\n        return false;\n    }\n}\n\n// Continue router execution\n```", "```php\n$ php -S localhost:8000 router.php\n```", "```php\n$ git bisect start\n$ git bisect good 48cc8f0 ![1](assets/1.png)\n$ git bisect bad HEAD ![2](assets/2.png)\n$ git bisect run vendor/bin/phpunit ![3](assets/3.png)\n```", "```php\n$ git diff 16c43d7 HEAD\n```", "```php\n$ git rebase -i 8550717\n```"]