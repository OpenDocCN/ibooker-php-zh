- en: Chapter 21\. Accessing CSS from JavaScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With a good understanding of the DOM and CSS now under your belt, you’ll learn
    in this chapter how to access both the DOM and CSS directly from JavaScript, enabling
    you to create highly dynamic and responsive websites.
  prefs: []
  type: TYPE_NORMAL
- en: I’ll also show you how to use interrupts so you can create animations or provide
    any code that must continue running (such as a clock). Finally, I’ll explain how
    you can add new elements to or remove existing ones from the DOM so you don’t
    have to precreate elements in HTML just in case JavaScript may need to access
    them later.
  prefs: []
  type: TYPE_NORMAL
- en: Revisiting the getElementById Function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To help with the examples in the rest of this book, I would like to provide
    an enhanced version of the `getElementById` function, for handling DOM elements
    and CSS styles quickly and efficiently, without the need for including a framework
    such as jQuery.
  prefs: []
  type: TYPE_NORMAL
- en: However, to avoid conflicting with frameworks that use the `$` character, I’ll
    use the uppercase `O`, because it’s the first letter of *Object*, which is what
    will be returned when the function is called (the object represented by the ID
    passed to the function).
  prefs: []
  type: TYPE_NORMAL
- en: The O Function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here’s what the bare-bones `O` function looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This alone saves 22 characters of typing each time it’s called. But I’ve chosen
    to extend the function a little by allowing either an ID name or an object to
    be passed to the function, as shown in the complete version in [Example 21-1](#oleft_parenthesisright_parenthesis_f).
  prefs: []
  type: TYPE_NORMAL
- en: Example 21-1\. The `O` function
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: If an object is passed to the function, it just returns that object back again.
    Otherwise, it assumes that an ID has been passed and returns the object to which
    the ID refers.
  prefs: []
  type: TYPE_NORMAL
- en: But why on Earth would I want to add this first statement, which simply returns
    the object passed to it?
  prefs: []
  type: TYPE_NORMAL
- en: The S Function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The answer to this question becomes clear when you look at a partner function
    called `S`, which gives you easy access to the style (or CSS) properties of an
    object, as shown in [Example 21-2](#sleft_parenthesisright_parenthesis_f).
  prefs: []
  type: TYPE_NORMAL
- en: Example 21-2\. The `S` function
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The `S` in this function name is the first letter of *Style*, and the function
    performs the task of returning the style property (or subobject) of the element
    referred to. Because the embedded `O` function accepts either an ID or an object,
    you can pass either an ID or an object to `S` as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s look at what’s going on here by taking a `<div>` element with the ID
    of `myobj` and setting its text color to green, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code will do the job, but it’s much simpler to call the new `S`
    function, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now consider the case in which the object returned by calling `O` is stored
    in, for example, an object called `fred`, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Because of the way the `S` function works, we can still call it to change the
    text color to green, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This means that whether you wish to access an object directly or via its ID,
    you can do so by passing it to either the `O` or `S` function as required. Just
    remember that when you pass an object (rather than an ID), you must not place
    it in quotation marks.
  prefs: []
  type: TYPE_NORMAL
- en: The C Function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'So far I’ve provided you with two simple functions that make it easy for you
    to access any element on a web page and any style property of an element. Sometimes,
    though, you will want to access more than one element at a time. You can do this
    by assigning a CSS class name to each such element, like in these examples, which
    both employ the class `myclass`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: If you want to access all elements on a page that use a particular class, you
    can use the `C` function (for the first letter of *Class*), shown in [Example 21-3](#cleft_parenthesisright_parenthesis_f),
    to return an array containing all the objects that match the class name provided.
  prefs: []
  type: TYPE_NORMAL
- en: Example 21-3\. The `C` function
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'To use this function, simply call it as follows, saving the returned array
    so that you can access each of the elements individually as required or (more
    likely to be the case) en masse via a loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you can do whatever you like with the objects returned, such as (for example)
    setting their `textDecoration` style property to `underline`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This code iterates through the objects in `myarray[]` and then uses the `S`
    function to reference each one’s style property, setting its `textDecoration`
    property to `underline`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: It is highly unlikely you will use these `O`, `S`, and `C` functions in development
    code, because you will probably have a custom-made or third-party framework to
    provide this functionality, plus a whole lot more. But they serve to keep the
    examples in this book short and easy to follow, as well as being a simple example
    of how JavaScript can be enhanced.
  prefs: []
  type: TYPE_NORMAL
- en: Including the Functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I use the `O` and `S` functions in the examples for the remainder of this chapter,
    as they make the code shorter and easier to follow. Therefore, I have saved them
    in the file *OSC.js* (along with the `C` function, which I think you’ll find extremely
    useful) in the Chapter 21 folder of the accompanying archive of examples, freely
    downloadable from the [book’s example repository](https://github.com/RobinNixon/lpmj6).
  prefs: []
  type: TYPE_NORMAL
- en: 'You can include these functions in any web page by using the following statement—preferably
    in its `<head>` section, anywhere before any script that relies on calling them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The contents of *OSC.js* are shown in [Example 21-4](#oscdotjs_file), where
    everything is neatened into just three lines.
  prefs: []
  type: TYPE_NORMAL
- en: Example 21-4\. The OSC.js file
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Accessing CSS Properties from JavaScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `textDecoration` property I used in an earlier example represents a CSS
    property that is normally hyphenated like this: `text-decoration`. But since JavaScript
    reserves the hyphen character for use as a mathematical operator, whenever you
    access a hyphenated CSS property, you must omit the hyphen and set the character
    immediately following it to uppercase.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Another example of this is the `font-size` property, which is referenced in
    JavaScript as `fontSize` when placed after a period operator, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'An alternative to this is to be more long-winded and use the `setAttribute`
    function, which *does* support (and in fact requires) standard CSS property names,
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Some Common Properties
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using JavaScript, you can modify any property of any element in a web document,
    in a similar manner to using CSS. I’ve already shown you how to access CSS properties
    using either the JavaScript short form or the `setAttribute` function to use exact
    CSS property names, so I won’t bore you by detailing all of the hundreds of properties.
    Rather, I’d like to show you how to access just a few of the CSS properties as
    an overview of some of the things you can do.
  prefs: []
  type: TYPE_NORMAL
- en: First, then, let’s look at modifying a few CSS properties from JavaScript using
    [Example 21-5](#accessing_css_properties_from_ja-id00108), which loads in the
    three earlier functions, creates a `<div>` element, and then issues JavaScript
    statements within a `<script>` section of HTML to modify some of its attributes
    (see [Figure 21-1](#modifying_styles_from_javascript)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 21-5\. Accessing CSS properties from JavaScript
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '![Modifying styles from JavaScript](Images/pmj6_2101.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 21-1\. Modifying styles from JavaScript
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: You gain nothing by modifying properties like this, because you could just as
    easily have included some CSS directly, but shortly we’ll be modifying properties
    in response to user interaction—and then you’ll see the real power of combining
    JavaScript and CSS.
  prefs: []
  type: TYPE_NORMAL
- en: Other Properties
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: JavaScript also opens up access to a very wide range of other properties, such
    as the width and height of the browser window and of any pop-up or in-browser
    windows or frames, plus handy information such as the parent window (if there
    is one) and the history of URLs visited in this session.
  prefs: []
  type: TYPE_NORMAL
- en: All these properties are accessed from the `window` object via the period operator
    (for example, `window.name`), and [Table 21-1](#common_window_properties) lists
    them all, along with descriptions of each.
  prefs: []
  type: TYPE_NORMAL
- en: Table 21-1\. The window properties
  prefs: []
  type: TYPE_NORMAL
- en: '| Property | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `closed` | Returns a Boolean value indicating whether a window has been closed
    or not |'
  prefs: []
  type: TYPE_TB
- en: '| `defaultStatus` | Sets or returns the default text in the status bar of a
    window |'
  prefs: []
  type: TYPE_TB
- en: '| `document` | Returns the `document` object for the window |'
  prefs: []
  type: TYPE_TB
- en: '| `frameElement` | Returns the `iframe` element in which the current window
    is inserted |'
  prefs: []
  type: TYPE_TB
- en: '| `frames` | Returns an array of all the frames and iframes in the window |'
  prefs: []
  type: TYPE_TB
- en: '| `history` | Returns the `history` object for the window |'
  prefs: []
  type: TYPE_TB
- en: '| `innerHeight` | Sets or returns the inner height of a window’s content area
    |'
  prefs: []
  type: TYPE_TB
- en: '| `innerWidth` | Sets or returns the inner width of a window’s content area
    |'
  prefs: []
  type: TYPE_TB
- en: '| `length` | Returns the number of frames and iframes in a window |'
  prefs: []
  type: TYPE_TB
- en: '| `localStorage` | Allows saving of key/value pairs in a web browser |'
  prefs: []
  type: TYPE_TB
- en: '| `location` | Returns the `location` object for the window |'
  prefs: []
  type: TYPE_TB
- en: '| `name` | Sets or returns the name of a window |'
  prefs: []
  type: TYPE_TB
- en: '| `navigator` | Returns the `navigator` object for the window |'
  prefs: []
  type: TYPE_TB
- en: '| `opener` | Returns a reference to the window that created the window |'
  prefs: []
  type: TYPE_TB
- en: '| `outerHeight` | Sets or returns the outer height of a window, including tool-
    and scrollbars |'
  prefs: []
  type: TYPE_TB
- en: '| `outerWidth` | Sets or returns the outer width of a window, including tool-
    and scrollbars |'
  prefs: []
  type: TYPE_TB
- en: '| `pageXOffset` | Returns the number of pixels the document has been scrolled
    horizontally from the left of the window |'
  prefs: []
  type: TYPE_TB
- en: '| `pageYOffset` | Returns the number of pixels the document has been scrolled
    vertically from the top of the window |'
  prefs: []
  type: TYPE_TB
- en: '| `parent` | Returns the parent window of a window |'
  prefs: []
  type: TYPE_TB
- en: '| `screen` | Returns the `screen` object for the window |'
  prefs: []
  type: TYPE_TB
- en: '| `screenLeft` | Returns the *x* coordinate of the window relative to the screen
    |'
  prefs: []
  type: TYPE_TB
- en: '| `screenTop` | Returns the *y* coordinate of the window relative to the screen
    |'
  prefs: []
  type: TYPE_TB
- en: '| `screenX` | Returns the *x* coordinate of the window relative to the screen
    |'
  prefs: []
  type: TYPE_TB
- en: '| `screenY` | Returns the *y* coordinate of the window relative to the screen
    |'
  prefs: []
  type: TYPE_TB
- en: '| `sessionStorage` | Allows saving of key/value pairs in a web browser |'
  prefs: []
  type: TYPE_TB
- en: '| `self` | Returns the current window |'
  prefs: []
  type: TYPE_TB
- en: '| `status` | Sets or returns the text in the status bar of a window |'
  prefs: []
  type: TYPE_TB
- en: '| `top` | Returns the top browser window |'
  prefs: []
  type: TYPE_TB
- en: 'There are a few points to note about some of these properties:'
  prefs: []
  type: TYPE_NORMAL
- en: The `defaultStatus` and `status` properties can be set only if users have modified
    their browsers to allow it (very unlikely).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `history` object cannot be read from (so you cannot see where your visitors
    have been surfing). But it supports the `length` property to determine how long
    the history is, and the `back`, `forward`, and `go` methods to navigate to specific
    pages in the history.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When you need to know how much space there is available in a current window
    of the web browser, just read the values in `window.innerHeight` and `window.innerWidth`.
    I often use these values for centering in-browser pop-up alert or “confirm dialog”
    windows.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `screen` object supports the read-only properties `availHeight`, `availWidth`,
    `colorDepth`, `height`, `pixelDepth`, and `width` and is therefore great for determining
    information about the user’s display.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Many of these properties can be invaluable when you’re targeting mobile phones
    and tablet devices, as they will tell you exactly how much screen space you have
    to work with, the type of browser being used, and more.
  prefs: []
  type: TYPE_NORMAL
- en: These few items of information will get you started and provide you with an
    idea of the many new and interesting things you can do with JavaScript. There
    are far more properties and methods available than can be covered in this chapter,
    but now that you know how to access and use properties, all you need is a resource
    listing them all. I recommend that you check out [the online docs](https://tinyurl.com/domexplained) as
    a good starting point.
  prefs: []
  type: TYPE_NORMAL
- en: Inline JavaScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using `<script>` tags isn’t the only way you can execute JavaScript statements;
    you can also access JavaScript from within HTML tags, which makes for great dynamic
    interactivity. For example, to add a quick effect when the mouse passes over an
    object, you can use code such as that in the `<img>` tag in [Example 21-6](#using_inline_javascript),
    which displays an apple by default but replaces it with an orange when the mouse
    passes over the object and restores the apple again when the mouse leaves.
  prefs: []
  type: TYPE_NORMAL
- en: Example 21-6\. Using inline JavaScript
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The this Keyword
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the preceding example, you see the `this` keyword in use. It tells the JavaScript
    to operate on the calling object, namely the `<img>` tag. You can see the result
    in [Figure 21-2](#inline_mouse_hover_javascript_example), where the mouse has
    yet to pass over the apple.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: When supplied from an inline JavaScript call, the `this` keyword represents
    the calling object. When used in class methods, it represents an object to which
    the method applies.
  prefs: []
  type: TYPE_NORMAL
- en: '![Inline mouse hover JavaScript example](Images/pmj6_2102.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 21-2\. Inline mouse hover JavaScript example
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Attaching Events to Objects in a Script
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The preceding code is the equivalent of providing an ID to the `<img>` tag and
    then attaching the actions to the tag’s mouse events, like in [Example 21-7](#non-inline_javascript).
  prefs: []
  type: TYPE_NORMAL
- en: Example 21-7\. Noninline JavaScript
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: In the HTML section, this example gives the `<img>` element an ID of `object`,
    and it then proceeds to manipulate it separately in the JavaScript section by
    attaching anonymous functions to each event.
  prefs: []
  type: TYPE_NORMAL
- en: Attaching to Other Events
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Whether you’re using inline or separate JavaScript, there are several events
    to which you can attach actions, providing a wealth of additional features you
    can offer your users. [Table 21-2](#events_and_when_they_are_triggered) lists
    these events and details when they will be triggered.
  prefs: []
  type: TYPE_NORMAL
- en: Table 21-2\. Events and when they are triggered
  prefs: []
  type: TYPE_NORMAL
- en: '| Event | Occurs |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `onabort` | When an image’s loading is stopped before completion |'
  prefs: []
  type: TYPE_TB
- en: '| `onblur` | When an element loses focus^([a](ch21.xhtml#idm45694686802856))
    |'
  prefs: []
  type: TYPE_TB
- en: '| `onchange` | When any part of a form has changed |'
  prefs: []
  type: TYPE_TB
- en: '| `onclick` | When an object is clicked |'
  prefs: []
  type: TYPE_TB
- en: '| `ondblclick` | When an object is double-clicked |'
  prefs: []
  type: TYPE_TB
- en: '| `onerror` | When a JavaScript error is encountered |'
  prefs: []
  type: TYPE_TB
- en: '| `onfocus` | When an element gets focus |'
  prefs: []
  type: TYPE_TB
- en: '| `onkeydown` | When a key is being pressed (including Shift, Alt, Ctrl, and
    Esc) |'
  prefs: []
  type: TYPE_TB
- en: '| `onkeypress` | When a key is being pressed (not including Shift, Alt, Ctrl,
    and Esc) |'
  prefs: []
  type: TYPE_TB
- en: '| `onkeyup` | When a key is released |'
  prefs: []
  type: TYPE_TB
- en: '| `onload` | When an object has loaded |'
  prefs: []
  type: TYPE_TB
- en: '| `onmousedown` | When the mouse button is pressed over an element |'
  prefs: []
  type: TYPE_TB
- en: '| `onmousemove` | When the mouse is moved over an element |'
  prefs: []
  type: TYPE_TB
- en: '| `onmouseout` | When the mouse leaves an element |'
  prefs: []
  type: TYPE_TB
- en: '| `onmouseover` | When the mouse passes over an element from outside it |'
  prefs: []
  type: TYPE_TB
- en: '| `onmouseup` | When the mouse button is released |'
  prefs: []
  type: TYPE_TB
- en: '| `onreset` | When a form is reset |'
  prefs: []
  type: TYPE_TB
- en: '| `onresize` | When the browser is resized |'
  prefs: []
  type: TYPE_TB
- en: '| `onscroll` | When the document is scrolled |'
  prefs: []
  type: TYPE_TB
- en: '| `onselect` | When some text is selected |'
  prefs: []
  type: TYPE_TB
- en: '| `onsubmit` | When a form is submitted |'
  prefs: []
  type: TYPE_TB
- en: '| `onunload` | When a document is removed |'
  prefs: []
  type: TYPE_TB
- en: '| ^([a](ch21.xhtml#idm45694686802856-marker)) An element that has *focus* is
    one that has been clicked or otherwise entered into, such as an input field. |'
  prefs: []
  type: TYPE_TB
- en: Warning
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Make sure you attach events to objects that make sense. For example, an object
    that is not a form will not respond to the `onsubmit` event.
  prefs: []
  type: TYPE_NORMAL
- en: Adding New Elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With JavaScript, you are not limited to manipulating the elements and objects
    supplied to a document in its HTML. In fact, you can create objects at will by
    inserting them into the DOM.
  prefs: []
  type: TYPE_NORMAL
- en: For example, suppose you need a new `<div>` element. [Example 21-8](#inserting_an_element_into_the_dom)
    shows one way you can add it to a web page.
  prefs: []
  type: TYPE_NORMAL
- en: Example 21-8\. Inserting an element into the DOM
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[Figure 21-3](#inserting_a_new_element_into_the_dom) shows this code being
    used to add a new `<div>` element to a web document. First, the new element is
    created with `createElement`; then the `appendChild` function is called, and the
    element gets inserted into the DOM.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Inserting a new element into the DOM](Images/pmj6_2103.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 21-3\. Inserting a new element into the DOM
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: After this, various properties are assigned to the element, including some text
    for its inner HTML. And then, in order to make sure the new element is instantly
    revealed, a timeout is set to trigger one second in the future, delaying the running
    of the remaining code to give the DOM time to update and display, before popping
    up the alert about removing the element again. See [“Using setTimeout”](#using_settimeout) for
    more on creating and using timeouts.
  prefs: []
  type: TYPE_NORMAL
- en: This new element that’s created is exactly the same as if it had been included
    in the original HTML and has all the same properties and methods available.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: I sometimes use the technique of creating new elements when I want to create
    in-browser pop-up windows, because it doesn’t rely on there being a spare `<div>`
    element available in the DOM.
  prefs: []
  type: TYPE_NORMAL
- en: Removing Elements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can also remove elements from the DOM, including ones that you didn’t insert
    using JavaScript; it’s even easier than adding an element. It works like this,
    assuming the element to remove is in the object `element`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: This code accesses the element’s `parentNode` object so that it can remove the
    element from that node. Then it calls the `removeChild` method on that parent
    object, passing the object to be removed.
  prefs: []
  type: TYPE_NORMAL
- en: Alternatives to Adding and Removing Elements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Inserting an element is intended for adding totally new objects into a web page.
    But if all you intend to do is hide and reveal objects according to an `onmouseover`
    or other event, don’t forget that there are a couple of CSS properties you can
    use for this purpose, without taking such drastic measures as creating and deleting
    DOM elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, when you want to make an element invisible but leave it in place
    (and with all the elements surrounding it remaining in their positions), you can
    simply set the object’s `visibility` property to `hidden`, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'And to redisplay the object, you can use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also collapse an element down to occupy zero width and height (with
    all the objects around it filling in the freed-up space), like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'To then restore the element to its original dimensions, you would use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'And, of course, there’s always the `innerHTML` property, with which you can
    change the HTML applied to an element, like this, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Or, to use the `O` function I outlined earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Or you can make an element seem to disappear, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Don’t forget the other useful CSS properties you can access from JavaScript,
    such as `opacity` for setting the visibility of an object to somewhere between
    visible and invisible, or `width` and `height` for resizing an object. And, of
    course, using the `position` property with values of `absolute`, `static`, `fixed`,
    `sticky`, or `relative`, you can even locate an object anywhere in (or outside)
    the browser window that you like.
  prefs: []
  type: TYPE_NORMAL
- en: Using Interrupts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JavaScript provides access to *interrupts*, a method by which you can ask the
    browser to call your code after a set period of time, or even to keep calling
    it at specified intervals. This gives you a means of handling background tasks
    such as asynchronous communications, or even things like animating web elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two types of interrupt: `setTimeout` and `setInterval`, which have
    accompanying `clearTimeout` and `clearInterval` functions for turning them off
    again.'
  prefs: []
  type: TYPE_NORMAL
- en: Using setTimeout
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you call `setTimeout`, you pass it some JavaScript code or the name of
    a function, and a value in milliseconds representing how long to wait before the
    code should be executed, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Your `dothis` function might look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In case you’re wondering, you cannot simply specify `alert()` (with empty parentheses)
    as a function to be called by `setTimeout`, because the function would be executed
    immediately. Only when you provide a function name without parentheses (for example,
    `alert`) can you safely pass the function name so that its code will be executed
    only when the timeout occurs.
  prefs: []
  type: TYPE_NORMAL
- en: Passing a string
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When you need to provide an argument to a function, you can also pass a string
    value to the `setTimeout` function, which will not be executed until the correct
    time. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'In fact, you can provide as many lines of JavaScript code as you like if you
    place a semicolon after each statement, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Repeating timeouts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'One technique some programmers use to provide repeating interrupts is to call
    the `setTimeout` function from the code called by it, as in the following example,
    which will initiate a never-ending loop of alert windows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Now the alert will pop up every five seconds. I don’t recommend you run this
    actual example (even as a test), or you’ll probably have to close your browser
    to stop it!
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Another option is to use the `setInterval` function, as described shortly. However,
    chaining `setTimeout` has the advantage of only issuing the `setTimeout` function
    call after all the preceding code has finished executing, while `setInterval`
    will interrupt code to run, which sometimes may not give the result you intend.
  prefs: []
  type: TYPE_NORMAL
- en: Canceling a Timeout
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once a timeout has been set up, you can cancel it if you previously saved the
    value returned from the initial call to `setTimeout`, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Armed with the value in `handle`  (a term used to imply you have a *handle* with
    which to control the function), you can now cancel the interrupt at any point
    up until its due time, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: When you do this, the interrupt is completely forgotten, and the code assigned
    to it will not get executed.
  prefs: []
  type: TYPE_NORMAL
- en: Using setInterval
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An easier way to set up regular interrupts is to use the `setInterval` function.
    It works in the same way as `setTimeout`, except that having popped up after the
    interval you specify in milliseconds, it will do so again after that interval
    again passes, and so on forever, unless you cancel it.
  prefs: []
  type: TYPE_NORMAL
- en: '[Example 21-9](#clock_created_using_interrupts) uses this function to display
    a simple clock in the browser, as shown in [Figure 21-4](#maintaining_the_correct_time_with_interr).'
  prefs: []
  type: TYPE_NORMAL
- en: Example 21-9\. A clock created using interrupts
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '![Maintaining the correct time with interrupts](Images/pmj6_2104.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 21-4\. Maintaining the correct time with interrupts
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Every time `ShowTime` is called, it sets the object `date` to the current date
    and time with a call to `Date`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Then the `innerHTML` property of the object passed to `showtime` (namely, `object`)
    is set to the current time in hours, minutes, and seconds, as determined by a
    call to the function `toTimeString`. This returns a string such as `09:57:17 UTC+0530`,
    which is then truncated to just the first eight characters with a call to the
    `substr` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Using the function
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To use this function, you first have to create an object whose `innerHTML`
    property will be used for displaying the time, like with this HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'The value 00:00:00 is simply there to show where and how the time will display.
    It is not necessary as it will be replaced anyway. Then, from a `<script>` section
    of code, call the `setInterval` function like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'The script then passes a string to `setInterval` containing the following statement,
    which is set to execute once a second (every 1,000 milliseconds):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: In the rare situation where somebody has disabled JavaScript (which people sometimes
    do for security reasons), your JavaScript will not run, and the user will just
    see the original `00:00:00`.
  prefs: []
  type: TYPE_NORMAL
- en: Canceling an interval
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To stop a repeating interval, when you first set up the interval with a call
    to the function `setInterval`, you must make a note of the interval’s handle,
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you can stop the clock at any time by issuing the following call:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'You can even set up a timer to stop the clock after a certain amount of time,
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: This statement will issue an interrupt in 10 seconds that will clear the repeating
    intervals.
  prefs: []
  type: TYPE_NORMAL
- en: Using Interrupts for Animation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By combining a few CSS properties with a repeating interrupt, you can produce
    all manner of animations and effects.
  prefs: []
  type: TYPE_NORMAL
- en: For example, the code in [Example 21-10](#simple_animation) moves a square shape
    across the top of the browser window, all the time ballooning in size, as shown
    in [Figure 21-5](#this_object_slides_in_from_the_left_whil); when `LEFT` is reset
    to `0`, the animation restarts.
  prefs: []
  type: TYPE_NORMAL
- en: Example 21-10\. A simple animation
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '![This object slides in from the left while changing size](Images/pmj6_2105.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 21-5\. This object slides in from the left while changing size
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In the `<head>` section of the document, the `box` object is set to a `background`
    color of `orange` with a `border` value of `1px solid red`, and its `position`
    property is set to `absolute` so that the animation code that follows can position
    it in the precise ways you want.
  prefs: []
  type: TYPE_NORMAL
- en: Then, in the `animate` function, the global variables `SIZE` and `LEFT` are
    continuously updated and applied to the `width`, `height`, and `left` style attributes
    of the `box` object (with `'px'` added after each to specify that the values are
    in pixels), thus animating it at a frequency of once every 30 milliseconds. This
    results in an animation rate of 33.33 frames per second (1,000/30 milliseconds).
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What are the `O`, `S`, and `C` functions provided to do?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name two ways to modify a CSS attribute of an object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which properties provide the width and height available in a browser window?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can you make something happen when the mouse passes both over and out of
    an object?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which JavaScript function creates new elements, and which appends them to the
    DOM?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can you make an element (a) invisible and (b) collapse to zero dimensions?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which function creates a single event at a future time?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which function sets up repeating events at set intervals?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can you release an element from its location in a web page to enable it
    to be moved around?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What delay between events should you set (in milliseconds) to achieve an animation
    rate of 50 frames per second?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: See [“Chapter 21 Answers”](app01_split_020.xhtml#chapter_21_answers) in the
    [Appendix A](app01_split_000.xhtml#solutions_to_the_chapter_questions) for the
    answers to these questions.
  prefs: []
  type: TYPE_NORMAL
