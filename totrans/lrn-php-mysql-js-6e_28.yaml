- en: Chapter 25\. Introduction to HTML5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: HTML5 represents a substantial leap forward in web design, layout, and usability.
    It provides a simple way to manipulate graphics in a web browser without resorting
    to plug-ins such as Flash, offers methods to insert audio and video into web pages
    (again without plug-ins), and irons out several annoying inconsistencies that
    crept into HTML during its evolution.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, HTML5 includes numerous other enhancements, such as geolocation
    handling, web workers to manage background tasks, improved form handling, and
    access to bundles of local storage (far in excess of the limited capabilities
    of cookies).
  prefs: []
  type: TYPE_NORMAL
- en: What’s interesting about HTML5, though, is that it has been an ongoing evolution,
    in which browsers have adopted different features at different times. Fortunately,
    all the biggest and most popular HTML5 additions are now supported by all major
    browsers (those with more than 1% or so of the market, such as Chrome, Internet
    Explorer, Edge, Firefox, Safari, Opera, and the Android and iOS browsers).
  prefs: []
  type: TYPE_NORMAL
- en: The Canvas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Originally introduced by Apple for the WebKit rendering engine (which had itself
    originated in the KDE HTML layout engine) for its Safari browser, the *canvas*
    element enables us to draw graphics in a web page without having to rely on a
    plug-in such as Java or Flash. After being standardized, the canvas was adopted
    by all other browsers and is now a mainstay of modern web development.
  prefs: []
  type: TYPE_NORMAL
- en: Like other HTML elements, a canvas is simply an element within a web page with
    defined dimensions and within which you can use JavaScript to insert content—in
    this case, to draw graphics. You create a canvas by using the `<canvas>` tag,
    to which you must assign an ID so that JavaScript will know which canvas it is
    accessing (as you can have more than one canvas on a page).
  prefs: []
  type: TYPE_NORMAL
- en: In [Example 25-1](#using_the_html5_canvas_element), I’ve created a canvas element,
    with the ID `mycanvas`, that contains some text that is displayed only in browsers
    that don’t support the canvas. Beneath this there is a section of JavaScript that
    draws the Japanese flag on the canvas (as shown in [Figure 25-1](#drawing_the_japanese_flag_using_an_html5)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 25-1\. Using the HTML5 canvas element
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: At this point, it’s not necessary to detail exactly what is going on—I explain
    that in [Chapter 26](ch26.xhtml#html5_canvas)—but you should already see that
    using the canvas is not hard, although it does require learning a few new JavaScript
    functions. Note that this example draws on the *OSC.js* set of functions from
    [Chapter 21](ch21.xhtml#accessing_css_from_javascript) to help keep the code neat
    and compact.
  prefs: []
  type: TYPE_NORMAL
- en: '![Drawing the Japanese flag using an HTML5 canvas](Images/pmj6_2501.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 25-1\. Drawing the Japanese flag using an HTML5 canvas
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Geolocation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using *geolocation*, your browser can return information to a web server about
    your location. This information can come from a GPS chip in the computer or mobile
    device you’re using, from your IP address, or from analysis of nearby WiFi hotspots.
    For security purposes, the user is always in control and can refuse to provide
    this information on a one-off basis or can enable settings to either permanently
    block or allow access to this data from one or all websites.
  prefs: []
  type: TYPE_NORMAL
- en: There are numerous uses for this technology, including giving you turn-by-turn
    navigation; providing local maps; notifying you of nearby restaurants, WiFi hotspots,
    or other places; letting you know which friends are near you; directing you to
    the nearest gas station; and more.
  prefs: []
  type: TYPE_NORMAL
- en: '[Example 25-2](#displaying_the_map_at_a_userapostrophes) will display a Google
    map of the user’s location, as long as the browser supports geolocation and the
    user grants access to location data (as shown in [Figure 25-2](#new-geoloc)).
    Otherwise, it will display an error.'
  prefs: []
  type: TYPE_NORMAL
- en: Example 25-2\. Displaying a map of the user’s location
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Again, here is not the place to describe how this all works; I will detail that
    in [Chapter 28](ch28.xhtml#other_html5_features). For now, though, this example
    serves to show you how easy managing geolocation can be.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/pmj6_2502.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 25-2\. The user’s location has been used to display a map
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Audio and Video
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another great addition to HTML5 is support for in-browser audio and video. While
    playing these types of media can be a little complicated due to the variety of
    encoding types and licenses, the `<audio>` and `<video>` elements provide the
    flexibility you need to display the types of media you have available.
  prefs: []
  type: TYPE_NORMAL
- en: In [Example 25-3](#playing_a_video_with_html5), the same video file has been
    encoded in different formats to ensure that all major browsers are accounted for.
    Browsers will simply select the first type they recognize and play it, as shown
    in [Figure 25-3](#displaying_video_using_html5).
  prefs: []
  type: TYPE_NORMAL
- en: Example 25-3\. Playing a video with HTML5
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](Images/pmj6_2503.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 25-3\. Displaying video using HTML5
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Inserting audio into a web page is just as easy, as you will discover in [Chapter 27](ch27.xhtml#html5_audio_and_video).
  prefs: []
  type: TYPE_NORMAL
- en: Forms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you already saw in [Chapter 12](ch12.xhtml#form_handling), HTML5 forms are
    in the process of being enhanced, but support across all browsers remains patchy.
    What you *can* safely use today has been detailed in [Chapter 12](ch12.xhtml#form_handling).
  prefs: []
  type: TYPE_NORMAL
- en: Local Storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With local storage, the amount and complexity of data you can save on a local
    device is substantially increased from the meager space provided by cookies. This
    opens up the possibility of using web apps to work on documents offline and then
    syncing them with the web server only when an internet connection is available.
    It also raises the prospect of storing small databases locally for access with
    WebSQL, perhaps for keeping a copy of your music collection’s details or all your
    personal statistics as part of a diet or weight-loss plan, for example. In [Chapter 28](ch28.xhtml#other_html5_features),
    I show you how to make the most of this new facility in your web projects.
  prefs: []
  type: TYPE_NORMAL
- en: Web Workers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It has been possible to run interrupt-driven applications in the background
    using JavaScript for many years, but only through a clumsy and inefficient process.
    It makes much more sense to let the underlying browser technology run background
    tasks on your behalf, which it can do far more quickly than you can by continuously
    interrupting the browser to check how things are going.
  prefs: []
  type: TYPE_NORMAL
- en: Instead, with *web workers*, you set everything up and pass your code to the
    web browser, which then runs it. When anything significant occurs, your code simply
    has to notify the browser, which then reports back to your main code. In the meantime,
    your web page can be doing nothing or a number of other tasks and can forget about
    the background task until it makes itself known.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 28](ch28.xhtml#other_html5_features), I demonstrate how you can
    use web workers to create a simple clock and to calculate prime numbers.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What HTML5 element enables drawing of graphics in web pages?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What programming language is required to access many of the advanced HTML5 features?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which HTML5 tags would you use to incorporate audio and video in a web page?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What feature in HTML5 offers greater capability than cookies?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which HTML5 technology supports running background JavaScript tasks?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: See [“Chapter 25 Answers”](app01_split_024.xhtml#chapter_25_answers) in the
    [Appendix A](app01_split_000.xhtml#solutions_to_the_chapter_questions) for the
    answers to these questions.
  prefs: []
  type: TYPE_NORMAL
