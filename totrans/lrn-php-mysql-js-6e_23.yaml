- en: Chapter 20\. Advanced CSS with CSS3
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 20 章\. 使用 CSS3 实现高级 CSS
- en: The first implementation of CSS was drawn up in 1996 and released in 1999; it
    has been supported by all browser releases since 2001\. The standard for this
    version (CSS1) was revised in 2008\. In 1998, developers began drawing up the
    second specification (CSS2); its standard was completed in 2007 and revised in
    2009.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: CSS 的第一个实现是在 1996 年起草，并于 1999 年发布；自 2001 年以来，所有浏览器版本都支持它。这个版本的标准（CSS1）在 2008
    年进行了修订。1998 年，开发人员开始起草第二个规范（CSS2）；其标准在 2007 年完成，并在 2009 年进行了修订。
- en: Development for the CSS3 specification commenced in 2001, with some features
    being proposed in 2009 and the latest recommendations still being made as recently
    as 2020.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: CSS3 规范的开发始于 2001 年，一些功能于 2009 年提出，最新的推荐截至 2020 年仍在进行中。
- en: A CSS4 is already being proposed by the CSS working group, although this is
    not a major leap forward. Rather, it’s simply a development of one part of CSS—the
    selectors—and its contents are beyond the scope of this book, given that recommendations
    are still being made in 2021 as I write. The curious among you may wish to visit [resources
    on drafts.csswg.org](https://tinyurl.com/l4selectors).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: CSS4 已由 CSS 工作组提出，尽管这并非一个重大进步。相反，它只是 CSS 的一部分——选择器的发展，其内容超出了本书的范围，因为到我写这篇文章时，2021
    年仍在进行推荐。如果你感兴趣，可以访问 [drafts.csswg.org 上的资源](https://tinyurl.com/l4selectors)。
- en: Thankfully, though, the CSS working group publishes regular snapshots of the
    CSS modules that it considers stable. So far, four such best-current-practices
    documents have been published as Notes, with the most recent being [in 2020](https://w3.org/TR/css-2020).
    This is the best place to gauge the current state of play in the world of CSS.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，CSS 工作组定期发布它认为稳定的 CSS 模块的快照。迄今为止，已发布了四份最佳实践文件，最近的一份是[2020 年](https://w3.org/TR/css-2020)。这是了解
    CSS 当前状况的最佳途径。
- en: In this chapter, I’ll take you through the most important CSS3 features that
    have been adopted by the major browsers, many of which provide functionality that
    hitherto could be attained only with JavaScript.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我将带你了解主要浏览器已采纳的最重要的 CSS3 特性，其中许多提供了此前只能通过 JavaScript 实现的功能。
- en: I recommend using CSS3 to implement dynamic features where you can, instead
    of JavaScript. The features provided by CSS make document attributes part of the
    document itself, instead of being tacked on through JavaScript. Making them part
    of the document is a cleaner design.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议尽可能使用 CSS3 实现动态特性，而不是 JavaScript。CSS 提供的特性使文档属性成为文档本身的一部分，而不是通过 JavaScript
    添加的附加部分。这样设计更加清晰。
- en: Note
  id: totrans-7
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: It has to be said that there’s an awful lot to CSS, and browsers implement the
    various features differently (if at all). Therefore, I recommend that whenever
    you wish to ensure that the CSS you are creating will work in all browsers, you
    first take a look at the [Can I use... website](http://caniuse.com). It maintains
    a record of what features are available in which browsers, so it will always be
    more up to date than this book, which sees a new edition only every couple of
    years or so—and CSS can move a long way in that time.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 必须指出的是，CSS 包含非常多的内容，各浏览器对各种功能的实现方式也有所不同（甚至可能完全不同）。因此，我建议在您希望确保所创建的 CSS 在所有浏览器中正常工作时，首先查看[Can
    I use... 网站](http://caniuse.com)。该网站记录了各种功能在各浏览器中的支持情况，因此它始终比这本书更加及时更新，而 CSS 在这段时间内也可能有很大变化。
- en: Attribute Selectors
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 属性选择器
- en: In the previous chapter, I detailed the various CSS attribute selectors, which
    I will now quickly recap. Selectors are used in CSS to match HTML elements, and
    there are 10 different types, as listed in [Table 20-1](#css_selectors_and_pseudo-classes_and_-el).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一章中，我详细介绍了各种 CSS 属性选择器，现在我将快速回顾一下。选择器在 CSS 中用于匹配 HTML 元素，共有 10 种不同类型，如[表 20-1](#css_selectors_and_pseudo-classes_and_-el)所示。
- en: Table 20-1\. CSS selectors, pseudoclasses, and pseudoelements
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 表 20-1\. CSS 选择器、伪类和伪元素
- en: '| Selector type | Example |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| 选择器类型 | 示例 |'
- en: '| --- | --- |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Universal selector | `* { color:#555; }` |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| 通用选择器 | `* { color:#555; }` |'
- en: '| Type selectors | `b { color:red; }` |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| 类型选择器 | `.classname { color:blue; }` |'
- en: '| Class selectors | `.classname { color:blue; }` |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| 类选择器 | `.classname { color:blue; }` |'
- en: '| ID selectors | `#id` `{ background:cyan; }` |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| ID 选择器 | `#id` `{ background:cyan; }` |'
- en: '| Descendant selectors | `span em { color:green; }` |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| 后代选择器 | `span em { color:green; }` |'
- en: '| Child selectors | `div > em { background:lime; }` |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| 子选择器 | `div > em { background:lime; }` |'
- en: '| Adjacent sibling selectors | `i + b { color:gray; }` |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| 相邻兄弟选择器 | `i + b { color:gray; }` |'
- en: '| Attribute selectors | `a[href=''info.htm''] { color:red; }` |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| 属性选择器 | `a[href=''info.htm''] { color:red; }` |'
- en: '| Pseudoclasses | `a:hover { font-weight:bold; }` |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| 伪类 | `a:hover { font-weight:bold; }` |'
- en: '| Pseudoelements | `P::first-letter { font-size:300%; }` |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| 伪元素 | `P::first-letter { font-size:300%; }` |'
- en: The CSS3 designers decided that most of these selectors worked just fine the
    way they were, but three enhancements have been made so that you can more easily
    match elements based on the contents of their attributes. The following sections
    examine these.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: CSS3 设计师们决定这些选择器中的大多数工作方式良好，但进行了三项增强，使您可以更轻松地基于属性内容匹配元素。以下各节详细讨论这些增强功能。
- en: Matching Parts of Strings
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 匹配字符串的部分
- en: 'In CSS2 you can use a selector such as `a[href=''info.htm'']` to match the
    string `info.htm` when found in an `href` attribute, but there’s no way to match
    only a *portion* of a string. CSS3 comes to the rescue with three new operators:
    `^`, `$`, and `*`. If one directly precedes the `=` symbol, you can match the
    start, end, or any part of a string, respectively.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在 CSS2 中，您可以使用诸如 `a[href='info.htm']` 的选择器来匹配 `href` 属性中出现的字符串 `info.htm`，但无法仅匹配字符串的
    *部分*。CSS3 提供了三个新运算符：`^`、`$` 和 `*`。如果其中一个直接位于 `=` 符号之前，则可以分别匹配字符串的开头、结尾或任何部分。
- en: The ^= operator
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '运算符 `^=` '
- en: 'This operator matches at the start of a string. So, for example, the following
    will match any `href` attribute whose value begins with the string `http://website`:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 此运算符匹配字符串的开头。例如，以下内容将匹配任何`href`属性其值以字符串`http://website`开头的情况：
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Therefore, the following element will match:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，以下元素将匹配：
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'But this will not:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 但这并不会：
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The $= operator
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运算符 `$=`
- en: 'To match only at the end of a string, you can use a selector such as the following,
    which will match any `img` tag whose `src` attribute ends with `.png`:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要仅匹配字符串的结尾，可以使用类似以下选择器，将匹配任何`img`标签其`src`属性以`.png`结尾的情况：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'For example, the following will match:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下内容将匹配：
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'But this will not:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 但这并不会：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The *= operator
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运算符 `*=`
- en: 'To match any substring anywhere in the attribute, you can use a selector such
    as the following, which finds any links on a page that have the string `google`
    anywhere within them:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 要匹配属性中任何位置的任何子字符串，可以使用类似以下选择器，它找到页面上任何链接并在其中任何位置包含字符串`google`的情况：
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: For example, the HTML segment `<a href='http://google.com'>` will match, while
    the segment `<a href='http://gmail.com'>` will not.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，HTML片段 `<a href='http://google.com'>` 将会匹配，而片段 `<a href='http://gmail.com'>`
    则不会。
- en: The box-sizing Property
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 属性 `box-sizing`
- en: The W3C box model specifies that the width and height of an object should refer
    only to the dimensions of an element’s content, ignoring any padding or border.
    But some web designers have expressed a desire to specify dimensions that refer
    to an entire element, including any padding and border.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: W3C 盒模型指定对象的宽度和高度应仅引用元素内容的尺寸，而忽略任何填充或边框。但一些网页设计师希望指定引用整个元素（包括任何填充和边框）的尺寸。
- en: 'To provide this feature, CSS3 lets you choose the box model you wish to use
    with the `box-sizing` property. For example, to use the total width and height
    of an object including padding and borders, use this declaration:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提供此功能，CSS3 允许您使用 `box-sizing` 属性选择希望使用的盒模型。例如，要使用包括填充和边框在内的对象总宽度和高度，请使用此声明：
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Or, to have an object’s width and height refer only to its content, use this
    declaration (the default):'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，要使对象的宽度和高度仅引用其内容，请使用此声明（默认情况）：
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: CSS3 Backgrounds
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSS3 背景
- en: 'CSS3 provides two new properties: `background-clip` and `background-origin`.
    Between them, you can specify where a background should start within an element,
    and how to clip the background so that it doesn’t appear in parts of the box model
    where you don’t want it to.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: CSS3 提供了两个新属性：`background-clip` 和 `background-origin`。它们之间，您可以指定背景应从元素内的何处开始，并如何剪切背景，以使其不显示在不需要的盒模型部分。
- en: 'To accomplish this, both properties support the following values:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现这一点，这两个属性都支持以下值：
- en: <dfn class="keep-together">`border-box`</dfn>
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`<dfn class="keep-together">`border-box`</dfn>`'
- en: Refers to the outer edge of the border
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 指的是边框的外边缘
- en: <dfn class="keep-together">`padding-box`</dfn>
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`<dfn class="keep-together">`padding-box`</dfn>`'
- en: Refers to the outer edge of the padding area
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 指的是填充区域的外边缘
- en: <dfn class="keep-together">`content-box`</dfn>
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`<dfn class="keep-together">`content-box`</dfn>`'
- en: Refers to the outer edge of the content area
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 指的是内容区域的外边缘
- en: The background-clip Property
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 属性 `background-clip`
- en: 'The `background-clip` property specifies whether the background should be ignored
    (clipped) if it appears within either the border or padding area of an element.
    For example, the following declaration states that the background may display
    in all parts of an element, all the way to the outer edge of the border:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`background-clip`属性指定了如果背景出现在元素的边框或填充区域内，则应该被忽略（剪切）。例如，以下声明指定背景可以显示在元素的所有部分，直到边框的外缘：'
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'To keep the background from appearing within the border area of an element,
    you can restrict it to only the section of an element inside the outer edge of
    its padding area, like this:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 要防止背景出现在元素的边框区域内，可以将其限制为仅出现在其填充区域外缘内的元素部分，如下所示：
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Or to restrict the background to display only within the content area of an
    element, use this declaration:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 或者要限制背景仅显示在元素的内容区域内，请使用以下声明：
- en: '[PRE11]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[Figure 20-1](#different_ways_of_combining_css3_backgro) shows three rows of
    elements displayed in the Safari web browser, in which the first row uses `border-box`
    for the `background-clip` property, the second uses `padding-box`, and the third
    uses `content-box`.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 20-1](#different_ways_of_combining_css3_backgro)显示了在Safari网页浏览器中显示的三行元素，第一行使用了`background-clip`属性的`border-box`值，第二行使用了`padding-box`，第三行使用了`content-box`。'
- en: '![Different ways of combining CSS3 background properties](Images/pmj6_2001.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![CSS3背景属性的不同组合方式](Images/pmj6_2001.png)'
- en: Figure 20-1\. Different ways of combining CSS3 background properties
  id: totrans-69
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 20-1\. CSS3背景属性的不同组合方式
- en: In the first row, the inner box (an image file that has been loaded into the
    top left of the element, with repeating disabled) is allowed to display anywhere
    in the element. You can also clearly see it displayed in the border area of the
    first box because the border has been set to dotted.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一行，内部框（已加载到元素左上角的图像文件，不重复显示）可以在元素的任何位置显示。您还可以清楚地看到它显示在第一个框的边框区域，因为边框已设置为点状。
- en: In the second row, neither the background image nor the background shading displays
    in the border area, because they have been clipped to the padding area with a
    `background-clip` property value of `padding-box`.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二行，背景图像和背景阴影均不显示在边框区域，因为它们已被剪切到了具有`background-clip`属性值为`padding-box`的填充区域内。
- en: Then, in the third row, both the background shading and the image have been
    clipped to display only within the inner content area of each element (shown inside
    a light-colored, dotted box), using a `background-clip` property of `content-box`.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在第三行，背景阴影和图像均已被剪切，仅在每个元素的内部内容区域内显示（显示在浅色虚线框内），使用了`background-clip`属性值为`content-box`。
- en: The background-origin Property
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: background-origin属性
- en: 'With the `background-origin` property, you can control where a background image
    will be located by specifying where the top left of the image should start. For
    example, the following declaration states that the background image’s origin should
    be the top-left corner of the outer edge of the border:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`background-origin`属性，您可以通过指定图像的左上角应从哪里开始来控制背景图像的位置。例如，以下声明指定背景图像的原点应位于边框外缘的左上角：
- en: '[PRE12]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'To set the origin of an image to the top-left outer corner of the padding area,
    use this declaration:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 要将图像的原点设置为填充区域的左上外角，请使用以下声明：
- en: '[PRE13]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Or to set the origin of an image to the top-left corner of an element’s inner
    content section, use this declaration:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 要将图像的原点设置为元素内部内容区域的左上角，请使用以下声明：
- en: '[PRE14]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Looking again at [Figure 20-1](#different_ways_of_combining_css3_backgro), you
    can see in each row the first box uses a `background-origin` property of `border-box`,
    the second uses `padding-box`, and the third uses `content-box`. Consequently,
    in each row the smaller inner box displays at the top left of the border in the
    first box, the top left of the padding in the second, and the top left of the
    content in the third box.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 再次查看[图 20-1](#different_ways_of_combining_css3_backgro)，您可以看到在每一行中，第一个框使用了`background-origin`属性的`border-box`值，第二个框使用了`padding-box`，第三个框使用了`content-box`。因此，在每一行中，较小的内部框显示在第一个框的边框的左上角，第二个框的填充的左上角，以及第三个框的内容的左上角。
- en: Note
  id: totrans-81
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: The only differences to note between the rows, with regard to the origins of
    the inner box in [Figure 20-1](#different_ways_of_combining_css3_backgro), are
    that in rows 2 and 3 the inner box is clipped to the padding and content areas,
    respectively; therefore, outside these areas no portion of the box is displayed.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，关于内部框的起源，行之间唯一的差异在于，在第 2 行和第 3 行中，内部框被裁剪到填充和内容区域，因此在这些区域之外，框的任何部分都不会显示。
- en: The background-size Property
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 属性 `background-size`
- en: In the same way that you can specify the width and height of an image when used
    in the `<img>` tag, you can now also do so for background images in the latest
    versions of all browsers.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在 `<img>` 标签中使用图像时可以指定宽度和高度一样，您现在也可以在所有浏览器的最新版本中为背景图像指定宽度和/或高度。
- en: 'You apply the property as follows (where *`ww`* is the width and *`hh`* is
    the height):'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以如下应用此属性（其中 *`ww`* 是宽度，*`hh`* 是高度）：
- en: '[PRE15]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: If you prefer, you can use only one argument, and then both dimensions will
    be set to that value. Also, if you apply this property to a block-level element
    such as a `<div>` (rather than one that is inline, such as a `<span>`), you can
    specify the width and/or height as a percentage, instead of a fixed value.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您愿意，您可以只使用一个参数，然后两个维度都将设置为该值。此外，如果将此属性应用于块级元素（如 `<div>`）（而不是内联元素，如 `<span>`），则可以将宽度和/或高度指定为百分比，而不是固定值。
- en: Using the auto Value
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 `auto` 值
- en: 'If you wish to scale only one dimension of a background image, and then have
    the other one scale automatically to retain the same proportions, you can use
    the value `auto` for the other dimension, like this:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望仅缩放背景图像的一个维度，并使另一个维度自动缩放以保持相同的比例，您可以像这样使用值 `auto`：
- en: '[PRE16]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This sets the width to 100 pixels, and the height to a value proportionate to
    the increase or decrease in width.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这将宽度设置为 100 像素，并将高度设置为与宽度增加或减少的比例值。
- en: Note
  id: totrans-92
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Different browsers may require different versions of the various background
    property names, so please refer to the [Can I use... website](http://caniuse.com)
    when using them to ensure you are applying all the versions required for the browsers
    you are targeting.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的浏览器可能需要不同版本的各种背景属性名称，请在使用它们时参考[Can I use... website](http://caniuse.com)，以确保您应用于目标浏览器所需的所有版本。
- en: Multiple Backgrounds
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多重背景
- en: With CSS3 you can attach multiple backgrounds to an element, each of which can
    use the previously discussed CSS3 background properties. [Figure 20-2](#background_created_with_multiple_image)
    shows an example of this; eight different images have been assigned to the background
    to create the four corners and four edges of the certificate border.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 CSS3 您可以将多个背景附加到一个元素，每个背景都可以使用先前讨论的 CSS3 背景属性。[图 20-2](#background_created_with_multiple_image)
    显示了一个示例；八个不同的图像被分配到背景中，以创建证书边框的四个角和四条边。
- en: To display multiple background images in a single CSS declaration, separate
    them with commas. [Example 20-1](Images/#using_multiple_images_in_a_background)
    shows the HTML and CSS used to create the background in [Figure 20-2](#background_created_with_multiple_image).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 要在单个 CSS 声明中显示多个背景图像，请用逗号分隔它们。[示例 20-1](Images/#using_multiple_images_in_a_background)
    展示了用于创建 [图 20-2](#background_created_with_multiple_image) 背景的 HTML 和 CSS。
- en: Example 20-1\. Using multiple images in a background
  id: totrans-97
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 20-1\. 在背景中使用多个图像
- en: '[PRE17]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '![](Images/pmj6_2002.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/pmj6_2002.png)'
- en: Figure 20-2\. A background created with multiple images
  id: totrans-100
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 20-2\. 使用多个图像创建的背景
- en: Looking at the CSS section, you see that the first four lines of the `background`
    declaration place the corner images into the four corners of the element, and
    the final four place the edge images, which are handled last because the order
    of priority for background images goes from top to bottom. In other words, where
    they overlap, additional background images will appear behind already placed images.
    If the GIFs were in the reverse order, the repeating edge images would display
    on top of the corners, which would be incorrect.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 CSS 部分，您会看到 `background` 声明的前四行将角落图像放置在元素的四个角上，最后四行则放置边缘图像，因为背景图像的优先顺序从顶部到底部。换句话说，在它们重叠的地方，额外的背景图像将出现在已放置图像的后面。如果
    GIF 图像的顺序相反，重复的边缘图像将显示在角落的顶部，这将是不正确的。
- en: Note
  id: totrans-102
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Using this CSS, you can resize the containing element to any dimensions, and
    the border will always correctly resize to fit, which is much easier than using
    tables or multiple elements for the same effect.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此CSS，您可以将包含元素调整为任何尺寸，边框将始终正确调整大小以适应，这比使用表格或多个元素实现相同效果要简单得多。
- en: CSS3 Borders
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSS3边框
- en: CSS3 also brings a lot more flexibility to the way borders can be presented,
    by allowing you to independently change the colors of all four border edges, to
    display images for the edges and corners, to provide a radius value for applying
    rounded corners to borders, and to place box shadows underneath elements.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: CSS3还为边框的呈现方式带来了更大的灵活性，允许您独立更改所有四个边框边缘的颜色，显示边缘和角落的图像，为应用圆角边框提供半径值，并将盒子阴影放置在元素下方。
- en: The border-color Property
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**border-color属性**'
- en: 'There are two ways you can apply colors to a border. First, you can pass a
    single color to the property, as follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种方法可以将颜色应用到边框上。首先，您可以将单一颜色传递给属性，如下所示：
- en: '[PRE18]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This property sets all the borders of an element to mid-gray. You can also
    set border colors individually, like this (which sets the border colors to various
    shades of gray):'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 此属性将元素的所有边框设置为中灰色。您还可以像这样单独设置边框颜色，这会将边框颜色设置为各种灰色色调：
- en: '[PRE19]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Or you can set all the colors individually with a single declaration, as follows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 或者您可以使用单个声明来分别设置所有颜色，如下所示：
- en: '[PRE20]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This declaration sets the top border color to `#f00`, the right one to `#0f0`,
    the bottom one to `#880`, and the left one to `#00f` (red, green, orange, and
    blue, respectively). You can also use color names for the arguments.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 此声明将顶部边框颜色设置为`#f00`，右侧设置为`#0f0`，底部设置为`#880`，左侧设置为`#00f`（分别为红色、绿色、橙色和蓝色）。您还可以使用颜色名称作为参数。
- en: The border-radius Property
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**border-radius属性**'
- en: Prior to CSS3, talented web developers came up with numerous tweaks and fixes
    in order to achieve rounded borders, generally using `<table>` or `<div>` tags.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在CSS3之前，有才华的Web开发人员为了实现圆角边框而进行了许多微调和修复，通常使用`<table>`或`<div>`标签。
- en: But now adding rounded borders to an element is really simple, and it works
    in the latest versions of all major browsers, as shown in [Figure 20-3](#mixing_and_matching_various_border_radiu),
    in which a 10-pixel border is displayed in different ways. [Example 20-2](#border-radius_property-id00106)
    shows the HTML for this.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 但是现在，在元素上添加圆角边框真的很简单，并且在所有主要浏览器的最新版本中均可正常工作，如[图 20-3](#mixing_and_matching_various_border_radiu)所示，显示了以不同方式显示的10像素边框。
    [示例 20-2](#border-radius_property-id00106)显示了此HTML。
- en: Example 20-2\. The border-radius property
  id: totrans-117
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 20-2\. border-radius属性
- en: '[PRE21]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '![Mixing and matching various border radius properties](Images/pmj6_2003.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![混合和匹配各种边界半径属性](Images/pmj6_2003.png)'
- en: Figure 20-3\. Mixing and matching various border radius properties
  id: totrans-120
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 20-3\. 混合和匹配各种边界半径属性
- en: 'So, for example, to create a rounded border with a radius of 20 pixels, you
    could simply use the following declaration:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，例如，要创建半径为20像素的圆角边框，您只需使用以下声明：
- en: '[PRE22]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'You can specify a separate radius for each of the four corners, like this (applied
    in a clockwise direction starting from the top-left corner):'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以为每个角落单独指定半径，如下所示（顺时针方向从左上角开始应用）：
- en: '[PRE23]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'If you prefer, you can also address each corner of an element individually,
    like this:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您愿意，也可以单独处理元素的每个角落，如下所示：
- en: '[PRE24]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'And, when referencing individual corners, you can supply two arguments to choose
    a different vertical and horizontal radius (giving more interesting and subtle
    borders), like this:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 而且，当引用单独的角落时，您可以提供两个参数来选择不同的垂直和水平半径（产生更有趣和微妙的边框），如下所示：
- en: '[PRE25]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The first argument is the horizontal, and the second is the vertical radius.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数是水平半径，第二个是垂直半径。
- en: Box Shadows
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**盒子阴影**'
- en: 'To apply a box shadow, specify a horizontal and vertical offset from the object,
    the amount of blurring to add to the shadow, and the color to use, like this:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 要应用盒子阴影，请指定从对象到水平和垂直偏移量，要添加的阴影模糊量以及要使用的颜色，如下所示：
- en: '[PRE26]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The two instances of `15px` specify the vertical and horizontal offset from
    the element, and these values can be negative, zero, or positive. The `10px` specifies
    the amount of blurring, with smaller values resulting in less blurring, and `#888`
    is the color for the shadow, which can be any valid color value. The result of
    this declaration can be seen in [Figure 20-4](#box_shadow_displayed_under_an_element).
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`15px`的两个实例指定了元素从垂直和水平方向的偏移量，这些值可以是负数、零或正数。`10px`指定了模糊量，较小的值会导致较少的模糊效果，`#888`是阴影的颜色，可以是任何有效的颜色值。此声明的结果可在图[20-4](#box_shadow_displayed_under_an_element)中看到。'
- en: '![A box shadow displayed under an element](Images/pmj6_2004.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![元素下方显示的盒子阴影](Images/pmj6_2004.png)'
- en: Figure 20-4\. A box shadow displayed under an element
  id: totrans-135
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图20-4\. 元素下方显示的盒子阴影
- en: Element Overflow
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 元素溢出
- en: 'In CSS2, you can indicate what to do when one element is too large to be fully
    contained by its parent by setting the `overflow` property to `hidden`, `visible`,
    `scroll`, or `auto`. But with CSS3, you can now separately apply these values
    in the horizontal or vertical directions, too, as with these example declarations:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在CSS2中，可以通过将`overflow`属性设置为`hidden`、`visible`、`scroll`或`auto`来指示当一个元素过大以至于无法完全包含在其父元素内时该如何处理。但是在CSS3中，您现在还可以将这些值分别应用于水平或垂直方向，就像这些示例声明一样：
- en: '[PRE27]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Multicolumn Layout
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多列布局
- en: One of the features most requested by web developers is multiple columns, and
    this has finally been realized in CSS3. Now, flowing text over multiple columns
    is as easy as specifying the number of columns and then (optionally) choosing
    the spacing between them and the type of dividing line (if any), as shown in [Figure 20-5](#flowing_text_in_multiple_columns)
    (created with [Example 20-3](#using_css_to_create_multiple_columns)).
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 网页开发者最常要求的功能之一是多列布局，在CSS3中这终于实现了。现在，通过指定列数，以及（可选地）选择它们之间的间距和分隔线的类型，即可轻松实现文本在多列中的流动，如图[20-5](#flowing_text_in_multiple_columns)所示（由[示例20-3](#using_css_to_create_multiple_columns)创建）。
- en: '![Flowing text in multiple columns](Images/pmj6_2005.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![多列中的流动文本](Images/pmj6_2005.png)'
- en: Figure 20-5\. Flowing text in multiple columns
  id: totrans-142
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图20-5\. 多列中的流动文本
- en: Example 20-3\. Using CSS to create multiple columns
  id: totrans-143
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例20-3\. 使用CSS创建多列
- en: '[PRE28]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Within the `.columns` class, the first two lines simply tell the browser to
    right-justify the text and to set it to a font size of `16pt`. These declarations
    aren’t needed for multiple columns, but they improve the text display. The remaining
    lines set up the element so that, within it, text will flow over three columns,
    with a gap of `1em` between the columns and with a single-pixel border down the
    middle of each gap.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在`.columns`类中，前两行仅告诉浏览器将文本右对齐，并将其设置为`16pt`的字体大小。这些声明对于多列布局并不需要，但它们改善了文本显示效果。其余的行设置了元素，使得文本可以在其中通过三列流动，列与列之间有`1em`的间隔，并在每个间隔的中间有一个单像素的边框。
- en: Colors and Opacity
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 颜色和不透明度
- en: The ways in which you can define colors have been greatly expanded with CSS3,
    and you can now also use CSS functions to apply colors in the common formats RGB
    (red, green, and blue), RGBA (red, green, blue, and alpha), HSL (hue, saturation,
    and luminance), and HSLA (hue, saturation, luminance, and alpha). The alpha value
    specifies a color’s transparency, which allows underlying elements to show through.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: CSS3极大地扩展了定义颜色的方式，现在您还可以使用CSS函数以常见格式RGB（红、绿、蓝）、RGBA（红、绿、蓝和alpha）、HSL（色调、饱和度和亮度）和HSLA（色调、饱和度、亮度和alpha）应用颜色。alpha值指定了颜色的透明度，使底层元素可以显示出来。
- en: HSL Colors
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HSL颜色
- en: To define a color with the `hsl` function, you must first choose a value for
    the hue between `0` and `359` from a color wheel. Any higher color numbers simply
    wrap around to the beginning again, so the value of `0` is red, and so are the
    values `360` and `720`.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用`hsl`函数定义颜色，必须首先从色轮上选择一个介于`0`和`359`之间的色调值。任何更高的颜色数值都会简单地回到开始，因此值`0`是红色，值`360`和`720`也是红色。
- en: In a color wheel, the primary colors of red, green, and blue are separated by
    120 degrees, so pure red is `0`, green is `120`, and blue is `240`. The numbers
    between these values represent shades comprising different proportions of the
    primary colors on either side.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在色轮中，红色、绿色和蓝色的主要颜色之间相隔120度，因此纯红色是`0`，绿色是`120`，蓝色是`240`。这些值之间的数字代表不同比例的主要颜色混合的不同色调。
- en: Next you need the saturation level, which is a value between 0 and 100%. This
    specifies how washed out or vibrant a color will appear. The saturation values
    commence in the center of the wheel with a mid-gray color (a saturation of 0%)
    and then become more and more vivid as they progress to the outer edge (a saturation
    of 100%).
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您需要饱和度级别，这是一个介于0和100%之间的值。这指定了颜色将显示多么淡或多么鲜艳。饱和度值从轮盘的中心开始，以中灰色（饱和度为0%）开始，然后随着向外边缘进展而变得越来越鲜艳（饱和度为100%）。
- en: All that’s left then is for you to decide how bright you want the color to be,
    by choosing a luminance value of between 0 and 100%. A value of `50%` for the
    luminance gives the fullest, brightest color; decreasing the value (down to a
    minimum of `0%`) darkens the color until it displays as black; and increasing
    the value (up to a maximum of `100%`) lightens the color until it shows as white.
    You can visualize this as if you are mixing levels of either black or white into
    the color.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 剩下的就是您决定颜色亮度的方式，通过选择介于0和100%之间的亮度值。亮度值为`50%`给出最完整、最明亮的颜色；减少该值（最少为`0%`）会使颜色变暗，直到显示为黑色；增加该值（最多为`100%`）会使颜色变亮，直到显示为白色。您可以将此想象为将黑色或白色的级别混合到颜色中。
- en: 'Therefore, for example, to choose a fully saturated yellow color with standard
    percent brightness, you would use a declaration such as this:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，例如，要选择具有标准百分比亮度的完全饱和的黄色，您可以使用以下声明：
- en: '[PRE29]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Or, for a darker blue color, you might use a declaration such as this:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，对于较深的蓝色，您可以使用以下声明：
- en: '[PRE30]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: You can also use this (and all other CSS color functions) with any property
    that expects a color, such as `background-color` and so on.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在期望颜色的任何属性（如`background-color`等）上使用此（和所有其他CSS颜色函数）。
- en: HSLA Colors
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HSLA颜色
- en: To provide even further control over how colors will appear, you can use the
    `hsla` function, supplying it with a fourth (alpha) level for a color, which is
    a floating-point value between `0` and `1`. A value of `0` specifies that the
    color is totally transparent, while `1` means it is fully opaque.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进一步控制颜色的显示方式，您可以使用`hsla`函数，为颜色提供第四个（alpha）级别，这是一个介于`0`和`1`之间的浮点值。值`0`指定颜色完全透明，而`1`表示完全不透明。
- en: 'Here’s how you would choose a fully saturated yellow color with standard brightness
    and 30% opacity:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您如何选择具有标准亮度和30%不透明度的完全饱和的黄色：
- en: '[PRE31]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Or, for a fully saturated but lighter blue color with 82% opacity, you might
    use this declaration:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，对于具有82%不透明度的完全饱和但较浅的蓝色，您可以使用以下声明：
- en: '[PRE32]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: RGB Colors
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: RGB颜色
- en: 'You will probably be more familiar with the RGB system of selecting a color,
    as it’s similar to the *`#nnnnnn`* and *`#nnn`* color formats. For example, to
    apply a yellow color to a property, you can use either of the following declarations
    (the first supporting 16 million colors, and the second supporting 4,000):'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能更熟悉选择颜色的RGB系统，因为它类似于`#nnnnnn`和`#nnn`颜色格式。例如，要将黄色应用于属性，您可以使用以下任一声明（第一个支持1600万种颜色，第二个支持4000种颜色）：
- en: '[PRE33]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'You can also use the CSS `rgb` function to achieve the same result but with
    decimal numbers instead of hexadecimal (where `255` decimal is `ff` hexadecimal):'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用CSS的`rgb`函数来实现相同的结果，但使用十进制数字而不是十六进制（其中255十进制是ff十六进制）：
- en: '[PRE34]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'But even better than that, you don’t even have to think in amounts of up to
    256 anymore, because you can specify percentage values, like this:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 但比这更好的是，您甚至不必再考虑最多256个数量级，因为您可以指定百分比值，就像这样：
- en: '[PRE35]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'In fact, you can now get very close to a desired color by simply thinking about
    its primary colors. For example, green and blue make cyan, so to create a color
    close to cyan, but with more blue in it than green, you could make a good first
    guess at 0% red, 40% green, and 60% blue and try a declaration such as this:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，您现在可以通过简单地考虑其主要颜色来非常接近所需的颜色。例如，绿色和蓝色制成青色，因此，要创建接近青色但含有比绿色更多蓝色的颜色，您可以在0%红色、40%绿色和60%蓝色进行良好的初步猜测，并尝试以下声明：
- en: '[PRE36]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: RGBA Colors
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: RGBA颜色
- en: 'As with the `hsla` function, the `rgba` function supports a fourth alpha argument,
    so you can, for example, apply the previous cyan-like color with an opacity of
    40% by using a declaration such as this:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 与`hsla`函数一样，`rgba`函数支持第四个alpha参数，因此，例如，您可以通过以下声明以40%的不透明度应用先前的类青色：
- en: '[PRE37]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The opacity Property
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不透明度属性
- en: The `opacity` property provides the same alpha control as the `hsla` and `rgba`
    functions but lets you modify an object’s opacity (or transparency, if you prefer)
    separately from its color.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '`opacity`属性提供与`hsla`和`rgba`函数相同的Alpha控制，但允许您单独修改对象的不透明度（或透明度，如果您更喜欢）。'
- en: 'To use it, apply a declaration such as the following to an element (which in
    this example sets the opacity to 25%, or 75% transparent):'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用它，请将如下声明应用到元素上（在此示例中将不透明度设置为25%，即75%透明）：
- en: '[PRE38]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Text Effects
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文本效果
- en: A number of new effects can now be applied to text with the help of CSS3, including
    text shadows, text overlapping, and word wrapping.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 通过CSS3现在可以为文本应用多种新效果，包括文本阴影、文本重叠和单词换行。
- en: The text-shadow Property
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: text-shadow属性
- en: 'The `text-shadow` property is similar to the `box-shadow` property and takes
    the same set of arguments: a horizontal and vertical offset, an amount for the
    blurring, and the color to use. For example, the following declaration offsets
    the shadow by 3 pixels both horizontally and vertically and displays the shadow
    in dark gray, with a blurring of 4 pixels:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '`text-shadow`属性类似于`box-shadow`属性，并接受相同的一组参数：水平和垂直偏移量、模糊量以及要使用的颜色。例如，以下声明使阴影在水平和垂直方向上各偏移3像素，并以深灰色显示阴影，模糊量为4像素：'
- en: '[PRE39]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: The result of this declaration looks like [Figure 20-6](#applying_a_shadow_to_text)
    and works in all recent versions of all major browsers (but not IE 9 or lower).
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 此声明的结果看起来像[图 20-6](#applying_a_shadow_to_text)，并在所有主要浏览器的最新版本中均有效（但不适用于IE 9或更低版本）。
- en: '![Applying a shadow to text](Images/pmj6_2006.png)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![为文本应用阴影](Images/pmj6_2006.png)'
- en: Figure 20-6\. Applying a shadow to text
  id: totrans-187
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 20-6\. 为文本应用阴影
- en: The text-overflow Property
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: text-overflow属性
- en: 'When using any of the CSS overflow properties with a value of `hidden`, you
    can also use the `text-overflow` property to place an ellipsis (three dots) just
    before the cutoff to indicate that some text has been truncated, like this:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 使用任何CSS溢出属性的`hidden`值时，您还可以使用`text-overflow`属性，在截断之前放置一个省略号（三个点），以指示某些文本已被截断，如下所示：
- en: '[PRE40]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Without this property, when the text “To be, or not to be. That is the question.”
    is truncated, the result will look like [Figure 20-7](#text_is_automatically_truncated);
    with the declaration applied, however, the result is like [Figure 20-8](#instead_of_being_cut_offcomma_the_text_t).
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有此属性，则截断文本“To be, or not to be. That is the question.”的结果将如[图 20-7](#text_is_automatically_truncated)所示；但是，应用了该声明后，结果就像[图 20-8](#instead_of_being_cut_offcomma_the_text_t)一样。
- en: '![The text is automatically truncated](Images/pmj6_2007.png)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![文本被自动截断](Images/pmj6_2007.png)'
- en: Figure 20-7\. Text is automatically truncated
  id: totrans-193
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 20-7\. 文本被自动截断
- en: '![Instead of being cut off, the text trails off using an ellipsis](Images/pmj6_2008.png)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![文字未被切断，而是使用省略号逐渐消失](Images/pmj6_2008.png)'
- en: Figure 20-8\. Instead of being cut off, text trails off using an ellipsis
  id: totrans-195
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 20-8\. 文字未被切断，而是使用省略号逐渐消失
- en: 'For this to work, three things are required:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 为使其起作用，需要三件事：
- en: The element should have an `overflow` property that is not visible, such as
    `overflow:hidden`.
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 元素应具有不可见的`overflow`属性，例如`overflow:hidden`。
- en: The element must have the `white-space:nowrap` property set to constrain the
    text.
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 元素必须设置`white-space:nowrap`属性以约束文本。
- en: The width of the element must be less than that of the text to truncate.
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 元素的宽度必须小于文本的宽度以进行截断。
- en: The word-wrap Property
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: word-wrap属性
- en: 'When you have a really long word that is wider than the element containing
    it, it will either overflow or be truncated. But as an alternative to using the
    `text-overflow` property and truncating text, you can use the `word-wrap` property
    with a value of `break-word` to wrap long lines, like this:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 当您有一个非常长的单词宽度大于包含它的元素时，它将溢出或被截断。但作为使用`text-overflow`属性和截断文本的替代方案，您可以使用`word-wrap`属性并将值设置为`break-word`来换行长行，如下所示：
- en: '[PRE41]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: For example, in [Figure 20-9](#word_is_too_wide_for_its_container_a) the word
    *Honorificabilitudinitatibus* is too wide for the containing box (whose right-hand
    edge is shown as a solid vertical line between the letters *t* and *a*), and,
    because no overflow properties have been applied, it has overflowed its bounds.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在[图 20-9](#word_is_too_wide_for_its_container_a)中，单词*Honorificabilitudinitatibus*过于宽度超出了包含框（其右边缘在字母*t*和*a*之间显示为实线垂直线），因为未应用溢出属性，它已超出了其边界。
- en: '![The word is too wide for its container and has overflowed](Images/pmj6_2009.png)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![单词过于宽度超出其容器并溢出](Images/pmj6_2009.png)'
- en: Figure 20-9\. The word is too wide for its container and has overflowed
  id: totrans-205
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 20-9\. 字对容器来说太宽，溢出了
- en: But in [Figure 20-10](#word_now_wraps_at_the_right-hand_edg), the `word-wrap`
    property of the element has been assigned a value of `break-word`, so the word
    has neatly wrapped around to the next line.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 但在 [图 20-10](#word_now_wraps_at_the_right-hand_edg) 中，该元素的 `word-wrap` 属性被赋予了
    `break-word` 的值，因此这个词已经整齐地换行到了下一行。
- en: '![The word now wraps at the right-hand edge](Images/pmj6_2010.png)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![现在的字在右边缘换行](Images/pmj6_2010.png)'
- en: Figure 20-10\. The word now wraps at right-hand edge
  id: totrans-208
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 20-10\. 现在的字换行在右边缘
- en: Web Fonts
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Web 字体
- en: 'The use of CSS3 web fonts vastly increases the typography available to web
    designers by allowing fonts to be loaded in and displayed from across the web,
    not just from the user’s computer. To achieve this, declare a web font by using
    `@font-face`, like this:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: CSS3 Web 字体的使用大大增加了网页设计师可用的排版选择，允许从网络上加载并显示字体，而不仅限于用户的计算机。为了实现这一点，可以通过使用`@font-face`来声明
    web 字体，像这样：
- en: '[PRE42]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: The `url` function requires a value containing the path or URL of a font. On
    most browsers, you can use either TrueType (*.ttf*) or OpenType (*.otf*) fonts,
    but Internet Explorer restricts you to TrueType fonts that have been converted
    to Embedded Open Type (*.eot*).
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '`url` 函数需要一个包含字体路径或 URL 的值。在大多数浏览器上，你可以使用 TrueType (*.ttf*) 或 OpenType (*.otf*)
    字体，但是 Internet Explorer 限制你只能使用转换为嵌入式 OpenType (*.eot*) 的 TrueType 字体。'
- en: 'To tell the browser the type of font, you can use the `format` function, like
    this for OpenType fonts:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 要告诉浏览器字体的类型，可以使用`format`函数，例如对于 OpenType 字体：
- en: '[PRE43]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Or this for TrueType fonts:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 或者对于 TrueType 字体：
- en: '[PRE44]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: However, because Internet Explorer accepts only EOT fonts, it ignores `@font-face`
    declarations that contain the `format` function.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，因为 Internet Explorer 只接受 EOT 字体，它会忽略包含`format`函数的`@font-face`声明。
- en: Google Web Fonts
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Google Web 字体
- en: One of the neatest ways to use web fonts is to load them for free from Google’s
    servers. To find out more about this, check out the [Google Fonts Website](http://fonts.google.com),
    seen in [Figure 20-11](#google-fonts), where you can get access to well over one
    thousand fonts.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Web 字体的一个非常棒的方式之一是从 Google 的服务器免费加载它们。要了解更多信息，请访问 [Google 字体网站](http://fonts.google.com)，见图
    [20-11](#google-fonts)，在那里你可以获取超过一千种字体。
- en: '![](Images/pmj6_2011.png)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/pmj6_2011.png)'
- en: Figure 20-11\. Some of Google’s web fonts
  id: totrans-221
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 20-11\. Google 的一些 Web 字体
- en: 'To show you how easy it is to use one of these fonts, here’s how you load a
    Google font (in this case, Lobster) into your HTML for use in `<h1>` headings:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示使用其中一种字体的简易性，这里展示如何在 HTML 中加载 Google 字体（在此例中为 Lobster），以用于 `<h1>` 标题：
- en: '[PRE45]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: When you select a font from the website, Google provides the `<link>` tag to
    copy and paste into the `<head>` of your web page.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 当你从该网站选择字体时，Google 提供了 `<link>` 标签，可以复制并粘贴到你网页的 `<head>` 中。
- en: Transformations
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 变换
- en: Using transformations, you can skew, rotate, stretch, and squash elements in
    any of up to three dimensions. This makes it easy to create great effects by stepping
    out of the uniform rectangular layout of `<div>` and other elements, because now
    they can be shown at a variety of angles and in many different forms.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 使用变换，你可以在任意三个维度中进行倾斜、旋转、拉伸和挤压元素。这使得通过摆脱`<div>`等元素的统一矩形布局，很容易创建出色的效果，因为现在它们可以以多种角度和形式展示。
- en: 'To perform a transformation, use the `transform` property. You can apply various
    properties to the `transform` property, starting with the value `none`, which
    resets an object to a nontransformed state:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行变换，使用 `transform` 属性。你可以对 `transform` 属性应用各种属性，从值 `none` 开始，它将对象重置为非变换状态：
- en: '[PRE46]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'You can supply one or more of the following functions to the `transform` property:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将以下一个或多个函数提供给 `transform` 属性：
- en: <dfn class="keep-together">`matrix`</dfn>
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: <dfn class="keep-together">`matrix`</dfn>
- en: Transforms an object by applying a matrix of values to it
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 通过应用值矩阵对其应用矩阵来变换对象
- en: <dfn class="keep-together">`translate`</dfn>
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: <dfn class="keep-together">`translate`</dfn>
- en: Moves an element’s origin
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 移动元素的原点
- en: <dfn class="keep-together">`scale`</dfn>
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: <dfn class="keep-together">`scale`</dfn>
- en: Scales an object
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 缩放对象
- en: <dfn class="keep-together">`rotate`</dfn>
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: <dfn class="keep-together">`rotate`</dfn>
- en: Rotates an object
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 旋转对象
- en: <dfn class="keep-together">`skew`</dfn>
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: <dfn class="keep-together">`skew`</dfn>
- en: Skews an object
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 倾斜对象
- en: The only one of these that may cause you to scratch your head is `skew`. With
    this function, one coordinate is displaced in one direction in proportion to its
    distance from a coordinate plane or axis. So, a rectangle, for example, is transformed
    into a parallelogram when skewed.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一可能让您费解的是 `skew`。使用此功能时，一个坐标相对于坐标平面或轴的距离在一个方向上被位移。因此，例如，当被倾斜时，矩形被转换为平行四边形。
- en: There are also single versions of many of these functions, such as `translateX`,
    `scaleY`, and so on.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数也有单一版本，如 `translateX`、`scaleY` 等。
- en: 'So, for example, to rotate an element clockwise by 45 degrees, you could apply
    this declaration to it:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要将元素顺时针旋转 45 度，可以应用以下声明：
- en: '[PRE47]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'At the same time, you could enlarge this object, as in the following declaration,
    which enlarges its width by 1.5 times and its height by 2 times and then performs
    the rotation. [Figure 20-12](#object_before_and_after_transformatio) shows an
    object before the transformations are applied, and then afterward:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，您可以放大此对象，例如以下声明，将其宽度放大 1.5 倍，高度放大 2 倍，然后执行旋转。图 [20-12](#object_before_and_after_transformatio)
    显示了应用变换前后的对象：
- en: '[PRE48]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '![An object before and after transformation](Images/pmj6_2012.png)'
  id: totrans-246
  prefs: []
  type: TYPE_IMG
  zh: '![一个在变换前后的对象](Images/pmj6_2012.png)'
- en: Figure 20-12\. An object before and after transformation
  id: totrans-247
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 20-12\. 变换前后的对象
- en: 3D Transformations
  id: totrans-248
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3D 变换
- en: 'You can also transform objects in three dimensions by using the following CSS3
    3D transformation features:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过使用以下 CSS3 3D 变换功能来在三维空间中变换对象：
- en: <dfn class="keep-together">`perspective`</dfn>
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: <dfn class="keep-together">`perspective`</dfn>
- en: Releases an element from 2D space and creates a third dimension within which
    it can move. Required to work with 3D CSS functions.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 释放元素，使其脱离二维空间，并创建一个可以移动的第三维度。必须与 3D CSS 函数一起使用。
- en: <dfn class="keep-together">`transform-origin`</dfn>
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: <dfn class="keep-together">`transform-origin`</dfn>
- en: Exploits perspective, setting the location at which all lines converge to a
    single point.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 利用透视，设置所有线条汇聚到一个单一点的位置。
- en: <dfn class="keep-together">`translate3d`</dfn>
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: <dfn class="keep-together">`translate3d`</dfn>
- en: Moves an element to another location in its 3D space.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 将元素移动到其三维空间中的另一个位置。
- en: <dfn class="keep-together">`scale3d`</dfn>
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: <dfn class="keep-together">`scale3d`</dfn>
- en: Rescales one or more dimensions.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 重新调整一个或多个维度。
- en: <dfn class="keep-together">`rotate3d`</dfn>
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: <dfn class="keep-together">`rotate3d`</dfn>
- en: Rotates an element around any of the x-, y-, and z-axes.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 将元素绕 x、y 和 z 轴之一旋转。
- en: '[Figure 20-13](#figure_rotated_in_3d_space) shows a 2D object that has been
    rotated in 3D space with a CSS rule such as the following:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 图 [20-13](#figure_rotated_in_3d_space) 显示了如何使用类似以下的 CSS3 3D 变换规则将二维对象旋转至三维空间。
- en: '[PRE49]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '![A figure rotated in 3D space](Images/pmj6_2013.png)'
  id: totrans-262
  prefs: []
  type: TYPE_IMG
  zh: '![一个在三维空间中旋转的图形](Images/pmj6_2013.png)'
- en: Figure 20-13\. A figure rotated in 3D space
  id: totrans-263
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 20-13\. 在三维空间中旋转的图形
- en: Transitions
  id: totrans-264
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 过渡
- en: Also appearing in all the latest versions of the major browsers (including Internet
    Explorer 10 but not lower versions) is a dynamic new feature called *transitions*.
    These specify an animation effect you want to occur when an element is transformed,
    and the browser will automatically take care of all the in-between frames for
    you.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 也出现在所有主要浏览器的最新版本中（包括 Internet Explorer 10，但不包括更低版本）的一个动态新功能称为 *过渡*。这些指定了在元素变换时要发生的动画效果，浏览器将自动处理所有中间帧。
- en: 'There are four properties you should supply in order to set up a transition,
    as follows:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置转换，需要提供四个属性，如下所示：
- en: '[PRE50]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Properties to Transition
  id: totrans-268
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 要过渡的属性
- en: 'Transitions have properties such as `height` and `border-color`. Specify the
    properties you want to change in the CSS property named `transition-property`.
    (I’m using the word *property* here in two different ways: for a CSS property
    and for the transition properties it sets.) You can include multiple properties
    by separating them with commas, like this:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 过渡具有诸如 `height` 和 `border-color` 的属性。在名为 `transition-property` 的 CSS 属性中指定要更改的属性。（这里我使用
    *property* 一词，用于描述 CSS 属性及其设置的过渡属性。）您可以通过逗号分隔它们来包含多个属性，如下所示：
- en: '[PRE51]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Or, if you want absolutely everything about an element to transition (including
    colors), use the value `all`, like this:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果您希望对元素的所有内容（包括颜色）进行过渡，可以使用值 `all`，如下所示：
- en: '[PRE52]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Transition Duration
  id: totrans-273
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 过渡持续时间
- en: 'The `transition-duration` property requires a value of 0 seconds or greater,
    like the following, which specifies that the transition should take 1.25 seconds
    to complete:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '`transition-duration`属性需要一个大于等于0秒的值，如以下所示，指定过渡应该花费1.25秒完成：'
- en: '[PRE53]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Transition Delay
  id: totrans-276
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 过渡延迟
- en: 'If the `transition-delay` property is given a value greater than 0 seconds
    (the default), it introduces a delay between the initial display of the element
    and the beginning of the transition. The following starts the transition after
    a 0.1-second delay:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 如果给`transition-delay`属性赋予大于0秒的值（默认值），它将在元素初始显示和过渡开始之间引入延迟。以下代码在0.1秒延迟后开始过渡：
- en: '[PRE54]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: If the `transition-delay` property is given a value of less than 0 seconds (in
    other words, a negative value), the transition will execute the moment the property
    is changed but will appear to have begun execution at the specified offset, partway
    through its cycle.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`transition-delay`属性的值小于0秒（也就是负值），过渡将在属性变更时执行，但看起来似乎是从指定的偏移开始执行，过渡中途进行。
- en: Transition Timing
  id: totrans-280
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 过渡时间
- en: 'The `transition-timing` function property requires one of the following values:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '`transition-timing`函数属性需要以下一个值：'
- en: <dfn class="keep-together">`ease`</dfn>
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: <dfn class="keep-together">`ease`</dfn>
- en: Start slowly, get faster, and then end slowly.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 缓慢开始，变快，然后缓慢结束。
- en: <dfn class="keep-together">`linear`</dfn>
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: <dfn class="keep-together">`linear`</dfn>
- en: Transition at constant speed.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 常速过渡。
- en: <dfn class="keep-together">`ease-in`</dfn>
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: <dfn class="keep-together">`ease-in`</dfn>
- en: Start slowly, and then go quickly until finished.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 缓慢开始，然后快速进行直至完成。
- en: <dfn class="keep-together">`ease-out`</dfn>
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: <dfn class="keep-together">`ease-out`</dfn>
- en: Start quickly, stay fast until near the end, and then end slowly.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 快速开始，保持快速进行直至接近结束，然后缓慢结束。
- en: <dfn class="keep-together">`ease-in-out`</dfn>
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: <dfn class="keep-together">`ease-in-out`</dfn>
- en: Start slowly, go fast, and then end slowly.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 缓慢开始，快速进行，然后缓慢结束。
- en: Using any of the values containing the word *ease* ensures that the transition
    looks extra fluid and natural, unlike a linear transition that somehow seems more
    mechanical. And if these aren’t sufficiently varied for you, you can also create
    your own transitions using the `cubic-bezier` function.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 使用任何包含“**ease**”一词的值，确保过渡看起来非常流畅和自然，不像某种线性过渡似乎更加机械。如果这些对你来说还不够丰富，你也可以使用`cubic-bezier`函数自定义自己的过渡效果。
- en: 'For example, following are the declarations used to create the preceding five
    transition types, illustrating how you can easily create your own:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下是用于创建前述五种过渡类型的声明，演示如何轻松创建自定义过渡：
- en: '[PRE55]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Shorthand Syntax
  id: totrans-295
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 简写语法
- en: 'You may find it easier to use the shorthand version of this property and include
    all the values in a single declaration like the following, which will transition
    all properties in a linear fashion, over a period of 0.3 seconds, after an initial
    (optional) delay of 0.2 seconds:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会发现使用此属性的简写版本更容易，并在单个声明中包含所有值，如以下示例所示，它将以线性方式过渡所有属性，在0.3秒内完成，初始（可选）延迟为0.2秒：
- en: '[PRE56]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Doing so will save you the trouble of entering many very similar declarations,
    particularly if you are supporting all the major browser prefixes.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做将为您节省输入许多非常相似声明的麻烦，特别是如果您支持所有主要浏览器前缀。
- en: '[Example 20-4](#transition_on_hover_effect) illustrates how you might use transitions
    and transformations together. The CSS creates a square, orange element with some
    text in it, and a `hover` pseudoclass specifying that when the mouse passes over
    the object, it should rotate by 180 degrees and change from orange to yellow (see
    [Figure 20-14](#object_rotates_and_changes_color_whe)).'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 20-4](#transition_on_hover_effect)展示了如何同时使用过渡和变换。CSS创建了一个方形的橙色元素，里面有一些文本，并且使用`hover`伪类指定，当鼠标经过该对象时，它应该旋转180度，并从橙色变为黄色（见[图 20-14](#object_rotates_and_changes_color_whe)）。'
- en: Example 20-4\. A transition on hover effect
  id: totrans-300
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 20-4\. 悬停效果的过渡
- en: '[PRE57]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '![The object rotates and changes color when hovered over](Images/pmj6_2014.png)'
  id: totrans-302
  prefs: []
  type: TYPE_IMG
  zh: '![当鼠标悬停时，对象旋转并改变颜色](Images/pmj6_2014.png)'
- en: Figure 20-14\. The object rotates and changes color when hovered over
  id: totrans-303
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 20-14\. 当鼠标悬停时，对象旋转并改变颜色
- en: The sample code caters to all browsers by providing browser-specific versions
    of the declarations. In all the latest browsers (including IE 10 or higher), the
    object will rotate clockwise when hovered over while slowly changing from orange
    to yellow.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 示例代码通过提供浏览器特定版本的声明来适配所有浏览器。在所有最新的浏览器（包括IE 10或更高版本）中，当鼠标悬停时，对象将顺时针旋转，同时从橙色渐变到黄色。
- en: CSS transitions are smart in that when they are canceled, they smoothly return
    to their original value. So, if you move the mouse away before the transition
    has completed, it will instantly reverse and transition back to its initial state.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: CSS过渡很智能，当它们被取消时，它们会平滑地返回到它们的原始值。因此，如果你在过渡完成之前将鼠标移开，它将立即反转并过渡回其初始状态。
- en: Questions
  id: totrans-306
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What do the CSS3 attribute selector operators `^=`, `$=`, and `*=` do?
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CSS3属性选择器操作符 `^=`, `$=`, 和 `*=` 分别做什么？
- en: What property do you use to specify the size of a background image?
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你使用什么属性来指定背景图像的大小？
- en: With which property can you specify the radius of a border?
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以用哪个属性指定边框的半径？
- en: How can you flow text over multiple columns?
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何在多列上流动文本？
- en: Name the four functions with which you can specify CSS colors.
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出四个用于指定CSS颜色的函数。
- en: How would you create a gray shadow under some text, offset diagonally to the
    bottom right by 5 pixels, with a blurring of 3 pixels?
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何创建一个灰色阴影，位于某些文本下方右下角偏移5像素，模糊程度为3像素？
- en: How can you indicate with an ellipsis that text is truncated?
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何用省略号表示文本被截断？
- en: How can you include a Google web font in a web page?
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何在网页中引入Google Web字体？
- en: What CSS declaration would you use to rotate an object by 90 degrees?
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你会使用什么CSS声明来将对象旋转90度？
- en: How do you set up a transition on an object so that when any of its properties
    are changed, the change will transition immediately in a linear fashion over the
    course of half a second?
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何设置对象的过渡效果，以便当其任何属性发生变化时，变化将在半秒钟内以线性方式立即过渡？
- en: See [“Chapter 20 Answers”](app01_split_019.xhtml#chapter_20_answers) in the
    [Appendix A](app01_split_000.xhtml#solutions_to_the_chapter_questions) for the
    answers to these questions.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[“第20章答案”](app01_split_019.xhtml#chapter_20_answers) 在[附录 A](app01_split_000.xhtml#solutions_to_the_chapter_questions)
    中查看这些问题的答案。
