- en: Chapter 20\. Advanced CSS with CSS3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first implementation of CSS was drawn up in 1996 and released in 1999; it
    has been supported by all browser releases since 2001\. The standard for this
    version (CSS1) was revised in 2008\. In 1998, developers began drawing up the
    second specification (CSS2); its standard was completed in 2007 and revised in
    2009.
  prefs: []
  type: TYPE_NORMAL
- en: Development for the CSS3 specification commenced in 2001, with some features
    being proposed in 2009 and the latest recommendations still being made as recently
    as 2020.
  prefs: []
  type: TYPE_NORMAL
- en: A CSS4 is already being proposed by the CSS working group, although this is
    not a major leap forward. Rather, it’s simply a development of one part of CSS—the
    selectors—and its contents are beyond the scope of this book, given that recommendations
    are still being made in 2021 as I write. The curious among you may wish to visit [resources
    on drafts.csswg.org](https://tinyurl.com/l4selectors).
  prefs: []
  type: TYPE_NORMAL
- en: Thankfully, though, the CSS working group publishes regular snapshots of the
    CSS modules that it considers stable. So far, four such best-current-practices
    documents have been published as Notes, with the most recent being [in 2020](https://w3.org/TR/css-2020).
    This is the best place to gauge the current state of play in the world of CSS.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, I’ll take you through the most important CSS3 features that
    have been adopted by the major browsers, many of which provide functionality that
    hitherto could be attained only with JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: I recommend using CSS3 to implement dynamic features where you can, instead
    of JavaScript. The features provided by CSS make document attributes part of the
    document itself, instead of being tacked on through JavaScript. Making them part
    of the document is a cleaner design.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: It has to be said that there’s an awful lot to CSS, and browsers implement the
    various features differently (if at all). Therefore, I recommend that whenever
    you wish to ensure that the CSS you are creating will work in all browsers, you
    first take a look at the [Can I use... website](http://caniuse.com). It maintains
    a record of what features are available in which browsers, so it will always be
    more up to date than this book, which sees a new edition only every couple of
    years or so—and CSS can move a long way in that time.
  prefs: []
  type: TYPE_NORMAL
- en: Attribute Selectors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, I detailed the various CSS attribute selectors, which
    I will now quickly recap. Selectors are used in CSS to match HTML elements, and
    there are 10 different types, as listed in [Table 20-1](#css_selectors_and_pseudo-classes_and_-el).
  prefs: []
  type: TYPE_NORMAL
- en: Table 20-1\. CSS selectors, pseudoclasses, and pseudoelements
  prefs: []
  type: TYPE_NORMAL
- en: '| Selector type | Example |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Universal selector | `* { color:#555; }` |'
  prefs: []
  type: TYPE_TB
- en: '| Type selectors | `b { color:red; }` |'
  prefs: []
  type: TYPE_TB
- en: '| Class selectors | `.classname { color:blue; }` |'
  prefs: []
  type: TYPE_TB
- en: '| ID selectors | `#id` `{ background:cyan; }` |'
  prefs: []
  type: TYPE_TB
- en: '| Descendant selectors | `span em { color:green; }` |'
  prefs: []
  type: TYPE_TB
- en: '| Child selectors | `div > em { background:lime; }` |'
  prefs: []
  type: TYPE_TB
- en: '| Adjacent sibling selectors | `i + b { color:gray; }` |'
  prefs: []
  type: TYPE_TB
- en: '| Attribute selectors | `a[href=''info.htm''] { color:red; }` |'
  prefs: []
  type: TYPE_TB
- en: '| Pseudoclasses | `a:hover { font-weight:bold; }` |'
  prefs: []
  type: TYPE_TB
- en: '| Pseudoelements | `P::first-letter { font-size:300%; }` |'
  prefs: []
  type: TYPE_TB
- en: The CSS3 designers decided that most of these selectors worked just fine the
    way they were, but three enhancements have been made so that you can more easily
    match elements based on the contents of their attributes. The following sections
    examine these.
  prefs: []
  type: TYPE_NORMAL
- en: Matching Parts of Strings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In CSS2 you can use a selector such as `a[href=''info.htm'']` to match the
    string `info.htm` when found in an `href` attribute, but there’s no way to match
    only a *portion* of a string. CSS3 comes to the rescue with three new operators:
    `^`, `$`, and `*`. If one directly precedes the `=` symbol, you can match the
    start, end, or any part of a string, respectively.'
  prefs: []
  type: TYPE_NORMAL
- en: The ^= operator
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This operator matches at the start of a string. So, for example, the following
    will match any `href` attribute whose value begins with the string `http://website`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Therefore, the following element will match:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'But this will not:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The $= operator
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To match only at the end of a string, you can use a selector such as the following,
    which will match any `img` tag whose `src` attribute ends with `.png`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, the following will match:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'But this will not:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The *= operator
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To match any substring anywhere in the attribute, you can use a selector such
    as the following, which finds any links on a page that have the string `google`
    anywhere within them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: For example, the HTML segment `<a href='http://google.com'>` will match, while
    the segment `<a href='http://gmail.com'>` will not.
  prefs: []
  type: TYPE_NORMAL
- en: The box-sizing Property
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The W3C box model specifies that the width and height of an object should refer
    only to the dimensions of an element’s content, ignoring any padding or border.
    But some web designers have expressed a desire to specify dimensions that refer
    to an entire element, including any padding and border.
  prefs: []
  type: TYPE_NORMAL
- en: 'To provide this feature, CSS3 lets you choose the box model you wish to use
    with the `box-sizing` property. For example, to use the total width and height
    of an object including padding and borders, use this declaration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Or, to have an object’s width and height refer only to its content, use this
    declaration (the default):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: CSS3 Backgrounds
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'CSS3 provides two new properties: `background-clip` and `background-origin`.
    Between them, you can specify where a background should start within an element,
    and how to clip the background so that it doesn’t appear in parts of the box model
    where you don’t want it to.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To accomplish this, both properties support the following values:'
  prefs: []
  type: TYPE_NORMAL
- en: <dfn class="keep-together">`border-box`</dfn>
  prefs: []
  type: TYPE_NORMAL
- en: Refers to the outer edge of the border
  prefs: []
  type: TYPE_NORMAL
- en: <dfn class="keep-together">`padding-box`</dfn>
  prefs: []
  type: TYPE_NORMAL
- en: Refers to the outer edge of the padding area
  prefs: []
  type: TYPE_NORMAL
- en: <dfn class="keep-together">`content-box`</dfn>
  prefs: []
  type: TYPE_NORMAL
- en: Refers to the outer edge of the content area
  prefs: []
  type: TYPE_NORMAL
- en: The background-clip Property
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `background-clip` property specifies whether the background should be ignored
    (clipped) if it appears within either the border or padding area of an element.
    For example, the following declaration states that the background may display
    in all parts of an element, all the way to the outer edge of the border:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'To keep the background from appearing within the border area of an element,
    you can restrict it to only the section of an element inside the outer edge of
    its padding area, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Or to restrict the background to display only within the content area of an
    element, use this declaration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[Figure 20-1](#different_ways_of_combining_css3_backgro) shows three rows of
    elements displayed in the Safari web browser, in which the first row uses `border-box`
    for the `background-clip` property, the second uses `padding-box`, and the third
    uses `content-box`.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Different ways of combining CSS3 background properties](Images/pmj6_2001.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 20-1\. Different ways of combining CSS3 background properties
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In the first row, the inner box (an image file that has been loaded into the
    top left of the element, with repeating disabled) is allowed to display anywhere
    in the element. You can also clearly see it displayed in the border area of the
    first box because the border has been set to dotted.
  prefs: []
  type: TYPE_NORMAL
- en: In the second row, neither the background image nor the background shading displays
    in the border area, because they have been clipped to the padding area with a
    `background-clip` property value of `padding-box`.
  prefs: []
  type: TYPE_NORMAL
- en: Then, in the third row, both the background shading and the image have been
    clipped to display only within the inner content area of each element (shown inside
    a light-colored, dotted box), using a `background-clip` property of `content-box`.
  prefs: []
  type: TYPE_NORMAL
- en: The background-origin Property
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With the `background-origin` property, you can control where a background image
    will be located by specifying where the top left of the image should start. For
    example, the following declaration states that the background image’s origin should
    be the top-left corner of the outer edge of the border:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'To set the origin of an image to the top-left outer corner of the padding area,
    use this declaration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Or to set the origin of an image to the top-left corner of an element’s inner
    content section, use this declaration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Looking again at [Figure 20-1](#different_ways_of_combining_css3_backgro), you
    can see in each row the first box uses a `background-origin` property of `border-box`,
    the second uses `padding-box`, and the third uses `content-box`. Consequently,
    in each row the smaller inner box displays at the top left of the border in the
    first box, the top left of the padding in the second, and the top left of the
    content in the third box.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The only differences to note between the rows, with regard to the origins of
    the inner box in [Figure 20-1](#different_ways_of_combining_css3_backgro), are
    that in rows 2 and 3 the inner box is clipped to the padding and content areas,
    respectively; therefore, outside these areas no portion of the box is displayed.
  prefs: []
  type: TYPE_NORMAL
- en: The background-size Property
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the same way that you can specify the width and height of an image when used
    in the `<img>` tag, you can now also do so for background images in the latest
    versions of all browsers.
  prefs: []
  type: TYPE_NORMAL
- en: 'You apply the property as follows (where *`ww`* is the width and *`hh`* is
    the height):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: If you prefer, you can use only one argument, and then both dimensions will
    be set to that value. Also, if you apply this property to a block-level element
    such as a `<div>` (rather than one that is inline, such as a `<span>`), you can
    specify the width and/or height as a percentage, instead of a fixed value.
  prefs: []
  type: TYPE_NORMAL
- en: Using the auto Value
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you wish to scale only one dimension of a background image, and then have
    the other one scale automatically to retain the same proportions, you can use
    the value `auto` for the other dimension, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: This sets the width to 100 pixels, and the height to a value proportionate to
    the increase or decrease in width.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Different browsers may require different versions of the various background
    property names, so please refer to the [Can I use... website](http://caniuse.com)
    when using them to ensure you are applying all the versions required for the browsers
    you are targeting.
  prefs: []
  type: TYPE_NORMAL
- en: Multiple Backgrounds
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With CSS3 you can attach multiple backgrounds to an element, each of which can
    use the previously discussed CSS3 background properties. [Figure 20-2](#background_created_with_multiple_image)
    shows an example of this; eight different images have been assigned to the background
    to create the four corners and four edges of the certificate border.
  prefs: []
  type: TYPE_NORMAL
- en: To display multiple background images in a single CSS declaration, separate
    them with commas. [Example 20-1](Images/#using_multiple_images_in_a_background)
    shows the HTML and CSS used to create the background in [Figure 20-2](#background_created_with_multiple_image).
  prefs: []
  type: TYPE_NORMAL
- en: Example 20-1\. Using multiple images in a background
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '![](Images/pmj6_2002.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 20-2\. A background created with multiple images
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Looking at the CSS section, you see that the first four lines of the `background`
    declaration place the corner images into the four corners of the element, and
    the final four place the edge images, which are handled last because the order
    of priority for background images goes from top to bottom. In other words, where
    they overlap, additional background images will appear behind already placed images.
    If the GIFs were in the reverse order, the repeating edge images would display
    on top of the corners, which would be incorrect.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Using this CSS, you can resize the containing element to any dimensions, and
    the border will always correctly resize to fit, which is much easier than using
    tables or multiple elements for the same effect.
  prefs: []
  type: TYPE_NORMAL
- en: CSS3 Borders
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CSS3 also brings a lot more flexibility to the way borders can be presented,
    by allowing you to independently change the colors of all four border edges, to
    display images for the edges and corners, to provide a radius value for applying
    rounded corners to borders, and to place box shadows underneath elements.
  prefs: []
  type: TYPE_NORMAL
- en: The border-color Property
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are two ways you can apply colors to a border. First, you can pass a
    single color to the property, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'This property sets all the borders of an element to mid-gray. You can also
    set border colors individually, like this (which sets the border colors to various
    shades of gray):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Or you can set all the colors individually with a single declaration, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: This declaration sets the top border color to `#f00`, the right one to `#0f0`,
    the bottom one to `#880`, and the left one to `#00f` (red, green, orange, and
    blue, respectively). You can also use color names for the arguments.
  prefs: []
  type: TYPE_NORMAL
- en: The border-radius Property
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Prior to CSS3, talented web developers came up with numerous tweaks and fixes
    in order to achieve rounded borders, generally using `<table>` or `<div>` tags.
  prefs: []
  type: TYPE_NORMAL
- en: But now adding rounded borders to an element is really simple, and it works
    in the latest versions of all major browsers, as shown in [Figure 20-3](#mixing_and_matching_various_border_radiu),
    in which a 10-pixel border is displayed in different ways. [Example 20-2](#border-radius_property-id00106)
    shows the HTML for this.
  prefs: []
  type: TYPE_NORMAL
- en: Example 20-2\. The border-radius property
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '![Mixing and matching various border radius properties](Images/pmj6_2003.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 20-3\. Mixing and matching various border radius properties
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'So, for example, to create a rounded border with a radius of 20 pixels, you
    could simply use the following declaration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'You can specify a separate radius for each of the four corners, like this (applied
    in a clockwise direction starting from the top-left corner):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'If you prefer, you can also address each corner of an element individually,
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'And, when referencing individual corners, you can supply two arguments to choose
    a different vertical and horizontal radius (giving more interesting and subtle
    borders), like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The first argument is the horizontal, and the second is the vertical radius.
  prefs: []
  type: TYPE_NORMAL
- en: Box Shadows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To apply a box shadow, specify a horizontal and vertical offset from the object,
    the amount of blurring to add to the shadow, and the color to use, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: The two instances of `15px` specify the vertical and horizontal offset from
    the element, and these values can be negative, zero, or positive. The `10px` specifies
    the amount of blurring, with smaller values resulting in less blurring, and `#888`
    is the color for the shadow, which can be any valid color value. The result of
    this declaration can be seen in [Figure 20-4](#box_shadow_displayed_under_an_element).
  prefs: []
  type: TYPE_NORMAL
- en: '![A box shadow displayed under an element](Images/pmj6_2004.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 20-4\. A box shadow displayed under an element
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Element Overflow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In CSS2, you can indicate what to do when one element is too large to be fully
    contained by its parent by setting the `overflow` property to `hidden`, `visible`,
    `scroll`, or `auto`. But with CSS3, you can now separately apply these values
    in the horizontal or vertical directions, too, as with these example declarations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Multicolumn Layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the features most requested by web developers is multiple columns, and
    this has finally been realized in CSS3. Now, flowing text over multiple columns
    is as easy as specifying the number of columns and then (optionally) choosing
    the spacing between them and the type of dividing line (if any), as shown in [Figure 20-5](#flowing_text_in_multiple_columns)
    (created with [Example 20-3](#using_css_to_create_multiple_columns)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Flowing text in multiple columns](Images/pmj6_2005.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 20-5\. Flowing text in multiple columns
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Example 20-3\. Using CSS to create multiple columns
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Within the `.columns` class, the first two lines simply tell the browser to
    right-justify the text and to set it to a font size of `16pt`. These declarations
    aren’t needed for multiple columns, but they improve the text display. The remaining
    lines set up the element so that, within it, text will flow over three columns,
    with a gap of `1em` between the columns and with a single-pixel border down the
    middle of each gap.
  prefs: []
  type: TYPE_NORMAL
- en: Colors and Opacity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The ways in which you can define colors have been greatly expanded with CSS3,
    and you can now also use CSS functions to apply colors in the common formats RGB
    (red, green, and blue), RGBA (red, green, blue, and alpha), HSL (hue, saturation,
    and luminance), and HSLA (hue, saturation, luminance, and alpha). The alpha value
    specifies a color’s transparency, which allows underlying elements to show through.
  prefs: []
  type: TYPE_NORMAL
- en: HSL Colors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To define a color with the `hsl` function, you must first choose a value for
    the hue between `0` and `359` from a color wheel. Any higher color numbers simply
    wrap around to the beginning again, so the value of `0` is red, and so are the
    values `360` and `720`.
  prefs: []
  type: TYPE_NORMAL
- en: In a color wheel, the primary colors of red, green, and blue are separated by
    120 degrees, so pure red is `0`, green is `120`, and blue is `240`. The numbers
    between these values represent shades comprising different proportions of the
    primary colors on either side.
  prefs: []
  type: TYPE_NORMAL
- en: Next you need the saturation level, which is a value between 0 and 100%. This
    specifies how washed out or vibrant a color will appear. The saturation values
    commence in the center of the wheel with a mid-gray color (a saturation of 0%)
    and then become more and more vivid as they progress to the outer edge (a saturation
    of 100%).
  prefs: []
  type: TYPE_NORMAL
- en: All that’s left then is for you to decide how bright you want the color to be,
    by choosing a luminance value of between 0 and 100%. A value of `50%` for the
    luminance gives the fullest, brightest color; decreasing the value (down to a
    minimum of `0%`) darkens the color until it displays as black; and increasing
    the value (up to a maximum of `100%`) lightens the color until it shows as white.
    You can visualize this as if you are mixing levels of either black or white into
    the color.
  prefs: []
  type: TYPE_NORMAL
- en: 'Therefore, for example, to choose a fully saturated yellow color with standard
    percent brightness, you would use a declaration such as this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Or, for a darker blue color, you might use a declaration such as this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: You can also use this (and all other CSS color functions) with any property
    that expects a color, such as `background-color` and so on.
  prefs: []
  type: TYPE_NORMAL
- en: HSLA Colors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To provide even further control over how colors will appear, you can use the
    `hsla` function, supplying it with a fourth (alpha) level for a color, which is
    a floating-point value between `0` and `1`. A value of `0` specifies that the
    color is totally transparent, while `1` means it is fully opaque.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s how you would choose a fully saturated yellow color with standard brightness
    and 30% opacity:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Or, for a fully saturated but lighter blue color with 82% opacity, you might
    use this declaration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: RGB Colors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You will probably be more familiar with the RGB system of selecting a color,
    as it’s similar to the *`#nnnnnn`* and *`#nnn`* color formats. For example, to
    apply a yellow color to a property, you can use either of the following declarations
    (the first supporting 16 million colors, and the second supporting 4,000):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also use the CSS `rgb` function to achieve the same result but with
    decimal numbers instead of hexadecimal (where `255` decimal is `ff` hexadecimal):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'But even better than that, you don’t even have to think in amounts of up to
    256 anymore, because you can specify percentage values, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'In fact, you can now get very close to a desired color by simply thinking about
    its primary colors. For example, green and blue make cyan, so to create a color
    close to cyan, but with more blue in it than green, you could make a good first
    guess at 0% red, 40% green, and 60% blue and try a declaration such as this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: RGBA Colors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As with the `hsla` function, the `rgba` function supports a fourth alpha argument,
    so you can, for example, apply the previous cyan-like color with an opacity of
    40% by using a declaration such as this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: The opacity Property
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `opacity` property provides the same alpha control as the `hsla` and `rgba`
    functions but lets you modify an object’s opacity (or transparency, if you prefer)
    separately from its color.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use it, apply a declaration such as the following to an element (which in
    this example sets the opacity to 25%, or 75% transparent):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Text Effects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A number of new effects can now be applied to text with the help of CSS3, including
    text shadows, text overlapping, and word wrapping.
  prefs: []
  type: TYPE_NORMAL
- en: The text-shadow Property
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `text-shadow` property is similar to the `box-shadow` property and takes
    the same set of arguments: a horizontal and vertical offset, an amount for the
    blurring, and the color to use. For example, the following declaration offsets
    the shadow by 3 pixels both horizontally and vertically and displays the shadow
    in dark gray, with a blurring of 4 pixels:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: The result of this declaration looks like [Figure 20-6](#applying_a_shadow_to_text)
    and works in all recent versions of all major browsers (but not IE 9 or lower).
  prefs: []
  type: TYPE_NORMAL
- en: '![Applying a shadow to text](Images/pmj6_2006.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 20-6\. Applying a shadow to text
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The text-overflow Property
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When using any of the CSS overflow properties with a value of `hidden`, you
    can also use the `text-overflow` property to place an ellipsis (three dots) just
    before the cutoff to indicate that some text has been truncated, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Without this property, when the text “To be, or not to be. That is the question.”
    is truncated, the result will look like [Figure 20-7](#text_is_automatically_truncated);
    with the declaration applied, however, the result is like [Figure 20-8](#instead_of_being_cut_offcomma_the_text_t).
  prefs: []
  type: TYPE_NORMAL
- en: '![The text is automatically truncated](Images/pmj6_2007.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 20-7\. Text is automatically truncated
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '![Instead of being cut off, the text trails off using an ellipsis](Images/pmj6_2008.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 20-8\. Instead of being cut off, text trails off using an ellipsis
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'For this to work, three things are required:'
  prefs: []
  type: TYPE_NORMAL
- en: The element should have an `overflow` property that is not visible, such as
    `overflow:hidden`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The element must have the `white-space:nowrap` property set to constrain the
    text.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The width of the element must be less than that of the text to truncate.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The word-wrap Property
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you have a really long word that is wider than the element containing
    it, it will either overflow or be truncated. But as an alternative to using the
    `text-overflow` property and truncating text, you can use the `word-wrap` property
    with a value of `break-word` to wrap long lines, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: For example, in [Figure 20-9](#word_is_too_wide_for_its_container_a) the word
    *Honorificabilitudinitatibus* is too wide for the containing box (whose right-hand
    edge is shown as a solid vertical line between the letters *t* and *a*), and,
    because no overflow properties have been applied, it has overflowed its bounds.
  prefs: []
  type: TYPE_NORMAL
- en: '![The word is too wide for its container and has overflowed](Images/pmj6_2009.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 20-9\. The word is too wide for its container and has overflowed
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: But in [Figure 20-10](#word_now_wraps_at_the_right-hand_edg), the `word-wrap`
    property of the element has been assigned a value of `break-word`, so the word
    has neatly wrapped around to the next line.
  prefs: []
  type: TYPE_NORMAL
- en: '![The word now wraps at the right-hand edge](Images/pmj6_2010.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 20-10\. The word now wraps at right-hand edge
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Web Fonts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The use of CSS3 web fonts vastly increases the typography available to web
    designers by allowing fonts to be loaded in and displayed from across the web,
    not just from the user’s computer. To achieve this, declare a web font by using
    `@font-face`, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: The `url` function requires a value containing the path or URL of a font. On
    most browsers, you can use either TrueType (*.ttf*) or OpenType (*.otf*) fonts,
    but Internet Explorer restricts you to TrueType fonts that have been converted
    to Embedded Open Type (*.eot*).
  prefs: []
  type: TYPE_NORMAL
- en: 'To tell the browser the type of font, you can use the `format` function, like
    this for OpenType fonts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Or this for TrueType fonts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: However, because Internet Explorer accepts only EOT fonts, it ignores `@font-face`
    declarations that contain the `format` function.
  prefs: []
  type: TYPE_NORMAL
- en: Google Web Fonts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the neatest ways to use web fonts is to load them for free from Google’s
    servers. To find out more about this, check out the [Google Fonts Website](http://fonts.google.com),
    seen in [Figure 20-11](#google-fonts), where you can get access to well over one
    thousand fonts.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/pmj6_2011.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 20-11\. Some of Google’s web fonts
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'To show you how easy it is to use one of these fonts, here’s how you load a
    Google font (in this case, Lobster) into your HTML for use in `<h1>` headings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: When you select a font from the website, Google provides the `<link>` tag to
    copy and paste into the `<head>` of your web page.
  prefs: []
  type: TYPE_NORMAL
- en: Transformations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using transformations, you can skew, rotate, stretch, and squash elements in
    any of up to three dimensions. This makes it easy to create great effects by stepping
    out of the uniform rectangular layout of `<div>` and other elements, because now
    they can be shown at a variety of angles and in many different forms.
  prefs: []
  type: TYPE_NORMAL
- en: 'To perform a transformation, use the `transform` property. You can apply various
    properties to the `transform` property, starting with the value `none`, which
    resets an object to a nontransformed state:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'You can supply one or more of the following functions to the `transform` property:'
  prefs: []
  type: TYPE_NORMAL
- en: <dfn class="keep-together">`matrix`</dfn>
  prefs: []
  type: TYPE_NORMAL
- en: Transforms an object by applying a matrix of values to it
  prefs: []
  type: TYPE_NORMAL
- en: <dfn class="keep-together">`translate`</dfn>
  prefs: []
  type: TYPE_NORMAL
- en: Moves an element’s origin
  prefs: []
  type: TYPE_NORMAL
- en: <dfn class="keep-together">`scale`</dfn>
  prefs: []
  type: TYPE_NORMAL
- en: Scales an object
  prefs: []
  type: TYPE_NORMAL
- en: <dfn class="keep-together">`rotate`</dfn>
  prefs: []
  type: TYPE_NORMAL
- en: Rotates an object
  prefs: []
  type: TYPE_NORMAL
- en: <dfn class="keep-together">`skew`</dfn>
  prefs: []
  type: TYPE_NORMAL
- en: Skews an object
  prefs: []
  type: TYPE_NORMAL
- en: The only one of these that may cause you to scratch your head is `skew`. With
    this function, one coordinate is displaced in one direction in proportion to its
    distance from a coordinate plane or axis. So, a rectangle, for example, is transformed
    into a parallelogram when skewed.
  prefs: []
  type: TYPE_NORMAL
- en: There are also single versions of many of these functions, such as `translateX`,
    `scaleY`, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, for example, to rotate an element clockwise by 45 degrees, you could apply
    this declaration to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'At the same time, you could enlarge this object, as in the following declaration,
    which enlarges its width by 1.5 times and its height by 2 times and then performs
    the rotation. [Figure 20-12](#object_before_and_after_transformatio) shows an
    object before the transformations are applied, and then afterward:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '![An object before and after transformation](Images/pmj6_2012.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 20-12\. An object before and after transformation
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 3D Transformations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can also transform objects in three dimensions by using the following CSS3
    3D transformation features:'
  prefs: []
  type: TYPE_NORMAL
- en: <dfn class="keep-together">`perspective`</dfn>
  prefs: []
  type: TYPE_NORMAL
- en: Releases an element from 2D space and creates a third dimension within which
    it can move. Required to work with 3D CSS functions.
  prefs: []
  type: TYPE_NORMAL
- en: <dfn class="keep-together">`transform-origin`</dfn>
  prefs: []
  type: TYPE_NORMAL
- en: Exploits perspective, setting the location at which all lines converge to a
    single point.
  prefs: []
  type: TYPE_NORMAL
- en: <dfn class="keep-together">`translate3d`</dfn>
  prefs: []
  type: TYPE_NORMAL
- en: Moves an element to another location in its 3D space.
  prefs: []
  type: TYPE_NORMAL
- en: <dfn class="keep-together">`scale3d`</dfn>
  prefs: []
  type: TYPE_NORMAL
- en: Rescales one or more dimensions.
  prefs: []
  type: TYPE_NORMAL
- en: <dfn class="keep-together">`rotate3d`</dfn>
  prefs: []
  type: TYPE_NORMAL
- en: Rotates an element around any of the x-, y-, and z-axes.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 20-13](#figure_rotated_in_3d_space) shows a 2D object that has been
    rotated in 3D space with a CSS rule such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '![A figure rotated in 3D space](Images/pmj6_2013.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 20-13\. A figure rotated in 3D space
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Transitions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Also appearing in all the latest versions of the major browsers (including Internet
    Explorer 10 but not lower versions) is a dynamic new feature called *transitions*.
    These specify an animation effect you want to occur when an element is transformed,
    and the browser will automatically take care of all the in-between frames for
    you.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are four properties you should supply in order to set up a transition,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Properties to Transition
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Transitions have properties such as `height` and `border-color`. Specify the
    properties you want to change in the CSS property named `transition-property`.
    (I’m using the word *property* here in two different ways: for a CSS property
    and for the transition properties it sets.) You can include multiple properties
    by separating them with commas, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Or, if you want absolutely everything about an element to transition (including
    colors), use the value `all`, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Transition Duration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `transition-duration` property requires a value of 0 seconds or greater,
    like the following, which specifies that the transition should take 1.25 seconds
    to complete:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Transition Delay
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If the `transition-delay` property is given a value greater than 0 seconds
    (the default), it introduces a delay between the initial display of the element
    and the beginning of the transition. The following starts the transition after
    a 0.1-second delay:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: If the `transition-delay` property is given a value of less than 0 seconds (in
    other words, a negative value), the transition will execute the moment the property
    is changed but will appear to have begun execution at the specified offset, partway
    through its cycle.
  prefs: []
  type: TYPE_NORMAL
- en: Transition Timing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `transition-timing` function property requires one of the following values:'
  prefs: []
  type: TYPE_NORMAL
- en: <dfn class="keep-together">`ease`</dfn>
  prefs: []
  type: TYPE_NORMAL
- en: Start slowly, get faster, and then end slowly.
  prefs: []
  type: TYPE_NORMAL
- en: <dfn class="keep-together">`linear`</dfn>
  prefs: []
  type: TYPE_NORMAL
- en: Transition at constant speed.
  prefs: []
  type: TYPE_NORMAL
- en: <dfn class="keep-together">`ease-in`</dfn>
  prefs: []
  type: TYPE_NORMAL
- en: Start slowly, and then go quickly until finished.
  prefs: []
  type: TYPE_NORMAL
- en: <dfn class="keep-together">`ease-out`</dfn>
  prefs: []
  type: TYPE_NORMAL
- en: Start quickly, stay fast until near the end, and then end slowly.
  prefs: []
  type: TYPE_NORMAL
- en: <dfn class="keep-together">`ease-in-out`</dfn>
  prefs: []
  type: TYPE_NORMAL
- en: Start slowly, go fast, and then end slowly.
  prefs: []
  type: TYPE_NORMAL
- en: Using any of the values containing the word *ease* ensures that the transition
    looks extra fluid and natural, unlike a linear transition that somehow seems more
    mechanical. And if these aren’t sufficiently varied for you, you can also create
    your own transitions using the `cubic-bezier` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, following are the declarations used to create the preceding five
    transition types, illustrating how you can easily create your own:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Shorthand Syntax
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You may find it easier to use the shorthand version of this property and include
    all the values in a single declaration like the following, which will transition
    all properties in a linear fashion, over a period of 0.3 seconds, after an initial
    (optional) delay of 0.2 seconds:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Doing so will save you the trouble of entering many very similar declarations,
    particularly if you are supporting all the major browser prefixes.
  prefs: []
  type: TYPE_NORMAL
- en: '[Example 20-4](#transition_on_hover_effect) illustrates how you might use transitions
    and transformations together. The CSS creates a square, orange element with some
    text in it, and a `hover` pseudoclass specifying that when the mouse passes over
    the object, it should rotate by 180 degrees and change from orange to yellow (see
    [Figure 20-14](#object_rotates_and_changes_color_whe)).'
  prefs: []
  type: TYPE_NORMAL
- en: Example 20-4\. A transition on hover effect
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '![The object rotates and changes color when hovered over](Images/pmj6_2014.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 20-14\. The object rotates and changes color when hovered over
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The sample code caters to all browsers by providing browser-specific versions
    of the declarations. In all the latest browsers (including IE 10 or higher), the
    object will rotate clockwise when hovered over while slowly changing from orange
    to yellow.
  prefs: []
  type: TYPE_NORMAL
- en: CSS transitions are smart in that when they are canceled, they smoothly return
    to their original value. So, if you move the mouse away before the transition
    has completed, it will instantly reverse and transition back to its initial state.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What do the CSS3 attribute selector operators `^=`, `$=`, and `*=` do?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What property do you use to specify the size of a background image?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With which property can you specify the radius of a border?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can you flow text over multiple columns?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the four functions with which you can specify CSS colors.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How would you create a gray shadow under some text, offset diagonally to the
    bottom right by 5 pixels, with a blurring of 3 pixels?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can you indicate with an ellipsis that text is truncated?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can you include a Google web font in a web page?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What CSS declaration would you use to rotate an object by 90 degrees?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you set up a transition on an object so that when any of its properties
    are changed, the change will transition immediately in a linear fashion over the
    course of half a second?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: See [“Chapter 20 Answers”](app01_split_019.xhtml#chapter_20_answers) in the
    [Appendix A](app01_split_000.xhtml#solutions_to_the_chapter_questions) for the
    answers to these questions.
  prefs: []
  type: TYPE_NORMAL
