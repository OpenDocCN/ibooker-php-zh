["```php\nGET /api/cats\n[\n    {\n        id: 1,\n        name: 'Fluffy'\n    },\n    {\n        id: 2,\n        name: 'Killer'\n    }\n]\n\nGET /api/cats/2\n{\n    id: 2,\n    name: 'Killer'\n}\n\nPOST /api/cats with body:\n{\n    name: 'Mr Bigglesworth'\n}\n(creates new cat)\n\nPATCH /api/cats/3 with body:\n{\n    name: 'Mr. Bigglesworth'\n}\n(updates cat)\n\nDELETE /api/cats/2\n(deletes cat)\n```", "```php\nphp artisan make:controller Api/DogController --api\n```", "```php\n<?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Controllers\\Controller;\n\nclass DogController extends Controller\n{\n    /**\n * Display a listing of the resource.\n */\n    public function index()\n    {\n        //\n    }\n\n    /**\n * Store a newly created resource in storage.\n */\n    public function store(Request $request)\n    {\n        //\n    }\n\n    /**\n * Display the specified resource.\n */\n    public function show(string $id)\n    {\n        //\n    }\n\n    /**\n * Update the specified resource in storage.\n */\n    public function update(Request $request, string $id)\n    {\n        //\n    }\n\n    /**\n * Remove the specified resource from storage.\n */\n    public function destroy(string $id)\n    {\n        //\n    }\n}\n```", "```php\nphp artisan make:model Dog --migration\nphp artisan migrate\n```", "```php\n...\nclass DogController extends Controller\n{\n    public function index()\n    {\n        return Dog::all();\n    }\n\n    public function store(Request $request)\n    {\n        return Dog::create($request->only(['name', 'breed']));\n    }\n\n    public function show(string $id)\n    {\n        return Dog::findOrFail($id);\n    }\n\n    public function update(Request $request, string $id)\n    {\n        $dog = Dog::findOrFail($id);\n        $dog->update($request->only(['name', 'breed']));\n        return $dog;\n    }\n\n    public function destroy(string $id)\n    {\n        Dog::findOrFail($id)->delete();\n    }\n}\n```", "```php\nphp artisan make:model Dog --api\n```", "```php\nphp artisan make:model Dog --all\n```", "```php\n// routes/api.php\nRoute::namespace('App\\Http\\Controllers\\Api')->group(function () {\n    Route::apiResource('dogs', DogController::class);\n});\n```", "```php\nX-RateLimit-Limit: 5000\nX-RateLimit-Remaining: 4987\nX-RateLimit-Reset: 1350085394\n```", "```php\nAccept: application/vnd.github.v3+json\n```", "```php\nRoute::get('dogs', function () {\n    return response(Dog::all())\n        ->header('X-Greatness-Index', 12);\n});\n```", "```php\nRoute::get('dogs', function (Request $request) {\n    var_dump($request->header('Accept'));\n});\n```", "```php\nRoute::get('dogs', function () {\n    return Dog::paginate(20);\n});\n```", "```php\nGET /dogs        - Return results 1-20\nGET /dogs?page=1 - Return results 1-20\nGET /dogs?page=2 - Return results 21-40\n```", "```php\nRoute::get('dogs', function () {\n    return DB::table('dogs')->paginate(20);\n});\n```", "```php\n{\n   \"current_page\": 1,\n   \"data\": [\n        {\n           'name': 'Fido'\n        },\n        {\n            'name': 'Pickles'\n        },\n        {\n            'name': 'Spot'\n        }\n   ]\n   \"first_page_url\": \"http://myapp.com/api/dogs?page=1\",\n   \"from\": 1,\n   \"last_page\": 2,\n   \"last_page_url\": \"http://myapp.com/api/dogs?page=2\",\n   \"links\": [\n      {\n         \"url\": null,\n         \"label\": \"&laquo; Previous\",\n         \"active\": false\n      },\n      {\n         \"url\": \"http://myapp.com/api/dogs?page=1\",\n         \"label\": \"1\",\n         \"active\": true\n      },\n      {\n         \"url\": null,\n         \"label\": \"Next &raquo;\",\n         \"active\": false\n      }\n   ],\n   \"next_page_url\": \"http://myapp.com/api/dogs?page=2\",\n   \"path\": \"http://myapp.com/api/dogs\",\n   \"per_page\": 20,\n   \"prev_page_url\": null,\n   \"to\": 2,\n   \"total\": 4\n}\n```", "```php\n// Handles /dogs?sort=name\nRoute::get('dogs', function (Request $request) {\n    // Get the sort query parameter (or fall back to default sort \"name\")\n    $sortColumn = $request->input('sort', 'name');\n    return Dog::orderBy($sortColumn)->paginate(20);\n});\n```", "```php\n// Handles /dogs?sort=name and /dogs?sort=-name\nRoute::get('dogs', function (Request $request) {\n    // Get the sort query parameter (or fall back to default sort \"name\")\n    $sortColumn = $request->input('sort', 'name');\n\n    // Set the sort direction based on whether the key starts with -\n    // using Laravel's starts_with() helper function\n    $sortDirection = str_starts_with($sortColumn, '-') ? 'desc' : 'asc';\n    $sortColumn = ltrim($sortColumn, '-');\n\n    return Dog::orderBy($sortColumn, $sortDirection)\n        ->paginate(20);\n});\n```", "```php\n// Handles ?sort=name,-weight\nRoute::get('dogs', function (Request $request) {\n    // Grab the query parameter and turn it into an array exploded by ,\n    $sorts = explode(',', $request->input('sort', ''));\n\n    // Create a query\n    $query = Dog::query();\n\n    // Add the sorts one by one\n    foreach ($sorts as $sortColumn) {\n        $sortDirection = str_starts_with($sortColumn, '-') ? 'desc' : 'asc';\n        $sortColumn = ltrim($sortColumn, '-');\n\n        $query->orderBy($sortColumn, $sortDirection);\n    }\n\n    // Return\n    return $query->paginate(20);\n});\n```", "```php\nRoute::get('dogs', function () {\n    $query = Dog::query();\n\n    $query->when(request()->filled('filter'), function ($query) {\n        [$criteria, $value] = explode(':', request('filter'));\n        return $query->where($criteria, $value);\n    });\n\n    return $query->paginate(20);\n});\n```", "```php\nRoute::get('dogs', function (Request $request) {\n    $query = Dog::query();\n\n    $query->when(request()->filled('filter'), function ($query) {\n        $filters = explode(',', request('filter'));\n\n        foreach ($filters as $filter) {\n            [$criteria, $value] = explode(':', $filter);\n            $query->where($criteria, $value);\n        }\n\n        return $query;\n    });\n\n    return $query->paginate(20);\n});\n```", "```php\nphp artisan make:resource Dog\n```", "```php\n<?php\n\nnamespace App\\Http\\Resources;\n\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Http\\Resources\\Json\\JsonResource;\n\nclass Dog extends JsonResource\n{\n    /**\n * Transform the resource into an array.\n *\n * @return array<string, mixed>\n */\n    public function toArray(Request $request): array\n    {\n        return parent::toArray($request);\n    }\n}\n```", "```php\nclass Dog extends JsonResource\n{\n    public function toArray(Request $request): array\n    {\n        return [\n            'id' => $this->id,\n            'name' => $this->name,\n            'breed' => $this->breed,\n        ];\n    }\n}\n```", "```php\nuse App\\Dog;\nuse App\\Http\\Resources\\Dog as DogResource;\n\nRoute::get('dogs/{dogId}', function ($dogId) {\n    return new DogResource(Dog::find($dogId));\n});\n```", "```php\nuse App\\Dog;\nuse App\\Http\\Resources\\Dog as DogResource;\n\nRoute::get('dogs', function () {\n    return DogResource::collection(Dog::all());\n});\n```", "```php\nphp artisan make:resource DogCollection\n```", "```php\n<?php\n\nnamespace App\\Http\\Resources;\n\nuse Illuminate\\Http\\Resources\\Json\\ResourceCollection;\n\nclass DogCollection extends ResourceCollection\n{\n    /**\n * Transform the resource collection into an array.\n *\n * @return array<int|string, mixed>\n */\n    public function toArray(Request $request): array\n    {\n        return parent::toArray($request);\n    }\n}\n```", "```php\nclass DogCollection extends ResourceCollection\n{\n    public function toArray(Request $request): array\n    {\n        return [\n            'data' => $this->collection,\n            'links' => [\n                'self' => route('dogs.index'),\n            ],\n        ];\n    }\n}\n```", "```php\npublic function toArray(Request $request): array\n{\n    return [\n        'name' => $this->name,\n        'breed' => $this->breed,\n        'friends' => Dog::collection($this->friends),\n    ];\n}\n```", "```php\nreturn new DogResource(Dog::with('friends')->find($dogId));\n```", "```php\npublic function toArray(Request $request): array\n{\n    return [\n        'name' => $this->name,\n        'breed' => $this->breed,\n        // Only load this relationship if it's been eager loaded\n        'bones' => BoneResource::collection($this->whenLoaded('bones')),\n        // Or only load this relationship if the URL asks for it\n        'bones' => $this->when(\n            $request->get('include') == 'bones',\n            BoneResource::collection($this->bones)\n        ),\n    ];\n}\n```", "```php\nRoute::get('dogs', function () {\n    return new DogCollection(Dog::paginate(20));\n});\n```", "```php\n{\n  \"data\": [\n    {\n      \"name\": \"Pickles\",\n      \"breed\": \"Chorkie\"\n    },\n    {\n      \"name\": \"Gandalf\",\n      \"breed\": \"Golden Retriever Mix\"\n    }\n  ],\n  \"links\": {\n    \"self\": \"http://gooddogbrant.com/api/dogs\",\n    \"first\": \"http://gooddogbrant.com/api/dogs?page=1\",\n    \"last\": \"http://gooddogbrant.com/api/dogs?page=3\",\n    \"prev\": null,\n    \"next\": null\n  },\n  \"meta\": {\n    \"current_page\": 1,\n    \"data\": [\n        {\n            \"name\": \"Pickles\",\n            \"breed\": \"Chorkie\",\n        },\n        {\n            \"name\": \"Gandalf\",\n            \"breed\": \"Golden Retriever Mix\",\n        }\n    ],\n    \"first_page_url\": \"http://gooddogbrent.com/api/dogs?page=1\",\n    \"from\": 1,\n    \"last_page\": 3,\n    \"last_page_url\": \"http://gooddogbrent.com/api/dogs?page=3\",\n    \"links\": [\n        {\n            \"url\": null,\n            \"label\": \"&laquo; Previous\",\n            \"active\": false\n        },\n        {\n            \"url\": \"http://gooddogbrent.com/api/dogs?page=1\",\n            \"label\": \"1\",\n            \"active\": true\n        },\n        {\n            \"url\": \"http://gooddogbrent.com/api/dogs?page=2\",\n            \"label\": \"Next &raquo;\",\n            \"active\": false\n        }\n    ],\n    \"next_page_url\": null,\n    \"path\": \"http://gooddogbrent.com/api/dogs\",\n    \"per_page\": 3,\n    \"to\": 3,\n    \"total\": 9\n  }\n}\n```", "```php\npublic function toArray(Request $request): array\n{\n    return [\n        'name' => $this->name,\n        'breed' => $this->breed,\n        'rating' => $this->when(Auth::user()->canSeeRatings(), 12),\n    ];\n}\n```", "```php\ncomposer require laravel/sanctum\nphp artisan vendor:publish --provider=\"Laravel\\Sanctum\\SanctumServiceProvider\"\nphp artisan migrate\n```", "```php\nRoute::get('clips', function () {\n    return view('clips.index', ['clips' => Clip::all()]);\n})->middleware('auth:sanctum');\n```", "```php\nuse Laravel\\Sanctum\\HasApiTokens;\n\nclass User extends Authenticatable\n{\n    use HasApiTokens, HasFactory, Notifiable;\n}\n```", "```php\nRoute::post('tokens/create', function () {\n    $token = auth()->user()->createToken(request()->token_name);\n\n    return view('tokens.created', ['token' => $token->plainTextToken]);\n});\n```", "```php\nRoute::get('tokens', function () {\n    return view('tokens.index', ['tokens' => auth()->user()->tokens]);\n});\n```", "```php\n$token = $user->createToken(\n    request()->token_name, ['list-clips', 'add-delete-clips']\n);\n```", "```php\nif (request()->user()->tokenCan('list-clips')) {\n    // ...\n}\n```", "```php\n// routes/api.php\nRoute::get('clips', function () {\n    // Access token has both the \"list-clips\" and \"add-delete-clips\" abilities\n})->middleware(['auth:sanctum','abilities:list-clips,add-delete-clips']);\n\n// or\n\nRoute::get('clips', function () {\n    // Access token has at least one of the listed abilities\n})->middleware(['auth:sanctum','ability:list-clips,add-delete-clips'])\n```", "```php\n'abilities' => \\Laravel\\Sanctum\\Http\\Middleware\\\n    CheckAbilities::class,\n'ability' => \\Laravel\\Sanctum\\Http\\Middleware\\\n    CheckForAnyAbility::class,\n```", "```php\n'api' => [\n    \\Laravel\\Sanctum\\Http\\Middleware\\EnsureFrontendRequestsAreStateful::class,\n    // Other API middleware here\n],\n```", "```php\naxios.get('/sanctum/csrf-cookie').then(response => {\n    // Handle login\n});\n```", "```php\nRoute::post('sanctum/token', function (Request $request) {\n    $request->validate([\n        'email' => 'required|email',\n        'password' => 'required',\n        'device_name' => 'required',\n    ]);\n\n    $user = User::where('email', $request->email)->first();\n\n    if (! $user || ! Hash::check($request->password, $user->password)) {\n        throw ValidationException::withMessages([\n            'email' => ['The provided credentials are incorrect.'],\n        ]);\n    }\n\n    return $user->createToken($request->device_name)->plainTextToken;\n});\n```", "```php\ncomposer require laravel/passport\n```", "```php\n// routes/api.php\nRoute::get('/user', function (Request $request) {\n    return $request->user();\n})->middleware('auth:api');\n```", "```php\nuse Illuminate\\Support\\Facades\\Http;\n\n$response = Http::withHeaders(['Accept' => 'application/json'])\n    ->withToken($accessToken)\n    ->get('http://tweeter.test/api/user');\n```", "```php\n// routes/web.php in the *consuming application*\nRoute::get('tweeter/password-grant-auth', function () {\n    // Make call to \"Tweeter,\" our Passport-powered OAuth server\n    $response = Http::post('http://tweeter.test/oauth/token', [\n        'grant_type' => 'password',\n        'client_id' => config('tweeter.id'),\n        'client_secret' => config('tweeter.secret'),\n        'username' => 'matt@mattstauffer.co',\n        'password' => 'my-tweeter-password',\n        'scope' => '',\n    ]);\n\n    $thisUsersTokens = $response->json();\n    // Do stuff with the tokens\n});\n```", "```php\nphp artisan passport:client\nWhich user ID should the client be assigned to?:\n > 1\n\n What should we name the client?:\n > SpaceBook\n Where should we redirect the request after authorization?\n   [http://tweeter.test/auth/callback]:\n > http://spacebook.test/tweeter/callback\n\n New client created successfully.\n Client ID: 4\n Client secret: 5rzqKpeCjIgz3MXpi3tjQ37HBnLLykrgWgmc18uH\n```", "```php\n// In SpaceBook's routes/web.php:\nRoute::get('tweeter/redirect', function () {\n    $query = http_build_query([\n        'client_id' => config('tweeter.id'),\n        'redirect_uri' => url('tweeter/callback'),\n        'response_type' => 'code',\n        'scope' => '',\n    ]);\n\n    // Builds a string like:\n    // client_id={$client_id}&redirect_uri={$redirect_uri}&response_type=code\n\n    return redirect('http://tweeter.test/oauth/authorize?' . $query);\n});\n```", "```php\nphp artisan vendor:publish --tag=passport-views\n```", "```php\n// In SpaceBook's routes/web.php:\nRoute::get('tweeter/callback', function (Request $request) {\n    if ($request->has('error')) {\n        // Handle error condition\n    }\n\n    $response = Http::post('http://tweeter.test/oauth/token', [\n        'grant_type' => 'authorization_code',\n        'client_id' => config('tweeter.id'),\n        'client_secret' => config('tweeter.secret'),\n        'redirect_uri' => url('tweeter/callback'),\n        'code' => $request->code,\n    ]);\n\n    $thisUsersTokens = $response->json();\n    // Do stuff with the tokens\n});\n```", "```php\n`php` `artisan` `passport:client` `--personal`\n\n What should we name the personal access client?\n   [My Application Personal Access Client]:\n > `My` `Application` `Personal` `Access` `Client`\n\nPersonal access client created successfully.\n\n```", "```php\n// Creating a token without scopes\n$token = $user->createToken('Token Name')->accessToken;\n\n// Creating a token with scopes\n$token = $user->createToken('My Token', ['place-orders'])->accessToken;\n```", "```php\n$.ajaxSetup({\n    headers: {\n        'X-CSRF-TOKEN': \"{{ csrf_token() }}\",\n        'X-Requested-With': 'XMLHttpRequest'\n    }\n});\n```", "```php\n// AuthServiceProvider\nuse Laravel\\Passport\\Passport;\n...\n    public function boot(): void\n    {\n        ...\n\n        Passport::tokensCan([\n            'list-clips' => 'List sound clips',\n            'add-delete-clips' => 'Add new and delete old sound clips',\n            'admin-account' => 'Administer account details',\n        ]);\n    }\n```", "```php\n// In SpaceBook's routes/web.php:\nRoute::get('tweeter/redirect', function () {\n    $query = http_build_query([\n        'client_id' => config('tweeter.id'),\n        'redirect_uri' => url('tweeter/callback'),\n        'response_type' => 'code',\n        'scope' => 'list-clips add-delete-clips',\n    ]);\n\n    return redirect('http://tweeter.test/oauth/authorize?' . $query);\n});\n```", "```php\nRoute::get('/events', function () {\n    if (auth()->user()->tokenCan('add-delete-clips')) {\n        //\n    }\n});\n```", "```php\n'scopes' => \\Laravel\\Passport\\Http\\Middleware\\CheckScopes::class,\n'scope' => \\Laravel\\Passport\\Http\\Middleware\\CheckForAnyScope::class,\n```", "```php\n// routes/api.php\nRoute::get('clips', function () {\n    // Access token has both the \"list-clips\" and \"add-delete-clips\" scopes\n})->middleware('scopes:list-clips,add-delete-clips');\n\n// or\n\nRoute::get('clips', function () {\n    // Access token has at least one of the listed scopes\n})->middleware('scope:list-clips,add-delete-clips')\n```", "```php\n// routes/api.php\nRoute::fallback(function () {\n    return response()->json(['message' => 'Route Not Found'], 404);\n})->name('api.fallback.404');\n```", "```php\n// App\\Exceptions\\Handler\nuse Illuminate\\Support\\Facades\\Route;\nuse Symfony\\Component\\HttpKernel\\Exception\\NotFoundHttpException;\nuse Illuminate\\Http\\Request;\n\npublic function register(): void\n{\n    $this->renderable(function (NotFoundHttpException $e, Request $request) {\n        if ($request->isJson()) {\n            return Route::respondWithRoute('api.fallback.404');\n        }\n    });\n\n}\n```", "```php\n...\nclass DogsApiTest extends TestCase\n{\n    use WithoutMiddleware, RefreshDatabase;\n\n    public function test_it_gets_all_dogs()\n    {\n        $dog1 = Dog::factory()->create();\n        $dog2 = Dog::factory()->create();\n\n        $response = $this->getJson('api/dogs');\n\n        $response->assertJsonFragment(['name' => $dog1->name]);\n        $response->assertJsonFragment(['name' => $dog2->name]);\n    }\n}\n```", "```php\npublic function test_it_lists_all_clips_for_those_with_list_clips_scope()\n{\n    Passport::actingAs(\n        User::factory()->create(),\n        ['list-clips']\n    );\n\n    $response = $this->getJson('api/clips');\n    $response->assertStatus(200);\n}\n```"]