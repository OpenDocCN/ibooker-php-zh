["```php\n$who = 'Kilroy';\n$where = 'here';\necho \"$who was $where\";\n`Kilroy` `was` `here`\n```", "```php\n$n = 12;\necho \"You are the {$n}th person\";\n`You` `are` `the` `12``th` `person`\n```", "```php\n$bar = 'this is not printed';\n$foo = '$bar'; // single quotes print(\"$foo\");\n`$bar`\n```", "```php\n$name = 'Fred';\n$str = 'Hello, $name'; // single-quoted echo $str;\n`Hello``,` `$name`\n```", "```php\n$name = 'Tim O\\'Reilly';// escaped single quote echo $name;\n$path = 'C:\\\\WINDOWS'; // escaped backslash echo $path;\n$nope = '\\n'; // not an escape echo $nope;\n`Tim` `O``'``Reilly`\n`C``:``\\WINDOWS`\n`\\n`\n```", "```php\n$str = \"What is \\c this?\";// unknown escape sequence echo $str;\n`What` `is` `\\c` `this``?`\n```", "```php\n$clerihew = <<< EndOfQuote\nSir Humphrey Davy\nAbominated gravy.\nHe lived in the odium\nOf having discovered sodium.\n\nEndOfQuote;\necho $clerihew;\n`Sir` `Humphrey` `Davy`\n`Abominated` `gravy``.`\n`He` `lived` `in` `the` `odium`\n`Of` `having` `discovered` `sodium``.`\n```", "```php\nheader('Content-Type: text/plain;');\n```", "```php\ndefault_mimetype = \"text/plain\"\n```", "```php\nprintf(<<< Template\n%s is %d years old.\nTemplate\n, \"Fred\", 35);\n```", "```php\n$dialogue = <<< NoMore\n\"It's not going to happen!\" she fumed.\nHe raised an eyebrow. \"Want to bet?\"\nNoMore;\necho $dialogue;\n`\"``It's not going to happen!``\"` `she` `fumed``.`\n`He` `raised` `an` `eyebrow``.` `\"``Want to bet?``\"`\n```", "```php\n$ws = <<< Enough\n boo\n hoo\nEnough;\n// $ws = \" boo\\n hoo\";\n```", "```php\nfunction sayIt() {\n $ws = <<< \"StufftoSay\"\n The quick brown fox\n Jumps over the lazy dog.\n StufftoSay;\nreturn $ws;\n}\n\necho sayIt() ;\n\n    `The` `quick` `brown` `fox`\n `Jumps` `over` `the` `lazy` `dog``.`\n```", "```php\n$s = 'Foo';\n// same as\n$s = <<< EndOfPointlessHeredoc\nFoo\nEndOfPointlessHeredoc;\n```", "```php\n$s = <<< End\nFoo\n\nEnd;\n```", "```php\necho \"Printy\";\necho(\"Printy\"); // also valid\n```", "```php\necho \"First\", \"second\", \"third\";\n`Firstsecondthird`\n```", "```php\n// this is a parse error\necho(\"Hello\", \"world\");\n```", "```php\n// parse error\nif (echo(\"test\")) {\n echo(\"It worked!\");\n}\n```", "```php\nif (print(\"test\\n\")) {\n print(\"It worked!\");\n}\n`test`\n`It` `worked``!`\n```", "```php\n    printf('%.2f', 27.452);\n    `27.45`\n    ```", "```php\n    printf('The hex value of %d is %x', 214, 214);\n    `The` `hex` `value` `of` `214` `is` `d6`\n    ```", "```php\n    printf('Bond. James Bond. %03d.', 7);\n    `Bond``.` `James` `Bond``.` `007.`\n    ```", "```php\n    printf('%02d/%02d/%04d', $month, $day, $year);\n    `02``/``15``/``2005`\n    ```", "```php\n    printf('%.2f%% Complete', 2.1);\n    `2.10``%` `Complete`\n    ```", "```php\n    printf('You\\'ve spent $%5.2f so far', 4.1);\n    `You``'``ve` `spent` `$` `4.10` `so` `far`\n    ```", "```php\n$date = sprintf(\"%02d/%02d/%04d\", $month, $day, $year);\n// now we can interpolate $date wherever we need a date\n```", "```php\n$a = array('name' => 'Fred', 'age' => 35, 'wife' => 'Wilma');\nprint_r($a);\n`Array`\n`(`\n `[``name``]` `=>` `Fred`\n `[``age``]` `=>` `35`\n `[``wife``]` `=>` `Wilma``)`\n```", "```php\nclass P {\n var $name = 'nat';\n // ... }\n\n$p = new P;\nprint_r($p);\n`Object`\n`(`\n `[``name``]` `=>` `nat``)`\n```", "```php\nprint_r(true); // prints \"1\"; `1`\nprint_r(false); // prints \"\"; \nprint_r(null); // prints \"\";\n```", "```php\nvar_dump(true);\nvar_dump(false);\nvar_dump(null);\nvar_dump(array('name' => \"Fred\", 'age' => 35));\nclass P {\n var $name = 'Nat';\n // ... }\n$p = new P;\nvar_dump($p);\n`bool``(``true``)`\n`bool``(``false``)`\n`bool``(``null``)`\n`array``(``2``)` `{`\n `[``\"``name``\"``]``=>`\n `string``(``4``)` `\"``Fred``\"`\n `[``\"``age``\"``]``=>`\n `int``(``35``)`\n`}`\n`object``(``p``)(``1``)` `{`\n `[``\"``name``\"``]``=>`\n `string``(``3``)` `\"``Nat``\"`\n`}`\n```", "```php\n$string = 'Hello, world';\n$length = strlen($string); // $length is 12\n```", "```php\n$string = 'Hello';\nfor ($i=0; $i < strlen($string); $i++) {\n printf(\"The %dth character is %s\\n\", $i, $string{$i});\n}\n`The` `0``th` `character` `is` `H`\n`The` `1``th` `character` `is` `e`\n`The` `2``th` `character` `is` `l`\n`The` `3``th` `character` `is` `l`\n`The` `4``th` `character` `is` `o`\n```", "```php\n$trimmed = trim(*`string`* [, *`charlist`* ]);\n$trimmed = ltrim(*`string`* [, *`charlist`* ]);\n$trimmed = rtrim(*`string`* [, *`charlist`* ]);\n```", "```php\n$title = \" Programming PHP \\n\";\n$str1 = ltrim($title); // $str1 is \"Programming PHP \\n\"\n$str2 = rtrim($title); // $str2 is \" Programming PHP\"\n$str3 = trim($title); // $str3 is \"Programming PHP\"\n```", "```php\n$record = \" Fred\\tFlintstone\\t35\\tWilma\\t \\n\";\n$record = trim($record, \" \\r\\n\\0\\x0B\");\n// $record is \"Fred\\tFlintstone\\t35\\tWilma\"\n```", "```php\n$string1 = \"FRED flintstone\";\n$string2 = \"barney rubble\";\nprint(strtolower($string1));\nprint(strtoupper($string1));\nprint(ucfirst($string2));\nprint(ucwords($string2));\n`fred` `flintstone`\n`FRED` `FLINTSTONE`\n`Barney` `rubble`\n`Barney` `Rubble`\n```", "```php\nprint(ucwords(strtolower($string1)));\n`Fred` `Flintstone`\n```", "```php\n$string = htmlentities(\"Einstürzende Neubauten\");\necho $string;\n`Einstürzende` `Neubauten`\n```", "```php\n$output = htmlentities(*`input`*, *`flags`*, *`encoding`*);\n```", "```php\n$input = <<< End\n\"Stop pulling my hair!\" Jane's eyes flashed.<p>\nEnd;\n\n$double = htmlentities($input);\n// &quot;Stop pulling my hair!&quot; Jane's eyes flashed.&lt;p&gt;\n\n$both = htmlentities($input, ENT_QUOTES);\n// &quot;Stop pulling my hair!&quot; Jane&#039;s eyes flashed.&lt;p&gt;\n\n$neither = htmlentities($input, ENT_NOQUOTES);\n// \"Stop pulling my hair!\" Jane's eyes flashed.&lt;p&gt;\n```", "```php\n$output = htmlspecialchars(*`input`*, [*`flags`*, [*`encoding`*]]);\n```", "```php\n$table = get_html_translation_table(HTML_ENTITIES);\n```", "```php\n$table = get_html_translation_table(HTML_SPECIALCHARS, ENT_NOQUOTES);\n```", "```php\n$str = htmlentities(\"Einstürzende Neubauten\"); // now it is encoded \n$table = get_html_translation_table(HTML_ENTITIES);\n$revTrans = array_flip($table);\n\necho strtr($str, $revTrans); // back to normal `Einstürzende` `Neubauten`\n```", "```php\n$table = get_html_translation_table(HTML_ENTITIES);\n$table[' '] = '&nbsp;';\n$encoded = strtr($original, $table);\n```", "```php\n$input = '<p>Howdy, &quot;Cowboy&quot;</p>';\n$output = strip_tags($input);\n// $output is 'Howdy, &quot;Cowboy&quot;'\n```", "```php\n$input = 'The <b>bold</b> tags will <i>stay</i><p>';\n$output = strip_tags($input, '<b>');\n// $output is 'The <b>bold</b> tags will stay'\n```", "```php\n$metaTags = get_meta_tags('http://www.example.com/');\necho \"Web page made by {$metaTags['author']}\";\n`Web` `page` `made` `by` `John` `Doe`\n```", "```php\n$array = get_meta_tags(*`filename`* [, *`use_include_path`*]);\n```", "```php\nhttp%3A%2F%2Fwww.example.com%2Fhello\n```", "```php\n$output = rawurlencode(*`input`*);\n```", "```php\n$name = \"Programming PHP\";\n$output = rawurlencode($name);\necho \"http://localhost/{$output}\";\n`http``://``localhost``/``Programming``%``20``PHP`\n```", "```php\n$encoded = 'Programming%20PHP';\necho rawurldecode($encoded);\n`Programming` `PHP`\n```", "```php\n$baseUrl = 'http://www.google.com/q=';\n$query = 'PHP sessions -cookies';\n$url = $baseUrl . urlencode($query);\necho $url;\n\n`http``://``www``.``google``.``com``/``q``=``PHP``+``sessions``+-``cookies`\n```", "```php\n$string = <<< EOF\n\"It's never going to work,\" she cried,\nas she hit the backslash (\\) key.\nEOF;\n$string = addslashes($string);\necho $string;\necho stripslashes($string);\n`\\``\"``It``\\``'s never going to work,``\\\"` `she cried,`\n`as she hit the backslash (``\\\\``) key.`\n`\"``It``'``s` `never` `going` `to` `work``,``\"` `she cried,`\n`as she hit the backslash (``\\``) key.`\n```", "```php\n$escaped = addcslashes(*`string`*, *`charset`*);\n```", "```php\necho addcslashes(\"hello\\tworld\\n\", \"\\x00..\\x1fz..\\xff\");\n`hello\\tworld\\n`\n```", "```php\n$string = stripcslashes(*`escaped`*);\n```", "```php\n$string = stripcslashes('hello\\tworld\\n');\n// $string is \"hello\\tworld\\n\"\n```", "```php\n$o1 = 3;\n$o2 = \"3\";\n\nif ($o1 == $o2) {\n echo(\"== returns true<br>\");\n}\nif ($o1 === $o2) {\n echo(\"=== returns true<br>\");\n}\n`==` `returns` `true`\n```", "```php\n$him = \"Fred\";\n$her = \"Wilma\";\n\nif ($him < $her) {\n print \"{$him} comes before {$her} in the alphabet.\\n\";\n}\n`Fred` `comes` `before` `Wilma` `in` `the` `alphabet`\n```", "```php\n$string = \"PHP Rocks\";\n$number = 5;\n\nif ($string < $number) {\n echo(\"{$string} < {$number}\");\n}\n`PHP` `Rocks` `<` `5`\n```", "```php\n$relationship = strcmp(*`string_1`*, *`string_2`*);\n```", "```php\n$n = strcmp(\"PHP Rocks\", 5);\necho($n);\n`1`\n```", "```php\n$n = strcasecmp(\"Fred\", \"frED\"); // $n is 0\n```", "```php\n$relationship = strncmp(*`string_1`*, *`string_2`*, *`len`*);\n$relationship = strncasecmp(*`string_1`*, *`string_2`*, *`len`*);\n```", "```php\n$soundexCode = soundex(*`$string`*);\n$metaphoneCode = metaphone(*`$string`*);\n$inCommon = similar_text(*`$string_1`*, *`$string_2`* [, *`$percentage`* ]);\n$similarity = levenshtein(*`$string_1`*, *`$string_2`*);\n$similarity = levenshtein(*`$string_1`*, *`$string_2`* [, *`$cost_ins`*, *`$cost_rep`*, \n*`$cost_del`* ]);\n```", "```php\n$known = \"Fred\";\n$query = \"Phred\";\n\nif (soundex($known) == soundex($query)) {\n print \"soundex: {$known} sounds like {$query}<br>\";\n}\nelse {\n print \"soundex: {$known} doesn't sound like {$query}<br>\";\n}\n\nif (metaphone($known) == metaphone($query)) {\n print \"metaphone: {$known} sounds like {$query}<br>\";\n}\nelse {\n print \"metaphone: {$known} doesn't sound like {$query}<br>\";\n}\n`soundex``:` `Fred` `doesn``'``t` `sound` `like` `Phred`\n`metaphone``:` `Fred` `sounds` `like` `Phred`\n```", "```php\n$string1 = \"Rasmus Lerdorf\";\n$string2 = \"Razmus Lehrdorf\";\n$common = similar_text($string1, $string2, $percent);\nprintf(\"They have %d chars in common (%.2f%%).\", $common, $percent);\n`They` `have` `13` `chars` `in` `common` `(``89.66``%``)``.`\n```", "```php\n$similarity = levenshtein(\"cat\", \"cot\"); // $similarity is 1\n```", "```php\necho levenshtein('would not', 'wouldn\\'t', 500, 1, 1);\n```", "```php\n$piece = substr(*`string`*, *`start`* [, *`length`* ]);\n```", "```php\n$name = \"Fred Flintstone\";\n$fluff = substr($name, 6, 4); // $fluff is \"lint\"\n$sound = substr($name, 11); // $sound is \"tone\"\n```", "```php\n$number = substr_count(*`big_string`*, *`small_string`*);\n```", "```php\n$sketch = <<< EndOfSketch\nWell, there's egg and bacon; egg sausage and bacon; egg and spam;\negg bacon and spam; egg bacon sausage and spam; spam bacon sausage\nand spam; spam egg spam spam bacon and spam; spam sausage spam spam\nbacon spam tomato and spam;\nEndOfSketch;\n$count = substr_count($sketch, \"spam\");\nprint(\"The word spam occurs {$count} times.\");\n`The` `word` `spam` `occurs` `14` `times``.`\n```", "```php\n$string = substr_replace(*`original`*, *`new`*, *`start`* [, *`length`* ]);\n```", "```php\n$greeting = \"good morning citizen\";\n$farewell = substr_replace($greeting, \"bye\", 5, 7);\n// $farewell is \"good bye citizen\"\n```", "```php\n$farewell = substr_replace($farewell, \"kind \", 9, 0);\n// $farewell is \"good bye kind citizen\"\n```", "```php\n$farewell = substr_replace($farewell, \"\", 8);\n// $farewell is \"good bye\"\n```", "```php\n$farewell = substr_replace($farewell, \"now it's time to say \", 0, 0);\n// $farewell is \"now it's time to say good bye\"'\n```", "```php\n$farewell = substr_replace($farewell, \"riddance\", −3);\n// $farewell is \"now it's time to say good riddance\"\n```", "```php\n$farewell = substr_replace($farewell, \"\", −8, −5);\n// $farewell is \"now it's time to say good dance\"\n```", "```php\n$string = strrev(*`string`*);\n```", "```php\necho strrev(\"There is no cabal\");\n`labac` `on` `si` `erehT`\n```", "```php\n$repeated = str_repeat(*`string`*, *`count`*);\n```", "```php\necho str_repeat('_.-.', 40);\n```", "```php\n$padded = str_pad(*`to_pad`*, *`length`* [, *`with`* [, *`pad_type`* ]]);\n```", "```php\n$string = str_pad('Fred Flintstone', 30);\necho \"{$string}:35:Wilma\";\n`Fred` `Flintstone` `:``35``:``Wilma`\n```", "```php\n$string = str_pad('Fred Flintstone', 30, '. ');\necho \"{$string}35\";\n`Fred` `Flintstone``.` `.` `.` `.` `.` `.` `.` `.``35`\n```", "```php\necho '[' . str_pad('Fred Flintstone', 30, ' ', STR_PAD_LEFT) . \"]\\n\";\necho '[' . str_pad('Fred Flintstone', 30, ' ', STR_PAD_BOTH) . \"]\\n\";\n`[` `Fred` `Flintstone``]`\n`[` `Fred` `Flintstone` `]`\n```", "```php\n$array = explode(*`separator`*, *`string`* [, *`limit`*]);\n```", "```php\n$input = 'Fred,25,Wilma';\n$fields = explode(',', $input);\n// $fields is array('Fred', '25', 'Wilma')\n$fields = explode(',', $input, 2);\n// $fields is array('Fred', '25,Wilma')\n```", "```php\n$string = implode(*`separator`*, *`array`*);\n```", "```php\n$fields = array('Fred', '25', 'Wilma');\n$string = implode(',', $fields); // $string is 'Fred,25,Wilma'\n```", "```php\n$firstChunk = strtok(*`string`*, *`separator`*);\n```", "```php\n$nextChunk = strtok(*`separator`*);\n```", "```php\n$string = \"Fred,Flintstone,35,Wilma\";\n$token = strtok($string, \",\");\n\nwhile ($token !== false) {\n echo(\"{$token}<br />\");\n $token = strtok(\",\");\n}\n`Fred`\n`Flintstone`\n`35`\n`Wilma`\n```", "```php\n$array = sscanf(*`string`*, *`template`*);\n$count = sscanf(*`string`*, *`template`*, *`var1`*, ... );\n```", "```php\n$string = \"Fred\\tFlintstone (35)\";\n$a = sscanf($string, \"%s\\t%s (%d)\");\nprint_r($a);\n`Array`\n`(`\n `[``0``]` `=>` `Fred`\n `[``1``]` `=>` `Flintstone`\n `[``2``]` `=>` `35``)`\n```", "```php\n$string = \"Fred\\tFlintstone (35)\";\n$n = sscanf($string, \"%s\\t%s (%d)\", $first, $last, $age);\necho \"Matched {$n} fields: {$first} {$last} is {$age} years old\";\n`Matched` `3` `fields``:` `Fred` `Flintstone` `is` `35` `years` `old`\n```", "```php\n$pos = strpos($large, \",\"); // find first comma\n$pos = strpos($large, 44); // also find first comma\n```", "```php\nif ($pos === false) {\n // wasn't found\n}\nelse {\n // was found, $pos is offset into string\n}\n```", "```php\n$position = strpos(*`large_string`*, *`small_string`*);\n```", "```php\n$record = \"Fred,Flintstone,35,Wilma\";\n$pos = strrpos($record, \",\"); // find last comma echo(\"The last comma in the record is at position {$pos}\");\n`The` `last` `comma` `in` `the` `record` `is` `at` `position` `18`\n```", "```php\n$record = \"Fred,Flintstone,35,Wilma\";\n$rest = strstr($record, \",\"); // $rest is \",Flintstone,35,Wilma\"\n```", "```php\n$length = strspn(*`string`*, *`charset`*);\n```", "```php\nfunction isOctal($str)\n{\n return strspn($str, '01234567') == strlen($str);\n}\n```", "```php\nfunction hasBadChars($str)\n{\n return strcspn($str, \"\\n\\t\\0\") != strlen($str);\n}\n```", "```php\n$array = parse_url(*`url`*);\n```", "```php\n$bits = parse_url(\"http://me:secret@example.com/cgi-bin/board?user=fred\");\nprint_r($bits);\n\n`Array`\n`(`\n `[``scheme``]` `=>` `http`\n `[``host``]` `=>` `example``.``com`\n `[``user``]` `=>` `me`\n `[``pass``]` `=>` `secret`\n `[``path``]` `=>` `/``cgi``-``bin``/``board`\n `[``query``]` `=>` `user``=``fred``)`\n```", "```php\npreg_match(\"/^cow/\", \"Dave was a cowhand\"); // returns false\npreg_match(\"/^cow/\", \"cowabunga!\"); // returns true\n```", "```php\npreg_match(\"/cow$/\", \"Dave was a cowhand\"); // returns false\npreg_match(\"/cow$/\", \"Don't have a cow\"); // returns true\n```", "```php\npreg_match(\"/c.t/\", \"cat\"); // returns true\npreg_match(\"/c.t/\", \"cut\"); // returns true\npreg_match(\"/c.t/\", \"c t\"); // returns true\npreg_match(\"/c.t/\", \"bat\"); // returns false\npreg_match(\"/c.t/\", \"ct\"); // returns false\n```", "```php\npreg_match(\"/\\$5.00/\", \"Your bill is $5.00 exactly\"); // returns true\npreg_match(\"/$5.00/\", \"Your bill is $5.00 exactly\"); // returns false\n```", "```php\npreg_match(\"/c[aeiou]t/\", \"I cut my hand\"); // returns true\npreg_match(\"/c[aeiou]t/\", \"This crusty cat\"); // returns true\npreg_match(\"/c[aeiou]t/\", \"What cart?\"); // returns false\npreg_match(\"/c[aeiou]t/\", \"14ct gold\"); // returns false\n```", "```php\npreg_match(\"/c[^aeiou]t/\", \"I cut my hand\"); // returns false\npreg_match(\"/c[^aeiou]t/\", \"Reboot chthon\"); // returns true\npreg_match(\"/c[^aeiou]t/\", \"14ct gold\"); // returns false\n```", "```php\npreg_match(\"/[0-9]%/\", \"we are 25% complete\"); // returns true\npreg_match(\"/[0123456789]%/\", \"we are 25% complete\"); // returns true\npreg_match(\"/[a-z]t/\", \"11th\"); // returns false\npreg_match(\"/[a-z]t/\", \"cat\"); // returns true\npreg_match(\"/[a-z]t/\", \"PIT\"); // returns false\npreg_match(\"/[a-zA-Z]!/\", \"11!\"); // returns false\npreg_match(\"/[a-zA-Z]!/\", \"stop!\"); // returns true\n```", "```php\npreg_match(\"/cat|dog/\", \"the cat rubbed my legs\"); // returns true\npreg_match(\"/cat|dog/\", \"the dog rubbed my legs\"); // returns true\npreg_match(\"/cat|dog/\", \"the rabbit rubbed my legs\"); // returns false\n```", "```php\npreg_match(\"/^([a-z]|[0-9])/\", \"The quick brown fox\"); // returns false\npreg_match(\"/^([a-z]|[0-9])/\", \"jumped over\"); // returns true\npreg_match(\"/^([a-z]|[0-9])/\", \"10 lazy dogs\"); // returns true\n```", "```php\npreg_match(\"/ca+t/\", \"caaaaaaat\"); // returns true\npreg_match(\"/ca+t/\", \"ct\"); // returns false\npreg_match(\"/ca?t/\", \"caaaaaaat\"); // returns false\npreg_match(\"/ca*t/\", \"ct\"); // returns true\n```", "```php\npreg_match(\"/[0-9]{3}-[0-9]{3}-[0-9]{4}/\", \"303-555-1212\"); // returns true\npreg_match(\"/[0-9]{3}-[0-9]{3}-[0-9]{4}/\", \"64-9-555-1234\"); // returns false\n```", "```php\npreg_match(\"/a (very )+big dog/\", \"it was a very very big dog\"); // returns true\npreg_match(\"/^(cat|dog)$/\", \"cat\"); // returns true\npreg_match(\"/^(cat|dog)$/\", \"dog\"); // returns true\n```", "```php\npreg_match(\"/([0-9]+)/\", \"You have 42 magic beans\", $captured);\n// returns true and populates $captured\n```", "```php\npreg_match(\"/\\/usr\\/local\\//\", \"/usr/local/bin/perl\"); // returns true\npreg_match(\"#/usr/local/#\", \"/usr/local/bin/perl\"); // returns true\n```", "```php\npreg_match(\"{/usr/local/}\", \"/usr/local/bin/perl\"); // returns true\n```", "```php\n'/([[:alpha:]]+)\\s+\\1/'\n'/( # start capture\n[[:alpha:]]+ # a word\n\\s+ # whitespace\n\\1 # the same word again\n ) # end capture\n/x'\n```", "```php\npreg_match(\"/is (.*)$/\", \"the key is in my pants\", $captured);\n// $captured[1] is 'in my pants'\n```", "```php\n[@[:digit:][:upper:]]\n```", "```php\npreg_match(\"/[A-[:lower:]]/\", \"string\");// invalid regular expression\n```", "```php\n[st[.ch.]]\n```", "```php\npreg_match(\"/[[:<:]]gun[[:>:]]/\", \"the Burgundy exploded\"); // returns false\npreg_match(\"/gun/\", \"the Burgundy exploded\"); // returns true\n```", "```php\npreg_match(\"/(<.*>)/\", \"do <b>not</b> press the button\", $match);\n// $match[1] is '<b>not</b>'\n```", "```php\npreg_match(\"/(<.*?>)/\", \"do <b>not</b> press the button\", $match);\n// $match[1] is \"<b>\"\n```", "```php\npreg_match(\"/(<[^>]*>)/\", \"do <b>not</b> press the button\", $match);\n// $match[1] is '<b>'\n```", "```php\npreg_match(\"/(?:ello)(.*)/\", \"jello biafra\", $match);\n// $match[1] is \" biafra\"\n```", "```php\npreg_match(\"/([[:alpha:]]+)\\s+\\1/\", \"Paris in the the spring\", $m);\n// returns true and $m[1] is \"the\"\n```", "```php\npreg_match(\"/cat/i\", \"Stop, Catherine!\"); // returns true\n```", "```php\n$message = <<< END\nTo: you@youcorp\nFrom: me@mecorp\nSubject: pay up\n\nPay me or else!\nEND;\n\npreg_match(\"/^subject: (.*)/im\", $message, $match);\n\nprint_r($match);\n\n// output: Array ( [0] => Subject: pay up [1] => pay up )\n```", "```php\n(?*`flags`*:*`subpattern`*)\n```", "```php\necho preg_match('/I like (?i:PHP)/', 'I like pHp', $match);\nprint_r($match) ;\n// returns true (echo: 1)\n// $match[0] is 'I like pHp'\n```", "```php\npreg_match('/eat (?ix:foo d)/', 'eat FoOD'); // returns true\n```", "```php\necho preg_match('/I like (?-i:PHP)/', 'I like pHp', $match);\nprint_r($matche) ;\n// returns false (echo: 0)\n// $match[0] is ''\n```", "```php\npreg_match('/I like (?i)PHP/', 'I like pHp'); // returns true\npreg_match('/I (like (?i)PHP) a lot/', 'I like pHp a lot', $match);\n// $match[1] is 'like pHp'\n```", "```php\n$messages = preg_split('/(?=^From )/m', $mailbox);\n```", "```php\n$input = <<< END\nname = 'Tim O\\'Reilly';\nEND;\n\n$pattern = <<< END\n' # opening quote\n( # begin capturing\n .*? # the string\n (?<! \\\\\\\\ ) # skip escaped quotes\n) # end capturing\n' # closing quote END;\npreg_match( \"($pattern)x\", $input, $match);\necho $match[1];\n`Tim` `O\\``'``Reilly`\n```", "```php\n/(a+|b+)*\\.+/\n```", "```php\n$p = '/(a+|b+)*\\.+$/';\n$s = 'abababababbabbbabbaaaaaabbbbabbababababababbba..!';\n\nif (preg_match($p, $s)) {\n echo \"Y\";\n}\nelse {\n echo \"N\";\n}\n```", "```php\n$p = '/(?>a+|b+)*\\.+$/';\n```", "```php\n(?(*`condition`*)*`yespattern`*)\n(?(*`condition`*)*`yespattern`*|*`nopattern`*)\n```", "```php\n$found = preg_match(*`pattern`*, *`string`* [, *`captured`* ]);\n```", "```php\npreg_match('/y.*e$/', 'Sylvie'); // returns true\npreg_match('/y(.*)e$/', 'Sylvie', $m); // $m is array('ylvie', 'lvi')\n```", "```php\npreg_match('y.*e$/i', 'SyLvIe'); // returns true\n```", "```php\n$found = preg_match_all(*`pattern`*, *`string`*, *`matches`* [, *`order`* ]);\n```", "```php\n$string = <<< END\n13 dogs\n12 rabbits\n8 cows\n1 goat\nEND;\npreg_match_all('/(\\d+) (\\S+)/', $string, $m1, PREG_PATTERN_ORDER);\npreg_match_all('/(\\d+) (\\S+)/', $string, $m2, PREG_SET_ORDER);\n```", "```php\n<?php\nif (getenv('REQUEST_METHOD') == 'POST') {\n $url = $_POST['url'];\n}\nelse {\n $url = $_GET['url'];\n}\n?>\n\n<form action=\"<?php echo $_SERVER['PHP_SELF']; ?>\" method=\"POST\">\n <p>URL: <input type=\"text\" name=\"url\" value=\"<?php echo $url ?>\" /><br />\n <input type=\"submit\">\n</form>\n\n<?php\nif ($url) {\n $remote = fopen($url, 'r'); {\n $html = fread($remote, 1048576); // read up to 1 MB of HTML\n }\n fclose($remote);\n\n $urls = '(http|telnet|gopher|file|wais|ftp)';\n $ltrs = '\\w';\n $gunk = '/#~:.?+=&%@!\\-';\n $punc = '.:?\\-';\n $any = \"{$ltrs}{$gunk}{$punc}\";\n\n preg_match_all(\"{\n \\b # start at word boundary\n {$urls}: # need resource and a colon\n [{$any}] +? # followed by one or more of any valid\n # characters—but be conservative\n # and take only what you need\n (?= # the match ends at\n [{$punc}]* # punctuation\n [^{$any}] # followed by a non-URL character\n | # or\n \\$ # the end of the string\n )\n }x\", $html, $matches);\n\n printf(\"I found %d URLs<P>\\n\", sizeof($matches[0]));\n\n foreach ($matches[0] as $u) {\n $link = $_SERVER['PHP_SELF'] . '?url=' . urlencode($u);\n echo \"<a href=\\\"{$link}\\\">{$u}</a><br />\\n\";\n }\n}\n```", "```php\n$new = preg_replace(*`pattern`*, *`replacement`*, *`subject`* [, *`limit`* ]);\n```", "```php\n$better = preg_replace('/<.*?>/', '!', 'do <b>not</b> press the button');\n// $better is 'do !not! press the button'\n```", "```php\n$names = array('Fred Flintstone',\n 'Barney Rubble',\n 'Wilma Flintstone',\n 'Betty Rubble');\n$tidy = preg_replace('/(\\w)\\w* (\\w+)/', '\\1 \\2', $names);\n// $tidy is array ('F Flintstone', 'B Rubble', 'W Flintstone', 'B Rubble')\n```", "```php\n$contractions = array(\"/don't/i\", \"/won't/i\", \"/can't/i\");\n$expansions = array('do not', 'will not', 'can not');\n$string = \"Please don't yell - I can't jump while you won't speak\";\n$longer = preg_replace($contractions, $expansions, $string);\n// $longer is 'Please do not yell - I can not jump while you will not speak';\n```", "```php\n$htmlGunk = array('/<.*?>/', '/&.*?;/');\n$html = '&eacute; : <b>very</b> cute';\n$stripped = preg_replace($htmlGunk, array(), $html);\n// $stripped is ' : very cute'\n```", "```php\n$stripped = preg_replace($htmlGunk, '', $html);\n```", "```php\necho preg_replace('/(\\w)\\w+\\s+(\\w+)/', '$2, $1.', 'Fred Flintstone')\nFlintstone, F.\n```", "```php\n$string = 'It was 5C outside, 20C inside';\necho preg_replace('/(\\d+)C\\b/e', '$1*9/5+32', $string);\nIt was 41 outside, 68 inside\n```", "```php\n$name = 'Fred';\n$age = 35;\n$string = '$name is $age';\npreg_replace('/\\$(\\w+)/e', '$$1', $string);\n```", "```php\nfunction titlecase($s)\n{\n return ucfirst(strtolower($s[0]));\n}\n\n$string = 'goodbye cruel world';\n$new = preg_replace_callback('/\\w+/', 'titlecase', $string);\necho $new;\n\n`Goodbye` `Cruel` `World`\n```", "```php\n$chunks = preg_split(*`pattern`*, *`string`* [, *`limit`* [, *`flags`* ]]);\n```", "```php\n$ops = preg_split('{[+*/−]}', '3+5*9/2');\n// $ops is array('3', '5', '9', '2')\n```", "```php\n$ops = preg_split('{([+*/−])}', '3+5*9/2', −1, PREG_SPLIT_DELIM_CAPTURE);\n// $ops is array('3', '+', '5', '*', '9', '/', '2')\n```", "```php\n$array = preg_split('//', $string);\n```", "```php\n$matching = preg_grep(*`pattern`*, *`array`*);\n```", "```php\n$textfiles = preg_grep('/\\.txt$/', $filenames);\n```", "```php\n$re = preg_quote(*`string`* [, *`delimiter`* ]);\n```", "```php\necho preg_quote('$5.00 (five bucks)');\n\\$5\\.00 \\(five bucks\\)\n```", "```php\n$toFind = '/usr/local/etc/rsync.conf';\n$re = preg_quote($toFind, '/');\n\nif (preg_match(\"/{$re}/\", $filename)) {\n // found it!\n}\n```"]