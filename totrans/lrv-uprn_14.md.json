["```php\n...\n'disks' => [\n    'local' => [\n        'driver' => 'local',\n        'root' => storage_path('app'),\n        'throw' => false,\n    ],\n    'public' => [\n        'driver' => 'local',\n        'root' => storage_path('app/public'),\n        'url' => env('APP_URL').'/storage',\n        'visibility' => 'public',\n        'throw' => false,\n    ],\n    's3' => [\n        'driver' => 's3',\n        'key' => env('AWS_ACCESS_KEY_ID'),\n        'secret' => env('AWS_SECRET_ACCESS_KEY'),\n        'region' => env('AWS_DEFAULT_REGION'),\n        'bucket' => env('AWS_BUCKET'),\n        'url' => env('AWS_URL'),\n        'endpoint' => env('AWS_ENDPOINT'),\n        'use_path_style_endpoint' => env('AWS_USE_PATH_STYLE_ENDPOINT', false),\n        'throw' => false,\n    ],\n],\n```", "```php\nphp artisan storage:link\n```", "```php\nStorage::disk('s3')->get('file.jpg');\n```", "```php\n// Some service provider\npublic function boot(): void\n{\n    Storage::extend('dropbox', function ($app, $config) {\n        $client = new DropboxClient(\n            $config['accessToken'], $config['clientIdentifier']\n        );\n\n        return new Filesystem(new DropboxAdapter($client));\n    });\n}\n```", "```php\n...\nclass DogController\n{\n    public function updatePicture(Request $request, Dog $dog)\n    {\n        Storage::put(\n            \"dogs/{$dog->id}\",\n            file_get_contents($request->file('picture')->getRealPath())\n        );\n    }\n}\n```", "```php\n...\nclass DogController\n{\n    public function updatePicture(Request $request, Dog $dog)\n    {\n        $original = $request->file('picture');\n\n        // Resize image to max width 150\n        $image = Image::make($original)->resize(150, null, function ($constraint) {\n            $constraint->aspectRatio();\n        })->encode('jpg', 75);\n\n        Storage::put(\n            \"dogs/thumbs/{$dog->id}\",\n            $image->getEncoded()\n        );\n    }\n```", "```php\npublic function downloadMyFile()\n{\n    return Storage::download('my-file.pdf');\n}\n```", "```php\nSession::get('user_id');\n```", "```php\nRoute::get('dashboard', function (Request $request) {\n    $request->session()->get('user_id');\n});\n```", "```php\nRoute::get('dashboard', function (Illuminate\\Session\\Store $session) {\n    return $session->get('user_id');\n});\n```", "```php\n// Get\n$value = session()->get('key');\n$value = session('key');\n// Put\nsession()->put('key', 'value');\nsession(['key', 'value']);\n```", "```php\n$points = session()->get('points');\n\n$points = session()->get('points', 0);\n\n$points = session()->get('points', function () {\n    return (new PointGetterService)->getPoints();\n});\n```", "```php\nsession()->put('points', 45);\n\n$points = session()->get('points');\n```", "```php\nsession()->put('friends', ['SaÃºl', 'Quang', 'Mechteld']);\n\nsession()->push('friends', 'Javier');\n```", "```php\nif (session()->has('points')) {\n    // Do something\n}\n```", "```php\nif (session()->exists('points')) {\n    // returns true even if 'points' is set to null\n}\n```", "```php\nsession()->put('a', 'awesome');\nsession()->put('b', 'bodacious');\n\nsession()->forget('a');\n// a is no longer set; b is still set\nsession()->flush();\n// Session is now empty\n```", "```php\n$users = Cache::get('users');\n```", "```php\nRoute::get('users', function (Illuminate\\Contracts\\Cache\\Repository $cache) {\n    return $cache->get('users');\n});\n```", "```php\n// Get from cache\n$users = cache('key', 'default value');\n$users = cache()->get('key', 'default value');\n// Put for $seconds duration\n$users = cache(['key' => 'value'], $seconds);\n$users = cache()->put('key', 'value', $seconds);\n```", "```php\ncache()->put('key', 'value', now()->addDay());\n```", "```php\n$someDate = now();\ncache()->add('someDate', $someDate); // returns true\n$someOtherDate = now()->addHour();\ncache()->add('someDate', $someOtherDate); // returns false\n```", "```php\n// Either returns the value cached at \"users\" or gets \"User::all()\",\n// caches it at \"users\", and returns it\n$users = cache()->remember('users', 7200, function () {\n    return User::all();\n});\n```", "```php\nCookie::queue('dismissed-popup', true, 15);\n```", "```php\n$cookie = cookie('dismissed-popup', true, 15);\n```", "```php\nRoute::get('dashboard', function (Illuminate\\Http\\Request $request) {\n    $userDismissedPopup = $request->cookie('dismissed-popup', false);\n});\n```", "```php\nRoute::get('dashboard', function () {\n    $cookie = cookie('saw-dashboard', true);\n\n    return Response::view('dashboard')\n        ->cookie($cookie);\n});\n```", "```php\n[2018-09-22 21:34:38] local.ERROR: Something went wrong.\n```", "```php\nLog::emergency($message);\nLog::alert($message);\nLog::critical($message);\nLog::error($message);\nLog::warning($message);\nLog::notice($message);\nLog::info($message);\nLog::debug($message);\n```", "```php\nLog::error('Failed to upload user image.', ['user' => $user]);\n```", "```php\n[2018-09-27 20:53:31] local.ERROR: Failed to upload user image. {\n    \"user\":\"[object] (App\\\\User: {\n        \\\"id\\\":1,\n        \\\"name\\\":\\\"Matt\\\",\n        \\\"email\\\":\\\"matt@tighten.co\\\",\n        \\\"email_verified_at\\\":null,\n        \\\"api_token\\\":\\\"long-token-here\\\",\n        \\\"created_at\\\":\\\"2018-09-22 21:39:55\\\",\n        \\\"updated_at\\\":\\\"2018-09-22 21:40:08\\\"\n    })\"\n}\n```", "```php\n'single' => [\n    'driver' => 'single',\n    'path' => storage_path('logs/laravel.log'),\n    'level' => env('LOG_LEVEL', 'debug'),\n],\n```", "```php\n'daily' => [\n    'driver' => 'daily',\n    'path' => storage_path('logs/laravel.log'),\n    'level' => env('LOG_LEVEL', 'debug'),\n    'days' => 14,\n],\n```", "```php\n'slack' => [\n    'driver' => 'slack',\n    'url' => env('LOG_SLACK_WEBHOOK_URL'),\n    'username' => 'Laravel Log',\n    'emoji' => ':boom:',\n    'level' => env('LOG_LEVEL', 'critical'),\n],\n```", "```php\n'stack' => [\n    'driver' => 'stack',\n    'channels' => ['single'],\n    'ignore_exceptions' => false,\n],\n```", "```php\n'channels' => [\n    'stack' => [\n        'driver' => 'stack',\n        'channels' => ['daily', 'slack'],\n    ],\n\n    'daily' => [\n        'driver' => 'daily',\n        'path' => storage_path('logs/laravel.log'),\n        'level' => 'info',\n        'days' => 14,\n    ],\n\n    'slack' => [\n        'driver' => 'slack',\n        'url' => env('LOG_SLACK_WEBHOOK_URL'),\n        'username' => 'Laravel Log',\n        'emoji' => ':boom:',\n        'level' => 'critical',\n    ],\n]\n```", "```php\nLog::channel('slack')->info(\"This message will go to Slack.\");\n```", "```php\ncomposer require laravel/scout\n```", "```php\nphp artisan vendor:publish --provider=\"Laravel\\Scout\\ScoutServiceProvider\"\n```", "```php\ncomposer require algolia/algoliasearch-client-php\n```", "```php\nReview::search('Llew')->get();\n```", "```php\n// Get all records from the Review that match the term \"Llew\",\n// limited to 20 per page and reading the page query parameter,\n// just like Eloquent pagination\nReview::search('Llew')->paginate(20);\n\n// Get all records from the Review that match the term \"Llew\"\n// and have the account_id field set to 2\nReview::search('Llew')->where('account_id', 2)->get();\n```", "```php\nReview::withoutSyncingToSearch(function () {\n    // Make a bunch of reviews, e.g.\n    Review::factory()->count(10)->create();\n});\n```", "```php\npublic function shouldBeSearchable()\n{\n    return $this->isApproved();\n}\n```", "```php\nReview::all()->searchable();\n```", "```php\n$user->reviews()->searchable();\n```", "```php\nReview::where('sucky', true)->unsearchable();\n```", "```php\nphp artisan scout:import \"App\\Review\"\n```", "```php\nuse Illuminate\\Support\\Facades\\Http;\n\n$response = Http::get('http://my-api.com/posts');\n\n$response = Http::post('http://my-api.com/posts/2/comments', [\n    'title' => 'I loved this post!',\n]);\n```", "```php\n$response = Http::get('http://my-api.com/posts');\n\n$response->body(); // string\n$response->json(); // array\n$response->json('key', 'default') // string\n$response->successful(); // bool\n```", "```php\n$response = Http::withHeaders([\n    'X-Custom-Header' => 'header value here'\n])->post(/* ... */);\n\n$response = Http::withToken($authToken)->post(/* ... */);\n\n$response = Http::accept('application/json')->get('http://my-api.com/users');\n```", "```php\n$response = Http::timeout(120)->get(/* ... */);\n```", "```php\n$response = Http::retry($retries, $millisecondsBetweenRetries)->post(/* ... */);\n```", "```php\n$response->successful(); // 200 or 300\n$response->failed(); // 400 or 500 errors\n$response->clientError(); // 400 errors\n$response->serverError(); // 500 errors\n\n// A few of the specific checks we can run for given status codes\n$response->ok(); // 200 OK\n$response->movedPermanently(); // 301 Moved Permanently\n$response->unauthorized(); // 401 Unauthorized\n$response->serverError(); // 500 Internal Server Error\n```", "```php\n$response->onError(function (Response $response) {\n    // handle error\n});\n```", "```php\npublic function test_file_should_be_stored()\n{\n    Storage::fake('public');\n\n    $file = UploadedFile::fake()->image('avatar.jpg');\n\n    $response = $this->postJson('/avatar', [\n        'avatar' => $file,\n    ]);\n\n    // Assert the file was stored\n    Storage::disk('public')->assertExists(\"avatars/{$file->hashName()}\");\n\n    // Assert a file does not exist\n    Storage::disk('public')->assertMissing('missing.jpg');\n}\n```", "```php\npublic function definition ()\n{\n    return [\n        'picture' => fake()->file(\n            base_path('tests/stubs/images'), // Source directory\n            storage_path('app'), // Target directory\n            false, // Return just filename, not full path\n        ),\n        'name' => fake()->name(),\n    ];\n};\n```", "```php\npublic function test_user_profile_picture_echoes_correctly()\n{\n    $user = User::factory()->create();\n\n    $response = $this->get(route('users.show', $user->id));\n\n    $response->assertSee($user->picture);\n}\n```", "```php\npublic function test_some_thing()\n{\n    // Do stuff that ends up with a $response object...\n    $response->assertSessionHas('key', 'value');\n}\n```", "```php\n$check = [\n    'has',\n    'hasWithThisValue' => 'thisValue',\n];\n\n$response->assertSessionHasAll($check);\n```", "```php\n$response = $this->post('test-route', ['failing' => 'data']);\n$response->assertSessionHasErrors(['name', 'email']);\n```", "```php\n$response = $this->post('test-route', ['failing' => 'data']);\n$response->assertSessionHasErrors([\n    'email' => '<strong>The email field is required.</strong>',\n], '<strong>:message</strong>');\n```", "```php\nCache::put('key', 'value', 900);\n\n$this->assertEquals('value', Cache::get('key'));\n```", "```php\nuse Illuminate\\Cookie\\Middleware\\EncryptCookies;\n...\n\n$this->app->resolving(\n    EncryptCookies::class,\n    function ($object) {\n        $object->disableFor('cookie-name');\n    }\n);\n\n// ...run test\n```", "```php\npublic function test_cookie()\n{\n    $this->app->resolving(EncryptCookies::class, function ($object) {\n        $object->disableFor('my-cookie');\n    });\n\n    $response = $this->call(\n        'get',\n        'route-echoing-my-cookie-value',\n        [],\n        ['my-cookie' => 'baz']\n    );\n    $response->assertSee('baz');\n}\n```", "```php\n$response = $this->get('cookie-setting-route');\n$response->assertCookie('cookie-name');\n```", "```php\n// Test file\npublic function test_new_accounts_generate_log_entries()\n{\n    Log::shouldReceive('info')\n        ->once()\n        ->with('New account created!');\n\n    // Create a new account\n    $this->post(route('accounts.store'), ['email' => 'matt@mattstauffer.com']);\n}\n\n// AccountController\npublic function store()\n{\n    // Create account\n\n    Log::info('New account created!');\n}\n```", "```php\n<env name=\"SCOUT_DRIVER\" value=\"null\"/>\n```", "```php\nHttp::fake([\n    // Return a JSON response for a particular API\n    'my-api.com/*' => Http::response(['key' => 'value'], 200, $headersArray),\n\n    // Return a string response for all other endpoints\n    '*' => Http::response('This is a fake API response', 200, $headersArray),\n]);\n```", "```php\nHttp::fake([\n    // Return a sequence of responses for consecutive calls to this API\n    'my-api.com/*' => Http::sequence()\n        ->push('Initial string response', 200)\n        ->push(['secondary' => 'response'], 200)\n        ->pushStatus(404),\n]);\n```", "```php\nHttp::fake();\n\nHttp::assertSent(function (Request $request) {\n    return $request->hasHeader('X-Custom-Header', 'certain-value') &&\n        $request->url() == 'http://my-api.com/users/2/comments' &&\n        $request['name'] == 'New User';\n});\n```"]